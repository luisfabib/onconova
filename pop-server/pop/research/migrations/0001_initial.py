# Generated by Django 5.1 on 2025-05-22 12:51

import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.expressions
import pghistory.utils
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_centers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Clinical centers that are part of the project', size=None, verbose_name='Clinical centers')),
                ('title', models.CharField(help_text='Title of the project', max_length=200, verbose_name='Project title')),
                ('summary', models.TextField(help_text='Description of the project', verbose_name='Project description')),
                ('ethics_approval_number', models.CharField(help_text='Ethics approval number of the project', max_length=100, verbose_name='Ethics approval number')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('aborted', 'Aborted')], default='planned', help_text='Status of the project', max_length=20, verbose_name='Project status')),
                ('data_constraints', models.JSONField(default=dict, help_text='Data constraints of the project', verbose_name='Data constraints')),
                ('leader', models.ForeignKey(help_text='User responsible for the project and its members', on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Project leader')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_centers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Clinical centers that are part of the project', size=None, verbose_name='Clinical centers')),
                ('title', models.CharField(help_text='Title of the project', max_length=200, verbose_name='Project title')),
                ('summary', models.TextField(help_text='Description of the project', verbose_name='Project description')),
                ('ethics_approval_number', models.CharField(help_text='Ethics approval number of the project', max_length=100, verbose_name='Ethics approval number')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('aborted', 'Aborted')], default='planned', help_text='Status of the project', max_length=20, verbose_name='Project status')),
                ('data_constraints', models.JSONField(default=dict, help_text='Data constraints of the project', verbose_name='Data constraints')),
                ('leader', models.ForeignKey(db_constraint=False, help_text='User responsible for the project and its members', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Project leader')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateField(auto_now_add=True, help_text='Date when the user joined the project', verbose_name='Date joined')),
                ('member', models.ForeignKey(help_text='User that is part of a project', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('project', models.ForeignKey(help_text='Project that the user is part of', on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='Project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='members',
            field=models.ManyToManyField(help_text='Users that are part of the project', related_name='projects', through='projects.ProjectMembership', to=settings.AUTH_USER_MODEL, verbose_name='Project members'),
        ),
        migrations.CreateModel(
            name='ProjectDataManagerGrant',
            fields=[
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('granted_at', models.DateField(auto_now_add=True)),
                ('expires_at', models.DateField(help_text='Date and time when the permission expires', verbose_name='Expires at')),
                ('granted_by', models.ForeignKey(help_text='Project leader that granted the permission', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Granted by')),
                ('member', models.ForeignKey(help_text='Manager of the project data', on_delete=django.db.models.deletion.CASCADE, related_name='data_management_grants', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edit_permissions', to='projects.project')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('granted_at__lte', models.F('expires_at'))), name='expiration_date_must_be_in_future'), models.CheckConstraint(condition=models.Q(('expires_at__lte', django.db.models.expressions.RawSQL("granted_at + interval '31 days'", []))), name='max_31_day_expiry')],
            },
        ),
        migrations.AddConstraint(
            model_name='projectmembership',
            constraint=models.UniqueConstraint(fields=('project', 'member'), name='unique_project_member'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "projects_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (NEW."clinical_centers", NEW."data_constraints", NEW."ethics_approval_number", NEW."external_source", NEW."external_source_id", NEW."id", NEW."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."status", NEW."summary", NEW."title"); RETURN NULL;', hash='63ad2e52e6f6a0594cef3206defad3a0e9bc95a7', operation='INSERT', pgid='pgtrigger_create_insert_a6fb9', table='projects_project', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "projects_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (NEW."clinical_centers", NEW."data_constraints", NEW."ethics_approval_number", NEW."external_source", NEW."external_source_id", NEW."id", NEW."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."status", NEW."summary", NEW."title"); RETURN NULL;', hash='5c78e63bb55f78b55c914ef633dee40c2d4dc0dc', operation='UPDATE', pgid='pgtrigger_update_update_804c3', table='projects_project', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "projects_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (OLD."clinical_centers", OLD."data_constraints", OLD."ethics_approval_number", OLD."external_source", OLD."external_source_id", OLD."id", OLD."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."status", OLD."summary", OLD."title"); RETURN NULL;', hash='5ddeedafc861776e078bf40ba22eda2e97a78030', operation='DELETE', pgid='pgtrigger_delete_delete_2192f', table='projects_project', when='AFTER')),
        ),
    ]
