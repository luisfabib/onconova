# Generated by Django 5.1 on 2025-01-08 13:48

import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import pop.core.fields
import measurement.measures.time
import pop.core.measures
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0011_systemictherapymedication_dosage_mass_and_more'),
        ('terminology', '0004_antineoplasticagent_drugbank'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformanceStatus',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date at which the performance score was performed and recorded.', verbose_name='Assessment date')),
                ('ecog_score', models.PositiveSmallIntegerField(blank=True, help_text='ECOG Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='ECOG Score')),
                ('karnofsky_score', models.PositiveSmallIntegerField(blank=True, help_text='Karnofsky Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Karnofsky Score')),
            ],
        ),
        migrations.CreateModel(
            name='Radiotherapy',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Clinically-relevant period during which the radiotherapy was administered to the patient.', verbose_name='Treatment period')),
                ('sessions', models.PositiveIntegerField(help_text='The total number of radiotherapy sessions over the treatment period.', verbose_name='Total sessions')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, verbose_name='Intent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapyDosage',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fractions', models.PositiveIntegerField(blank=True, help_text='The total number of radiotherapy fractions delivered over the treatment period.', null=True, verbose_name='Total fractions')),
                ('dose', pop.core.fields.MeasurementField(blank=True, help_text='Total radiation dose delivered over the full radiotherapy course', measurement=pop.core.measures.RadiationDose, null=True, verbose_name='Total radiation dose')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapySetting',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Surgery',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date of the surgical procedure.', verbose_name='Assessment date')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Therapeutic intent of the surgery', max_length=30, verbose_name='Intent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lifestyle',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's lifetyle was assessed and recorded.", verbose_name='Assessment date')),
                ('smoking_packyears', models.FloatField(blank=True, help_text='Smoking pack-years (if applicable)', null=True, verbose_name='Smoking packyears')),
                ('smoking_quited', pop.core.fields.MeasurementField(blank=True, help_text='Estimated time since quitting smoking (if applicable)', measurement=measurement.measures.time.Time, null=True, verbose_name='Time since quitted smoking')),
                ('sleep_hours_per_night', models.FloatField(blank=True, help_text='Estimated average number of sleep hours per night', null=True, verbose_name='Sleep hours per night')),
                ('alcohol_consumption', models.ForeignKey(blank=True, help_text='Frequency of alcohol consumption', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.alcoholconsumptionfrequency', verbose_name='Alcohol consumption')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's lifestyle is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='lifestyles', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
