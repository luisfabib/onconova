# Generated by Django 5.1 on 2025-01-13 06:14

import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0014_remove_lifestyle_sleep_hours_per_night_and_more'),
        ('terminology', '0006_rename_clinicalsignificanceofgeneticvariation_variantclinicalsignificance_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GenomicSignature',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's genomic signature was assessed.", verbose_name='Assessment date')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's lifestyle is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='genomic_signatures', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='lifestyle',
            name='exposures',
            field=models.ManyToManyField(blank=True, help_text='Environmental or occupational exposures to hazards or carcinogenic agents', related_name='+', to='terminology.exposureagent', verbose_name='Exposures'),
        ),
        migrations.AlterField(
            model_name='lifestyle',
            name='recreational_drugs',
            field=models.ManyToManyField(blank=True, help_text='Any recreational drug(s) used by the patient', related_name='+', to='terminology.recreationaldrug', verbose_name='Recreational drugs'),
        ),
        migrations.CreateModel(
            name='AneuploidScore',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='aneuploid_score', serialize=False, to='oncology.genomicsignature')),
                ('value', models.SmallIntegerField(help_text='The actual tumor neoantigen burden (TNB) value in neoantigens/Mb', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(39)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='HomologousRecombinationDeficiency',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='homologous_recombination_deficiency', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(blank=True, help_text='Homologous recombination deficiency (HRD) score value', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('interpretation', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate')], help_text='Homologous recombination deficiency (HRD) interpretation', null=True, verbose_name='Interpretation')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='LossOfHeterozygosity',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='loss_of_heterozygosity', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='Loss of heterozygosity (LOH) as a percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='TumorMutationalBurden',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tumor_mutational_burden', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor mutational burden (TMB) value in mutations/Mb', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('status', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('intermediate', 'Intermediate'), ('indeterminate', 'Indeterminate')], help_text='Cclassification of the tumor mutational burden (TMB) status', null=True, verbose_name='Status')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='TumorNeoantigenBurden',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tumor_neoantigen_burden', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor neoantigen burden (TNB) value in neoantigens/Mb', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='GenomicVariant',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date at which the genomic variant was detected and/or reported.', verbose_name='Assessment date')),
                ('gene_panel', models.CharField(blank=True, help_text='Commercial or official name of the gene panel tested to identify the variant', max_length=200, null=True, verbose_name='Gene panel')),
                ('assessment', models.CharField(blank=True, choices=[('present', 'Present'), ('absent', 'Absent'), ('no-call', 'Nocall'), ('indeterminate', 'Indeterminate')], help_text='Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.', max_length=15, null=True, verbose_name='Assessment')),
                ('confidence', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('indeterminate', 'Indeterminate')], help_text='Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.', max_length=15, null=True, verbose_name='Confidence')),
                ('clinical_relevance', models.CharField(blank=True, choices=[('pathogenic', 'Pathogenic'), ('likely_pathogenic', 'Likely Pathogenic'), ('uncertain_significance', 'Uncertain Significance'), ('ambiguous', 'Ambiguous'), ('likely_benign', 'Likely Benign'), ('benign', 'Benign')], help_text='Classification of the clinical relevance or pathogenicity of the variant.', null=True, verbose_name='Clinical relevance')),
                ('is_vus', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'uncertain_significance')), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is of unknown signfiance (determined automatically based on the clinical relevance classification)', null=True, output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('is_pathogenic', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'likely_pathogenic'), ('clinical_relevance', 'pathogenic'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is pathogenic (determined automatically based on the clinical relevance classification)', output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('cytogenetic_location', models.CharField(blank=True, help_text='The genetic address of the variant specifying the relevant chromosomal region.', max_length=60, null=True, validators=[django.core.validators.RegexValidator('^(?:[1-9]|1[0-9]|2[0-2]|X|Y)([pq])(\\d+)(\\d+)(?:\\.(\\d+))?$', 'The string should be a valid cytogenetic location (chromosomal locus).')], verbose_name='Cytogenetic location')),
                ('genomic_refseq', models.CharField(blank=True, help_text="\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')", max_length=200, null=True, validators=[django.core.validators.RegexValidator('^(?:NG|NC|LRG|)(.*)$', 'The string should be a valid transcript RefSeq identifier.')], verbose_name='Genomic RefSeq')),
                ('transcript_refseq', models.CharField(blank=True, help_text="\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)", max_length=200, null=True, validators=[django.core.validators.RegexValidator('^(?:NM|NG|ENST|LRG|)(.*)$', 'The string should be a valid transcript RefSeq identifier.')], verbose_name='Transcript RefSeq')),
                ('coding_hgsv', models.CharField(blank=True, help_text='Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T', max_length=500, null=True, validators=[django.core.validators.RegexValidator('^(.*):c\\.(.*)$', 'The string should be a valid coding DNA HGVS expression.')], verbose_name='Coding DNA change expression (cHGVS)')),
                ('protein_hgsv', models.CharField(blank=True, help_text='Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)', max_length=500, null=True, validators=[django.core.validators.RegexValidator('^(.*):p\\.(.*)$', 'The string should be a valid protein HGVS expression.')], verbose_name='Protein/aminoacid change expression (pHGVS)')),
                ('genomic_hgsv', models.CharField(blank=True, help_text='Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup', max_length=500, null=True, validators=[django.core.validators.RegexValidator('^(.*):g\\.(.*)$', 'The string should be a valid genomic HGVS expression.')], verbose_name='Genomic change expression (gHGVS)')),
                ('copy_number', models.PositiveSmallIntegerField(blank=True, help_text='Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.', null=True, verbose_name='Copy number')),
                ('allele_frequency', models.FloatField(blank=True, help_text='The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Allele frequency')),
                ('allele_depth', models.PositiveIntegerField(blank=True, help_text='Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.', null=True, verbose_name='Allele depth (reads)')),
                ('exact_genomic_coordinates', django.contrib.postgres.fields.ranges.BigIntegerRangeField(blank=True, help_text='The exact integer-based genomic coordinates of the start and end of the variant region. "High" can be omitted for single nucleotide variants.', null=True, verbose_name='Exact genomic coordinates')),
                ('inner_genomic_coordinates', django.contrib.postgres.fields.ranges.BigIntegerRangeField(blank=True, help_text='The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.', null=True, verbose_name='Inner genomic coordinates')),
                ('outer_genomic_coordinates', django.contrib.postgres.fields.ranges.BigIntegerRangeField(blank=True, help_text='The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.', null=True, verbose_name='Outer genomic coordinates')),
                ('clinvar', models.CharField(blank=True, help_text='Accession number in the ClinVar variant database, given for cross-reference.', null=True, verbose_name='ClinVar accession number')),
                ('aminoacid_change_type', models.ForeignKey(blank=True, help_text='Classification of the amino acid change type', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.aminoacidchangetype', verbose_name='Aminoacid change type')),
                ('analysis_method', models.ForeignKey(blank=True, help_text='Analysis method used to detect the variant', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.structuralvariantanalysismethod', verbose_name='Analysis method')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who' genomic variant is described", on_delete=django.db.models.deletion.CASCADE, related_name='genomic_variants', to='oncology.patientcase', verbose_name='Patient case')),
                ('chromosomes', models.ManyToManyField(blank=True, help_text='Chromosome(s) affected by this variant', related_name='+', to='terminology.chromosomeidentifier', verbose_name='Chromosome(s)')),
                ('coordinate_system', models.ForeignKey(blank=True, help_text='Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.genomiccoordinatesystem', verbose_name='Coordinate system')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dna_change_type', models.ForeignKey(blank=True, help_text='Classification of the DNA change type of the variant.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.dnachangetype', verbose_name='Coding DNA change type')),
                ('genes', models.ManyToManyField(help_text='Gene(s) affected by this variant', related_name='+', to='terminology.gene', verbose_name='Gene(s)')),
                ('genome_assembly_version', models.ForeignKey(blank=True, help_text='The reference genome assembly versionused in this analysis.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.referencegenomebuild', verbose_name='Genome assembly version')),
                ('inheritance', models.ForeignKey(blank=True, help_text='Variant inheritance origin (if known).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.variantinheritance', verbose_name='Inheritance')),
                ('molecular_consequence', models.ForeignKey(blank=True, help_text='The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.molecularconsequence', verbose_name='Molecular consequence')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
                ('zygosity', models.ForeignKey(blank=True, help_text='The observed level of occurrence of the variant in the set of chromosomes.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.zygosity', verbose_name='Zygosity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MicrosatelliteInstability',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='microsatellite_instability', serialize=False, to='oncology.genomicsignature')),
                ('value', models.ForeignKey(help_text='Microsatellite instability (MSI) classification', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.microsatelliteinstabilitystate', verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
    ]
