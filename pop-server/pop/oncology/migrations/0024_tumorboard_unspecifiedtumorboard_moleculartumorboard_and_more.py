# Generated by Django 5.1 on 2025-01-21 15:39

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0023_alter_patientcasedatacompletion_case_and_more'),
        ('terminology', '0008_tumorboardrecommendation'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TumorBoard',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Date at which the tumor board took place and/or when the board provided a recommendation.', verbose_name='Date')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient which was discussed at the tumor board', on_delete=django.db.models.deletion.CASCADE, related_name='tumor_boards', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('recommendations', models.ManyToManyField(blank=True, help_text="Recommendation(s) provided by the board regarding the patient's care", related_name='+', to='terminology.tumorboardrecommendation', verbose_name='Recommendations')),
                ('related_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were the focus of the tumor board.', related_name='+', to='oncology.neoplasticentity', verbose_name='Related neoplastic entities')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnspecifiedTumorBoard',
            fields=[
                ('tumor_board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='unspecified', serialize=False, to='oncology.tumorboard')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.tumorboard',),
        ),
        migrations.CreateModel(
            name='MolecularTumorBoard',
            fields=[
                ('tumor_board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='molecular', serialize=False, to='oncology.tumorboard')),
                ('conducted_molecular_comparison', models.BooleanField(blank=True, help_text='Indicates whether a molecular comparison was conducted during the molecular tumor board', null=True, verbose_name='Conducted molecular comparison?')),
                ('conducted_cup_characterization', models.BooleanField(blank=True, help_text='Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.', null=True, verbose_name='Conducted CUP characterization?')),
                ('characterized_cup', models.BooleanField(blank=True, help_text='Whether the cancer of unknown primary (CUP) characterization was successful.', null=True, verbose_name='Successful CUP characterization?')),
                ('recommended_clinical_trials', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^NCT\\d{8}$')]), blank=True, default=list, help_text='Clinical trials (NCT-Iddentifiers) recommended by the board for enrollment', size=None, verbose_name='Recommended clinical trials')),
                ('reviewed_reports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, default=list, size=None, verbose_name='Reviewed genomics reports')),
                ('molecular_comparison_match', models.ForeignKey(blank=True, help_text='The neoplastic entity that was matched during the molecular comparison', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='oncology.neoplasticentity', verbose_name='Molecular comparison match')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.tumorboard',),
        ),
        migrations.CreateModel(
            name='MolecularTherapeuticRecommendation',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('off_label_use', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were off-label', null=True, verbose_name='Off-label use')),
                ('within_soc', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were within standard of care', null=True, verbose_name='Within SOC')),
                ('action', models.ForeignKey(blank=True, help_text='Suggested use of the recommended medication', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.medicationusagesuggestion', verbose_name='Suggested usage')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('drugs', models.ManyToManyField(help_text='Drugs(s) being recommended', related_name='+', to='terminology.antineoplasticagent', verbose_name='Drug(s)')),
                ('expected_effect', models.ForeignKey(blank=True, help_text='Classification of the expected effect of the drug', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.expecteddrugaction', verbose_name='Expected medication action')),
                ('supporting_genomic_signatures', models.ManyToManyField(blank=True, help_text='Genomic signatures that support the recommendation', related_name='+', to='oncology.genomicsignature', verbose_name='Supporting genomic signatures')),
                ('supporting_genomic_variants', models.ManyToManyField(blank=True, help_text='Genomic variants that support the recommendation', related_name='+', to='oncology.genomicvariant', verbose_name='Supporting genomic variants')),
                ('supporting_tumor_markers', models.ManyToManyField(blank=True, help_text='Tumor markers that support the recommendation', related_name='+', to='oncology.tumormarker', verbose_name='Supporting tumor markers')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
                ('molecular_tumor_board', models.ForeignKey(help_text='Molecular tumor board where the recommendation was issued', on_delete=django.db.models.deletion.CASCADE, related_name='therapeutic_recommendations', to='oncology.moleculartumorboard', verbose_name='Molecular tumor board')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
