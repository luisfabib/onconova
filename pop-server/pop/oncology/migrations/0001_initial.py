# Generated by Django 5.1 on 2024-12-04 10:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('terminology', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Staging',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date at which the staging was performed and recorded.', verbose_name='Staging date')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NeoplasticEntity',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('relationship', models.CharField(choices=[('primary', 'Primary'), ('metastatic', 'Metastatic'), ('local_recurrence', 'Local recurrence'), ('regional_recurrence', 'Regional recurrence')], help_text='Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.', max_length=30, verbose_name='Neoplastic relationship')),
                ('assertion_date', models.DateField(help_text='The date on which the existence of the neoplasm(s) was first asserted or acknowledged', verbose_name='Assertion date')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('differentitation', models.ForeignKey(blank=True, help_text='Morphologic differentitation characteristics of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.histologydifferentiation', verbose_name='Differentiation')),
                ('laterality', models.ForeignKey(blank=True, help_text='Laterality qualifier for the location of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lateralityqualifier', verbose_name='Laterality')),
                ('morphology', models.ForeignKey(help_text='Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancermorphology', verbose_name='Morphology')),
                ('related_primary', models.ForeignKey(blank=True, help_text='Reference to the primary neoplasm of which the neoplasm(s) originated from.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrences', to='oncology.neoplasticentity', verbose_name='Related primary neoplasm')),
                ('topography', models.ForeignKey(help_text='Anatomical location of the neoplasm(s)', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertopography', verbose_name='Topography')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Neoplastic Entity',
                'verbose_name_plural': 'Neoplastic Entities',
            },
        ),
        migrations.CreateModel(
            name='PatientCase',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pseudoidentifier', models.CharField(editable=False, help_text='Pseudoidentifier of the patient', max_length=40, unique=True, verbose_name='Pseudoidentifier')),
                ('date_of_birth', models.DateField(help_text='Anonymized date of birth (year/month). The day is set to the first day of the month by convention.', verbose_name='Date of birth')),
                ('is_deceased', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('date_of_death__isnull', False), ('cause_of_death__isnull', False), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)', output_field=models.BooleanField(), verbose_name='Is deceased')),
                ('date_of_death', models.DateField(blank=True, help_text='Anonymized date of death (year/month). The day is set to the first day of the month by convention.', null=True, verbose_name='Date of death')),
                ('cause_of_death', models.ForeignKey(blank=True, help_text='Classification of the cause of death.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.causeofdeath', verbose_name='Cause of death')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('gender', models.ForeignKey(help_text='Gender for administrative purposes', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.administrativegender', verbose_name='Gender')),
                ('gender_identity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.genderidentity', verbose_name='Gender identity')),
                ('race', models.ForeignKey(blank=True, help_text='Race of the patient', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.racecategory', verbose_name='Race')),
                ('sex_at_birth', models.ForeignKey(blank=True, help_text='Sex assigned at birth', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.birthsex', verbose_name='Birth sex')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BreslowDepth',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='breslow', serialize=False, to='oncology.staging')),
                ('depth', models.FloatField(help_text='Breslow depth given in milimeters', verbose_name='Breslow depth')),
                ('is_ulcered', models.BooleanField(blank=True, help_text='Whether the primary tumour presents ulceration', null=True, verbose_name='Ulcered')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.AddField(
            model_name='staging',
            name='staged_entities',
            field=models.ManyToManyField(help_text='References to the neoplastic entities that were the focus of the staging.', related_name='stagings', to='oncology.neoplasticentity', verbose_name='Staged neoplastic entities'),
        ),
        migrations.AddField(
            model_name='staging',
            name='case',
            field=models.ForeignKey(help_text="Indicates the case of the patient who's cancer is staged", on_delete=django.db.models.deletion.CASCADE, related_name='stagings', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.AddField(
            model_name='neoplasticentity',
            name='case',
            field=models.ForeignKey(help_text="Indicates the case of the patient who's neoplasm(s) are recorded", on_delete=django.db.models.deletion.CASCADE, related_name='neoplastic_entities', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.CreateModel(
            name='BinetStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='binet', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(help_text='The value of the Binet stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.binetstage', verbose_name='Binet Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='ClarkStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='clark', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(help_text='The value of the Clark level stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.clarklevel', verbose_name='Clark Level Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='FIGOStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='figo', serialize=False, to='oncology.staging')),
                ('methodology', models.ForeignKey(blank=True, help_text='Methodology used for the FIGO staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.figostagingmethod', verbose_name='FIGO staging methodology')),
                ('stage', models.ForeignKey(help_text='The value of the FIGO stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.figostage', verbose_name='FIGO Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='GleasonGrade',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gleason', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(help_text='The value of the Gleason grade stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.gleasongradegroupstage', verbose_name='Gleason grade Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='ISSStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='iss', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(help_text='The value of theISS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.myelomaissstage', verbose_name='ISS Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='LymphomaStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='lymphoma', serialize=False, to='oncology.staging')),
                ('bulky', models.BooleanField(blank=True, help_text='Bulky modifier indicating if the lymphoma has the presence of bulky disease.', null=True, verbose_name='Bulky disease modifier')),
                ('pathological', models.BooleanField(blank=True, help_text='Whether the staging was based on clinical or pathologic evidence.', null=True, verbose_name='Pathological staging')),
                ('methodology', models.ForeignKey(blank=True, help_text='Methodology used for the Lymphoma staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lymphomastagingmethod', verbose_name='Lymphoma staging methodology')),
                ('modifiers', models.ManyToManyField(help_text='Qualifier acting as modifier for the lymphoma stage', related_name='+', to='terminology.lymphomastagingmethod', verbose_name='Lymphoma stage modifier')),
                ('stage', models.ForeignKey(help_text='The value of the Lymphoma stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lymphomastage', verbose_name='Lymphoma Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='RaiStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='rai', serialize=False, to='oncology.staging')),
                ('methodology', models.ForeignKey(blank=True, help_text='Methodology used for the Rai staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.raistagingmethod', verbose_name='Rai staging methodology')),
                ('stage', models.ForeignKey(help_text='The value of the Rai stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.raistage', verbose_name='Rai Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='RISSStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='riss', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(help_text='The value of the RISS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.myelomarissstage', verbose_name='RISS Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='TNMStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tnm', serialize=False, to='oncology.staging')),
                ('distantMetastases', models.ForeignKey(blank=True, help_text='M stage (presence of distant metastasis)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmdistantmetastasescategory', verbose_name='M Stage')),
                ('grade', models.ForeignKey(blank=True, help_text='G stage (grade of the cancer cells)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmgradecategory', verbose_name='G Stage')),
                ('lymphaticInvasion', models.ForeignKey(blank=True, help_text='L stage (invasion into lymphatic vessels)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmlymphaticinvasioncategory', verbose_name='L Stage')),
                ('methodology', models.ForeignKey(blank=True, help_text='Methodology used for TNM staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmstagingmethod', verbose_name='TNM Staging methodology')),
                ('perineuralInvasion', models.ForeignKey(blank=True, help_text='Pn stage (invasion into adjunct nerves)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmperineuralinvasioncategory', verbose_name='Pn Stage')),
                ('primaryTumor', models.ForeignKey(blank=True, help_text='T stage (extent of the primary tumor)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmprimarytumorcategory', verbose_name='T Stage')),
                ('regionalNodes', models.ForeignKey(blank=True, help_text='N stage (degree of spread to regional lymph nodes)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmregionalnodescategory', verbose_name='N Stage')),
                ('residualTumor', models.ForeignKey(blank=True, help_text='R stage (extent of residual tumor cells after operation)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmresidualtumorcategory', verbose_name='R Stage')),
                ('serumTumorMarkerLevel', models.ForeignKey(blank=True, help_text='S stage (serum tumor marker level)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmserumtumormarkerlevelcategory', verbose_name='S Stage')),
                ('stage', models.ForeignKey(help_text='The information determined as a result of making the observation, if the information has a simple value', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmstage', verbose_name='TNM Stage')),
                ('venousInvasion', models.ForeignKey(blank=True, help_text='V stage (invasion into venous vessels)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmvenousinvasioncategory', verbose_name='V Stage')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('date_of_birth__day', 1)), name='date_of_birth_must_be_first_of_month', violation_error_message='Birthdate must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('date_of_death__day', 1)), name='date_of_death_must_be_first_of_month', violation_error_message='Birthdate must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='neoplasticentity',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('related_primary', None), ('relationship', 'primary')), models.Q(('relationship', 'primary'), _negated=True), _connector='OR'), name='primary_cannot_have_a_related_primary', violation_error_message='A primary neoplasm cannot have a related primary'),
        ),
    ]
