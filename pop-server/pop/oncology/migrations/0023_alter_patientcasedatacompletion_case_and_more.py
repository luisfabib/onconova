# Generated by Django 5.1 on 2025-01-21 12:53

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0022_patientcasedatacompletion'),
        ('terminology', '0007_adverseeventterm_delete_ctcaeterms'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='patientcasedatacompletion',
            name='case',
            field=models.ForeignKey(help_text="Patient case who's data category has been marked as completed.", on_delete=django.db.models.deletion.CASCADE, related_name='completed_data_categories', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.AlterField(
            model_name='patientcasedatacompletion',
            name='category',
            field=models.CharField(blank=True, choices=[('comorbidities-assessments', 'Comorbidities Assessments'), ('family-histories', 'Family Histories'), ('genomic-signatures', 'Genomic Signatures'), ('genomic-variants', 'Genomic Variants'), ('lifestyles', 'Lifestyles'), ('comorbidities', 'Comorbidities'), ('neoplastic-entities', 'Neoplastic Entities'), ('performance-status', 'Performance Status'), ('radiotherapies', 'Radiotherapies'), ('risk-assessments', 'Risk Assessments'), ('stagings', 'Stagins'), ('surgeries', 'Surgeries'), ('systemic-therapies', 'Systemic Therapies'), ('tumor-markers', 'Tumor Markers'), ('vitals', 'Vitals'), ('tumor-board-reviews', 'Tumor Board Reviews'), ('adverse-events', 'Adverse Events'), ('therapy-responses', 'Therapy Responses')], help_text='Indicates the categories of a patient case, whose data entries are deemed to be complete and/or up-to-date with the primary records.', max_length=500, verbose_name='Finalized data category'),
        ),
        migrations.AlterField(
            model_name='systemictherapymedication',
            name='systemic_therapy',
            field=models.ForeignKey(help_text='The systemic therapy to which this medication belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='oncology.systemictherapy', verbose_name='Systemic therapy'),
        ),
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date at which the adverse event ocurred.', verbose_name='Event date')),
                ('grade', models.PositiveSmallIntegerField(help_text='The grade associated with the severity of an adverse event, using CTCAE criteria.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Grade')),
                ('is_serious', models.BooleanField(blank=True, help_text='Indicates whether the adverse event was classified as serious.', null=True, verbose_name='Is serious?')),
                ('is_expected', models.BooleanField(blank=True, help_text='Indicates whether the adverse event was expected or unexpected.', null=True, verbose_name='Is expected?')),
                ('outcome', models.CharField(choices=[('resolved', 'Resolved'), ('resolved-with-sequelae', 'Resolved With Sequelae'), ('recovering', 'Recovering'), ('ongoing', 'Ongoind'), ('fatal', 'Fatal'), ('unknown', 'Unknown')], help_text='The date when the adverse event ended or returned to baseline.', max_length=50, verbose_name='Date resolved')),
                ('date_resolved', models.DateField(blank=True, help_text='The date when the adverse event ended or returned to baseline.', null=True, verbose_name='Date resolved')),
                ('is_resolved', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('outcome', 'resolved'), ('outcome', 'resolved-with-sequelae'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates whether the adverse event has been resolved', output_field=models.BooleanField(), verbose_name='Is resolved')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient who had the adverse event being recorded', on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='Classification of the adverse event using CTCAE criteria', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventterm', verbose_name='Adverse event')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventMitigation',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('adjustment', 'Adjustment'), ('pharmacological', 'Pharmacological'), ('procedure', 'Procedire')], help_text='Type of mitigation employed', max_length=50, verbose_name='Mitigation category')),
                ('adjustment', models.ForeignKey(blank=True, help_text='Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationtreatmentadjustment', verbose_name='Treatment Adjustment')),
                ('adverse_event', models.ForeignKey(help_text='Adverse event to which this mitigation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='mitigations', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('drug', models.ForeignKey(blank=True, help_text='Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationdrug', verbose_name='Pharmacological drug')),
                ('management', models.ForeignKey(blank=True, help_text='Management type of the adverse event mitigation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationmanagement', verbose_name='Management')),
                ('procedure', models.ForeignKey(blank=True, help_text='Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationprocedure', verbose_name='Procedure')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventSuspectedCause',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('causality', models.CharField(blank=True, choices=[('unrelated', 'Unrelated'), ('unlikely-related', 'Unlekely Related'), ('possibly-related', 'Possibly Related'), ('probably-related', 'Probably Related'), ('definitely-related', 'Definitely Related'), ('conditionally-related', 'Conditionally Related')], help_text='Assessment of the potential causality', max_length=50, null=True, verbose_name='Causality')),
                ('adverse_event', models.ForeignKey(help_text='Adverse event to which this suspected cause belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='suspected_causes', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('medication', models.ForeignKey(blank=True, help_text='Systemic therapy medication suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.systemictherapymedication', verbose_name='Suspected systemic therapy medication')),
                ('radiotherapy', models.ForeignKey(blank=True, help_text='Radiotherapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.radiotherapy', verbose_name='Suspected radiotherapy')),
                ('surgery', models.ForeignKey(blank=True, help_text='Surgery suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.surgery', verbose_name='Suspected surgery')),
                ('systemic_therapy', models.ForeignKey(blank=True, help_text='Systemic therapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.systemictherapy', verbose_name='Suspected systemic therapy')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentResponse',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date of the treatment response assessment', verbose_name='Assessment date')),
                ('recist_interpreted', models.BooleanField(blank=True, help_text='Indicates whether the RECIST value was interpreted or taken from the radiology report', null=True, verbose_name='RECIST Interpreted?')),
                ('assessed_bodysite', models.ForeignKey(blank=True, help_text='Anatomical location assessed to determine the treatment response', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.observationbodysite', verbose_name='Assessed anatomical location')),
                ('assessed_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were assesed for treatment response', related_name='treatment_responses', to='oncology.neoplasticentity', verbose_name='Assessed neoplastic entities')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's treatment response is asseessed", on_delete=django.db.models.deletion.CASCADE, related_name='treatment_responses', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('methodology', models.ForeignKey(help_text='Method used to assess and classify the treatment response', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertreatmentresponseobservationmethod', verbose_name='Assessment method')),
                ('recist', models.ForeignKey(help_text='The classification of the treatment response according to RECIST', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertreatmentresponse', verbose_name='RECIST')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
