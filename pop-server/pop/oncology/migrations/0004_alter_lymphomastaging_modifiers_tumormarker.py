# Generated by Django 5.1 on 2024-12-13 08:50

import django.db.models.deletion
import django_measurement.models
import pop.core.measures
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0003_tnmstaging_pathological'),
        ('terminology', '0003_tumormarkeranalyte'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='lymphomastaging',
            name='modifiers',
            field=models.ManyToManyField(help_text='Qualifier acting as modifier for the lymphoma stage', related_name='+', to='terminology.lymphomastagevaluemodifier', verbose_name='Lymphoma stage modifier'),
        ),
        migrations.CreateModel(
            name='TumorMarker',
            fields=[
                ('auto_id', models.BigAutoField(editable=False, help_text='Automated incremental database identifier', primary_key=True, serialize=False, verbose_name='Database ID')),
                ('id', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Clinically-relevant date at which the tumor marker was analyzed.', verbose_name='Date')),
                ('mass_concentration', django_measurement.models.MeasurementField(blank=True, help_text='Mass concentration of the analyte (if revelant/measured)', measurement=pop.core.measures.MassConcentration, null=True, verbose_name='Mass concentration')),
                ('arbitrary_concentration', django_measurement.models.MeasurementField(blank=True, help_text='Arbitrary concentration of the analyte (if revelant/measured)', measurement=pop.core.measures.ArbitraryConcentration, null=True, verbose_name='Arbitrary concentration')),
                ('substance_concentration', django_measurement.models.MeasurementField(blank=True, help_text='Substance concentration of the analyte (if revelant/measured)', measurement=pop.core.measures.SubstanceConcentration, null=True, verbose_name='Substance concentration')),
                ('fraction', django_measurement.models.MeasurementField(blank=True, help_text='Analyte fraction (if revelant/measured)', measurement=pop.core.measures.Fraction, null=True, verbose_name='Fraction')),
                ('multiple_of_median', django_measurement.models.MeasurementField(blank=True, help_text='Multiples of the median analyte (if revelant/measured)', measurement=pop.core.measures.MultipleOfMedian, null=True, verbose_name='Multiples of the median')),
                ('classification', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate'), ('intact', 'Intact'), ('loss', 'Loss'), ('indeterminate', 'Indeterminate'), ('IC0', 'IC0'), ('IC1', 'IC1'), ('IC2', 'IC2'), ('IC3', 'IC3'), ('TC0', 'TC0'), ('TC1', 'TC1'), ('TC2', 'TC2'), ('TC3', 'TC3'), ('0', '0'), ('1+', '1+'), ('2+', '2+'), ('3+', '3+'), ('indeterminate', 'Indeterminate')], help_text='Qualitative classification of the analyte', max_length=50, null=True, verbose_name='Classification')),
                ('analyte', models.ForeignKey(help_text='The chemical or biological substance/agent that is analyzed.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tumormarkeranalyte', verbose_name='Analyte')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient related to the tumor marker result', on_delete=django.db.models.deletion.CASCADE, related_name='tumor_markers', to='oncology.patientcase', verbose_name='Patient case')),
                ('created_by', models.ForeignKey(help_text='The user who created the original data', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('related_entities', models.ManyToManyField(help_text='References to the neoplastic entities that are related or the focus of the tumor marker analysis.', related_name='tumor_markers', to='oncology.neoplasticentity', verbose_name='Related neoplastic entities')),
                ('updated_by', models.ManyToManyField(help_text='The user(s) who updated the data since its creation', related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('mass_concentration__isnull', False), ('arbitrary_concentration__isnull', False), ('substance_concentration__isnull', False), ('fraction__isnull', False), ('multiple_of_median__isnull', False), ('classification__isnull', False), _connector='OR'), name='tumor marker must at least have one value')],
            },
        ),
    ]
