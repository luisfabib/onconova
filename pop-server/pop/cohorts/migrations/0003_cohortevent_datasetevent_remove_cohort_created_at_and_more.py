# Generated by Django 5.1 on 2025-04-10 13:27

import django.db.models.deletion
import pghistory.utils
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0002_dataset'),
    ]

    operations = [
        migrations.CreateModel(
            name='CohortEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the cohort', max_length=255, verbose_name='Cohort name')),
                ('include_criteria', models.JSONField(blank=True, help_text='JSON object defining inclusion criteria', null=True, verbose_name='Inclusion criteria')),
                ('exclude_criteria', models.JSONField(blank=True, help_text='JSON object defining exclusion criteria', null=True, verbose_name='Exclusion criteria')),
                ('is_public', models.BooleanField(default=True, help_text='Whether the cohort is public', verbose_name='Is public?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the dataset', max_length=255, verbose_name='Dataset name')),
                ('rules', models.JSONField(default=list, help_text='Dataset composition rules', verbose_name='Rules')),
                ('is_public', models.BooleanField(default=True, help_text='Whether the cohort is public', verbose_name='Is public?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='cohort',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='cohort',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='cohort',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='cohort',
            name='updated_by',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='updated_by',
        ),
        migrations.AlterField(
            model_name='cohort',
            name='is_public',
            field=models.BooleanField(default=True, help_text='Whether the cohort is public', verbose_name='Is public?'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cohorts_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."is_public", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='a9a2497f48c875952ecc5c65f2dc29d700eaeff1', operation='INSERT', pgid='pgtrigger_create_insert_b100e', table='cohorts_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cohorts_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."is_public", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='b3e852d1933772ee51eea9a90e748d756bd7a1d4', operation='UPDATE', pgid='pgtrigger_update_update_198ab', table='cohorts_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cohorts_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."exclude_criteria", OLD."external_source", OLD."external_source_id", OLD."id", OLD."include_criteria", OLD."is_public", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='d35eb482e6f77d8e0266863534e3118b77f4ad60', operation='DELETE', pgid='pgtrigger_delete_delete_8a49f', table='cohorts_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cohorts_datasetevent" ("external_source", "external_source_id", "id", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rules") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."is_public", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."rules"); RETURN NULL;', hash='6362f117323d276ce919b4ed99ec1210baff91d0', operation='INSERT', pgid='pgtrigger_create_insert_fe5d9', table='cohorts_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "cohorts_datasetevent" ("external_source", "external_source_id", "id", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rules") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."is_public", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."rules"); RETURN NULL;', hash='4a2da158eecd322889f949df4006b45173aab7d7', operation='UPDATE', pgid='pgtrigger_update_update_b1f1b', table='cohorts_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "cohorts_datasetevent" ("external_source", "external_source_id", "id", "is_public", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rules") VALUES (OLD."external_source", OLD."external_source_id", OLD."id", OLD."is_public", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."rules"); RETURN NULL;', hash='baafc7dda068a3b9fd5d69feb8ab00f5d8529f73', operation='DELETE', pgid='pgtrigger_delete_delete_d1d68', table='cohorts_dataset', when='AFTER')),
        ),
        migrations.AddField(
            model_name='cohortevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='cohorts.cohort'),
        ),
        migrations.AddField(
            model_name='datasetevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='cohorts.dataset'),
        ),
    ]
