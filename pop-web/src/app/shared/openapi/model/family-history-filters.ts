/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface FamilyHistoryFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Created At - Filter for entries with dates before the specified value
     */
    'createdAt.before'?: string;
    /**
     * Created At - Filter for entries with dates after the specified value
     */
    'createdAt.after'?: string;
    /**
     * Created At - Filter for entries with dates on or before the specified value
     */
    'createdAt.onOrBefore'?: string;
    /**
     * Created At - Filter for entries with dates on or after the specified value
     */
    'createdAt.onOrAfter'?: string;
    /**
     * Created At - Filter for entries with dates exactly matching the specified value
     */
    'createdAt.on'?: string;
    /**
     * Created At - Filter for entries with dates not matching the specified value
     */
    'createdAt.not.on'?: string;
    /**
     * Created At - Filter for entries with dates between two specified values (inclusive)
     */
    'createdAt.between'?: Array<any>;
    /**
     * Created At - Filter for entries with dates not between two specified values (inclusive)
     */
    'createdAt.not.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates before the specified value
     */
    'updatedAt.before'?: string;
    /**
     * Updated At - Filter for entries with dates after the specified value
     */
    'updatedAt.after'?: string;
    /**
     * Updated At - Filter for entries with dates on or before the specified value
     */
    'updatedAt.onOrBefore'?: string;
    /**
     * Updated At - Filter for entries with dates on or after the specified value
     */
    'updatedAt.onOrAfter'?: string;
    /**
     * Updated At - Filter for entries with dates exactly matching the specified value
     */
    'updatedAt.on'?: string;
    /**
     * Updated At - Filter for entries with dates not matching the specified value
     */
    'updatedAt.not.on'?: string;
    /**
     * Updated At - Filter for entries with dates between two specified values (inclusive)
     */
    'updatedAt.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates not between two specified values (inclusive)
     */
    'updatedAt.not.between'?: Array<any>;
    /**
     * Created By - Filter for entries without a value
     */
    'createdBy.not.exists'?: boolean;
    /**
     * Created By - Filter for entries with a value
     */
    'createdBy.exists'?: boolean;
    /**
     * None - Filter for entries with values less than the specified value
     */
    'updatedBys.id.lessThan'?: number;
    /**
     * None - Filter for entries with values less than or equal to the specified value
     */
    'updatedBys.id.lessThanOrEqual'?: number;
    /**
     * None - Filter for entries with values greater than the specified value
     */
    'updatedBys.id.greaterThan'?: number;
    /**
     * None - Filter for entries with values greater than or equal to the specified value
     */
    'updatedBys.id.greaterThanOrEqual'?: number;
    /**
     * None - Filter for entries with values exactly equal to the specified value
     */
    'updatedBys.id.equal'?: number;
    /**
     * None - Filter for entries with values not equal to the specified value
     */
    'updatedBys.id.not.equal'?: number;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.between'?: Array<any>;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.not.between'?: Array<any>;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.username'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.username.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.username.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.username.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.username.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.username.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.username.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.username.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.email'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.email.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.email.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.email.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.email.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.email.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.email.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.email.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.firstName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.firstName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.firstName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.firstName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.firstName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.firstName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.firstName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.firstName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.firstName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.firstName.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.lastName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.lastName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.lastName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.lastName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.lastName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.lastName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.lastName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.lastName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.lastName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.lastName.not.endsWith'?: string;
    /**
     * Patient case - Filter for full text matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for full text mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Assessment date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Assessment date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Assessment date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Assessment date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Assessment date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Assessment date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Assessment date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Assessment date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Relationship - Filter for a matching concept code
     */
    relationship?: string;
    /**
     * Relationship - Filter for a mismatching concept code
     */
    'relationship.not'?: string;
    /**
     * Relationship - Filter for a matching set of concept codes
     */
    'relationship.anyOf'?: Array<string>;
    /**
     * Relationship - Filter for a mismmatching set of concept codes
     */
    'relationship.not.anyOf'?: Array<string>;
    /**
     * Relationship - Filter for all child concepts of a given concepts code
     */
    'relationship.descendantsOf'?: string;
    /**
     * Had cancer - (\'Filter for yes/no statement\',)
     */
    hadCancer?: boolean;
    /**
     * Contributed to death - Filter for entries without a value
     */
    'contributedToDeath.not.exists'?: boolean;
    /**
     * Contributed to death - Filter for entries with a value
     */
    'contributedToDeath.exists'?: boolean;
    /**
     * Contributed to death - (\'Filter for yes/no statement\',)
     */
    contributedToDeath?: boolean;
    /**
     * Onset age - Filter for entries without a value
     */
    'onsetAge.not.exists'?: boolean;
    /**
     * Onset age - Filter for entries with a value
     */
    'onsetAge.exists'?: boolean;
    /**
     * Onset age - Filter for entries with values less than the specified value
     */
    'onsetAge.lessThan'?: number;
    /**
     * Onset age - Filter for entries with values less than or equal to the specified value
     */
    'onsetAge.lessThanOrEqual'?: number;
    /**
     * Onset age - Filter for entries with values greater than the specified value
     */
    'onsetAge.greaterThan'?: number;
    /**
     * Onset age - Filter for entries with values greater than or equal to the specified value
     */
    'onsetAge.greaterThanOrEqual'?: number;
    /**
     * Onset age - Filter for entries with values exactly equal to the specified value
     */
    'onsetAge.equal'?: number;
    /**
     * Onset age - Filter for entries with values not equal to the specified value
     */
    'onsetAge.not.equal'?: number;
    /**
     * Onset age - Filter for entries with values between two specified values (inclusive)
     */
    'onsetAge.between'?: Array<any>;
    /**
     * Onset age - Filter for entries with values between two specified values (inclusive)
     */
    'onsetAge.not.between'?: Array<any>;
    /**
     * Topography - Filter for entries without a value
     */
    'topography.not.exists'?: boolean;
    /**
     * Topography - Filter for entries with a value
     */
    'topography.exists'?: boolean;
    /**
     * Topography - Filter for a matching concept code
     */
    topography?: string;
    /**
     * Topography - Filter for a mismatching concept code
     */
    'topography.not'?: string;
    /**
     * Topography - Filter for a matching set of concept codes
     */
    'topography.anyOf'?: Array<string>;
    /**
     * Topography - Filter for a mismmatching set of concept codes
     */
    'topography.not.anyOf'?: Array<string>;
    /**
     * Topography - Filter for all child concepts of a given concepts code
     */
    'topography.descendantsOf'?: string;
    /**
     * Morphology - Filter for entries without a value
     */
    'morphology.not.exists'?: boolean;
    /**
     * Morphology - Filter for entries with a value
     */
    'morphology.exists'?: boolean;
    /**
     * Morphology - Filter for a matching concept code
     */
    morphology?: string;
    /**
     * Morphology - Filter for a mismatching concept code
     */
    'morphology.not'?: string;
    /**
     * Morphology - Filter for a matching set of concept codes
     */
    'morphology.anyOf'?: Array<string>;
    /**
     * Morphology - Filter for a mismmatching set of concept codes
     */
    'morphology.not.anyOf'?: Array<string>;
    /**
     * Morphology - Filter for all child concepts of a given concepts code
     */
    'morphology.descendantsOf'?: string;
}

