/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface TumorMarkerFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Created At - Filter for entries with dates before the specified value
     */
    'createdAt.before'?: string;
    /**
     * Created At - Filter for entries with dates after the specified value
     */
    'createdAt.after'?: string;
    /**
     * Created At - Filter for entries with dates on or before the specified value
     */
    'createdAt.onOrBefore'?: string;
    /**
     * Created At - Filter for entries with dates on or after the specified value
     */
    'createdAt.onOrAfter'?: string;
    /**
     * Created At - Filter for entries with dates exactly matching the specified value
     */
    'createdAt.on'?: string;
    /**
     * Created At - Filter for entries with dates not matching the specified value
     */
    'createdAt.not.on'?: string;
    /**
     * Created At - Filter for entries with dates between two specified values (inclusive)
     */
    'createdAt.between'?: Array<any>;
    /**
     * Created At - Filter for entries with dates not between two specified values (inclusive)
     */
    'createdAt.not.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates before the specified value
     */
    'updatedAt.before'?: string;
    /**
     * Updated At - Filter for entries with dates after the specified value
     */
    'updatedAt.after'?: string;
    /**
     * Updated At - Filter for entries with dates on or before the specified value
     */
    'updatedAt.onOrBefore'?: string;
    /**
     * Updated At - Filter for entries with dates on or after the specified value
     */
    'updatedAt.onOrAfter'?: string;
    /**
     * Updated At - Filter for entries with dates exactly matching the specified value
     */
    'updatedAt.on'?: string;
    /**
     * Updated At - Filter for entries with dates not matching the specified value
     */
    'updatedAt.not.on'?: string;
    /**
     * Updated At - Filter for entries with dates between two specified values (inclusive)
     */
    'updatedAt.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates not between two specified values (inclusive)
     */
    'updatedAt.not.between'?: Array<any>;
    /**
     * Created By - Filter for entries without a value
     */
    'createdBy.not.exists'?: boolean;
    /**
     * Created By - Filter for entries with a value
     */
    'createdBy.exists'?: boolean;
    /**
     * Patient case - Filter for full text matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for full text mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Analyte - Filter for a matching concept code
     */
    analyte?: string;
    /**
     * Analyte - Filter for a mismatching concept code
     */
    'analyte.not'?: string;
    /**
     * Analyte - Filter for a matching set of concept codes
     */
    'analyte.anyOf'?: Array<string>;
    /**
     * Analyte - Filter for a mismmatching set of concept codes
     */
    'analyte.not.anyOf'?: Array<string>;
    /**
     * Analyte - Filter for all child concepts of a given concepts code
     */
    'analyte.descendantsOf'?: string;
    /**
     * Mass concentration - Filter for entries without a value
     */
    'massConcentration.not.exists'?: boolean;
    /**
     * Mass concentration - Filter for entries with a value
     */
    'massConcentration.exists'?: boolean;
    /**
     * Mass concentration - Filter for entries with values less than the specified value
     */
    'massConcentration.lessThan'?: number;
    /**
     * Mass concentration - Filter for entries with values less than or equal to the specified value
     */
    'massConcentration.lessThanOrEqual'?: number;
    /**
     * Mass concentration - Filter for entries with values greater than the specified value
     */
    'massConcentration.greaterThan'?: number;
    /**
     * Mass concentration - Filter for entries with values greater than or equal to the specified value
     */
    'massConcentration.greaterThanOrEqual'?: number;
    /**
     * Mass concentration - Filter for entries with values exactly equal to the specified value
     */
    'massConcentration.equal'?: number;
    /**
     * Mass concentration - Filter for entries with values not equal to the specified value
     */
    'massConcentration.not.equal'?: number;
    /**
     * Mass concentration - Filter for entries with values between two specified values (inclusive)
     */
    'massConcentration.between'?: Array<any>;
    /**
     * Mass concentration - Filter for entries with values between two specified values (inclusive)
     */
    'massConcentration.not.between'?: Array<any>;
    /**
     * Arbitrary concentration - Filter for entries without a value
     */
    'arbitraryConcentration.not.exists'?: boolean;
    /**
     * Arbitrary concentration - Filter for entries with a value
     */
    'arbitraryConcentration.exists'?: boolean;
    /**
     * Arbitrary concentration - Filter for entries with values less than the specified value
     */
    'arbitraryConcentration.lessThan'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values less than or equal to the specified value
     */
    'arbitraryConcentration.lessThanOrEqual'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values greater than the specified value
     */
    'arbitraryConcentration.greaterThan'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values greater than or equal to the specified value
     */
    'arbitraryConcentration.greaterThanOrEqual'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values exactly equal to the specified value
     */
    'arbitraryConcentration.equal'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values not equal to the specified value
     */
    'arbitraryConcentration.not.equal'?: number;
    /**
     * Arbitrary concentration - Filter for entries with values between two specified values (inclusive)
     */
    'arbitraryConcentration.between'?: Array<any>;
    /**
     * Arbitrary concentration - Filter for entries with values between two specified values (inclusive)
     */
    'arbitraryConcentration.not.between'?: Array<any>;
    /**
     * Substance concentration - Filter for entries without a value
     */
    'substanceConcentration.not.exists'?: boolean;
    /**
     * Substance concentration - Filter for entries with a value
     */
    'substanceConcentration.exists'?: boolean;
    /**
     * Substance concentration - Filter for entries with values less than the specified value
     */
    'substanceConcentration.lessThan'?: number;
    /**
     * Substance concentration - Filter for entries with values less than or equal to the specified value
     */
    'substanceConcentration.lessThanOrEqual'?: number;
    /**
     * Substance concentration - Filter for entries with values greater than the specified value
     */
    'substanceConcentration.greaterThan'?: number;
    /**
     * Substance concentration - Filter for entries with values greater than or equal to the specified value
     */
    'substanceConcentration.greaterThanOrEqual'?: number;
    /**
     * Substance concentration - Filter for entries with values exactly equal to the specified value
     */
    'substanceConcentration.equal'?: number;
    /**
     * Substance concentration - Filter for entries with values not equal to the specified value
     */
    'substanceConcentration.not.equal'?: number;
    /**
     * Substance concentration - Filter for entries with values between two specified values (inclusive)
     */
    'substanceConcentration.between'?: Array<any>;
    /**
     * Substance concentration - Filter for entries with values between two specified values (inclusive)
     */
    'substanceConcentration.not.between'?: Array<any>;
    /**
     * Fraction - Filter for entries without a value
     */
    'fraction.not.exists'?: boolean;
    /**
     * Fraction - Filter for entries with a value
     */
    'fraction.exists'?: boolean;
    /**
     * Fraction - Filter for entries with values less than the specified value
     */
    'fraction.lessThan'?: number;
    /**
     * Fraction - Filter for entries with values less than or equal to the specified value
     */
    'fraction.lessThanOrEqual'?: number;
    /**
     * Fraction - Filter for entries with values greater than the specified value
     */
    'fraction.greaterThan'?: number;
    /**
     * Fraction - Filter for entries with values greater than or equal to the specified value
     */
    'fraction.greaterThanOrEqual'?: number;
    /**
     * Fraction - Filter for entries with values exactly equal to the specified value
     */
    'fraction.equal'?: number;
    /**
     * Fraction - Filter for entries with values not equal to the specified value
     */
    'fraction.not.equal'?: number;
    /**
     * Fraction - Filter for entries with values between two specified values (inclusive)
     */
    'fraction.between'?: Array<any>;
    /**
     * Fraction - Filter for entries with values between two specified values (inclusive)
     */
    'fraction.not.between'?: Array<any>;
    /**
     * Multiples of the median - Filter for entries without a value
     */
    'multipleOfMedian.not.exists'?: boolean;
    /**
     * Multiples of the median - Filter for entries with a value
     */
    'multipleOfMedian.exists'?: boolean;
    /**
     * Multiples of the median - Filter for entries with values less than the specified value
     */
    'multipleOfMedian.lessThan'?: number;
    /**
     * Multiples of the median - Filter for entries with values less than or equal to the specified value
     */
    'multipleOfMedian.lessThanOrEqual'?: number;
    /**
     * Multiples of the median - Filter for entries with values greater than the specified value
     */
    'multipleOfMedian.greaterThan'?: number;
    /**
     * Multiples of the median - Filter for entries with values greater than or equal to the specified value
     */
    'multipleOfMedian.greaterThanOrEqual'?: number;
    /**
     * Multiples of the median - Filter for entries with values exactly equal to the specified value
     */
    'multipleOfMedian.equal'?: number;
    /**
     * Multiples of the median - Filter for entries with values not equal to the specified value
     */
    'multipleOfMedian.not.equal'?: number;
    /**
     * Multiples of the median - Filter for entries with values between two specified values (inclusive)
     */
    'multipleOfMedian.between'?: Array<any>;
    /**
     * Multiples of the median - Filter for entries with values between two specified values (inclusive)
     */
    'multipleOfMedian.not.between'?: Array<any>;
    /**
     * Immune Cells Score (ICS) - Filter for entries without a value
     */
    'tumorProportionScore.not.exists'?: boolean;
    /**
     * Immune Cells Score (ICS) - Filter for entries with a value
     */
    'tumorProportionScore.exists'?: boolean;
    tumorProportionScore?: TumorMarkerFilters.TumorProportionScoreEnum;
    'tumorProportionScore.not'?: TumorMarkerFilters.TumorProportionScoreNotEnum;
    /**
     * Immune Cells Score (ICS) - (\'Filter for excluding a subset of value choices\',)
     */
    'tumorProportionScore.anyOf'?: Array<TumorMarkerFilters.TumorProportionScoreAnyOfEnum>;
    /**
     * Immune Cells Score (ICS) - Filter for entries without a value
     */
    'immuneCellScore.not.exists'?: boolean;
    /**
     * Immune Cells Score (ICS) - Filter for entries with a value
     */
    'immuneCellScore.exists'?: boolean;
    immuneCellScore?: TumorMarkerFilters.ImmuneCellScoreEnum;
    'immuneCellScore.not'?: TumorMarkerFilters.ImmuneCellScoreNotEnum;
    /**
     * Immune Cells Score (ICS) - (\'Filter for excluding a subset of value choices\',)
     */
    'immuneCellScore.anyOf'?: Array<TumorMarkerFilters.ImmuneCellScoreAnyOfEnum>;
    /**
     * Combined Positive Score (CPS) - Filter for entries without a value
     */
    'combinedPositiveScore.not.exists'?: boolean;
    /**
     * Combined Positive Score (CPS) - Filter for entries with a value
     */
    'combinedPositiveScore.exists'?: boolean;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values less than the specified value
     */
    'combinedPositiveScore.lessThan'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value
     */
    'combinedPositiveScore.lessThanOrEqual'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values greater than the specified value
     */
    'combinedPositiveScore.greaterThan'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value
     */
    'combinedPositiveScore.greaterThanOrEqual'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value
     */
    'combinedPositiveScore.equal'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value
     */
    'combinedPositiveScore.not.equal'?: number;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)
     */
    'combinedPositiveScore.between'?: Array<any>;
    /**
     * Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)
     */
    'combinedPositiveScore.not.between'?: Array<any>;
    /**
     * Immunohistochemical Score - Filter for entries without a value
     */
    'immunohistochemicalScore.not.exists'?: boolean;
    /**
     * Immunohistochemical Score - Filter for entries with a value
     */
    'immunohistochemicalScore.exists'?: boolean;
    immunohistochemicalScore?: TumorMarkerFilters.ImmunohistochemicalScoreEnum;
    'immunohistochemicalScore.not'?: TumorMarkerFilters.ImmunohistochemicalScoreNotEnum;
    /**
     * Immunohistochemical Score - (\'Filter for excluding a subset of value choices\',)
     */
    'immunohistochemicalScore.anyOf'?: Array<TumorMarkerFilters.ImmunohistochemicalScoreAnyOfEnum>;
    /**
     * Presence - Filter for entries without a value
     */
    'presence.not.exists'?: boolean;
    /**
     * Presence - Filter for entries with a value
     */
    'presence.exists'?: boolean;
    presence?: TumorMarkerFilters.PresenceEnum;
    'presence.not'?: TumorMarkerFilters.PresenceNotEnum;
    /**
     * Presence - (\'Filter for excluding a subset of value choices\',)
     */
    'presence.anyOf'?: Array<TumorMarkerFilters.PresenceAnyOfEnum>;
    /**
     * Nuclear expression status - Filter for entries without a value
     */
    'nuclearExpressionStatus.not.exists'?: boolean;
    /**
     * Nuclear expression status - Filter for entries with a value
     */
    'nuclearExpressionStatus.exists'?: boolean;
    nuclearExpressionStatus?: TumorMarkerFilters.NuclearExpressionStatusEnum;
    'nuclearExpressionStatus.not'?: TumorMarkerFilters.NuclearExpressionStatusNotEnum;
    /**
     * Nuclear expression status - (\'Filter for excluding a subset of value choices\',)
     */
    'nuclearExpressionStatus.anyOf'?: Array<TumorMarkerFilters.NuclearExpressionStatusAnyOfEnum>;
    /**
     * None - Filter for entries with values less than the specified value
     */
    'updatedBys.id.lessThan'?: number;
    /**
     * None - Filter for entries with values less than or equal to the specified value
     */
    'updatedBys.id.lessThanOrEqual'?: number;
    /**
     * None - Filter for entries with values greater than the specified value
     */
    'updatedBys.id.greaterThan'?: number;
    /**
     * None - Filter for entries with values greater than or equal to the specified value
     */
    'updatedBys.id.greaterThanOrEqual'?: number;
    /**
     * None - Filter for entries with values exactly equal to the specified value
     */
    'updatedBys.id.equal'?: number;
    /**
     * None - Filter for entries with values not equal to the specified value
     */
    'updatedBys.id.not.equal'?: number;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.between'?: Array<any>;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.not.between'?: Array<any>;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.username'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.username.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.username.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.username.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.username.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.username.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.username.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.username.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.email'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.email.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.email.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.email.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.email.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.email.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.email.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.email.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.firstName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.firstName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.firstName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.firstName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.firstName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.firstName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.firstName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.firstName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.firstName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.firstName.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.lastName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.lastName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.lastName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.lastName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.lastName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.lastName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.lastName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.lastName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.lastName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.lastName.not.endsWith'?: string;
    /**
     * Related neoplastic entities - Filter for full text matches
     */
    relatedEntitiesIds?: string;
    /**
     * Related neoplastic entities - Filter for full text mismatches
     */
    'relatedEntitiesIds.not'?: string;
    /**
     * Related neoplastic entities - Filter for partial text matches
     */
    'relatedEntitiesIds.contains'?: string;
    /**
     * Related neoplastic entities - Filter for partial text mismatches
     */
    'relatedEntitiesIds.not.contains'?: string;
    /**
     * Related neoplastic entities - Filter for entries starting with the text
     */
    'relatedEntitiesIds.beginsWith'?: string;
    /**
     * Related neoplastic entities - Filter for entries not starting with the text
     */
    'relatedEntitiesIds.not.beginsWith'?: string;
    /**
     * Related neoplastic entities - Filter for entries ending with the text
     */
    'relatedEntitiesIds.endsWith'?: string;
    /**
     * Related neoplastic entities - Filter for entries not ending with the text
     */
    'relatedEntitiesIds.not.endsWith'?: string;
}
export namespace TumorMarkerFilters {
    export type TumorProportionScoreEnum = 'TC0' | 'TC1' | 'TC2' | 'TC3';
    export const TumorProportionScoreEnum = {
        Tc0: 'TC0' as TumorProportionScoreEnum,
        Tc1: 'TC1' as TumorProportionScoreEnum,
        Tc2: 'TC2' as TumorProportionScoreEnum,
        Tc3: 'TC3' as TumorProportionScoreEnum
    };
    export type TumorProportionScoreNotEnum = 'TC0' | 'TC1' | 'TC2' | 'TC3';
    export const TumorProportionScoreNotEnum = {
        Tc0: 'TC0' as TumorProportionScoreNotEnum,
        Tc1: 'TC1' as TumorProportionScoreNotEnum,
        Tc2: 'TC2' as TumorProportionScoreNotEnum,
        Tc3: 'TC3' as TumorProportionScoreNotEnum
    };
    export type TumorProportionScoreAnyOfEnum = 'TC0' | 'TC1' | 'TC2' | 'TC3';
    export const TumorProportionScoreAnyOfEnum = {
        Tc0: 'TC0' as TumorProportionScoreAnyOfEnum,
        Tc1: 'TC1' as TumorProportionScoreAnyOfEnum,
        Tc2: 'TC2' as TumorProportionScoreAnyOfEnum,
        Tc3: 'TC3' as TumorProportionScoreAnyOfEnum
    };
    export type ImmuneCellScoreEnum = 'IC0' | 'IC1' | 'IC2' | 'IC3';
    export const ImmuneCellScoreEnum = {
        Ic0: 'IC0' as ImmuneCellScoreEnum,
        Ic1: 'IC1' as ImmuneCellScoreEnum,
        Ic2: 'IC2' as ImmuneCellScoreEnum,
        Ic3: 'IC3' as ImmuneCellScoreEnum
    };
    export type ImmuneCellScoreNotEnum = 'IC0' | 'IC1' | 'IC2' | 'IC3';
    export const ImmuneCellScoreNotEnum = {
        Ic0: 'IC0' as ImmuneCellScoreNotEnum,
        Ic1: 'IC1' as ImmuneCellScoreNotEnum,
        Ic2: 'IC2' as ImmuneCellScoreNotEnum,
        Ic3: 'IC3' as ImmuneCellScoreNotEnum
    };
    export type ImmuneCellScoreAnyOfEnum = 'IC0' | 'IC1' | 'IC2' | 'IC3';
    export const ImmuneCellScoreAnyOfEnum = {
        Ic0: 'IC0' as ImmuneCellScoreAnyOfEnum,
        Ic1: 'IC1' as ImmuneCellScoreAnyOfEnum,
        Ic2: 'IC2' as ImmuneCellScoreAnyOfEnum,
        Ic3: 'IC3' as ImmuneCellScoreAnyOfEnum
    };
    export type ImmunohistochemicalScoreEnum = '0' | '1+' | '2+' | '3+' | 'indeterminate';
    export const ImmunohistochemicalScoreEnum = {
        _0: '0' as ImmunohistochemicalScoreEnum,
        _1: '1+' as ImmunohistochemicalScoreEnum,
        _2: '2+' as ImmunohistochemicalScoreEnum,
        _3: '3+' as ImmunohistochemicalScoreEnum,
        Indeterminate: 'indeterminate' as ImmunohistochemicalScoreEnum
    };
    export type ImmunohistochemicalScoreNotEnum = '0' | '1+' | '2+' | '3+' | 'indeterminate';
    export const ImmunohistochemicalScoreNotEnum = {
        _0: '0' as ImmunohistochemicalScoreNotEnum,
        _1: '1+' as ImmunohistochemicalScoreNotEnum,
        _2: '2+' as ImmunohistochemicalScoreNotEnum,
        _3: '3+' as ImmunohistochemicalScoreNotEnum,
        Indeterminate: 'indeterminate' as ImmunohistochemicalScoreNotEnum
    };
    export type ImmunohistochemicalScoreAnyOfEnum = '0' | '1+' | '2+' | '3+' | 'indeterminate';
    export const ImmunohistochemicalScoreAnyOfEnum = {
        _0: '0' as ImmunohistochemicalScoreAnyOfEnum,
        _1: '1+' as ImmunohistochemicalScoreAnyOfEnum,
        _2: '2+' as ImmunohistochemicalScoreAnyOfEnum,
        _3: '3+' as ImmunohistochemicalScoreAnyOfEnum,
        Indeterminate: 'indeterminate' as ImmunohistochemicalScoreAnyOfEnum
    };
    export type PresenceEnum = 'positive' | 'negative' | 'indeterminate';
    export const PresenceEnum = {
        Positive: 'positive' as PresenceEnum,
        Negative: 'negative' as PresenceEnum,
        Indeterminate: 'indeterminate' as PresenceEnum
    };
    export type PresenceNotEnum = 'positive' | 'negative' | 'indeterminate';
    export const PresenceNotEnum = {
        Positive: 'positive' as PresenceNotEnum,
        Negative: 'negative' as PresenceNotEnum,
        Indeterminate: 'indeterminate' as PresenceNotEnum
    };
    export type PresenceAnyOfEnum = 'positive' | 'negative' | 'indeterminate';
    export const PresenceAnyOfEnum = {
        Positive: 'positive' as PresenceAnyOfEnum,
        Negative: 'negative' as PresenceAnyOfEnum,
        Indeterminate: 'indeterminate' as PresenceAnyOfEnum
    };
    export type NuclearExpressionStatusEnum = 'intact' | 'loss' | 'indeterminate';
    export const NuclearExpressionStatusEnum = {
        Intact: 'intact' as NuclearExpressionStatusEnum,
        Loss: 'loss' as NuclearExpressionStatusEnum,
        Indeterminate: 'indeterminate' as NuclearExpressionStatusEnum
    };
    export type NuclearExpressionStatusNotEnum = 'intact' | 'loss' | 'indeterminate';
    export const NuclearExpressionStatusNotEnum = {
        Intact: 'intact' as NuclearExpressionStatusNotEnum,
        Loss: 'loss' as NuclearExpressionStatusNotEnum,
        Indeterminate: 'indeterminate' as NuclearExpressionStatusNotEnum
    };
    export type NuclearExpressionStatusAnyOfEnum = 'intact' | 'loss' | 'indeterminate';
    export const NuclearExpressionStatusAnyOfEnum = {
        Intact: 'intact' as NuclearExpressionStatusAnyOfEnum,
        Loss: 'loss' as NuclearExpressionStatusAnyOfEnum,
        Indeterminate: 'indeterminate' as NuclearExpressionStatusAnyOfEnum
    };
}


