/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface RadiotherapyFilters { 
    /**
     * Id - Filter for full text matches
     */
    'dosages.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'dosages.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'dosages.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'dosages.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'dosages.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'dosages.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'dosages.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'dosages.id.not.endsWith'?: string;
    /**
     * Total fractions - Filter for entries without a value
     */
    'dosages.fractions.not.exists'?: boolean;
    /**
     * Total fractions - Filter for entries with a value
     */
    'dosages.fractions.exists'?: boolean;
    /**
     * Total fractions - Filter for entries with values less than the specified value
     */
    'dosages.fractions.lessThan'?: number;
    /**
     * Total fractions - Filter for entries with values less than or equal to the specified value
     */
    'dosages.fractions.lessThanOrEqual'?: number;
    /**
     * Total fractions - Filter for entries with values greater than the specified value
     */
    'dosages.fractions.greaterThan'?: number;
    /**
     * Total fractions - Filter for entries with values greater than or equal to the specified value
     */
    'dosages.fractions.greaterThanOrEqual'?: number;
    /**
     * Total fractions - Filter for entries with values exactly equal to the specified value
     */
    'dosages.fractions.equal'?: number;
    /**
     * Total fractions - Filter for entries with values not equal to the specified value
     */
    'dosages.fractions.not.equal'?: number;
    /**
     * Total fractions - Filter for entries with values between two specified values (inclusive)
     */
    'dosages.fractions.between'?: Array<any>;
    /**
     * Total fractions - Filter for entries with values between two specified values (inclusive)
     */
    'dosages.fractions.not.between'?: Array<any>;
    /**
     * Total radiation dose - Filter for entries without a value
     */
    'dosages.dose.not.exists'?: boolean;
    /**
     * Total radiation dose - Filter for entries with a value
     */
    'dosages.dose.exists'?: boolean;
    /**
     * Total radiation dose - Filter for entries with values less than the specified value
     */
    'dosages.dose.lessThan'?: number;
    /**
     * Total radiation dose - Filter for entries with values less than or equal to the specified value
     */
    'dosages.dose.lessThanOrEqual'?: number;
    /**
     * Total radiation dose - Filter for entries with values greater than the specified value
     */
    'dosages.dose.greaterThan'?: number;
    /**
     * Total radiation dose - Filter for entries with values greater than or equal to the specified value
     */
    'dosages.dose.greaterThanOrEqual'?: number;
    /**
     * Total radiation dose - Filter for entries with values exactly equal to the specified value
     */
    'dosages.dose.equal'?: number;
    /**
     * Total radiation dose - Filter for entries with values not equal to the specified value
     */
    'dosages.dose.not.equal'?: number;
    /**
     * Total radiation dose - Filter for entries with values between two specified values (inclusive)
     */
    'dosages.dose.between'?: Array<any>;
    /**
     * Total radiation dose - Filter for entries with values between two specified values (inclusive)
     */
    'dosages.dose.not.between'?: Array<any>;
    /**
     * Irradiated volume - Filter for a matching concept code
     */
    'dosages.irradiatedVolume'?: string;
    /**
     * Irradiated volume - Filter for a mismatching concept code
     */
    'dosages.irradiatedVolume.not'?: string;
    /**
     * Irradiated volume - Filter for a matching set of concept codes
     */
    'dosages.irradiatedVolume.anyOf'?: Array<string>;
    /**
     * Irradiated volume - Filter for a mismmatching set of concept codes
     */
    'dosages.irradiatedVolume.not.anyOf'?: Array<string>;
    /**
     * Irradiated volume - Filter for all child concepts of a given concepts code
     */
    'dosages.irradiatedVolume.descendantsOf'?: string;
    /**
     * Irradiated volume morphology - Filter for entries without a value
     */
    'dosages.irradiatedVolumeMorphology.not.exists'?: boolean;
    /**
     * Irradiated volume morphology - Filter for entries with a value
     */
    'dosages.irradiatedVolumeMorphology.exists'?: boolean;
    /**
     * Irradiated volume morphology - Filter for a matching concept code
     */
    'dosages.irradiatedVolumeMorphology'?: string;
    /**
     * Irradiated volume morphology - Filter for a mismatching concept code
     */
    'dosages.irradiatedVolumeMorphology.not'?: string;
    /**
     * Irradiated volume morphology - Filter for a matching set of concept codes
     */
    'dosages.irradiatedVolumeMorphology.anyOf'?: Array<string>;
    /**
     * Irradiated volume morphology - Filter for a mismmatching set of concept codes
     */
    'dosages.irradiatedVolumeMorphology.not.anyOf'?: Array<string>;
    /**
     * Irradiated volume morphology - Filter for all child concepts of a given concepts code
     */
    'dosages.irradiatedVolumeMorphology.descendantsOf'?: string;
    /**
     * Irradiated volume qualifier - Filter for entries without a value
     */
    'dosages.irradiatedVolumeQualifier.not.exists'?: boolean;
    /**
     * Irradiated volume qualifier - Filter for entries with a value
     */
    'dosages.irradiatedVolumeQualifier.exists'?: boolean;
    /**
     * Irradiated volume qualifier - Filter for a matching concept code
     */
    'dosages.irradiatedVolumeQualifier'?: string;
    /**
     * Irradiated volume qualifier - Filter for a mismatching concept code
     */
    'dosages.irradiatedVolumeQualifier.not'?: string;
    /**
     * Irradiated volume qualifier - Filter for a matching set of concept codes
     */
    'dosages.irradiatedVolumeQualifier.anyOf'?: Array<string>;
    /**
     * Irradiated volume qualifier - Filter for a mismmatching set of concept codes
     */
    'dosages.irradiatedVolumeQualifier.not.anyOf'?: Array<string>;
    /**
     * Irradiated volume qualifier - Filter for all child concepts of a given concepts code
     */
    'dosages.irradiatedVolumeQualifier.descendantsOf'?: string;
    /**
     * Id - Filter for full text matches
     */
    'settings.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'settings.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'settings.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'settings.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'settings.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'settings.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'settings.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'settings.id.not.endsWith'?: string;
    /**
     * Modality - Filter for a matching concept code
     */
    'settings.modality'?: string;
    /**
     * Modality - Filter for a mismatching concept code
     */
    'settings.modality.not'?: string;
    /**
     * Modality - Filter for a matching set of concept codes
     */
    'settings.modality.anyOf'?: Array<string>;
    /**
     * Modality - Filter for a mismmatching set of concept codes
     */
    'settings.modality.not.anyOf'?: Array<string>;
    /**
     * Modality - Filter for all child concepts of a given concepts code
     */
    'settings.modality.descendantsOf'?: string;
    /**
     * Technique - Filter for a matching concept code
     */
    'settings.technique'?: string;
    /**
     * Technique - Filter for a mismatching concept code
     */
    'settings.technique.not'?: string;
    /**
     * Technique - Filter for a matching set of concept codes
     */
    'settings.technique.anyOf'?: Array<string>;
    /**
     * Technique - Filter for a mismmatching set of concept codes
     */
    'settings.technique.not.anyOf'?: Array<string>;
    /**
     * Technique - Filter for all child concepts of a given concepts code
     */
    'settings.technique.descendantsOf'?: string;
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Treatment period - Filter for entries overlapping with the time period
     */
    'period.overlaps'?: Array<any>;
    /**
     * Treatment period - Filter for entries not overlapping with the time period
     */
    'period.not.overlaps'?: Array<any>;
    /**
     * Treatment period - Filter for entries containing the time period
     */
    'period.contains'?: Array<any>;
    /**
     * Treatment period - Filter for entries not containing the time period
     */
    'period.not.contains'?: Array<any>;
    /**
     * Treatment period - Filter for entries whose period are contined by the time period
     */
    'period.containedBy'?: Array<any>;
    /**
     * Treatment period - Filter for entries whose period are not contined by the time period
     */
    'period.not.containedBy'?: Array<any>;
    /**
     * Total sessions - Filter for entries with values less than the specified value
     */
    'sessions.lessThan'?: number;
    /**
     * Total sessions - Filter for entries with values less than or equal to the specified value
     */
    'sessions.lessThanOrEqual'?: number;
    /**
     * Total sessions - Filter for entries with values greater than the specified value
     */
    'sessions.greaterThan'?: number;
    /**
     * Total sessions - Filter for entries with values greater than or equal to the specified value
     */
    'sessions.greaterThanOrEqual'?: number;
    /**
     * Total sessions - Filter for entries with values exactly equal to the specified value
     */
    'sessions.equal'?: number;
    /**
     * Total sessions - Filter for entries with values not equal to the specified value
     */
    'sessions.not.equal'?: number;
    /**
     * Total sessions - Filter for entries with values between two specified values (inclusive)
     */
    'sessions.between'?: Array<any>;
    /**
     * Total sessions - Filter for entries with values between two specified values (inclusive)
     */
    'sessions.not.between'?: Array<any>;
    intent?: RadiotherapyFilters.IntentEnum;
    'intent.not'?: RadiotherapyFilters.IntentNotEnum;
    /**
     * Intent - (\'Filter for excluding a subset of value choices\',)
     */
    'intent.anyOf'?: Array<RadiotherapyFilters.IntentAnyOfEnum>;
    /**
     * Termination reason - Filter for entries without a value
     */
    'terminationReason.not.exists'?: boolean;
    /**
     * Termination reason - Filter for entries with a value
     */
    'terminationReason.exists'?: boolean;
    /**
     * Termination reason - Filter for a matching concept code
     */
    terminationReason?: string;
    /**
     * Termination reason - Filter for a mismatching concept code
     */
    'terminationReason.not'?: string;
    /**
     * Termination reason - Filter for a matching set of concept codes
     */
    'terminationReason.anyOf'?: Array<string>;
    /**
     * Termination reason - Filter for a mismmatching set of concept codes
     */
    'terminationReason.not.anyOf'?: Array<string>;
    /**
     * Termination reason - Filter for all child concepts of a given concepts code
     */
    'terminationReason.descendantsOf'?: string;
    /**
     * Therapy line - Filter for entries without a value
     */
    'therapyLineId.not.exists'?: boolean;
    /**
     * Therapy line - Filter for entries with a value
     */
    'therapyLineId.exists'?: boolean;
    /**
     * Therapy line - Filter for reference matches
     */
    therapyLineId?: string;
    /**
     * Therapy line - Filter for reference mismatches
     */
    'therapyLineId.not'?: string;
    /**
     * Therapy line - Filter for partial text matches
     */
    'therapyLineId.contains'?: string;
    /**
     * Therapy line - Filter for partial text mismatches
     */
    'therapyLineId.not.contains'?: string;
    /**
     * Therapy line - Filter for entries starting with the text
     */
    'therapyLineId.beginsWith'?: string;
    /**
     * Therapy line - Filter for entries not starting with the text
     */
    'therapyLineId.not.beginsWith'?: string;
    /**
     * Therapy line - Filter for entries ending with the text
     */
    'therapyLineId.endsWith'?: string;
    /**
     * Therapy line - Filter for entries not ending with the text
     */
    'therapyLineId.not.endsWith'?: string;
    /**
     * Targeted neoplastic entities - Filter for reference matches
     */
    targetedEntitiesIds?: string;
    /**
     * Targeted neoplastic entities - Filter for reference mismatches
     */
    'targetedEntitiesIds.not'?: string;
}
export namespace RadiotherapyFilters {
    export type IntentEnum = 'curative' | 'palliative';
    export const IntentEnum = {
        Curative: 'curative' as IntentEnum,
        Palliative: 'palliative' as IntentEnum
    };
    export type IntentNotEnum = 'curative' | 'palliative';
    export const IntentNotEnum = {
        Curative: 'curative' as IntentNotEnum,
        Palliative: 'palliative' as IntentNotEnum
    };
    export type IntentAnyOfEnum = 'curative' | 'palliative';
    export const IntentAnyOfEnum = {
        Curative: 'curative' as IntentAnyOfEnum,
        Palliative: 'palliative' as IntentAnyOfEnum
    };
}


