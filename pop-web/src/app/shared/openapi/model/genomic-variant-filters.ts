/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface GenomicVariantFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Created At - Filter for entries with dates before the specified value
     */
    'createdAt.before'?: string;
    /**
     * Created At - Filter for entries with dates after the specified value
     */
    'createdAt.after'?: string;
    /**
     * Created At - Filter for entries with dates on or before the specified value
     */
    'createdAt.onOrBefore'?: string;
    /**
     * Created At - Filter for entries with dates on or after the specified value
     */
    'createdAt.onOrAfter'?: string;
    /**
     * Created At - Filter for entries with dates exactly matching the specified value
     */
    'createdAt.on'?: string;
    /**
     * Created At - Filter for entries with dates not matching the specified value
     */
    'createdAt.not.on'?: string;
    /**
     * Created At - Filter for entries with dates between two specified values (inclusive)
     */
    'createdAt.between'?: Array<any>;
    /**
     * Created At - Filter for entries with dates not between two specified values (inclusive)
     */
    'createdAt.not.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates before the specified value
     */
    'updatedAt.before'?: string;
    /**
     * Updated At - Filter for entries with dates after the specified value
     */
    'updatedAt.after'?: string;
    /**
     * Updated At - Filter for entries with dates on or before the specified value
     */
    'updatedAt.onOrBefore'?: string;
    /**
     * Updated At - Filter for entries with dates on or after the specified value
     */
    'updatedAt.onOrAfter'?: string;
    /**
     * Updated At - Filter for entries with dates exactly matching the specified value
     */
    'updatedAt.on'?: string;
    /**
     * Updated At - Filter for entries with dates not matching the specified value
     */
    'updatedAt.not.on'?: string;
    /**
     * Updated At - Filter for entries with dates between two specified values (inclusive)
     */
    'updatedAt.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates not between two specified values (inclusive)
     */
    'updatedAt.not.between'?: Array<any>;
    /**
     * Created By - Filter for entries without a value
     */
    'createdBy.not.exists'?: boolean;
    /**
     * Created By - Filter for entries with a value
     */
    'createdBy.exists'?: boolean;
    /**
     * None - Filter for entries with values less than the specified value
     */
    'updatedBys.id.lessThan'?: number;
    /**
     * None - Filter for entries with values less than or equal to the specified value
     */
    'updatedBys.id.lessThanOrEqual'?: number;
    /**
     * None - Filter for entries with values greater than the specified value
     */
    'updatedBys.id.greaterThan'?: number;
    /**
     * None - Filter for entries with values greater than or equal to the specified value
     */
    'updatedBys.id.greaterThanOrEqual'?: number;
    /**
     * None - Filter for entries with values exactly equal to the specified value
     */
    'updatedBys.id.equal'?: number;
    /**
     * None - Filter for entries with values not equal to the specified value
     */
    'updatedBys.id.not.equal'?: number;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.between'?: Array<any>;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.not.between'?: Array<any>;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.username'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.username.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.username.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.username.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.username.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.username.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.username.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.username.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.email'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.email.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.email.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.email.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.email.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.email.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.email.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.email.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.firstName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.firstName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.firstName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.firstName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.firstName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.firstName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.firstName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.firstName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.firstName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.firstName.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.lastName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.lastName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.lastName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.lastName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.lastName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.lastName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.lastName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.lastName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.lastName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.lastName.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Assessment date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Assessment date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Assessment date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Assessment date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Assessment date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Assessment date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Assessment date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Assessment date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Gene panel - Filter for entries without a value
     */
    'genePanel.not.exists'?: boolean;
    /**
     * Gene panel - Filter for entries with a value
     */
    'genePanel.exists'?: boolean;
    /**
     * Gene panel - Filter for full text matches
     */
    genePanel?: string;
    /**
     * Gene panel - Filter for full text mismatches
     */
    'genePanel.not'?: string;
    /**
     * Gene panel - Filter for partial text matches
     */
    'genePanel.contains'?: string;
    /**
     * Gene panel - Filter for partial text mismatches
     */
    'genePanel.not.contains'?: string;
    /**
     * Gene panel - Filter for entries starting with the text
     */
    'genePanel.beginsWith'?: string;
    /**
     * Gene panel - Filter for entries not starting with the text
     */
    'genePanel.not.beginsWith'?: string;
    /**
     * Gene panel - Filter for entries ending with the text
     */
    'genePanel.endsWith'?: string;
    /**
     * Gene panel - Filter for entries not ending with the text
     */
    'genePanel.not.endsWith'?: string;
    /**
     * Assessment - Filter for entries without a value
     */
    'assessment.not.exists'?: boolean;
    /**
     * Assessment - Filter for entries with a value
     */
    'assessment.exists'?: boolean;
    assessment?: GenomicVariantFilters.AssessmentEnum;
    'assessment.not'?: GenomicVariantFilters.AssessmentNotEnum;
    /**
     * Assessment - (\'Filter for excluding a subset of value choices\',)
     */
    'assessment.anyOf'?: Array<GenomicVariantFilters.AssessmentAnyOfEnum>;
    /**
     * Confidence - Filter for entries without a value
     */
    'confidence.not.exists'?: boolean;
    /**
     * Confidence - Filter for entries with a value
     */
    'confidence.exists'?: boolean;
    confidence?: GenomicVariantFilters.ConfidenceEnum;
    'confidence.not'?: GenomicVariantFilters.ConfidenceNotEnum;
    /**
     * Confidence - (\'Filter for excluding a subset of value choices\',)
     */
    'confidence.anyOf'?: Array<GenomicVariantFilters.ConfidenceAnyOfEnum>;
    /**
     * Analysis method - Filter for entries without a value
     */
    'analysisMethod.not.exists'?: boolean;
    /**
     * Analysis method - Filter for entries with a value
     */
    'analysisMethod.exists'?: boolean;
    /**
     * Analysis method - Filter for a matching concept code
     */
    analysisMethod?: string;
    /**
     * Analysis method - Filter for a mismatching concept code
     */
    'analysisMethod.not'?: string;
    /**
     * Analysis method - Filter for a matching set of concept codes
     */
    'analysisMethod.anyOf'?: Array<string>;
    /**
     * Analysis method - Filter for a mismmatching set of concept codes
     */
    'analysisMethod.not.anyOf'?: Array<string>;
    /**
     * Analysis method - Filter for all child concepts of a given concepts code
     */
    'analysisMethod.descendantsOf'?: string;
    /**
     * Clinical relevance - Filter for entries without a value
     */
    'clinicalRelevance.not.exists'?: boolean;
    /**
     * Clinical relevance - Filter for entries with a value
     */
    'clinicalRelevance.exists'?: boolean;
    clinicalRelevance?: GenomicVariantFilters.ClinicalRelevanceEnum;
    'clinicalRelevance.not'?: GenomicVariantFilters.ClinicalRelevanceNotEnum;
    /**
     * Clinical relevance - (\'Filter for excluding a subset of value choices\',)
     */
    'clinicalRelevance.anyOf'?: Array<GenomicVariantFilters.ClinicalRelevanceAnyOfEnum>;
    /**
     * Cytogenetic location - Filter for entries without a value
     */
    'cytogeneticLocation.not.exists'?: boolean;
    /**
     * Cytogenetic location - Filter for entries with a value
     */
    'cytogeneticLocation.exists'?: boolean;
    /**
     * Cytogenetic location - Filter for full text matches
     */
    cytogeneticLocation?: string;
    /**
     * Cytogenetic location - Filter for full text mismatches
     */
    'cytogeneticLocation.not'?: string;
    /**
     * Cytogenetic location - Filter for partial text matches
     */
    'cytogeneticLocation.contains'?: string;
    /**
     * Cytogenetic location - Filter for partial text mismatches
     */
    'cytogeneticLocation.not.contains'?: string;
    /**
     * Cytogenetic location - Filter for entries starting with the text
     */
    'cytogeneticLocation.beginsWith'?: string;
    /**
     * Cytogenetic location - Filter for entries not starting with the text
     */
    'cytogeneticLocation.not.beginsWith'?: string;
    /**
     * Cytogenetic location - Filter for entries ending with the text
     */
    'cytogeneticLocation.endsWith'?: string;
    /**
     * Cytogenetic location - Filter for entries not ending with the text
     */
    'cytogeneticLocation.not.endsWith'?: string;
    /**
     * Genome assembly version - Filter for entries without a value
     */
    'genomeAssemblyVersion.not.exists'?: boolean;
    /**
     * Genome assembly version - Filter for entries with a value
     */
    'genomeAssemblyVersion.exists'?: boolean;
    /**
     * Genome assembly version - Filter for a matching concept code
     */
    genomeAssemblyVersion?: string;
    /**
     * Genome assembly version - Filter for a mismatching concept code
     */
    'genomeAssemblyVersion.not'?: string;
    /**
     * Genome assembly version - Filter for a matching set of concept codes
     */
    'genomeAssemblyVersion.anyOf'?: Array<string>;
    /**
     * Genome assembly version - Filter for a mismmatching set of concept codes
     */
    'genomeAssemblyVersion.not.anyOf'?: Array<string>;
    /**
     * Genome assembly version - Filter for all child concepts of a given concepts code
     */
    'genomeAssemblyVersion.descendantsOf'?: string;
    /**
     * Genomic RefSeq - Filter for entries without a value
     */
    'genomicRefseq.not.exists'?: boolean;
    /**
     * Genomic RefSeq - Filter for entries with a value
     */
    'genomicRefseq.exists'?: boolean;
    /**
     * Genomic RefSeq - Filter for full text matches
     */
    genomicRefseq?: string;
    /**
     * Genomic RefSeq - Filter for full text mismatches
     */
    'genomicRefseq.not'?: string;
    /**
     * Genomic RefSeq - Filter for partial text matches
     */
    'genomicRefseq.contains'?: string;
    /**
     * Genomic RefSeq - Filter for partial text mismatches
     */
    'genomicRefseq.not.contains'?: string;
    /**
     * Genomic RefSeq - Filter for entries starting with the text
     */
    'genomicRefseq.beginsWith'?: string;
    /**
     * Genomic RefSeq - Filter for entries not starting with the text
     */
    'genomicRefseq.not.beginsWith'?: string;
    /**
     * Genomic RefSeq - Filter for entries ending with the text
     */
    'genomicRefseq.endsWith'?: string;
    /**
     * Genomic RefSeq - Filter for entries not ending with the text
     */
    'genomicRefseq.not.endsWith'?: string;
    /**
     * Transcript RefSeq - Filter for entries without a value
     */
    'transcriptRefseq.not.exists'?: boolean;
    /**
     * Transcript RefSeq - Filter for entries with a value
     */
    'transcriptRefseq.exists'?: boolean;
    /**
     * Transcript RefSeq - Filter for full text matches
     */
    transcriptRefseq?: string;
    /**
     * Transcript RefSeq - Filter for full text mismatches
     */
    'transcriptRefseq.not'?: string;
    /**
     * Transcript RefSeq - Filter for partial text matches
     */
    'transcriptRefseq.contains'?: string;
    /**
     * Transcript RefSeq - Filter for partial text mismatches
     */
    'transcriptRefseq.not.contains'?: string;
    /**
     * Transcript RefSeq - Filter for entries starting with the text
     */
    'transcriptRefseq.beginsWith'?: string;
    /**
     * Transcript RefSeq - Filter for entries not starting with the text
     */
    'transcriptRefseq.not.beginsWith'?: string;
    /**
     * Transcript RefSeq - Filter for entries ending with the text
     */
    'transcriptRefseq.endsWith'?: string;
    /**
     * Transcript RefSeq - Filter for entries not ending with the text
     */
    'transcriptRefseq.not.endsWith'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries without a value
     */
    'codingHgvs.not.exists'?: boolean;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries with a value
     */
    'codingHgvs.exists'?: boolean;
    /**
     * Coding DNA change expression (cHGVS) - Filter for full text matches
     */
    codingHgvs?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for full text mismatches
     */
    'codingHgvs.not'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for partial text matches
     */
    'codingHgvs.contains'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for partial text mismatches
     */
    'codingHgvs.not.contains'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries starting with the text
     */
    'codingHgvs.beginsWith'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries not starting with the text
     */
    'codingHgvs.not.beginsWith'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries ending with the text
     */
    'codingHgvs.endsWith'?: string;
    /**
     * Coding DNA change expression (cHGVS) - Filter for entries not ending with the text
     */
    'codingHgvs.not.endsWith'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries without a value
     */
    'proteinHgvs.not.exists'?: boolean;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries with a value
     */
    'proteinHgvs.exists'?: boolean;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for full text matches
     */
    proteinHgvs?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches
     */
    'proteinHgvs.not'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for partial text matches
     */
    'proteinHgvs.contains'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches
     */
    'proteinHgvs.not.contains'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text
     */
    'proteinHgvs.beginsWith'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text
     */
    'proteinHgvs.not.beginsWith'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text
     */
    'proteinHgvs.endsWith'?: string;
    /**
     * Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text
     */
    'proteinHgvs.not.endsWith'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for entries without a value
     */
    'genomicHgvs.not.exists'?: boolean;
    /**
     * Genomic change expression (gHGVS) - Filter for entries with a value
     */
    'genomicHgvs.exists'?: boolean;
    /**
     * Genomic change expression (gHGVS) - Filter for full text matches
     */
    genomicHgvs?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for full text mismatches
     */
    'genomicHgvs.not'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for partial text matches
     */
    'genomicHgvs.contains'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for partial text mismatches
     */
    'genomicHgvs.not.contains'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for entries starting with the text
     */
    'genomicHgvs.beginsWith'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for entries not starting with the text
     */
    'genomicHgvs.not.beginsWith'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for entries ending with the text
     */
    'genomicHgvs.endsWith'?: string;
    /**
     * Genomic change expression (gHGVS) - Filter for entries not ending with the text
     */
    'genomicHgvs.not.endsWith'?: string;
    /**
     * Coding DNA change type - Filter for entries without a value
     */
    'dnaChangeType.not.exists'?: boolean;
    /**
     * Coding DNA change type - Filter for entries with a value
     */
    'dnaChangeType.exists'?: boolean;
    /**
     * Coding DNA change type - Filter for a matching concept code
     */
    dnaChangeType?: string;
    /**
     * Coding DNA change type - Filter for a mismatching concept code
     */
    'dnaChangeType.not'?: string;
    /**
     * Coding DNA change type - Filter for a matching set of concept codes
     */
    'dnaChangeType.anyOf'?: Array<string>;
    /**
     * Coding DNA change type - Filter for a mismmatching set of concept codes
     */
    'dnaChangeType.not.anyOf'?: Array<string>;
    /**
     * Coding DNA change type - Filter for all child concepts of a given concepts code
     */
    'dnaChangeType.descendantsOf'?: string;
    /**
     * Aminoacid change type - Filter for entries without a value
     */
    'aminoacidChangeType.not.exists'?: boolean;
    /**
     * Aminoacid change type - Filter for entries with a value
     */
    'aminoacidChangeType.exists'?: boolean;
    /**
     * Aminoacid change type - Filter for a matching concept code
     */
    aminoacidChangeType?: string;
    /**
     * Aminoacid change type - Filter for a mismatching concept code
     */
    'aminoacidChangeType.not'?: string;
    /**
     * Aminoacid change type - Filter for a matching set of concept codes
     */
    'aminoacidChangeType.anyOf'?: Array<string>;
    /**
     * Aminoacid change type - Filter for a mismmatching set of concept codes
     */
    'aminoacidChangeType.not.anyOf'?: Array<string>;
    /**
     * Aminoacid change type - Filter for all child concepts of a given concepts code
     */
    'aminoacidChangeType.descendantsOf'?: string;
    /**
     * Molecular consequence - Filter for entries without a value
     */
    'molecularConsequence.not.exists'?: boolean;
    /**
     * Molecular consequence - Filter for entries with a value
     */
    'molecularConsequence.exists'?: boolean;
    /**
     * Molecular consequence - Filter for a matching concept code
     */
    molecularConsequence?: string;
    /**
     * Molecular consequence - Filter for a mismatching concept code
     */
    'molecularConsequence.not'?: string;
    /**
     * Molecular consequence - Filter for a matching set of concept codes
     */
    'molecularConsequence.anyOf'?: Array<string>;
    /**
     * Molecular consequence - Filter for a mismmatching set of concept codes
     */
    'molecularConsequence.not.anyOf'?: Array<string>;
    /**
     * Molecular consequence - Filter for all child concepts of a given concepts code
     */
    'molecularConsequence.descendantsOf'?: string;
    /**
     * Copy number - Filter for entries without a value
     */
    'copyNumber.not.exists'?: boolean;
    /**
     * Copy number - Filter for entries with a value
     */
    'copyNumber.exists'?: boolean;
    /**
     * Copy number - Filter for entries with values less than the specified value
     */
    'copyNumber.lessThan'?: number;
    /**
     * Copy number - Filter for entries with values less than or equal to the specified value
     */
    'copyNumber.lessThanOrEqual'?: number;
    /**
     * Copy number - Filter for entries with values greater than the specified value
     */
    'copyNumber.greaterThan'?: number;
    /**
     * Copy number - Filter for entries with values greater than or equal to the specified value
     */
    'copyNumber.greaterThanOrEqual'?: number;
    /**
     * Copy number - Filter for entries with values exactly equal to the specified value
     */
    'copyNumber.equal'?: number;
    /**
     * Copy number - Filter for entries with values not equal to the specified value
     */
    'copyNumber.not.equal'?: number;
    /**
     * Copy number - Filter for entries with values between two specified values (inclusive)
     */
    'copyNumber.between'?: Array<any>;
    /**
     * Copy number - Filter for entries with values between two specified values (inclusive)
     */
    'copyNumber.not.between'?: Array<any>;
    /**
     * Allele frequency - Filter for entries without a value
     */
    'alleleFrequency.not.exists'?: boolean;
    /**
     * Allele frequency - Filter for entries with a value
     */
    'alleleFrequency.exists'?: boolean;
    /**
     * Allele frequency - Filter for entries with values less than the specified value
     */
    'alleleFrequency.lessThan'?: number;
    /**
     * Allele frequency - Filter for entries with values less than or equal to the specified value
     */
    'alleleFrequency.lessThanOrEqual'?: number;
    /**
     * Allele frequency - Filter for entries with values greater than the specified value
     */
    'alleleFrequency.greaterThan'?: number;
    /**
     * Allele frequency - Filter for entries with values greater than or equal to the specified value
     */
    'alleleFrequency.greaterThanOrEqual'?: number;
    /**
     * Allele frequency - Filter for entries with values exactly equal to the specified value
     */
    'alleleFrequency.equal'?: number;
    /**
     * Allele frequency - Filter for entries with values not equal to the specified value
     */
    'alleleFrequency.not.equal'?: number;
    /**
     * Allele frequency - Filter for entries with values between two specified values (inclusive)
     */
    'alleleFrequency.between'?: Array<any>;
    /**
     * Allele frequency - Filter for entries with values between two specified values (inclusive)
     */
    'alleleFrequency.not.between'?: Array<any>;
    /**
     * Allele depth (reads) - Filter for entries without a value
     */
    'alleleDepth.not.exists'?: boolean;
    /**
     * Allele depth (reads) - Filter for entries with a value
     */
    'alleleDepth.exists'?: boolean;
    /**
     * Allele depth (reads) - Filter for entries with values less than the specified value
     */
    'alleleDepth.lessThan'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values less than or equal to the specified value
     */
    'alleleDepth.lessThanOrEqual'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values greater than the specified value
     */
    'alleleDepth.greaterThan'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values greater than or equal to the specified value
     */
    'alleleDepth.greaterThanOrEqual'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values exactly equal to the specified value
     */
    'alleleDepth.equal'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values not equal to the specified value
     */
    'alleleDepth.not.equal'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values between two specified values (inclusive)
     */
    'alleleDepth.between'?: Array<any>;
    /**
     * Allele depth (reads) - Filter for entries with values between two specified values (inclusive)
     */
    'alleleDepth.not.between'?: Array<any>;
    /**
     * Zygosity - Filter for entries without a value
     */
    'zygosity.not.exists'?: boolean;
    /**
     * Zygosity - Filter for entries with a value
     */
    'zygosity.exists'?: boolean;
    /**
     * Zygosity - Filter for a matching concept code
     */
    zygosity?: string;
    /**
     * Zygosity - Filter for a mismatching concept code
     */
    'zygosity.not'?: string;
    /**
     * Zygosity - Filter for a matching set of concept codes
     */
    'zygosity.anyOf'?: Array<string>;
    /**
     * Zygosity - Filter for a mismmatching set of concept codes
     */
    'zygosity.not.anyOf'?: Array<string>;
    /**
     * Zygosity - Filter for all child concepts of a given concepts code
     */
    'zygosity.descendantsOf'?: string;
    /**
     * Inheritance - Filter for entries without a value
     */
    'inheritance.not.exists'?: boolean;
    /**
     * Inheritance - Filter for entries with a value
     */
    'inheritance.exists'?: boolean;
    /**
     * Inheritance - Filter for a matching concept code
     */
    inheritance?: string;
    /**
     * Inheritance - Filter for a mismatching concept code
     */
    'inheritance.not'?: string;
    /**
     * Inheritance - Filter for a matching set of concept codes
     */
    'inheritance.anyOf'?: Array<string>;
    /**
     * Inheritance - Filter for a mismmatching set of concept codes
     */
    'inheritance.not.anyOf'?: Array<string>;
    /**
     * Inheritance - Filter for all child concepts of a given concepts code
     */
    'inheritance.descendantsOf'?: string;
    /**
     * Coordinate system - Filter for entries without a value
     */
    'coordinateSystem.not.exists'?: boolean;
    /**
     * Coordinate system - Filter for entries with a value
     */
    'coordinateSystem.exists'?: boolean;
    /**
     * Coordinate system - Filter for a matching concept code
     */
    coordinateSystem?: string;
    /**
     * Coordinate system - Filter for a mismatching concept code
     */
    'coordinateSystem.not'?: string;
    /**
     * Coordinate system - Filter for a matching set of concept codes
     */
    'coordinateSystem.anyOf'?: Array<string>;
    /**
     * Coordinate system - Filter for a mismmatching set of concept codes
     */
    'coordinateSystem.not.anyOf'?: Array<string>;
    /**
     * Coordinate system - Filter for all child concepts of a given concepts code
     */
    'coordinateSystem.descendantsOf'?: string;
    /**
     * Exact genomic coordinates - Filter for entries without a value
     */
    'exactGenomicCoordinates.not.exists'?: boolean;
    /**
     * Exact genomic coordinates - Filter for entries with a value
     */
    'exactGenomicCoordinates.exists'?: boolean;
    /**
     * Inner genomic coordinates - Filter for entries without a value
     */
    'innerGenomicCoordinates.not.exists'?: boolean;
    /**
     * Inner genomic coordinates - Filter for entries with a value
     */
    'innerGenomicCoordinates.exists'?: boolean;
    /**
     * Outer genomic coordinates - Filter for entries without a value
     */
    'outerGenomicCoordinates.not.exists'?: boolean;
    /**
     * Outer genomic coordinates - Filter for entries with a value
     */
    'outerGenomicCoordinates.exists'?: boolean;
    /**
     * ClinVar accession number - Filter for entries without a value
     */
    'clinvar.not.exists'?: boolean;
    /**
     * ClinVar accession number - Filter for entries with a value
     */
    'clinvar.exists'?: boolean;
    /**
     * ClinVar accession number - Filter for full text matches
     */
    clinvar?: string;
    /**
     * ClinVar accession number - Filter for full text mismatches
     */
    'clinvar.not'?: string;
    /**
     * ClinVar accession number - Filter for partial text matches
     */
    'clinvar.contains'?: string;
    /**
     * ClinVar accession number - Filter for partial text mismatches
     */
    'clinvar.not.contains'?: string;
    /**
     * ClinVar accession number - Filter for entries starting with the text
     */
    'clinvar.beginsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries not starting with the text
     */
    'clinvar.not.beginsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries ending with the text
     */
    'clinvar.endsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries not ending with the text
     */
    'clinvar.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'genes.code'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'genes.code.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'genes.code.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'genes.code.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'genes.code.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'genes.code.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'genes.code.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'genes.code.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'genes.system'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'genes.system.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'genes.system.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'genes.system.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'genes.system.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'genes.system.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'genes.system.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'genes.system.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'genes.display.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'genes.display.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'genes.display'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'genes.display.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'genes.display.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'genes.display.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'genes.display.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'genes.display.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'genes.display.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'genes.display.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'genes.version.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'genes.version.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'genes.version'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'genes.version.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'genes.version.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'genes.version.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'genes.version.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'genes.version.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'genes.version.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'genes.version.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'genes.synonyms.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'genes.synonyms.exists'?: boolean;
    /**
     * None - Filter for entries without a value
     */
    'genes.properties.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'genes.properties.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'chromosomes.code'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'chromosomes.code.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'chromosomes.code.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'chromosomes.code.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'chromosomes.code.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'chromosomes.code.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'chromosomes.code.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'chromosomes.code.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'chromosomes.system'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'chromosomes.system.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'chromosomes.system.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'chromosomes.system.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'chromosomes.system.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'chromosomes.system.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'chromosomes.system.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'chromosomes.system.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'chromosomes.display.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'chromosomes.display.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'chromosomes.display'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'chromosomes.display.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'chromosomes.display.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'chromosomes.display.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'chromosomes.display.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'chromosomes.display.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'chromosomes.display.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'chromosomes.display.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'chromosomes.version.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'chromosomes.version.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'chromosomes.version'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'chromosomes.version.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'chromosomes.version.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'chromosomes.version.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'chromosomes.version.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'chromosomes.version.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'chromosomes.version.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'chromosomes.version.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'chromosomes.synonyms.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'chromosomes.synonyms.exists'?: boolean;
    /**
     * None - Filter for entries without a value
     */
    'chromosomes.properties.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'chromosomes.properties.exists'?: boolean;
}
export namespace GenomicVariantFilters {
    export type AssessmentEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentEnum = {
        Present: 'present' as AssessmentEnum,
        Absent: 'absent' as AssessmentEnum,
        NoCall: 'no-call' as AssessmentEnum,
        Indeterminate: 'indeterminate' as AssessmentEnum
    };
    export type AssessmentNotEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentNotEnum = {
        Present: 'present' as AssessmentNotEnum,
        Absent: 'absent' as AssessmentNotEnum,
        NoCall: 'no-call' as AssessmentNotEnum,
        Indeterminate: 'indeterminate' as AssessmentNotEnum
    };
    export type AssessmentAnyOfEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentAnyOfEnum = {
        Present: 'present' as AssessmentAnyOfEnum,
        Absent: 'absent' as AssessmentAnyOfEnum,
        NoCall: 'no-call' as AssessmentAnyOfEnum,
        Indeterminate: 'indeterminate' as AssessmentAnyOfEnum
    };
    export type ConfidenceEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceEnum = {
        Low: 'low' as ConfidenceEnum,
        High: 'high' as ConfidenceEnum,
        Indeterminate: 'indeterminate' as ConfidenceEnum
    };
    export type ConfidenceNotEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceNotEnum = {
        Low: 'low' as ConfidenceNotEnum,
        High: 'high' as ConfidenceNotEnum,
        Indeterminate: 'indeterminate' as ConfidenceNotEnum
    };
    export type ConfidenceAnyOfEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceAnyOfEnum = {
        Low: 'low' as ConfidenceAnyOfEnum,
        High: 'high' as ConfidenceAnyOfEnum,
        Indeterminate: 'indeterminate' as ConfidenceAnyOfEnum
    };
    export type ClinicalRelevanceEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceEnum,
        Benign: 'benign' as ClinicalRelevanceEnum
    };
    export type ClinicalRelevanceNotEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceNotEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceNotEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceNotEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceNotEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceNotEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceNotEnum,
        Benign: 'benign' as ClinicalRelevanceNotEnum
    };
    export type ClinicalRelevanceAnyOfEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceAnyOfEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceAnyOfEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceAnyOfEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceAnyOfEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceAnyOfEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceAnyOfEnum,
        Benign: 'benign' as ClinicalRelevanceAnyOfEnum
    };
}


