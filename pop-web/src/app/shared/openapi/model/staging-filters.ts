/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface StagingFilters { 
    stagingDomain?: StagingFilters.StagingDomainEnum;
    'stagingDomain.not'?: StagingFilters.StagingDomainNotEnum;
    /**
     * None - (\'Filter for excluding a subset of value choices\',)
     */
    'stagingDomain.anyOf'?: Array<StagingFilters.StagingDomainAnyOfEnum>;
    /**
     * None - Filter for a matching concept code
     */
    stage?: string;
    /**
     * None - Filter for a mismatching concept code
     */
    'stage.not'?: string;
    /**
     * None - Filter for a matching set of concept codes
     */
    'stage.anyOf'?: Array<string>;
    /**
     * None - Filter for a mismmatching set of concept codes
     */
    'stage.not.anyOf'?: Array<string>;
    /**
     * None - Filter for all child concepts of a given concepts code
     */
    'stage.descendantsOf'?: string;
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Staging date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Staging date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Staging date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Staging date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Staging date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Staging date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Staging date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Staging date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Staged neoplastic entities - Filter for reference matches
     */
    stagedEntitiesIds?: string;
    /**
     * Staged neoplastic entities - Filter for reference mismatches
     */
    'stagedEntitiesIds.not'?: string;
}
export namespace StagingFilters {
    export type StagingDomainEnum = 'tnm' | 'figo' | 'binet' | 'rai' | 'breslow' | 'clark' | 'iss' | 'riss' | 'inss' | 'inrgss' | 'gleason' | 'rhabdomyosarcoma' | 'wilms' | 'lymphoma';
    export const StagingDomainEnum = {
        Tnm: 'tnm' as StagingDomainEnum,
        Figo: 'figo' as StagingDomainEnum,
        Binet: 'binet' as StagingDomainEnum,
        Rai: 'rai' as StagingDomainEnum,
        Breslow: 'breslow' as StagingDomainEnum,
        Clark: 'clark' as StagingDomainEnum,
        Iss: 'iss' as StagingDomainEnum,
        Riss: 'riss' as StagingDomainEnum,
        Inss: 'inss' as StagingDomainEnum,
        Inrgss: 'inrgss' as StagingDomainEnum,
        Gleason: 'gleason' as StagingDomainEnum,
        Rhabdomyosarcoma: 'rhabdomyosarcoma' as StagingDomainEnum,
        Wilms: 'wilms' as StagingDomainEnum,
        Lymphoma: 'lymphoma' as StagingDomainEnum
    };
    export type StagingDomainNotEnum = 'tnm' | 'figo' | 'binet' | 'rai' | 'breslow' | 'clark' | 'iss' | 'riss' | 'inss' | 'inrgss' | 'gleason' | 'rhabdomyosarcoma' | 'wilms' | 'lymphoma';
    export const StagingDomainNotEnum = {
        Tnm: 'tnm' as StagingDomainNotEnum,
        Figo: 'figo' as StagingDomainNotEnum,
        Binet: 'binet' as StagingDomainNotEnum,
        Rai: 'rai' as StagingDomainNotEnum,
        Breslow: 'breslow' as StagingDomainNotEnum,
        Clark: 'clark' as StagingDomainNotEnum,
        Iss: 'iss' as StagingDomainNotEnum,
        Riss: 'riss' as StagingDomainNotEnum,
        Inss: 'inss' as StagingDomainNotEnum,
        Inrgss: 'inrgss' as StagingDomainNotEnum,
        Gleason: 'gleason' as StagingDomainNotEnum,
        Rhabdomyosarcoma: 'rhabdomyosarcoma' as StagingDomainNotEnum,
        Wilms: 'wilms' as StagingDomainNotEnum,
        Lymphoma: 'lymphoma' as StagingDomainNotEnum
    };
    export type StagingDomainAnyOfEnum = 'tnm' | 'figo' | 'binet' | 'rai' | 'breslow' | 'clark' | 'iss' | 'riss' | 'inss' | 'inrgss' | 'gleason' | 'rhabdomyosarcoma' | 'wilms' | 'lymphoma';
    export const StagingDomainAnyOfEnum = {
        Tnm: 'tnm' as StagingDomainAnyOfEnum,
        Figo: 'figo' as StagingDomainAnyOfEnum,
        Binet: 'binet' as StagingDomainAnyOfEnum,
        Rai: 'rai' as StagingDomainAnyOfEnum,
        Breslow: 'breslow' as StagingDomainAnyOfEnum,
        Clark: 'clark' as StagingDomainAnyOfEnum,
        Iss: 'iss' as StagingDomainAnyOfEnum,
        Riss: 'riss' as StagingDomainAnyOfEnum,
        Inss: 'inss' as StagingDomainAnyOfEnum,
        Inrgss: 'inrgss' as StagingDomainAnyOfEnum,
        Gleason: 'gleason' as StagingDomainAnyOfEnum,
        Rhabdomyosarcoma: 'rhabdomyosarcoma' as StagingDomainAnyOfEnum,
        Wilms: 'wilms' as StagingDomainAnyOfEnum,
        Lymphoma: 'lymphoma' as StagingDomainAnyOfEnum
    };
}


