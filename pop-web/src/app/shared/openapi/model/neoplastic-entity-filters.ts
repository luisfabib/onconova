/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface NeoplasticEntityFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Created At - Filter for entries with dates before the specified value
     */
    'createdAt.before'?: string;
    /**
     * Created At - Filter for entries with dates after the specified value
     */
    'createdAt.after'?: string;
    /**
     * Created At - Filter for entries with dates on or before the specified value
     */
    'createdAt.onOrBefore'?: string;
    /**
     * Created At - Filter for entries with dates on or after the specified value
     */
    'createdAt.onOrAfter'?: string;
    /**
     * Created At - Filter for entries with dates exactly matching the specified value
     */
    'createdAt.on'?: string;
    /**
     * Created At - Filter for entries with dates not matching the specified value
     */
    'createdAt.not.on'?: string;
    /**
     * Created At - Filter for entries with dates between two specified values (inclusive)
     */
    'createdAt.between'?: Array<any>;
    /**
     * Created At - Filter for entries with dates not between two specified values (inclusive)
     */
    'createdAt.not.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates before the specified value
     */
    'updatedAt.before'?: string;
    /**
     * Updated At - Filter for entries with dates after the specified value
     */
    'updatedAt.after'?: string;
    /**
     * Updated At - Filter for entries with dates on or before the specified value
     */
    'updatedAt.onOrBefore'?: string;
    /**
     * Updated At - Filter for entries with dates on or after the specified value
     */
    'updatedAt.onOrAfter'?: string;
    /**
     * Updated At - Filter for entries with dates exactly matching the specified value
     */
    'updatedAt.on'?: string;
    /**
     * Updated At - Filter for entries with dates not matching the specified value
     */
    'updatedAt.not.on'?: string;
    /**
     * Updated At - Filter for entries with dates between two specified values (inclusive)
     */
    'updatedAt.between'?: Array<any>;
    /**
     * Updated At - Filter for entries with dates not between two specified values (inclusive)
     */
    'updatedAt.not.between'?: Array<any>;
    /**
     * Created By - Filter for entries without a value
     */
    'createdBy.not.exists'?: boolean;
    /**
     * Created By - Filter for entries with a value
     */
    'createdBy.exists'?: boolean;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    relationship?: NeoplasticEntityFilters.RelationshipEnum;
    'relationship.not'?: NeoplasticEntityFilters.RelationshipNotEnum;
    /**
     * Neoplastic relationship - (\'Filter for excluding a subset of value choices\',)
     */
    'relationship.anyOf'?: Array<NeoplasticEntityFilters.RelationshipAnyOfEnum>;
    /**
     * Related primary neoplasm - Filter for entries without a value
     */
    'relatedPrimaryId.not.exists'?: boolean;
    /**
     * Related primary neoplasm - Filter for entries with a value
     */
    'relatedPrimaryId.exists'?: boolean;
    /**
     * Related primary neoplasm - Filter for reference matches
     */
    relatedPrimaryId?: string;
    /**
     * Related primary neoplasm - Filter for reference mismatches
     */
    'relatedPrimaryId.not'?: string;
    /**
     * Related primary neoplasm - Filter for partial text matches
     */
    'relatedPrimaryId.contains'?: string;
    /**
     * Related primary neoplasm - Filter for partial text mismatches
     */
    'relatedPrimaryId.not.contains'?: string;
    /**
     * Related primary neoplasm - Filter for entries starting with the text
     */
    'relatedPrimaryId.beginsWith'?: string;
    /**
     * Related primary neoplasm - Filter for entries not starting with the text
     */
    'relatedPrimaryId.not.beginsWith'?: string;
    /**
     * Related primary neoplasm - Filter for entries ending with the text
     */
    'relatedPrimaryId.endsWith'?: string;
    /**
     * Related primary neoplasm - Filter for entries not ending with the text
     */
    'relatedPrimaryId.not.endsWith'?: string;
    /**
     * Assertion date - Filter for entries with dates before the specified value
     */
    'assertionDate.before'?: string;
    /**
     * Assertion date - Filter for entries with dates after the specified value
     */
    'assertionDate.after'?: string;
    /**
     * Assertion date - Filter for entries with dates on or before the specified value
     */
    'assertionDate.onOrBefore'?: string;
    /**
     * Assertion date - Filter for entries with dates on or after the specified value
     */
    'assertionDate.onOrAfter'?: string;
    /**
     * Assertion date - Filter for entries with dates exactly matching the specified value
     */
    'assertionDate.on'?: string;
    /**
     * Assertion date - Filter for entries with dates not matching the specified value
     */
    'assertionDate.not.on'?: string;
    /**
     * Assertion date - Filter for entries with dates between two specified values (inclusive)
     */
    'assertionDate.between'?: Array<any>;
    /**
     * Assertion date - Filter for entries with dates not between two specified values (inclusive)
     */
    'assertionDate.not.between'?: Array<any>;
    /**
     * Topography - Filter for a matching concept code
     */
    topography?: string;
    /**
     * Topography - Filter for a mismatching concept code
     */
    'topography.not'?: string;
    /**
     * Topography - Filter for a matching set of concept codes
     */
    'topography.anyOf'?: Array<string>;
    /**
     * Topography - Filter for a mismmatching set of concept codes
     */
    'topography.not.anyOf'?: Array<string>;
    /**
     * Topography - Filter for all child concepts of a given concepts code
     */
    'topography.descendantsOf'?: string;
    /**
     * Morphology - Filter for a matching concept code
     */
    morphology?: string;
    /**
     * Morphology - Filter for a mismatching concept code
     */
    'morphology.not'?: string;
    /**
     * Morphology - Filter for a matching set of concept codes
     */
    'morphology.anyOf'?: Array<string>;
    /**
     * Morphology - Filter for a mismmatching set of concept codes
     */
    'morphology.not.anyOf'?: Array<string>;
    /**
     * Morphology - Filter for all child concepts of a given concepts code
     */
    'morphology.descendantsOf'?: string;
    /**
     * Differentiation - Filter for entries without a value
     */
    'differentitation.not.exists'?: boolean;
    /**
     * Differentiation - Filter for entries with a value
     */
    'differentitation.exists'?: boolean;
    /**
     * Differentiation - Filter for a matching concept code
     */
    differentitation?: string;
    /**
     * Differentiation - Filter for a mismatching concept code
     */
    'differentitation.not'?: string;
    /**
     * Differentiation - Filter for a matching set of concept codes
     */
    'differentitation.anyOf'?: Array<string>;
    /**
     * Differentiation - Filter for a mismmatching set of concept codes
     */
    'differentitation.not.anyOf'?: Array<string>;
    /**
     * Differentiation - Filter for all child concepts of a given concepts code
     */
    'differentitation.descendantsOf'?: string;
    /**
     * Laterality - Filter for entries without a value
     */
    'laterality.not.exists'?: boolean;
    /**
     * Laterality - Filter for entries with a value
     */
    'laterality.exists'?: boolean;
    /**
     * Laterality - Filter for a matching concept code
     */
    laterality?: string;
    /**
     * Laterality - Filter for a mismatching concept code
     */
    'laterality.not'?: string;
    /**
     * Laterality - Filter for a matching set of concept codes
     */
    'laterality.anyOf'?: Array<string>;
    /**
     * Laterality - Filter for a mismmatching set of concept codes
     */
    'laterality.not.anyOf'?: Array<string>;
    /**
     * Laterality - Filter for all child concepts of a given concepts code
     */
    'laterality.descendantsOf'?: string;
    /**
     * None - Filter for entries with values less than the specified value
     */
    'updatedBys.id.lessThan'?: number;
    /**
     * None - Filter for entries with values less than or equal to the specified value
     */
    'updatedBys.id.lessThanOrEqual'?: number;
    /**
     * None - Filter for entries with values greater than the specified value
     */
    'updatedBys.id.greaterThan'?: number;
    /**
     * None - Filter for entries with values greater than or equal to the specified value
     */
    'updatedBys.id.greaterThanOrEqual'?: number;
    /**
     * None - Filter for entries with values exactly equal to the specified value
     */
    'updatedBys.id.equal'?: number;
    /**
     * None - Filter for entries with values not equal to the specified value
     */
    'updatedBys.id.not.equal'?: number;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.between'?: Array<any>;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'updatedBys.id.not.between'?: Array<any>;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.username'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.username.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.username.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.username.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.username.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.username.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.username.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.username.not.endsWith'?: string;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.email'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.email.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.email.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.email.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.email.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.email.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.email.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.email.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.firstName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.firstName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.firstName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.firstName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.firstName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.firstName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.firstName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.firstName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.firstName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.firstName.not.endsWith'?: string;
    /**
     * None - Filter for entries without a value
     */
    'updatedBys.lastName.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'updatedBys.lastName.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'updatedBys.lastName'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'updatedBys.lastName.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'updatedBys.lastName.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'updatedBys.lastName.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'updatedBys.lastName.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'updatedBys.lastName.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'updatedBys.lastName.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'updatedBys.lastName.not.endsWith'?: string;
}
export namespace NeoplasticEntityFilters {
    export type RelationshipEnum = 'primary' | 'metastatic' | 'local_recurrence' | 'regional_recurrence';
    export const RelationshipEnum = {
        Primary: 'primary' as RelationshipEnum,
        Metastatic: 'metastatic' as RelationshipEnum,
        LocalRecurrence: 'local_recurrence' as RelationshipEnum,
        RegionalRecurrence: 'regional_recurrence' as RelationshipEnum
    };
    export type RelationshipNotEnum = 'primary' | 'metastatic' | 'local_recurrence' | 'regional_recurrence';
    export const RelationshipNotEnum = {
        Primary: 'primary' as RelationshipNotEnum,
        Metastatic: 'metastatic' as RelationshipNotEnum,
        LocalRecurrence: 'local_recurrence' as RelationshipNotEnum,
        RegionalRecurrence: 'regional_recurrence' as RelationshipNotEnum
    };
    export type RelationshipAnyOfEnum = 'primary' | 'metastatic' | 'local_recurrence' | 'regional_recurrence';
    export const RelationshipAnyOfEnum = {
        Primary: 'primary' as RelationshipAnyOfEnum,
        Metastatic: 'metastatic' as RelationshipAnyOfEnum,
        LocalRecurrence: 'local_recurrence' as RelationshipAnyOfEnum,
        RegionalRecurrence: 'regional_recurrence' as RelationshipAnyOfEnum
    };
}


