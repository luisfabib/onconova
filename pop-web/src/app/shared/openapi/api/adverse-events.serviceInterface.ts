/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdverseEventCreateSchema } from '../model/models';
import { AdverseEventMitigationCreateSchema } from '../model/models';
import { AdverseEventMitigationSchema } from '../model/models';
import { AdverseEventSchema } from '../model/models';
import { AdverseEventSuspectedCauseCreateSchema } from '../model/models';
import { AdverseEventSuspectedCauseSchema } from '../model/models';
import { PaginatedAdverseEventSchema } from '../model/models';
import { ModifiedResourceSchema } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface AdverseEventsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Adverse Event
     * 
     * @param adverseEventCreateSchema 
     */
    createAdverseEvent(adverseEventCreateSchema: AdverseEventCreateSchema, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

    /**
     * Create Adverse Event Mitigation
     * 
     * @param adverseEventId 
     * @param adverseEventMitigationCreateSchema 
     */
    createAdverseEventMitigation(adverseEventId: string, adverseEventMitigationCreateSchema: AdverseEventMitigationCreateSchema, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

    /**
     * Create Adverse Event Suspected Cause
     * 
     * @param adverseEventId 
     * @param adverseEventSuspectedCauseCreateSchema 
     */
    createAdverseEventSuspectedCause(adverseEventId: string, adverseEventSuspectedCauseCreateSchema: AdverseEventSuspectedCauseCreateSchema, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

    /**
     * Delete Adverse Event
     * 
     * @param adverseEventId 
     */
    deleteAdverseEventById(adverseEventId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Adverse Event Mitigation
     * 
     * @param adverseEventId 
     * @param mitigationId 
     */
    deleteAdverseEventMitigation(adverseEventId: string, mitigationId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Adverse Event Suspected Cause
     * 
     * @param adverseEventId 
     * @param causeId 
     */
    deleteAdverseEventSuspectedCause(adverseEventId: string, causeId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get Adverse Event By Id
     * 
     * @param adverseEventId 
     */
    getAdverseEventById(adverseEventId: string, extraHttpRequestParams?: any): Observable<AdverseEventSchema>;

    /**
     * Get Adverse Event Mitigation By Id
     * 
     * @param adverseEventId 
     * @param mitigationId 
     */
    getAdverseEventMitigationById(adverseEventId: string, mitigationId: string, extraHttpRequestParams?: any): Observable<AdverseEventMitigationSchema>;

    /**
     * Get Adverse Event Mitigations Matching The Query
     * 
     * @param adverseEventId 
     */
    getAdverseEventMitigations(adverseEventId: string, extraHttpRequestParams?: any): Observable<Array<AdverseEventMitigationSchema>>;

    /**
     * Get Adverse Event Suspected Cause By Id
     * 
     * @param adverseEventId 
     * @param causeId 
     */
    getAdverseEventSuspectedCauseById(adverseEventId: string, causeId: string, extraHttpRequestParams?: any): Observable<AdverseEventSuspectedCauseSchema>;

    /**
     * Get Adverse Event Suspected Causes Matching The Query
     * 
     * @param adverseEventId 
     */
    getAdverseEventSuspectedCauses(adverseEventId: string, extraHttpRequestParams?: any): Observable<Array<AdverseEventSuspectedCauseSchema>>;

    /**
     * Get All Adverse Events Matching The Query
     * 
     * @param caseId 
     * @param limit 
     * @param offset 
     */
    getAdverseEvents(caseId?: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<PaginatedAdverseEventSchema>;

    /**
     * Update Adverse Event
     * 
     * @param adverseEventId 
     * @param adverseEventCreateSchema 
     */
    updateAdverseEvent(adverseEventId: string, adverseEventCreateSchema: AdverseEventCreateSchema, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update Adverse Event Mitigation
     * 
     * @param adverseEventId 
     * @param mitigationId 
     * @param adverseEventMitigationCreateSchema 
     */
    updateAdverseEventMitigation(adverseEventId: string, mitigationId: string, adverseEventMitigationCreateSchema: AdverseEventMitigationCreateSchema, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

    /**
     * Update Adverse Event Suspected Cause
     * 
     * @param adverseEventId 
     * @param causeId 
     * @param adverseEventSuspectedCauseCreateSchema 
     */
    updateAdverseEventSuspectedCause(adverseEventId: string, causeId: string, adverseEventSuspectedCauseCreateSchema: AdverseEventSuspectedCauseCreateSchema, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

}
