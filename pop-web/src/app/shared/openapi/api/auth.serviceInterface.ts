/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ModifiedResource } from '../model/models';
import { PaginatedUser } from '../model/models';
import { RefreshedTokenPair } from '../model/models';
import { TokenPair } from '../model/models';
import { TokenRefresh } from '../model/models';
import { User } from '../model/models';
import { UserCreate } from '../model/models';
import { UserCredentials } from '../model/models';
import { UserPasswordReset } from '../model/models';
import { UserProfileSchema } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateUserRequestParams {
    userCreate: UserCreate;
}

export interface GetTokenPairRequestParams {
    userCredentials: UserCredentials;
}

export interface GetUserByIdRequestParams {
    userId: string;
}

export interface GetUsersRequestParams {
    role?: string;
    roleNot?: string;
    roleAnyOf?: Array<'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator'>;
    canViewCases?: boolean;
    canViewProjects?: boolean;
    canViewCohorts?: boolean;
    canViewUsers?: boolean;
    canViewDatasets?: boolean;
    canImportData?: boolean;
    canManageCases?: boolean;
    canManageCohorts?: boolean;
    canManageDatasets?: boolean;
    canAnalyzeData?: boolean;
    canExportData?: boolean;
    canManageProjects?: boolean;
    canAccessSensitiveData?: boolean;
    canAuditLogs?: boolean;
    canManageUsers?: boolean;
    isSystemAdmin?: boolean;
    lastLoginNotExists?: boolean;
    lastLoginExists?: boolean;
    lastLoginBefore?: string;
    lastLoginAfter?: string;
    lastLoginOnOrBefore?: string;
    lastLoginOnOrAfter?: string;
    lastLoginOn?: string;
    lastLoginNotOn?: string;
    lastLoginBetween?: Array<any>;
    lastLoginNotBetween?: Array<any>;
    username?: string;
    usernameNot?: string;
    usernameContains?: string;
    usernameNotContains?: string;
    usernameBeginsWith?: string;
    usernameNotBeginsWith?: string;
    usernameEndsWith?: string;
    usernameNotEndsWith?: string;
    firstNameNotExists?: boolean;
    firstNameExists?: boolean;
    firstName?: string;
    firstNameNot?: string;
    firstNameContains?: string;
    firstNameNotContains?: string;
    firstNameBeginsWith?: string;
    firstNameNotBeginsWith?: string;
    firstNameEndsWith?: string;
    firstNameNotEndsWith?: string;
    lastNameNotExists?: boolean;
    lastNameExists?: boolean;
    lastName?: string;
    lastNameNot?: string;
    lastNameContains?: string;
    lastNameNotContains?: string;
    lastNameBeginsWith?: string;
    lastNameNotBeginsWith?: string;
    lastNameEndsWith?: string;
    lastNameNotEndsWith?: string;
    emailNotExists?: boolean;
    emailExists?: boolean;
    email?: string;
    emailNot?: string;
    emailContains?: string;
    emailNotContains?: string;
    emailBeginsWith?: string;
    emailNotBeginsWith?: string;
    emailEndsWith?: string;
    emailNotEndsWith?: string;
    isActive?: boolean;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    titleNotExists?: boolean;
    titleExists?: boolean;
    title?: string;
    titleNot?: string;
    titleContains?: string;
    titleNotContains?: string;
    titleBeginsWith?: string;
    titleNotBeginsWith?: string;
    titleEndsWith?: string;
    titleNotEndsWith?: string;
    organizationNotExists?: boolean;
    organizationExists?: boolean;
    organization?: string;
    organizationNot?: string;
    organizationContains?: string;
    organizationNotContains?: string;
    organizationBeginsWith?: string;
    organizationNotBeginsWith?: string;
    organizationEndsWith?: string;
    organizationNotEndsWith?: string;
    departmentNotExists?: boolean;
    departmentExists?: boolean;
    department?: string;
    departmentNot?: string;
    departmentContains?: string;
    departmentNotContains?: string;
    departmentBeginsWith?: string;
    departmentNotBeginsWith?: string;
    departmentEndsWith?: string;
    departmentNotEndsWith?: string;
    accessLevelLessThan?: number;
    accessLevelLessThanOrEqual?: number;
    accessLevelGreaterThan?: number;
    accessLevelGreaterThanOrEqual?: number;
    accessLevelEqual?: number;
    accessLevelNotEqual?: number;
    accessLevelBetween?: Array<any>;
    accessLevelNotBetween?: Array<any>;
    limit?: number;
    offset?: number;
}

export interface RefreshTokenPairRequestParams {
    tokenRefresh: TokenRefresh;
}

export interface ResetUserPasswordRequestParams {
    userId: string;
    password: string;
}

export interface UpdateUserRequestParams {
    userId: string;
    userCreate: UserCreate;
}

export interface UpdateUserPasswordRequestParams {
    userId: string;
    userPasswordReset: UserPasswordReset;
}

export interface UpdateUserProfileRequestParams {
    userId: string;
    userProfileSchema: UserProfileSchema;
}


export interface AuthServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create User
     * 
* @param requestParameters
     */
    createUser(requestParameters: CreateUserRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Obtain Token Pair
     * 
* @param requestParameters
     */
    getTokenPair(requestParameters: GetTokenPairRequestParams, extraHttpRequestParams?: any): Observable<TokenPair>;

    /**
     * Get User By Id
     * 
* @param requestParameters
     */
    getUserById(requestParameters: GetUserByIdRequestParams, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Get All Users Matching The Query
     * 
* @param requestParameters
     */
    getUsers(requestParameters: GetUsersRequestParams, extraHttpRequestParams?: any): Observable<PaginatedUser>;

    /**
     * Refresh Token Pair
     * 
* @param requestParameters
     */
    refreshTokenPair(requestParameters: RefreshTokenPairRequestParams, extraHttpRequestParams?: any): Observable<RefreshedTokenPair>;

    /**
     * Reset User Password
     * 
* @param requestParameters
     */
    resetUserPassword(requestParameters: ResetUserPasswordRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update User
     * 
* @param requestParameters
     */
    updateUser(requestParameters: UpdateUserRequestParams, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update User Password
     * 
* @param requestParameters
     */
    updateUserPassword(requestParameters: UpdateUserPasswordRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update User Profile
     * 
* @param requestParameters
     */
    updateUserProfile(requestParameters: UpdateUserProfileRequestParams, extraHttpRequestParams?: any): Observable<User>;

}
