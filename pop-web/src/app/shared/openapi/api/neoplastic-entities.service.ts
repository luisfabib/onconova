/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { NeoplasticEntity } from '../model/neoplastic-entity';
// @ts-ignore
import { NeoplasticEntityCreate } from '../model/neoplastic-entity-create';
// @ts-ignore
import { PaginatedNeoplasticEntity } from '../model/paginated-neoplastic-entity';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    NeoplasticEntitiesServiceInterface,
    CreateNeoplasticEntityRequestParams,
    DeleteNeoplasticEntityByIdRequestParams,
    GetNeoplasticEntitiesRequestParams,
    GetNeoplasticEntityByIdRequestParams,
    UpdateNeoplasticEntityByIdRequestParams
} from './neoplastic-entities.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class NeoplasticEntitiesService implements NeoplasticEntitiesServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Neoplastic Entity
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNeoplasticEntity(requestParameters: CreateNeoplasticEntityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createNeoplasticEntity(requestParameters: CreateNeoplasticEntityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createNeoplasticEntity(requestParameters: CreateNeoplasticEntityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createNeoplasticEntity(requestParameters: CreateNeoplasticEntityRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const neoplasticEntityCreate = requestParameters?.neoplasticEntityCreate;
        if (neoplasticEntityCreate === null || neoplasticEntityCreate === undefined) {
            throw new Error('Required parameter neoplasticEntityCreate was null or undefined when calling createNeoplasticEntity.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/neoplastic-entities`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: neoplasticEntityCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Neoplastic Entity
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteNeoplasticEntityById(requestParameters: DeleteNeoplasticEntityByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteNeoplasticEntityById(requestParameters: DeleteNeoplasticEntityByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteNeoplasticEntityById(requestParameters: DeleteNeoplasticEntityByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteNeoplasticEntityById(requestParameters: DeleteNeoplasticEntityByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const entityId = requestParameters?.entityId;
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling deleteNeoplasticEntityById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/neoplastic-entities/${this.configuration.encodeParam({name: "entityId", value: entityId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Neoplastic Entities Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNeoplasticEntities(requestParameters?: GetNeoplasticEntitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedNeoplasticEntity>;
    public getNeoplasticEntities(requestParameters?: GetNeoplasticEntitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedNeoplasticEntity>>;
    public getNeoplasticEntities(requestParameters?: GetNeoplasticEntitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedNeoplasticEntity>>;
    public getNeoplasticEntities(requestParameters?: GetNeoplasticEntitiesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const relationship = requestParameters?.relationship;
        const relationshipNot = requestParameters?.relationshipNot;
        const relationshipAnyOf = requestParameters?.relationshipAnyOf;
        const relatedPrimaryIdNotExists = requestParameters?.relatedPrimaryIdNotExists;
        const relatedPrimaryIdExists = requestParameters?.relatedPrimaryIdExists;
        const relatedPrimaryId = requestParameters?.relatedPrimaryId;
        const relatedPrimaryIdNot = requestParameters?.relatedPrimaryIdNot;
        const relatedPrimaryIdContains = requestParameters?.relatedPrimaryIdContains;
        const relatedPrimaryIdNotContains = requestParameters?.relatedPrimaryIdNotContains;
        const relatedPrimaryIdBeginsWith = requestParameters?.relatedPrimaryIdBeginsWith;
        const relatedPrimaryIdNotBeginsWith = requestParameters?.relatedPrimaryIdNotBeginsWith;
        const relatedPrimaryIdEndsWith = requestParameters?.relatedPrimaryIdEndsWith;
        const relatedPrimaryIdNotEndsWith = requestParameters?.relatedPrimaryIdNotEndsWith;
        const assertionDateBefore = requestParameters?.assertionDateBefore;
        const assertionDateAfter = requestParameters?.assertionDateAfter;
        const assertionDateOnOrBefore = requestParameters?.assertionDateOnOrBefore;
        const assertionDateOnOrAfter = requestParameters?.assertionDateOnOrAfter;
        const assertionDateOn = requestParameters?.assertionDateOn;
        const assertionDateNotOn = requestParameters?.assertionDateNotOn;
        const assertionDateBetween = requestParameters?.assertionDateBetween;
        const assertionDateNotBetween = requestParameters?.assertionDateNotBetween;
        const topography = requestParameters?.topography;
        const topographyNot = requestParameters?.topographyNot;
        const topographyAnyOf = requestParameters?.topographyAnyOf;
        const topographyNotAnyOf = requestParameters?.topographyNotAnyOf;
        const topographyDescendantsOf = requestParameters?.topographyDescendantsOf;
        const morphology = requestParameters?.morphology;
        const morphologyNot = requestParameters?.morphologyNot;
        const morphologyAnyOf = requestParameters?.morphologyAnyOf;
        const morphologyNotAnyOf = requestParameters?.morphologyNotAnyOf;
        const morphologyDescendantsOf = requestParameters?.morphologyDescendantsOf;
        const differentitationNotExists = requestParameters?.differentitationNotExists;
        const differentitationExists = requestParameters?.differentitationExists;
        const differentitation = requestParameters?.differentitation;
        const differentitationNot = requestParameters?.differentitationNot;
        const differentitationAnyOf = requestParameters?.differentitationAnyOf;
        const differentitationNotAnyOf = requestParameters?.differentitationNotAnyOf;
        const differentitationDescendantsOf = requestParameters?.differentitationDescendantsOf;
        const lateralityNotExists = requestParameters?.lateralityNotExists;
        const lateralityExists = requestParameters?.lateralityExists;
        const laterality = requestParameters?.laterality;
        const lateralityNot = requestParameters?.lateralityNot;
        const lateralityAnyOf = requestParameters?.lateralityAnyOf;
        const lateralityNotAnyOf = requestParameters?.lateralityNotAnyOf;
        const lateralityDescendantsOf = requestParameters?.lateralityDescendantsOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (relationship !== undefined && relationship !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relationship, 'relationship');
        }
        if (relationshipNot !== undefined && relationshipNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relationshipNot, 'relationship.not');
        }
        if (relationshipAnyOf) {
            relationshipAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'relationship.anyOf');
            })
        }
        if (relatedPrimaryIdNotExists !== undefined && relatedPrimaryIdNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdNotExists, 'relatedPrimaryId.not.exists');
        }
        if (relatedPrimaryIdExists !== undefined && relatedPrimaryIdExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdExists, 'relatedPrimaryId.exists');
        }
        if (relatedPrimaryId !== undefined && relatedPrimaryId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryId, 'relatedPrimaryId');
        }
        if (relatedPrimaryIdNot !== undefined && relatedPrimaryIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdNot, 'relatedPrimaryId.not');
        }
        if (relatedPrimaryIdContains !== undefined && relatedPrimaryIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdContains, 'relatedPrimaryId.contains');
        }
        if (relatedPrimaryIdNotContains !== undefined && relatedPrimaryIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdNotContains, 'relatedPrimaryId.not.contains');
        }
        if (relatedPrimaryIdBeginsWith !== undefined && relatedPrimaryIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdBeginsWith, 'relatedPrimaryId.beginsWith');
        }
        if (relatedPrimaryIdNotBeginsWith !== undefined && relatedPrimaryIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdNotBeginsWith, 'relatedPrimaryId.not.beginsWith');
        }
        if (relatedPrimaryIdEndsWith !== undefined && relatedPrimaryIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdEndsWith, 'relatedPrimaryId.endsWith');
        }
        if (relatedPrimaryIdNotEndsWith !== undefined && relatedPrimaryIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>relatedPrimaryIdNotEndsWith, 'relatedPrimaryId.not.endsWith');
        }
        if (assertionDateBefore !== undefined && assertionDateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateBefore, 'assertionDate.before');
        }
        if (assertionDateAfter !== undefined && assertionDateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateAfter, 'assertionDate.after');
        }
        if (assertionDateOnOrBefore !== undefined && assertionDateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateOnOrBefore, 'assertionDate.onOrBefore');
        }
        if (assertionDateOnOrAfter !== undefined && assertionDateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateOnOrAfter, 'assertionDate.onOrAfter');
        }
        if (assertionDateOn !== undefined && assertionDateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateOn, 'assertionDate.on');
        }
        if (assertionDateNotOn !== undefined && assertionDateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assertionDateNotOn, 'assertionDate.not.on');
        }
        if (assertionDateBetween) {
            assertionDateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'assertionDate.between');
            })
        }
        if (assertionDateNotBetween) {
            assertionDateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'assertionDate.not.between');
            })
        }
        if (topography !== undefined && topography !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>topography, 'topography');
        }
        if (topographyNot !== undefined && topographyNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>topographyNot, 'topography.not');
        }
        if (topographyAnyOf) {
            topographyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'topography.anyOf');
            })
        }
        if (topographyNotAnyOf) {
            topographyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'topography.not.anyOf');
            })
        }
        if (topographyDescendantsOf !== undefined && topographyDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>topographyDescendantsOf, 'topography.descendantsOf');
        }
        if (morphology !== undefined && morphology !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>morphology, 'morphology');
        }
        if (morphologyNot !== undefined && morphologyNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>morphologyNot, 'morphology.not');
        }
        if (morphologyAnyOf) {
            morphologyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'morphology.anyOf');
            })
        }
        if (morphologyNotAnyOf) {
            morphologyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'morphology.not.anyOf');
            })
        }
        if (morphologyDescendantsOf !== undefined && morphologyDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>morphologyDescendantsOf, 'morphology.descendantsOf');
        }
        if (differentitationNotExists !== undefined && differentitationNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>differentitationNotExists, 'differentitation.not.exists');
        }
        if (differentitationExists !== undefined && differentitationExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>differentitationExists, 'differentitation.exists');
        }
        if (differentitation !== undefined && differentitation !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>differentitation, 'differentitation');
        }
        if (differentitationNot !== undefined && differentitationNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>differentitationNot, 'differentitation.not');
        }
        if (differentitationAnyOf) {
            differentitationAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'differentitation.anyOf');
            })
        }
        if (differentitationNotAnyOf) {
            differentitationNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'differentitation.not.anyOf');
            })
        }
        if (differentitationDescendantsOf !== undefined && differentitationDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>differentitationDescendantsOf, 'differentitation.descendantsOf');
        }
        if (lateralityNotExists !== undefined && lateralityNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lateralityNotExists, 'laterality.not.exists');
        }
        if (lateralityExists !== undefined && lateralityExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lateralityExists, 'laterality.exists');
        }
        if (laterality !== undefined && laterality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>laterality, 'laterality');
        }
        if (lateralityNot !== undefined && lateralityNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lateralityNot, 'laterality.not');
        }
        if (lateralityAnyOf) {
            lateralityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'laterality.anyOf');
            })
        }
        if (lateralityNotAnyOf) {
            lateralityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'laterality.not.anyOf');
            })
        }
        if (lateralityDescendantsOf !== undefined && lateralityDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lateralityDescendantsOf, 'laterality.descendantsOf');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/neoplastic-entities`;
        return this.httpClient.request<PaginatedNeoplasticEntity>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Neoplastic Entity By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNeoplasticEntityById(requestParameters: GetNeoplasticEntityByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<NeoplasticEntity>;
    public getNeoplasticEntityById(requestParameters: GetNeoplasticEntityByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<NeoplasticEntity>>;
    public getNeoplasticEntityById(requestParameters: GetNeoplasticEntityByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<NeoplasticEntity>>;
    public getNeoplasticEntityById(requestParameters: GetNeoplasticEntityByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const entityId = requestParameters?.entityId;
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getNeoplasticEntityById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/neoplastic-entities/${this.configuration.encodeParam({name: "entityId", value: entityId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<NeoplasticEntity>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Neoplastic Entity
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNeoplasticEntityById(requestParameters: UpdateNeoplasticEntityByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateNeoplasticEntityById(requestParameters: UpdateNeoplasticEntityByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateNeoplasticEntityById(requestParameters: UpdateNeoplasticEntityByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateNeoplasticEntityById(requestParameters: UpdateNeoplasticEntityByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const entityId = requestParameters?.entityId;
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling updateNeoplasticEntityById.');
        }
        const neoplasticEntityCreate = requestParameters?.neoplasticEntityCreate;
        if (neoplasticEntityCreate === null || neoplasticEntityCreate === undefined) {
            throw new Error('Required parameter neoplasticEntityCreate was null or undefined when calling updateNeoplasticEntityById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/neoplastic-entities/${this.configuration.encodeParam({name: "entityId", value: entityId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: neoplasticEntityCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
