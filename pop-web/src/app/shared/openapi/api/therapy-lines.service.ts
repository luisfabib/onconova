/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ModifiedResourceSchema } from '../model/modified-resource-schema';
// @ts-ignore
import { PaginatedTherapyLineSchema } from '../model/paginated-therapy-line-schema';
// @ts-ignore
import { TherapyLineCreateSchema } from '../model/therapy-line-create-schema';
// @ts-ignore
import { TherapyLineSchema } from '../model/therapy-line-schema';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    TherapyLinesServiceInterface,
    CreateTherapyLineRequestParams,
    DeleteTherapyLineRequestParams,
    GetReassignedPatientCaseTherapyLinesRequestParams,
    GetTherapyLineByIdRequestParams,
    GetTherapyLinesRequestParams,
    UpdateTherapyLineRequestParams
} from './therapy-lines.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class TherapyLinesService implements TherapyLinesServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResourceSchema>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResourceSchema>>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResourceSchema>>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineCreateSchema = requestParameters?.therapyLineCreateSchema;
        if (therapyLineCreateSchema === null || therapyLineCreateSchema === undefined) {
            throw new Error('Required parameter therapyLineCreateSchema was null or undefined when calling createTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines`;
        return this.httpClient.request<ModifiedResourceSchema>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: therapyLineCreateSchema,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling deleteTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Reassigned Patient Case Therapy Lines
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<TherapyLineSchema>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<TherapyLineSchema>>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<TherapyLineSchema>>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const caseId = requestParameters?.caseId;
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getReassignedPatientCaseTherapyLines.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "caseId", value: caseId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/re-assignments`;
        return this.httpClient.request<Array<TherapyLineSchema>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Therapy Line By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TherapyLineSchema>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TherapyLineSchema>>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TherapyLineSchema>>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling getTherapyLineById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<TherapyLineSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Therapy Lines Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedTherapyLineSchema>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedTherapyLineSchema>>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedTherapyLineSchema>>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const ordinalLessThan = requestParameters?.ordinalLessThan;
        const ordinalLessThanOrEqual = requestParameters?.ordinalLessThanOrEqual;
        const ordinalGreaterThan = requestParameters?.ordinalGreaterThan;
        const ordinalGreaterThanOrEqual = requestParameters?.ordinalGreaterThanOrEqual;
        const ordinalEqual = requestParameters?.ordinalEqual;
        const ordinalNotEqual = requestParameters?.ordinalNotEqual;
        const ordinalBetween = requestParameters?.ordinalBetween;
        const ordinalNotBetween = requestParameters?.ordinalNotBetween;
        const intent = requestParameters?.intent;
        const intentNot = requestParameters?.intentNot;
        const intentAnyOf = requestParameters?.intentAnyOf;
        const progressionDateNotExists = requestParameters?.progressionDateNotExists;
        const progressionDateExists = requestParameters?.progressionDateExists;
        const progressionDateBefore = requestParameters?.progressionDateBefore;
        const progressionDateAfter = requestParameters?.progressionDateAfter;
        const progressionDateOnOrBefore = requestParameters?.progressionDateOnOrBefore;
        const progressionDateOnOrAfter = requestParameters?.progressionDateOnOrAfter;
        const progressionDateOn = requestParameters?.progressionDateOn;
        const progressionDateNotOn = requestParameters?.progressionDateNotOn;
        const progressionDateBetween = requestParameters?.progressionDateBetween;
        const progressionDateNotBetween = requestParameters?.progressionDateNotBetween;
        const periodNotExists = requestParameters?.periodNotExists;
        const periodExists = requestParameters?.periodExists;
        const periodOverlaps = requestParameters?.periodOverlaps;
        const periodNotOverlaps = requestParameters?.periodNotOverlaps;
        const periodContains = requestParameters?.periodContains;
        const periodNotContains = requestParameters?.periodNotContains;
        const periodContainedBy = requestParameters?.periodContainedBy;
        const periodNotContainedBy = requestParameters?.periodNotContainedBy;
        const label = requestParameters?.label;
        const labelNot = requestParameters?.labelNot;
        const labelContains = requestParameters?.labelContains;
        const labelNotContains = requestParameters?.labelNotContains;
        const labelBeginsWith = requestParameters?.labelBeginsWith;
        const labelNotBeginsWith = requestParameters?.labelNotBeginsWith;
        const labelEndsWith = requestParameters?.labelEndsWith;
        const labelNotEndsWith = requestParameters?.labelNotEndsWith;
        const progressionFreeSurvivalNotExists = requestParameters?.progressionFreeSurvivalNotExists;
        const progressionFreeSurvivalExists = requestParameters?.progressionFreeSurvivalExists;
        const progressionFreeSurvivalLessThan = requestParameters?.progressionFreeSurvivalLessThan;
        const progressionFreeSurvivalLessThanOrEqual = requestParameters?.progressionFreeSurvivalLessThanOrEqual;
        const progressionFreeSurvivalGreaterThan = requestParameters?.progressionFreeSurvivalGreaterThan;
        const progressionFreeSurvivalGreaterThanOrEqual = requestParameters?.progressionFreeSurvivalGreaterThanOrEqual;
        const progressionFreeSurvivalEqual = requestParameters?.progressionFreeSurvivalEqual;
        const progressionFreeSurvivalNotEqual = requestParameters?.progressionFreeSurvivalNotEqual;
        const progressionFreeSurvivalBetween = requestParameters?.progressionFreeSurvivalBetween;
        const progressionFreeSurvivalNotBetween = requestParameters?.progressionFreeSurvivalNotBetween;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (ordinalLessThan !== undefined && ordinalLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalLessThan, 'ordinal.lessThan');
        }
        if (ordinalLessThanOrEqual !== undefined && ordinalLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalLessThanOrEqual, 'ordinal.lessThanOrEqual');
        }
        if (ordinalGreaterThan !== undefined && ordinalGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalGreaterThan, 'ordinal.greaterThan');
        }
        if (ordinalGreaterThanOrEqual !== undefined && ordinalGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalGreaterThanOrEqual, 'ordinal.greaterThanOrEqual');
        }
        if (ordinalEqual !== undefined && ordinalEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalEqual, 'ordinal.equal');
        }
        if (ordinalNotEqual !== undefined && ordinalNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ordinalNotEqual, 'ordinal.not.equal');
        }
        if (ordinalBetween) {
            ordinalBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ordinal.between');
            })
        }
        if (ordinalNotBetween) {
            ordinalNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ordinal.not.between');
            })
        }
        if (intent !== undefined && intent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>intent, 'intent');
        }
        if (intentNot !== undefined && intentNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>intentNot, 'intent.not');
        }
        if (intentAnyOf) {
            intentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'intent.anyOf');
            })
        }
        if (progressionDateNotExists !== undefined && progressionDateNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateNotExists, 'progressionDate.not.exists');
        }
        if (progressionDateExists !== undefined && progressionDateExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateExists, 'progressionDate.exists');
        }
        if (progressionDateBefore !== undefined && progressionDateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateBefore, 'progressionDate.before');
        }
        if (progressionDateAfter !== undefined && progressionDateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateAfter, 'progressionDate.after');
        }
        if (progressionDateOnOrBefore !== undefined && progressionDateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateOnOrBefore, 'progressionDate.onOrBefore');
        }
        if (progressionDateOnOrAfter !== undefined && progressionDateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateOnOrAfter, 'progressionDate.onOrAfter');
        }
        if (progressionDateOn !== undefined && progressionDateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateOn, 'progressionDate.on');
        }
        if (progressionDateNotOn !== undefined && progressionDateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionDateNotOn, 'progressionDate.not.on');
        }
        if (progressionDateBetween) {
            progressionDateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionDate.between');
            })
        }
        if (progressionDateNotBetween) {
            progressionDateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionDate.not.between');
            })
        }
        if (periodNotExists !== undefined && periodNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>periodNotExists, 'period.not.exists');
        }
        if (periodExists !== undefined && periodExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>periodExists, 'period.exists');
        }
        if (periodOverlaps) {
            periodOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.overlaps');
            })
        }
        if (periodNotOverlaps) {
            periodNotOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.overlaps');
            })
        }
        if (periodContains) {
            periodContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.contains');
            })
        }
        if (periodNotContains) {
            periodNotContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.contains');
            })
        }
        if (periodContainedBy) {
            periodContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.containedBy');
            })
        }
        if (periodNotContainedBy) {
            periodNotContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.containedBy');
            })
        }
        if (label !== undefined && label !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>label, 'label');
        }
        if (labelNot !== undefined && labelNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelNot, 'label.not');
        }
        if (labelContains !== undefined && labelContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelContains, 'label.contains');
        }
        if (labelNotContains !== undefined && labelNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelNotContains, 'label.not.contains');
        }
        if (labelBeginsWith !== undefined && labelBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelBeginsWith, 'label.beginsWith');
        }
        if (labelNotBeginsWith !== undefined && labelNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelNotBeginsWith, 'label.not.beginsWith');
        }
        if (labelEndsWith !== undefined && labelEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelEndsWith, 'label.endsWith');
        }
        if (labelNotEndsWith !== undefined && labelNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>labelNotEndsWith, 'label.not.endsWith');
        }
        if (progressionFreeSurvivalNotExists !== undefined && progressionFreeSurvivalNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalNotExists, 'progressionFreeSurvival.not.exists');
        }
        if (progressionFreeSurvivalExists !== undefined && progressionFreeSurvivalExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalExists, 'progressionFreeSurvival.exists');
        }
        if (progressionFreeSurvivalLessThan !== undefined && progressionFreeSurvivalLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalLessThan, 'progressionFreeSurvival.lessThan');
        }
        if (progressionFreeSurvivalLessThanOrEqual !== undefined && progressionFreeSurvivalLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalLessThanOrEqual, 'progressionFreeSurvival.lessThanOrEqual');
        }
        if (progressionFreeSurvivalGreaterThan !== undefined && progressionFreeSurvivalGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalGreaterThan, 'progressionFreeSurvival.greaterThan');
        }
        if (progressionFreeSurvivalGreaterThanOrEqual !== undefined && progressionFreeSurvivalGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalGreaterThanOrEqual, 'progressionFreeSurvival.greaterThanOrEqual');
        }
        if (progressionFreeSurvivalEqual !== undefined && progressionFreeSurvivalEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalEqual, 'progressionFreeSurvival.equal');
        }
        if (progressionFreeSurvivalNotEqual !== undefined && progressionFreeSurvivalNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>progressionFreeSurvivalNotEqual, 'progressionFreeSurvival.not.equal');
        }
        if (progressionFreeSurvivalBetween) {
            progressionFreeSurvivalBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionFreeSurvival.between');
            })
        }
        if (progressionFreeSurvivalNotBetween) {
            progressionFreeSurvivalNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionFreeSurvival.not.between');
            })
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines`;
        return this.httpClient.request<PaginatedTherapyLineSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResourceSchema>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResourceSchema>>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResourceSchema>>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling updateTherapyLine.');
        }
        const therapyLineCreateSchema = requestParameters?.therapyLineCreateSchema;
        if (therapyLineCreateSchema === null || therapyLineCreateSchema === undefined) {
            throw new Error('Required parameter therapyLineCreateSchema was null or undefined when calling updateTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResourceSchema>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: therapyLineCreateSchema,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
