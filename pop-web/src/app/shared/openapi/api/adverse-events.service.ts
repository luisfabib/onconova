/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AdverseEvent } from '../model/adverse-event';
// @ts-ignore
import { AdverseEventCreate } from '../model/adverse-event-create';
// @ts-ignore
import { AdverseEventMitigation } from '../model/adverse-event-mitigation';
// @ts-ignore
import { AdverseEventMitigationCreate } from '../model/adverse-event-mitigation-create';
// @ts-ignore
import { AdverseEventSuspectedCause } from '../model/adverse-event-suspected-cause';
// @ts-ignore
import { AdverseEventSuspectedCauseCreate } from '../model/adverse-event-suspected-cause-create';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedAdverseEvent } from '../model/paginated-adverse-event';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    AdverseEventsServiceInterface,
    CreateAdverseEventRequestParams,
    CreateAdverseEventMitigationRequestParams,
    CreateAdverseEventSuspectedCauseRequestParams,
    DeleteAdverseEventByIdRequestParams,
    DeleteAdverseEventMitigationRequestParams,
    DeleteAdverseEventSuspectedCauseRequestParams,
    GetAdverseEventByIdRequestParams,
    GetAdverseEventMitigationByIdRequestParams,
    GetAdverseEventMitigationsRequestParams,
    GetAdverseEventSuspectedCauseByIdRequestParams,
    GetAdverseEventSuspectedCausesRequestParams,
    GetAdverseEventsRequestParams,
    UpdateAdverseEventRequestParams,
    UpdateAdverseEventMitigationRequestParams,
    UpdateAdverseEventSuspectedCauseRequestParams
} from './adverse-events.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AdverseEventsService implements AdverseEventsServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Adverse Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAdverseEvent(requestParameters: CreateAdverseEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createAdverseEvent(requestParameters: CreateAdverseEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createAdverseEvent(requestParameters: CreateAdverseEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createAdverseEvent(requestParameters: CreateAdverseEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventCreate = requestParameters?.adverseEventCreate;
        if (adverseEventCreate === null || adverseEventCreate === undefined) {
            throw new Error('Required parameter adverseEventCreate was null or undefined when calling createAdverseEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Adverse Event Mitigation
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAdverseEventMitigation(requestParameters: CreateAdverseEventMitigationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createAdverseEventMitigation(requestParameters: CreateAdverseEventMitigationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createAdverseEventMitigation(requestParameters: CreateAdverseEventMitigationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createAdverseEventMitigation(requestParameters: CreateAdverseEventMitigationRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling createAdverseEventMitigation.');
        }
        const adverseEventMitigationCreate = requestParameters?.adverseEventMitigationCreate;
        if (adverseEventMitigationCreate === null || adverseEventMitigationCreate === undefined) {
            throw new Error('Required parameter adverseEventMitigationCreate was null or undefined when calling createAdverseEventMitigation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/mitigations`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventMitigationCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Adverse Event Suspected Cause
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAdverseEventSuspectedCause(requestParameters: CreateAdverseEventSuspectedCauseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createAdverseEventSuspectedCause(requestParameters: CreateAdverseEventSuspectedCauseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createAdverseEventSuspectedCause(requestParameters: CreateAdverseEventSuspectedCauseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createAdverseEventSuspectedCause(requestParameters: CreateAdverseEventSuspectedCauseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling createAdverseEventSuspectedCause.');
        }
        const adverseEventSuspectedCauseCreate = requestParameters?.adverseEventSuspectedCauseCreate;
        if (adverseEventSuspectedCauseCreate === null || adverseEventSuspectedCauseCreate === undefined) {
            throw new Error('Required parameter adverseEventSuspectedCauseCreate was null or undefined when calling createAdverseEventSuspectedCause.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/suspected-causes`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventSuspectedCauseCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Adverse Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAdverseEventById(requestParameters: DeleteAdverseEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteAdverseEventById(requestParameters: DeleteAdverseEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteAdverseEventById(requestParameters: DeleteAdverseEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteAdverseEventById(requestParameters: DeleteAdverseEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling deleteAdverseEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Adverse Event Mitigation
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAdverseEventMitigation(requestParameters: DeleteAdverseEventMitigationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteAdverseEventMitigation(requestParameters: DeleteAdverseEventMitigationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteAdverseEventMitigation(requestParameters: DeleteAdverseEventMitigationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteAdverseEventMitigation(requestParameters: DeleteAdverseEventMitigationRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling deleteAdverseEventMitigation.');
        }
        const mitigationId = requestParameters?.mitigationId;
        if (mitigationId === null || mitigationId === undefined) {
            throw new Error('Required parameter mitigationId was null or undefined when calling deleteAdverseEventMitigation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/mitigations/${this.configuration.encodeParam({name: "mitigationId", value: mitigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Adverse Event Suspected Cause
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAdverseEventSuspectedCause(requestParameters: DeleteAdverseEventSuspectedCauseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteAdverseEventSuspectedCause(requestParameters: DeleteAdverseEventSuspectedCauseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteAdverseEventSuspectedCause(requestParameters: DeleteAdverseEventSuspectedCauseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteAdverseEventSuspectedCause(requestParameters: DeleteAdverseEventSuspectedCauseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling deleteAdverseEventSuspectedCause.');
        }
        const causeId = requestParameters?.causeId;
        if (causeId === null || causeId === undefined) {
            throw new Error('Required parameter causeId was null or undefined when calling deleteAdverseEventSuspectedCause.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/suspected-causes/${this.configuration.encodeParam({name: "causeId", value: causeId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Adverse Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEventById(requestParameters: GetAdverseEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AdverseEvent>;
    public getAdverseEventById(requestParameters: GetAdverseEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdverseEvent>>;
    public getAdverseEventById(requestParameters: GetAdverseEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdverseEvent>>;
    public getAdverseEventById(requestParameters: GetAdverseEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling getAdverseEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<AdverseEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Adverse Event Mitigation By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEventMitigationById(requestParameters: GetAdverseEventMitigationByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AdverseEventMitigation>;
    public getAdverseEventMitigationById(requestParameters: GetAdverseEventMitigationByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdverseEventMitigation>>;
    public getAdverseEventMitigationById(requestParameters: GetAdverseEventMitigationByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdverseEventMitigation>>;
    public getAdverseEventMitigationById(requestParameters: GetAdverseEventMitigationByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling getAdverseEventMitigationById.');
        }
        const mitigationId = requestParameters?.mitigationId;
        if (mitigationId === null || mitigationId === undefined) {
            throw new Error('Required parameter mitigationId was null or undefined when calling getAdverseEventMitigationById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/mitigations/${this.configuration.encodeParam({name: "mitigationId", value: mitigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<AdverseEventMitigation>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Adverse Event Mitigations Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEventMitigations(requestParameters: GetAdverseEventMitigationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AdverseEventMitigation>>;
    public getAdverseEventMitigations(requestParameters: GetAdverseEventMitigationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AdverseEventMitigation>>>;
    public getAdverseEventMitigations(requestParameters: GetAdverseEventMitigationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AdverseEventMitigation>>>;
    public getAdverseEventMitigations(requestParameters: GetAdverseEventMitigationsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling getAdverseEventMitigations.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/mitigations`;
        return this.httpClient.request<Array<AdverseEventMitigation>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Adverse Event Suspected Cause By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEventSuspectedCauseById(requestParameters: GetAdverseEventSuspectedCauseByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AdverseEventSuspectedCause>;
    public getAdverseEventSuspectedCauseById(requestParameters: GetAdverseEventSuspectedCauseByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdverseEventSuspectedCause>>;
    public getAdverseEventSuspectedCauseById(requestParameters: GetAdverseEventSuspectedCauseByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdverseEventSuspectedCause>>;
    public getAdverseEventSuspectedCauseById(requestParameters: GetAdverseEventSuspectedCauseByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling getAdverseEventSuspectedCauseById.');
        }
        const causeId = requestParameters?.causeId;
        if (causeId === null || causeId === undefined) {
            throw new Error('Required parameter causeId was null or undefined when calling getAdverseEventSuspectedCauseById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/suspected-causes/${this.configuration.encodeParam({name: "causeId", value: causeId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<AdverseEventSuspectedCause>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Adverse Event Suspected Causes Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEventSuspectedCauses(requestParameters: GetAdverseEventSuspectedCausesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AdverseEventSuspectedCause>>;
    public getAdverseEventSuspectedCauses(requestParameters: GetAdverseEventSuspectedCausesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AdverseEventSuspectedCause>>>;
    public getAdverseEventSuspectedCauses(requestParameters: GetAdverseEventSuspectedCausesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AdverseEventSuspectedCause>>>;
    public getAdverseEventSuspectedCauses(requestParameters: GetAdverseEventSuspectedCausesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling getAdverseEventSuspectedCauses.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/suspected-causes`;
        return this.httpClient.request<Array<AdverseEventSuspectedCause>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Adverse Events Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdverseEvents(requestParameters?: GetAdverseEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedAdverseEvent>;
    public getAdverseEvents(requestParameters?: GetAdverseEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedAdverseEvent>>;
    public getAdverseEvents(requestParameters?: GetAdverseEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedAdverseEvent>>;
    public getAdverseEvents(requestParameters?: GetAdverseEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const suspectedCausesId = requestParameters?.suspectedCausesId;
        const suspectedCausesIdNot = requestParameters?.suspectedCausesIdNot;
        const suspectedCausesIdContains = requestParameters?.suspectedCausesIdContains;
        const suspectedCausesIdNotContains = requestParameters?.suspectedCausesIdNotContains;
        const suspectedCausesIdBeginsWith = requestParameters?.suspectedCausesIdBeginsWith;
        const suspectedCausesIdNotBeginsWith = requestParameters?.suspectedCausesIdNotBeginsWith;
        const suspectedCausesIdEndsWith = requestParameters?.suspectedCausesIdEndsWith;
        const suspectedCausesIdNotEndsWith = requestParameters?.suspectedCausesIdNotEndsWith;
        const suspectedCausesSystemicTherapyIdNotExists = requestParameters?.suspectedCausesSystemicTherapyIdNotExists;
        const suspectedCausesSystemicTherapyIdExists = requestParameters?.suspectedCausesSystemicTherapyIdExists;
        const suspectedCausesSystemicTherapyId = requestParameters?.suspectedCausesSystemicTherapyId;
        const suspectedCausesSystemicTherapyIdNot = requestParameters?.suspectedCausesSystemicTherapyIdNot;
        const suspectedCausesSystemicTherapyIdContains = requestParameters?.suspectedCausesSystemicTherapyIdContains;
        const suspectedCausesSystemicTherapyIdNotContains = requestParameters?.suspectedCausesSystemicTherapyIdNotContains;
        const suspectedCausesSystemicTherapyIdBeginsWith = requestParameters?.suspectedCausesSystemicTherapyIdBeginsWith;
        const suspectedCausesSystemicTherapyIdNotBeginsWith = requestParameters?.suspectedCausesSystemicTherapyIdNotBeginsWith;
        const suspectedCausesSystemicTherapyIdEndsWith = requestParameters?.suspectedCausesSystemicTherapyIdEndsWith;
        const suspectedCausesSystemicTherapyIdNotEndsWith = requestParameters?.suspectedCausesSystemicTherapyIdNotEndsWith;
        const suspectedCausesMedicationIdNotExists = requestParameters?.suspectedCausesMedicationIdNotExists;
        const suspectedCausesMedicationIdExists = requestParameters?.suspectedCausesMedicationIdExists;
        const suspectedCausesMedicationId = requestParameters?.suspectedCausesMedicationId;
        const suspectedCausesMedicationIdNot = requestParameters?.suspectedCausesMedicationIdNot;
        const suspectedCausesMedicationIdContains = requestParameters?.suspectedCausesMedicationIdContains;
        const suspectedCausesMedicationIdNotContains = requestParameters?.suspectedCausesMedicationIdNotContains;
        const suspectedCausesMedicationIdBeginsWith = requestParameters?.suspectedCausesMedicationIdBeginsWith;
        const suspectedCausesMedicationIdNotBeginsWith = requestParameters?.suspectedCausesMedicationIdNotBeginsWith;
        const suspectedCausesMedicationIdEndsWith = requestParameters?.suspectedCausesMedicationIdEndsWith;
        const suspectedCausesMedicationIdNotEndsWith = requestParameters?.suspectedCausesMedicationIdNotEndsWith;
        const suspectedCausesRadiotherapyIdNotExists = requestParameters?.suspectedCausesRadiotherapyIdNotExists;
        const suspectedCausesRadiotherapyIdExists = requestParameters?.suspectedCausesRadiotherapyIdExists;
        const suspectedCausesRadiotherapyId = requestParameters?.suspectedCausesRadiotherapyId;
        const suspectedCausesRadiotherapyIdNot = requestParameters?.suspectedCausesRadiotherapyIdNot;
        const suspectedCausesRadiotherapyIdContains = requestParameters?.suspectedCausesRadiotherapyIdContains;
        const suspectedCausesRadiotherapyIdNotContains = requestParameters?.suspectedCausesRadiotherapyIdNotContains;
        const suspectedCausesRadiotherapyIdBeginsWith = requestParameters?.suspectedCausesRadiotherapyIdBeginsWith;
        const suspectedCausesRadiotherapyIdNotBeginsWith = requestParameters?.suspectedCausesRadiotherapyIdNotBeginsWith;
        const suspectedCausesRadiotherapyIdEndsWith = requestParameters?.suspectedCausesRadiotherapyIdEndsWith;
        const suspectedCausesRadiotherapyIdNotEndsWith = requestParameters?.suspectedCausesRadiotherapyIdNotEndsWith;
        const suspectedCausesSurgeryIdNotExists = requestParameters?.suspectedCausesSurgeryIdNotExists;
        const suspectedCausesSurgeryIdExists = requestParameters?.suspectedCausesSurgeryIdExists;
        const suspectedCausesSurgeryId = requestParameters?.suspectedCausesSurgeryId;
        const suspectedCausesSurgeryIdNot = requestParameters?.suspectedCausesSurgeryIdNot;
        const suspectedCausesSurgeryIdContains = requestParameters?.suspectedCausesSurgeryIdContains;
        const suspectedCausesSurgeryIdNotContains = requestParameters?.suspectedCausesSurgeryIdNotContains;
        const suspectedCausesSurgeryIdBeginsWith = requestParameters?.suspectedCausesSurgeryIdBeginsWith;
        const suspectedCausesSurgeryIdNotBeginsWith = requestParameters?.suspectedCausesSurgeryIdNotBeginsWith;
        const suspectedCausesSurgeryIdEndsWith = requestParameters?.suspectedCausesSurgeryIdEndsWith;
        const suspectedCausesSurgeryIdNotEndsWith = requestParameters?.suspectedCausesSurgeryIdNotEndsWith;
        const suspectedCausesCausalityNotExists = requestParameters?.suspectedCausesCausalityNotExists;
        const suspectedCausesCausalityExists = requestParameters?.suspectedCausesCausalityExists;
        const suspectedCausesCausality = requestParameters?.suspectedCausesCausality;
        const suspectedCausesCausalityNot = requestParameters?.suspectedCausesCausalityNot;
        const suspectedCausesCausalityAnyOf = requestParameters?.suspectedCausesCausalityAnyOf;
        const mitigationsId = requestParameters?.mitigationsId;
        const mitigationsIdNot = requestParameters?.mitigationsIdNot;
        const mitigationsIdContains = requestParameters?.mitigationsIdContains;
        const mitigationsIdNotContains = requestParameters?.mitigationsIdNotContains;
        const mitigationsIdBeginsWith = requestParameters?.mitigationsIdBeginsWith;
        const mitigationsIdNotBeginsWith = requestParameters?.mitigationsIdNotBeginsWith;
        const mitigationsIdEndsWith = requestParameters?.mitigationsIdEndsWith;
        const mitigationsIdNotEndsWith = requestParameters?.mitigationsIdNotEndsWith;
        const mitigationsCategory = requestParameters?.mitigationsCategory;
        const mitigationsCategoryNot = requestParameters?.mitigationsCategoryNot;
        const mitigationsCategoryAnyOf = requestParameters?.mitigationsCategoryAnyOf;
        const mitigationsAdjustmentNotExists = requestParameters?.mitigationsAdjustmentNotExists;
        const mitigationsAdjustmentExists = requestParameters?.mitigationsAdjustmentExists;
        const mitigationsAdjustment = requestParameters?.mitigationsAdjustment;
        const mitigationsAdjustmentNot = requestParameters?.mitigationsAdjustmentNot;
        const mitigationsAdjustmentAnyOf = requestParameters?.mitigationsAdjustmentAnyOf;
        const mitigationsAdjustmentNotAnyOf = requestParameters?.mitigationsAdjustmentNotAnyOf;
        const mitigationsAdjustmentDescendantsOf = requestParameters?.mitigationsAdjustmentDescendantsOf;
        const mitigationsDrugNotExists = requestParameters?.mitigationsDrugNotExists;
        const mitigationsDrugExists = requestParameters?.mitigationsDrugExists;
        const mitigationsDrug = requestParameters?.mitigationsDrug;
        const mitigationsDrugNot = requestParameters?.mitigationsDrugNot;
        const mitigationsDrugAnyOf = requestParameters?.mitigationsDrugAnyOf;
        const mitigationsDrugNotAnyOf = requestParameters?.mitigationsDrugNotAnyOf;
        const mitigationsDrugDescendantsOf = requestParameters?.mitigationsDrugDescendantsOf;
        const mitigationsProcedureNotExists = requestParameters?.mitigationsProcedureNotExists;
        const mitigationsProcedureExists = requestParameters?.mitigationsProcedureExists;
        const mitigationsProcedure = requestParameters?.mitigationsProcedure;
        const mitigationsProcedureNot = requestParameters?.mitigationsProcedureNot;
        const mitigationsProcedureAnyOf = requestParameters?.mitigationsProcedureAnyOf;
        const mitigationsProcedureNotAnyOf = requestParameters?.mitigationsProcedureNotAnyOf;
        const mitigationsProcedureDescendantsOf = requestParameters?.mitigationsProcedureDescendantsOf;
        const mitigationsManagementNotExists = requestParameters?.mitigationsManagementNotExists;
        const mitigationsManagementExists = requestParameters?.mitigationsManagementExists;
        const mitigationsManagement = requestParameters?.mitigationsManagement;
        const mitigationsManagementNot = requestParameters?.mitigationsManagementNot;
        const mitigationsManagementAnyOf = requestParameters?.mitigationsManagementAnyOf;
        const mitigationsManagementNotAnyOf = requestParameters?.mitigationsManagementNotAnyOf;
        const mitigationsManagementDescendantsOf = requestParameters?.mitigationsManagementDescendantsOf;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const event = requestParameters?.event;
        const eventNot = requestParameters?.eventNot;
        const eventAnyOf = requestParameters?.eventAnyOf;
        const eventNotAnyOf = requestParameters?.eventNotAnyOf;
        const eventDescendantsOf = requestParameters?.eventDescendantsOf;
        const gradeLessThan = requestParameters?.gradeLessThan;
        const gradeLessThanOrEqual = requestParameters?.gradeLessThanOrEqual;
        const gradeGreaterThan = requestParameters?.gradeGreaterThan;
        const gradeGreaterThanOrEqual = requestParameters?.gradeGreaterThanOrEqual;
        const gradeEqual = requestParameters?.gradeEqual;
        const gradeNotEqual = requestParameters?.gradeNotEqual;
        const gradeBetween = requestParameters?.gradeBetween;
        const gradeNotBetween = requestParameters?.gradeNotBetween;
        const outcome = requestParameters?.outcome;
        const outcomeNot = requestParameters?.outcomeNot;
        const outcomeAnyOf = requestParameters?.outcomeAnyOf;
        const dateResolvedNotExists = requestParameters?.dateResolvedNotExists;
        const dateResolvedExists = requestParameters?.dateResolvedExists;
        const dateResolvedBefore = requestParameters?.dateResolvedBefore;
        const dateResolvedAfter = requestParameters?.dateResolvedAfter;
        const dateResolvedOnOrBefore = requestParameters?.dateResolvedOnOrBefore;
        const dateResolvedOnOrAfter = requestParameters?.dateResolvedOnOrAfter;
        const dateResolvedOn = requestParameters?.dateResolvedOn;
        const dateResolvedNotOn = requestParameters?.dateResolvedNotOn;
        const dateResolvedBetween = requestParameters?.dateResolvedBetween;
        const dateResolvedNotBetween = requestParameters?.dateResolvedNotBetween;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (suspectedCausesId !== undefined && suspectedCausesId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesId, 'suspectedCauses.id');
        }
        if (suspectedCausesIdNot !== undefined && suspectedCausesIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdNot, 'suspectedCauses.id.not');
        }
        if (suspectedCausesIdContains !== undefined && suspectedCausesIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdContains, 'suspectedCauses.id.contains');
        }
        if (suspectedCausesIdNotContains !== undefined && suspectedCausesIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdNotContains, 'suspectedCauses.id.not.contains');
        }
        if (suspectedCausesIdBeginsWith !== undefined && suspectedCausesIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdBeginsWith, 'suspectedCauses.id.beginsWith');
        }
        if (suspectedCausesIdNotBeginsWith !== undefined && suspectedCausesIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdNotBeginsWith, 'suspectedCauses.id.not.beginsWith');
        }
        if (suspectedCausesIdEndsWith !== undefined && suspectedCausesIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdEndsWith, 'suspectedCauses.id.endsWith');
        }
        if (suspectedCausesIdNotEndsWith !== undefined && suspectedCausesIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesIdNotEndsWith, 'suspectedCauses.id.not.endsWith');
        }
        if (suspectedCausesSystemicTherapyIdNotExists !== undefined && suspectedCausesSystemicTherapyIdNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdNotExists, 'suspectedCauses.systemicTherapyId.not.exists');
        }
        if (suspectedCausesSystemicTherapyIdExists !== undefined && suspectedCausesSystemicTherapyIdExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdExists, 'suspectedCauses.systemicTherapyId.exists');
        }
        if (suspectedCausesSystemicTherapyId !== undefined && suspectedCausesSystemicTherapyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyId, 'suspectedCauses.systemicTherapyId');
        }
        if (suspectedCausesSystemicTherapyIdNot !== undefined && suspectedCausesSystemicTherapyIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdNot, 'suspectedCauses.systemicTherapyId.not');
        }
        if (suspectedCausesSystemicTherapyIdContains !== undefined && suspectedCausesSystemicTherapyIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdContains, 'suspectedCauses.systemicTherapyId.contains');
        }
        if (suspectedCausesSystemicTherapyIdNotContains !== undefined && suspectedCausesSystemicTherapyIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdNotContains, 'suspectedCauses.systemicTherapyId.not.contains');
        }
        if (suspectedCausesSystemicTherapyIdBeginsWith !== undefined && suspectedCausesSystemicTherapyIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdBeginsWith, 'suspectedCauses.systemicTherapyId.beginsWith');
        }
        if (suspectedCausesSystemicTherapyIdNotBeginsWith !== undefined && suspectedCausesSystemicTherapyIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdNotBeginsWith, 'suspectedCauses.systemicTherapyId.not.beginsWith');
        }
        if (suspectedCausesSystemicTherapyIdEndsWith !== undefined && suspectedCausesSystemicTherapyIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdEndsWith, 'suspectedCauses.systemicTherapyId.endsWith');
        }
        if (suspectedCausesSystemicTherapyIdNotEndsWith !== undefined && suspectedCausesSystemicTherapyIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSystemicTherapyIdNotEndsWith, 'suspectedCauses.systemicTherapyId.not.endsWith');
        }
        if (suspectedCausesMedicationIdNotExists !== undefined && suspectedCausesMedicationIdNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdNotExists, 'suspectedCauses.medicationId.not.exists');
        }
        if (suspectedCausesMedicationIdExists !== undefined && suspectedCausesMedicationIdExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdExists, 'suspectedCauses.medicationId.exists');
        }
        if (suspectedCausesMedicationId !== undefined && suspectedCausesMedicationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationId, 'suspectedCauses.medicationId');
        }
        if (suspectedCausesMedicationIdNot !== undefined && suspectedCausesMedicationIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdNot, 'suspectedCauses.medicationId.not');
        }
        if (suspectedCausesMedicationIdContains !== undefined && suspectedCausesMedicationIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdContains, 'suspectedCauses.medicationId.contains');
        }
        if (suspectedCausesMedicationIdNotContains !== undefined && suspectedCausesMedicationIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdNotContains, 'suspectedCauses.medicationId.not.contains');
        }
        if (suspectedCausesMedicationIdBeginsWith !== undefined && suspectedCausesMedicationIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdBeginsWith, 'suspectedCauses.medicationId.beginsWith');
        }
        if (suspectedCausesMedicationIdNotBeginsWith !== undefined && suspectedCausesMedicationIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdNotBeginsWith, 'suspectedCauses.medicationId.not.beginsWith');
        }
        if (suspectedCausesMedicationIdEndsWith !== undefined && suspectedCausesMedicationIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdEndsWith, 'suspectedCauses.medicationId.endsWith');
        }
        if (suspectedCausesMedicationIdNotEndsWith !== undefined && suspectedCausesMedicationIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesMedicationIdNotEndsWith, 'suspectedCauses.medicationId.not.endsWith');
        }
        if (suspectedCausesRadiotherapyIdNotExists !== undefined && suspectedCausesRadiotherapyIdNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdNotExists, 'suspectedCauses.radiotherapyId.not.exists');
        }
        if (suspectedCausesRadiotherapyIdExists !== undefined && suspectedCausesRadiotherapyIdExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdExists, 'suspectedCauses.radiotherapyId.exists');
        }
        if (suspectedCausesRadiotherapyId !== undefined && suspectedCausesRadiotherapyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyId, 'suspectedCauses.radiotherapyId');
        }
        if (suspectedCausesRadiotherapyIdNot !== undefined && suspectedCausesRadiotherapyIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdNot, 'suspectedCauses.radiotherapyId.not');
        }
        if (suspectedCausesRadiotherapyIdContains !== undefined && suspectedCausesRadiotherapyIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdContains, 'suspectedCauses.radiotherapyId.contains');
        }
        if (suspectedCausesRadiotherapyIdNotContains !== undefined && suspectedCausesRadiotherapyIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdNotContains, 'suspectedCauses.radiotherapyId.not.contains');
        }
        if (suspectedCausesRadiotherapyIdBeginsWith !== undefined && suspectedCausesRadiotherapyIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdBeginsWith, 'suspectedCauses.radiotherapyId.beginsWith');
        }
        if (suspectedCausesRadiotherapyIdNotBeginsWith !== undefined && suspectedCausesRadiotherapyIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdNotBeginsWith, 'suspectedCauses.radiotherapyId.not.beginsWith');
        }
        if (suspectedCausesRadiotherapyIdEndsWith !== undefined && suspectedCausesRadiotherapyIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdEndsWith, 'suspectedCauses.radiotherapyId.endsWith');
        }
        if (suspectedCausesRadiotherapyIdNotEndsWith !== undefined && suspectedCausesRadiotherapyIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesRadiotherapyIdNotEndsWith, 'suspectedCauses.radiotherapyId.not.endsWith');
        }
        if (suspectedCausesSurgeryIdNotExists !== undefined && suspectedCausesSurgeryIdNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdNotExists, 'suspectedCauses.surgeryId.not.exists');
        }
        if (suspectedCausesSurgeryIdExists !== undefined && suspectedCausesSurgeryIdExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdExists, 'suspectedCauses.surgeryId.exists');
        }
        if (suspectedCausesSurgeryId !== undefined && suspectedCausesSurgeryId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryId, 'suspectedCauses.surgeryId');
        }
        if (suspectedCausesSurgeryIdNot !== undefined && suspectedCausesSurgeryIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdNot, 'suspectedCauses.surgeryId.not');
        }
        if (suspectedCausesSurgeryIdContains !== undefined && suspectedCausesSurgeryIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdContains, 'suspectedCauses.surgeryId.contains');
        }
        if (suspectedCausesSurgeryIdNotContains !== undefined && suspectedCausesSurgeryIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdNotContains, 'suspectedCauses.surgeryId.not.contains');
        }
        if (suspectedCausesSurgeryIdBeginsWith !== undefined && suspectedCausesSurgeryIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdBeginsWith, 'suspectedCauses.surgeryId.beginsWith');
        }
        if (suspectedCausesSurgeryIdNotBeginsWith !== undefined && suspectedCausesSurgeryIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdNotBeginsWith, 'suspectedCauses.surgeryId.not.beginsWith');
        }
        if (suspectedCausesSurgeryIdEndsWith !== undefined && suspectedCausesSurgeryIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdEndsWith, 'suspectedCauses.surgeryId.endsWith');
        }
        if (suspectedCausesSurgeryIdNotEndsWith !== undefined && suspectedCausesSurgeryIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesSurgeryIdNotEndsWith, 'suspectedCauses.surgeryId.not.endsWith');
        }
        if (suspectedCausesCausalityNotExists !== undefined && suspectedCausesCausalityNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesCausalityNotExists, 'suspectedCauses.causality.not.exists');
        }
        if (suspectedCausesCausalityExists !== undefined && suspectedCausesCausalityExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesCausalityExists, 'suspectedCauses.causality.exists');
        }
        if (suspectedCausesCausality !== undefined && suspectedCausesCausality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesCausality, 'suspectedCauses.causality');
        }
        if (suspectedCausesCausalityNot !== undefined && suspectedCausesCausalityNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>suspectedCausesCausalityNot, 'suspectedCauses.causality.not');
        }
        if (suspectedCausesCausalityAnyOf) {
            suspectedCausesCausalityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'suspectedCauses.causality.anyOf');
            })
        }
        if (mitigationsId !== undefined && mitigationsId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsId, 'mitigations.id');
        }
        if (mitigationsIdNot !== undefined && mitigationsIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdNot, 'mitigations.id.not');
        }
        if (mitigationsIdContains !== undefined && mitigationsIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdContains, 'mitigations.id.contains');
        }
        if (mitigationsIdNotContains !== undefined && mitigationsIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdNotContains, 'mitigations.id.not.contains');
        }
        if (mitigationsIdBeginsWith !== undefined && mitigationsIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdBeginsWith, 'mitigations.id.beginsWith');
        }
        if (mitigationsIdNotBeginsWith !== undefined && mitigationsIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdNotBeginsWith, 'mitigations.id.not.beginsWith');
        }
        if (mitigationsIdEndsWith !== undefined && mitigationsIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdEndsWith, 'mitigations.id.endsWith');
        }
        if (mitigationsIdNotEndsWith !== undefined && mitigationsIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsIdNotEndsWith, 'mitigations.id.not.endsWith');
        }
        if (mitigationsCategory !== undefined && mitigationsCategory !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsCategory, 'mitigations.category');
        }
        if (mitigationsCategoryNot !== undefined && mitigationsCategoryNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsCategoryNot, 'mitigations.category.not');
        }
        if (mitigationsCategoryAnyOf) {
            mitigationsCategoryAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.category.anyOf');
            })
        }
        if (mitigationsAdjustmentNotExists !== undefined && mitigationsAdjustmentNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsAdjustmentNotExists, 'mitigations.adjustment.not.exists');
        }
        if (mitigationsAdjustmentExists !== undefined && mitigationsAdjustmentExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsAdjustmentExists, 'mitigations.adjustment.exists');
        }
        if (mitigationsAdjustment !== undefined && mitigationsAdjustment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsAdjustment, 'mitigations.adjustment');
        }
        if (mitigationsAdjustmentNot !== undefined && mitigationsAdjustmentNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsAdjustmentNot, 'mitigations.adjustment.not');
        }
        if (mitigationsAdjustmentAnyOf) {
            mitigationsAdjustmentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.adjustment.anyOf');
            })
        }
        if (mitigationsAdjustmentNotAnyOf) {
            mitigationsAdjustmentNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.adjustment.not.anyOf');
            })
        }
        if (mitigationsAdjustmentDescendantsOf !== undefined && mitigationsAdjustmentDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsAdjustmentDescendantsOf, 'mitigations.adjustment.descendantsOf');
        }
        if (mitigationsDrugNotExists !== undefined && mitigationsDrugNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsDrugNotExists, 'mitigations.drug.not.exists');
        }
        if (mitigationsDrugExists !== undefined && mitigationsDrugExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsDrugExists, 'mitigations.drug.exists');
        }
        if (mitigationsDrug !== undefined && mitigationsDrug !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsDrug, 'mitigations.drug');
        }
        if (mitigationsDrugNot !== undefined && mitigationsDrugNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsDrugNot, 'mitigations.drug.not');
        }
        if (mitigationsDrugAnyOf) {
            mitigationsDrugAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.drug.anyOf');
            })
        }
        if (mitigationsDrugNotAnyOf) {
            mitigationsDrugNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.drug.not.anyOf');
            })
        }
        if (mitigationsDrugDescendantsOf !== undefined && mitigationsDrugDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsDrugDescendantsOf, 'mitigations.drug.descendantsOf');
        }
        if (mitigationsProcedureNotExists !== undefined && mitigationsProcedureNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsProcedureNotExists, 'mitigations.procedure.not.exists');
        }
        if (mitigationsProcedureExists !== undefined && mitigationsProcedureExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsProcedureExists, 'mitigations.procedure.exists');
        }
        if (mitigationsProcedure !== undefined && mitigationsProcedure !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsProcedure, 'mitigations.procedure');
        }
        if (mitigationsProcedureNot !== undefined && mitigationsProcedureNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsProcedureNot, 'mitigations.procedure.not');
        }
        if (mitigationsProcedureAnyOf) {
            mitigationsProcedureAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.procedure.anyOf');
            })
        }
        if (mitigationsProcedureNotAnyOf) {
            mitigationsProcedureNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.procedure.not.anyOf');
            })
        }
        if (mitigationsProcedureDescendantsOf !== undefined && mitigationsProcedureDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsProcedureDescendantsOf, 'mitigations.procedure.descendantsOf');
        }
        if (mitigationsManagementNotExists !== undefined && mitigationsManagementNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsManagementNotExists, 'mitigations.management.not.exists');
        }
        if (mitigationsManagementExists !== undefined && mitigationsManagementExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsManagementExists, 'mitigations.management.exists');
        }
        if (mitigationsManagement !== undefined && mitigationsManagement !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsManagement, 'mitigations.management');
        }
        if (mitigationsManagementNot !== undefined && mitigationsManagementNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsManagementNot, 'mitigations.management.not');
        }
        if (mitigationsManagementAnyOf) {
            mitigationsManagementAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.management.anyOf');
            })
        }
        if (mitigationsManagementNotAnyOf) {
            mitigationsManagementNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'mitigations.management.not.anyOf');
            })
        }
        if (mitigationsManagementDescendantsOf !== undefined && mitigationsManagementDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mitigationsManagementDescendantsOf, 'mitigations.management.descendantsOf');
        }
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (dateBefore !== undefined && dateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateBefore, 'date.before');
        }
        if (dateAfter !== undefined && dateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateAfter, 'date.after');
        }
        if (dateOnOrBefore !== undefined && dateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrBefore, 'date.onOrBefore');
        }
        if (dateOnOrAfter !== undefined && dateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrAfter, 'date.onOrAfter');
        }
        if (dateOn !== undefined && dateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOn, 'date.on');
        }
        if (dateNotOn !== undefined && dateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateNotOn, 'date.not.on');
        }
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        if (event !== undefined && event !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>event, 'event');
        }
        if (eventNot !== undefined && eventNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>eventNot, 'event.not');
        }
        if (eventAnyOf) {
            eventAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'event.anyOf');
            })
        }
        if (eventNotAnyOf) {
            eventNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'event.not.anyOf');
            })
        }
        if (eventDescendantsOf !== undefined && eventDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>eventDescendantsOf, 'event.descendantsOf');
        }
        if (gradeLessThan !== undefined && gradeLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeLessThan, 'grade.lessThan');
        }
        if (gradeLessThanOrEqual !== undefined && gradeLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeLessThanOrEqual, 'grade.lessThanOrEqual');
        }
        if (gradeGreaterThan !== undefined && gradeGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeGreaterThan, 'grade.greaterThan');
        }
        if (gradeGreaterThanOrEqual !== undefined && gradeGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeGreaterThanOrEqual, 'grade.greaterThanOrEqual');
        }
        if (gradeEqual !== undefined && gradeEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeEqual, 'grade.equal');
        }
        if (gradeNotEqual !== undefined && gradeNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>gradeNotEqual, 'grade.not.equal');
        }
        if (gradeBetween) {
            gradeBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'grade.between');
            })
        }
        if (gradeNotBetween) {
            gradeNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'grade.not.between');
            })
        }
        if (outcome !== undefined && outcome !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>outcome, 'outcome');
        }
        if (outcomeNot !== undefined && outcomeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>outcomeNot, 'outcome.not');
        }
        if (outcomeAnyOf) {
            outcomeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'outcome.anyOf');
            })
        }
        if (dateResolvedNotExists !== undefined && dateResolvedNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedNotExists, 'dateResolved.not.exists');
        }
        if (dateResolvedExists !== undefined && dateResolvedExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedExists, 'dateResolved.exists');
        }
        if (dateResolvedBefore !== undefined && dateResolvedBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedBefore, 'dateResolved.before');
        }
        if (dateResolvedAfter !== undefined && dateResolvedAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedAfter, 'dateResolved.after');
        }
        if (dateResolvedOnOrBefore !== undefined && dateResolvedOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedOnOrBefore, 'dateResolved.onOrBefore');
        }
        if (dateResolvedOnOrAfter !== undefined && dateResolvedOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedOnOrAfter, 'dateResolved.onOrAfter');
        }
        if (dateResolvedOn !== undefined && dateResolvedOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedOn, 'dateResolved.on');
        }
        if (dateResolvedNotOn !== undefined && dateResolvedNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateResolvedNotOn, 'dateResolved.not.on');
        }
        if (dateResolvedBetween) {
            dateResolvedBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dateResolved.between');
            })
        }
        if (dateResolvedNotBetween) {
            dateResolvedNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dateResolved.not.between');
            })
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events`;
        return this.httpClient.request<PaginatedAdverseEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Adverse Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdverseEvent(requestParameters: UpdateAdverseEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateAdverseEvent(requestParameters: UpdateAdverseEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateAdverseEvent(requestParameters: UpdateAdverseEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateAdverseEvent(requestParameters: UpdateAdverseEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling updateAdverseEvent.');
        }
        const adverseEventCreate = requestParameters?.adverseEventCreate;
        if (adverseEventCreate === null || adverseEventCreate === undefined) {
            throw new Error('Required parameter adverseEventCreate was null or undefined when calling updateAdverseEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Adverse Event Mitigation
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdverseEventMitigation(requestParameters: UpdateAdverseEventMitigationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateAdverseEventMitigation(requestParameters: UpdateAdverseEventMitigationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateAdverseEventMitigation(requestParameters: UpdateAdverseEventMitigationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateAdverseEventMitigation(requestParameters: UpdateAdverseEventMitigationRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling updateAdverseEventMitigation.');
        }
        const mitigationId = requestParameters?.mitigationId;
        if (mitigationId === null || mitigationId === undefined) {
            throw new Error('Required parameter mitigationId was null or undefined when calling updateAdverseEventMitigation.');
        }
        const adverseEventMitigationCreate = requestParameters?.adverseEventMitigationCreate;
        if (adverseEventMitigationCreate === null || adverseEventMitigationCreate === undefined) {
            throw new Error('Required parameter adverseEventMitigationCreate was null or undefined when calling updateAdverseEventMitigation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/mitigations/${this.configuration.encodeParam({name: "mitigationId", value: mitigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventMitigationCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Adverse Event Suspected Cause
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdverseEventSuspectedCause(requestParameters: UpdateAdverseEventSuspectedCauseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateAdverseEventSuspectedCause(requestParameters: UpdateAdverseEventSuspectedCauseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateAdverseEventSuspectedCause(requestParameters: UpdateAdverseEventSuspectedCauseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateAdverseEventSuspectedCause(requestParameters: UpdateAdverseEventSuspectedCauseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const adverseEventId = requestParameters?.adverseEventId;
        if (adverseEventId === null || adverseEventId === undefined) {
            throw new Error('Required parameter adverseEventId was null or undefined when calling updateAdverseEventSuspectedCause.');
        }
        const causeId = requestParameters?.causeId;
        if (causeId === null || causeId === undefined) {
            throw new Error('Required parameter causeId was null or undefined when calling updateAdverseEventSuspectedCause.');
        }
        const adverseEventSuspectedCauseCreate = requestParameters?.adverseEventSuspectedCauseCreate;
        if (adverseEventSuspectedCauseCreate === null || adverseEventSuspectedCauseCreate === undefined) {
            throw new Error('Required parameter adverseEventSuspectedCauseCreate was null or undefined when calling updateAdverseEventSuspectedCause.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/adverse-events/${this.configuration.encodeParam({name: "adverseEventId", value: adverseEventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/suspected-causes/${this.configuration.encodeParam({name: "causeId", value: causeId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: adverseEventSuspectedCauseCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
