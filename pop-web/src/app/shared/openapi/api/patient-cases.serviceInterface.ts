/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ModifiedResource } from '../model/models';
import { PaginatedPatientCase } from '../model/models';
import { PatientCase } from '../model/models';
import { PatientCaseBundle } from '../model/models';
import { PatientCaseBundleCreate } from '../model/models';
import { PatientCaseCreate } from '../model/models';
import { PatientCaseDataCompletionStatusSchema } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreatePatientCaseRequestParams {
    patientCaseCreate: PatientCaseCreate;
}

export interface CreatePatientCaseBundleByIdRequestParams {
    patientCaseBundleCreate: PatientCaseBundleCreate;
}

export interface CreatePatientCaseDataCompletionRequestParams {
    caseId: string;
    category: 'comorbidities-assessments' | 'family-histories' | 'genomic-signatures' | 'genomic-variants' | 'lifestyles' | 'comorbidities' | 'neoplastic-entities' | 'performance-status' | 'radiotherapies' | 'risk-assessments' | 'stagings' | 'surgeries' | 'systemic-therapies' | 'tumor-markers' | 'vitals' | 'tumor-board-reviews' | 'adverse-events' | 'therapy-responses';
}

export interface DeletePatientCaseByIdRequestParams {
    caseId: string;
}

export interface DeletePatientCaseDataCompletionRequestParams {
    caseId: string;
    category: 'comorbidities-assessments' | 'family-histories' | 'genomic-signatures' | 'genomic-variants' | 'lifestyles' | 'comorbidities' | 'neoplastic-entities' | 'performance-status' | 'radiotherapies' | 'risk-assessments' | 'stagings' | 'surgeries' | 'systemic-therapies' | 'tumor-markers' | 'vitals' | 'tumor-board-reviews' | 'adverse-events' | 'therapy-responses';
}

export interface GetPatientCaseBundleByIdRequestParams {
    caseId: string;
}

export interface GetPatientCaseByIdRequestParams {
    caseId: string;
}

export interface GetPatientCaseByPseudoidentifierRequestParams {
    pseudoidentifier: string;
}

export interface GetPatientCaseDataCompletionStatusRequestParams {
    caseId: string;
    category: 'comorbidities-assessments' | 'family-histories' | 'genomic-signatures' | 'genomic-variants' | 'lifestyles' | 'comorbidities' | 'neoplastic-entities' | 'performance-status' | 'radiotherapies' | 'risk-assessments' | 'stagings' | 'surgeries' | 'systemic-therapies' | 'tumor-markers' | 'vitals' | 'tumor-board-reviews' | 'adverse-events' | 'therapy-responses';
}

export interface GetPatientCasesRequestParams {
    ageLessThan?: number;
    ageLessThanOrEqual?: number;
    ageGreaterThan?: number;
    ageGreaterThanOrEqual?: number;
    ageEqual?: number;
    ageNotEqual?: number;
    ageBetween?: Array<any>;
    ageNotBetween?: Array<any>;
    overallSurvivalNotExists?: boolean;
    overallSurvivalExists?: boolean;
    overallSurvivalLessThan?: number;
    overallSurvivalLessThanOrEqual?: number;
    overallSurvivalGreaterThan?: number;
    overallSurvivalGreaterThanOrEqual?: number;
    overallSurvivalEqual?: number;
    overallSurvivalNotEqual?: number;
    overallSurvivalBetween?: Array<any>;
    overallSurvivalNotBetween?: Array<any>;
    dataCompletionRateLessThan?: number;
    dataCompletionRateLessThanOrEqual?: number;
    dataCompletionRateGreaterThan?: number;
    dataCompletionRateGreaterThanOrEqual?: number;
    dataCompletionRateEqual?: number;
    dataCompletionRateNotEqual?: number;
    dataCompletionRateBetween?: Array<any>;
    dataCompletionRateNotBetween?: Array<any>;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    pseudoidentifier?: string;
    pseudoidentifierNot?: string;
    pseudoidentifierContains?: string;
    pseudoidentifierNotContains?: string;
    pseudoidentifierBeginsWith?: string;
    pseudoidentifierNotBeginsWith?: string;
    pseudoidentifierEndsWith?: string;
    pseudoidentifierNotEndsWith?: string;
    clinicalCenter?: string;
    clinicalCenterNot?: string;
    clinicalCenterContains?: string;
    clinicalCenterNotContains?: string;
    clinicalCenterBeginsWith?: string;
    clinicalCenterNotBeginsWith?: string;
    clinicalCenterEndsWith?: string;
    clinicalCenterNotEndsWith?: string;
    clinicalIdentifier?: string;
    clinicalIdentifierNot?: string;
    clinicalIdentifierContains?: string;
    clinicalIdentifierNotContains?: string;
    clinicalIdentifierBeginsWith?: string;
    clinicalIdentifierNotBeginsWith?: string;
    clinicalIdentifierEndsWith?: string;
    clinicalIdentifierNotEndsWith?: string;
    consentStatus?: string;
    consentStatusNot?: string;
    consentStatusAnyOf?: Array<'valid' | 'revoked' | 'unknown'>;
    gender?: string;
    genderNot?: string;
    genderAnyOf?: Array<string>;
    genderNotAnyOf?: Array<string>;
    genderDescendantsOf?: string;
    raceNotExists?: boolean;
    raceExists?: boolean;
    race?: string;
    raceNot?: string;
    raceAnyOf?: Array<string>;
    raceNotAnyOf?: Array<string>;
    raceDescendantsOf?: string;
    sexAtBirthNotExists?: boolean;
    sexAtBirthExists?: boolean;
    sexAtBirth?: string;
    sexAtBirthNot?: string;
    sexAtBirthAnyOf?: Array<string>;
    sexAtBirthNotAnyOf?: Array<string>;
    sexAtBirthDescendantsOf?: string;
    genderIdentityNotExists?: boolean;
    genderIdentityExists?: boolean;
    genderIdentity?: string;
    genderIdentityNot?: string;
    genderIdentityAnyOf?: Array<string>;
    genderIdentityNotAnyOf?: Array<string>;
    genderIdentityDescendantsOf?: string;
    dateOfBirthBefore?: string;
    dateOfBirthAfter?: string;
    dateOfBirthOnOrBefore?: string;
    dateOfBirthOnOrAfter?: string;
    dateOfBirthOn?: string;
    dateOfBirthNotOn?: string;
    dateOfBirthBetween?: Array<any>;
    dateOfBirthNotBetween?: Array<any>;
    isDeceased?: boolean;
    dateOfDeathNotExists?: boolean;
    dateOfDeathExists?: boolean;
    dateOfDeathBefore?: string;
    dateOfDeathAfter?: string;
    dateOfDeathOnOrBefore?: string;
    dateOfDeathOnOrAfter?: string;
    dateOfDeathOn?: string;
    dateOfDeathNotOn?: string;
    dateOfDeathBetween?: Array<any>;
    dateOfDeathNotBetween?: Array<any>;
    causeOfDeathNotExists?: boolean;
    causeOfDeathExists?: boolean;
    causeOfDeath?: string;
    causeOfDeathNot?: string;
    causeOfDeathAnyOf?: Array<string>;
    causeOfDeathNotAnyOf?: Array<string>;
    causeOfDeathDescendantsOf?: string;
    manager?: string | null;
    limit?: number;
    offset?: number;
}

export interface UpdatePatientCaseByIdRequestParams {
    caseId: string;
    patientCaseCreate: PatientCaseCreate;
}


export interface PatientCasesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Patient Case
     * 
* @param requestParameters
     */
    createPatientCase(requestParameters: CreatePatientCaseRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Create Patient Case Bundle
     * 
* @param requestParameters
     */
    createPatientCaseBundleById(requestParameters: CreatePatientCaseBundleByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Create Patient Case Data Completion
     * 
* @param requestParameters
     */
    createPatientCaseDataCompletion(requestParameters: CreatePatientCaseDataCompletionRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Patient Case
     * 
* @param requestParameters
     */
    deletePatientCaseById(requestParameters: DeletePatientCaseByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Patient Case Data Completion
     * 
* @param requestParameters
     */
    deletePatientCaseDataCompletion(requestParameters: DeletePatientCaseDataCompletionRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get Patient Case Bundle By Id
     * 
* @param requestParameters
     */
    getPatientCaseBundleById(requestParameters: GetPatientCaseBundleByIdRequestParams, extraHttpRequestParams?: any): Observable<PatientCaseBundle>;

    /**
     * Get Patient Case By Id
     * 
* @param requestParameters
     */
    getPatientCaseById(requestParameters: GetPatientCaseByIdRequestParams, extraHttpRequestParams?: any): Observable<PatientCase>;

    /**
     * Get Patient Case By Pseudoidentifier
     * 
* @param requestParameters
     */
    getPatientCaseByPseudoidentifier(requestParameters: GetPatientCaseByPseudoidentifierRequestParams, extraHttpRequestParams?: any): Observable<PatientCase>;

    /**
     * Get Patient Case Data Completion Status
     * 
* @param requestParameters
     */
    getPatientCaseDataCompletionStatus(requestParameters: GetPatientCaseDataCompletionStatusRequestParams, extraHttpRequestParams?: any): Observable<PatientCaseDataCompletionStatusSchema>;

    /**
     * Get All Patient Cases Matching The Query
     * 
* @param requestParameters
     */
    getPatientCases(requestParameters: GetPatientCasesRequestParams, extraHttpRequestParams?: any): Observable<PaginatedPatientCase>;

    /**
     * Update Patient Case
     * 
* @param requestParameters
     */
    updatePatientCaseById(requestParameters: UpdatePatientCaseByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
