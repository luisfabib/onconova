/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ModifiedResourceSchema } from '../model/modified-resource-schema';
// @ts-ignore
import { PaginatedTreatmentResponseSchema } from '../model/paginated-treatment-response-schema';
// @ts-ignore
import { TreatmentResponseCreateSchema } from '../model/treatment-response-create-schema';
// @ts-ignore
import { TreatmentResponseSchema } from '../model/treatment-response-schema';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    TreatmentResponsesServiceInterface,
    CreateTreatmentResponseRequestParams,
    DeleteTreatmentResponseRequestParams,
    GetTreatmentResponseByIdRequestParams,
    GetTreatmentResponsesRequestParams,
    UpdateTreatmentResponseRequestParams
} from './treatment-responses.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class TreatmentResponsesService implements TreatmentResponsesServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Treatment Response
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTreatmentResponse(requestParameters: CreateTreatmentResponseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResourceSchema>;
    public createTreatmentResponse(requestParameters: CreateTreatmentResponseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResourceSchema>>;
    public createTreatmentResponse(requestParameters: CreateTreatmentResponseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResourceSchema>>;
    public createTreatmentResponse(requestParameters: CreateTreatmentResponseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const treatmentResponseCreateSchema = requestParameters?.treatmentResponseCreateSchema;
        if (treatmentResponseCreateSchema === null || treatmentResponseCreateSchema === undefined) {
            throw new Error('Required parameter treatmentResponseCreateSchema was null or undefined when calling createTreatmentResponse.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/treatment-responses`;
        return this.httpClient.request<ModifiedResourceSchema>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: treatmentResponseCreateSchema,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Treatment Response
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTreatmentResponse(requestParameters: DeleteTreatmentResponseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteTreatmentResponse(requestParameters: DeleteTreatmentResponseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteTreatmentResponse(requestParameters: DeleteTreatmentResponseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteTreatmentResponse(requestParameters: DeleteTreatmentResponseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const treatmentRresponseId = requestParameters?.treatmentRresponseId;
        if (treatmentRresponseId === null || treatmentRresponseId === undefined) {
            throw new Error('Required parameter treatmentRresponseId was null or undefined when calling deleteTreatmentResponse.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/treatment-responses/${this.configuration.encodeParam({name: "treatmentRresponseId", value: treatmentRresponseId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Treatment Response By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTreatmentResponseById(requestParameters: GetTreatmentResponseByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TreatmentResponseSchema>;
    public getTreatmentResponseById(requestParameters: GetTreatmentResponseByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TreatmentResponseSchema>>;
    public getTreatmentResponseById(requestParameters: GetTreatmentResponseByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TreatmentResponseSchema>>;
    public getTreatmentResponseById(requestParameters: GetTreatmentResponseByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const treatmentRresponseId = requestParameters?.treatmentRresponseId;
        if (treatmentRresponseId === null || treatmentRresponseId === undefined) {
            throw new Error('Required parameter treatmentRresponseId was null or undefined when calling getTreatmentResponseById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/treatment-responses/${this.configuration.encodeParam({name: "treatmentRresponseId", value: treatmentRresponseId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<TreatmentResponseSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Treatment Responses Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTreatmentResponses(requestParameters?: GetTreatmentResponsesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedTreatmentResponseSchema>;
    public getTreatmentResponses(requestParameters?: GetTreatmentResponsesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedTreatmentResponseSchema>>;
    public getTreatmentResponses(requestParameters?: GetTreatmentResponsesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedTreatmentResponseSchema>>;
    public getTreatmentResponses(requestParameters?: GetTreatmentResponsesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const recist = requestParameters?.recist;
        const recistNot = requestParameters?.recistNot;
        const recistAnyOf = requestParameters?.recistAnyOf;
        const recistNotAnyOf = requestParameters?.recistNotAnyOf;
        const recistDescendantsOf = requestParameters?.recistDescendantsOf;
        const recistInterpretedNotExists = requestParameters?.recistInterpretedNotExists;
        const recistInterpretedExists = requestParameters?.recistInterpretedExists;
        const recistInterpreted = requestParameters?.recistInterpreted;
        const methodology = requestParameters?.methodology;
        const methodologyNot = requestParameters?.methodologyNot;
        const methodologyAnyOf = requestParameters?.methodologyAnyOf;
        const methodologyNotAnyOf = requestParameters?.methodologyNotAnyOf;
        const methodologyDescendantsOf = requestParameters?.methodologyDescendantsOf;
        const assessedEntitiesIds = requestParameters?.assessedEntitiesIds;
        const assessedEntitiesIdsNot = requestParameters?.assessedEntitiesIdsNot;
        const assessedBodysitesCode = requestParameters?.assessedBodysitesCode;
        const assessedBodysitesCodeNot = requestParameters?.assessedBodysitesCodeNot;
        const assessedBodysitesCodeContains = requestParameters?.assessedBodysitesCodeContains;
        const assessedBodysitesCodeNotContains = requestParameters?.assessedBodysitesCodeNotContains;
        const assessedBodysitesCodeBeginsWith = requestParameters?.assessedBodysitesCodeBeginsWith;
        const assessedBodysitesCodeNotBeginsWith = requestParameters?.assessedBodysitesCodeNotBeginsWith;
        const assessedBodysitesCodeEndsWith = requestParameters?.assessedBodysitesCodeEndsWith;
        const assessedBodysitesCodeNotEndsWith = requestParameters?.assessedBodysitesCodeNotEndsWith;
        const assessedBodysitesSystem = requestParameters?.assessedBodysitesSystem;
        const assessedBodysitesSystemNot = requestParameters?.assessedBodysitesSystemNot;
        const assessedBodysitesSystemContains = requestParameters?.assessedBodysitesSystemContains;
        const assessedBodysitesSystemNotContains = requestParameters?.assessedBodysitesSystemNotContains;
        const assessedBodysitesSystemBeginsWith = requestParameters?.assessedBodysitesSystemBeginsWith;
        const assessedBodysitesSystemNotBeginsWith = requestParameters?.assessedBodysitesSystemNotBeginsWith;
        const assessedBodysitesSystemEndsWith = requestParameters?.assessedBodysitesSystemEndsWith;
        const assessedBodysitesSystemNotEndsWith = requestParameters?.assessedBodysitesSystemNotEndsWith;
        const assessedBodysitesDisplayNotExists = requestParameters?.assessedBodysitesDisplayNotExists;
        const assessedBodysitesDisplayExists = requestParameters?.assessedBodysitesDisplayExists;
        const assessedBodysitesDisplay = requestParameters?.assessedBodysitesDisplay;
        const assessedBodysitesDisplayNot = requestParameters?.assessedBodysitesDisplayNot;
        const assessedBodysitesDisplayContains = requestParameters?.assessedBodysitesDisplayContains;
        const assessedBodysitesDisplayNotContains = requestParameters?.assessedBodysitesDisplayNotContains;
        const assessedBodysitesDisplayBeginsWith = requestParameters?.assessedBodysitesDisplayBeginsWith;
        const assessedBodysitesDisplayNotBeginsWith = requestParameters?.assessedBodysitesDisplayNotBeginsWith;
        const assessedBodysitesDisplayEndsWith = requestParameters?.assessedBodysitesDisplayEndsWith;
        const assessedBodysitesDisplayNotEndsWith = requestParameters?.assessedBodysitesDisplayNotEndsWith;
        const assessedBodysitesVersionNotExists = requestParameters?.assessedBodysitesVersionNotExists;
        const assessedBodysitesVersionExists = requestParameters?.assessedBodysitesVersionExists;
        const assessedBodysitesVersion = requestParameters?.assessedBodysitesVersion;
        const assessedBodysitesVersionNot = requestParameters?.assessedBodysitesVersionNot;
        const assessedBodysitesVersionContains = requestParameters?.assessedBodysitesVersionContains;
        const assessedBodysitesVersionNotContains = requestParameters?.assessedBodysitesVersionNotContains;
        const assessedBodysitesVersionBeginsWith = requestParameters?.assessedBodysitesVersionBeginsWith;
        const assessedBodysitesVersionNotBeginsWith = requestParameters?.assessedBodysitesVersionNotBeginsWith;
        const assessedBodysitesVersionEndsWith = requestParameters?.assessedBodysitesVersionEndsWith;
        const assessedBodysitesVersionNotEndsWith = requestParameters?.assessedBodysitesVersionNotEndsWith;
        const assessedBodysitesSynonymsNotExists = requestParameters?.assessedBodysitesSynonymsNotExists;
        const assessedBodysitesSynonymsExists = requestParameters?.assessedBodysitesSynonymsExists;
        const assessedBodysitesPropertiesNotExists = requestParameters?.assessedBodysitesPropertiesNotExists;
        const assessedBodysitesPropertiesExists = requestParameters?.assessedBodysitesPropertiesExists;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (dateBefore !== undefined && dateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateBefore, 'date.before');
        }
        if (dateAfter !== undefined && dateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateAfter, 'date.after');
        }
        if (dateOnOrBefore !== undefined && dateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrBefore, 'date.onOrBefore');
        }
        if (dateOnOrAfter !== undefined && dateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrAfter, 'date.onOrAfter');
        }
        if (dateOn !== undefined && dateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOn, 'date.on');
        }
        if (dateNotOn !== undefined && dateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateNotOn, 'date.not.on');
        }
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        if (recist !== undefined && recist !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recist, 'recist');
        }
        if (recistNot !== undefined && recistNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recistNot, 'recist.not');
        }
        if (recistAnyOf) {
            recistAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recist.anyOf');
            })
        }
        if (recistNotAnyOf) {
            recistNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recist.not.anyOf');
            })
        }
        if (recistDescendantsOf !== undefined && recistDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recistDescendantsOf, 'recist.descendantsOf');
        }
        if (recistInterpretedNotExists !== undefined && recistInterpretedNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recistInterpretedNotExists, 'recistInterpreted.not.exists');
        }
        if (recistInterpretedExists !== undefined && recistInterpretedExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recistInterpretedExists, 'recistInterpreted.exists');
        }
        if (recistInterpreted !== undefined && recistInterpreted !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recistInterpreted, 'recistInterpreted');
        }
        if (methodology !== undefined && methodology !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>methodology, 'methodology');
        }
        if (methodologyNot !== undefined && methodologyNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>methodologyNot, 'methodology.not');
        }
        if (methodologyAnyOf) {
            methodologyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'methodology.anyOf');
            })
        }
        if (methodologyNotAnyOf) {
            methodologyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'methodology.not.anyOf');
            })
        }
        if (methodologyDescendantsOf !== undefined && methodologyDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>methodologyDescendantsOf, 'methodology.descendantsOf');
        }
        if (assessedEntitiesIds !== undefined && assessedEntitiesIds !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedEntitiesIds, 'assessedEntitiesIds');
        }
        if (assessedEntitiesIdsNot !== undefined && assessedEntitiesIdsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedEntitiesIdsNot, 'assessedEntitiesIds.not');
        }
        if (assessedBodysitesCode !== undefined && assessedBodysitesCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCode, 'assessedBodysites.code');
        }
        if (assessedBodysitesCodeNot !== undefined && assessedBodysitesCodeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeNot, 'assessedBodysites.code.not');
        }
        if (assessedBodysitesCodeContains !== undefined && assessedBodysitesCodeContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeContains, 'assessedBodysites.code.contains');
        }
        if (assessedBodysitesCodeNotContains !== undefined && assessedBodysitesCodeNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeNotContains, 'assessedBodysites.code.not.contains');
        }
        if (assessedBodysitesCodeBeginsWith !== undefined && assessedBodysitesCodeBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeBeginsWith, 'assessedBodysites.code.beginsWith');
        }
        if (assessedBodysitesCodeNotBeginsWith !== undefined && assessedBodysitesCodeNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeNotBeginsWith, 'assessedBodysites.code.not.beginsWith');
        }
        if (assessedBodysitesCodeEndsWith !== undefined && assessedBodysitesCodeEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeEndsWith, 'assessedBodysites.code.endsWith');
        }
        if (assessedBodysitesCodeNotEndsWith !== undefined && assessedBodysitesCodeNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesCodeNotEndsWith, 'assessedBodysites.code.not.endsWith');
        }
        if (assessedBodysitesSystem !== undefined && assessedBodysitesSystem !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystem, 'assessedBodysites.system');
        }
        if (assessedBodysitesSystemNot !== undefined && assessedBodysitesSystemNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemNot, 'assessedBodysites.system.not');
        }
        if (assessedBodysitesSystemContains !== undefined && assessedBodysitesSystemContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemContains, 'assessedBodysites.system.contains');
        }
        if (assessedBodysitesSystemNotContains !== undefined && assessedBodysitesSystemNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemNotContains, 'assessedBodysites.system.not.contains');
        }
        if (assessedBodysitesSystemBeginsWith !== undefined && assessedBodysitesSystemBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemBeginsWith, 'assessedBodysites.system.beginsWith');
        }
        if (assessedBodysitesSystemNotBeginsWith !== undefined && assessedBodysitesSystemNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemNotBeginsWith, 'assessedBodysites.system.not.beginsWith');
        }
        if (assessedBodysitesSystemEndsWith !== undefined && assessedBodysitesSystemEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemEndsWith, 'assessedBodysites.system.endsWith');
        }
        if (assessedBodysitesSystemNotEndsWith !== undefined && assessedBodysitesSystemNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSystemNotEndsWith, 'assessedBodysites.system.not.endsWith');
        }
        if (assessedBodysitesDisplayNotExists !== undefined && assessedBodysitesDisplayNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayNotExists, 'assessedBodysites.display.not.exists');
        }
        if (assessedBodysitesDisplayExists !== undefined && assessedBodysitesDisplayExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayExists, 'assessedBodysites.display.exists');
        }
        if (assessedBodysitesDisplay !== undefined && assessedBodysitesDisplay !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplay, 'assessedBodysites.display');
        }
        if (assessedBodysitesDisplayNot !== undefined && assessedBodysitesDisplayNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayNot, 'assessedBodysites.display.not');
        }
        if (assessedBodysitesDisplayContains !== undefined && assessedBodysitesDisplayContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayContains, 'assessedBodysites.display.contains');
        }
        if (assessedBodysitesDisplayNotContains !== undefined && assessedBodysitesDisplayNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayNotContains, 'assessedBodysites.display.not.contains');
        }
        if (assessedBodysitesDisplayBeginsWith !== undefined && assessedBodysitesDisplayBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayBeginsWith, 'assessedBodysites.display.beginsWith');
        }
        if (assessedBodysitesDisplayNotBeginsWith !== undefined && assessedBodysitesDisplayNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayNotBeginsWith, 'assessedBodysites.display.not.beginsWith');
        }
        if (assessedBodysitesDisplayEndsWith !== undefined && assessedBodysitesDisplayEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayEndsWith, 'assessedBodysites.display.endsWith');
        }
        if (assessedBodysitesDisplayNotEndsWith !== undefined && assessedBodysitesDisplayNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesDisplayNotEndsWith, 'assessedBodysites.display.not.endsWith');
        }
        if (assessedBodysitesVersionNotExists !== undefined && assessedBodysitesVersionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionNotExists, 'assessedBodysites.version.not.exists');
        }
        if (assessedBodysitesVersionExists !== undefined && assessedBodysitesVersionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionExists, 'assessedBodysites.version.exists');
        }
        if (assessedBodysitesVersion !== undefined && assessedBodysitesVersion !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersion, 'assessedBodysites.version');
        }
        if (assessedBodysitesVersionNot !== undefined && assessedBodysitesVersionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionNot, 'assessedBodysites.version.not');
        }
        if (assessedBodysitesVersionContains !== undefined && assessedBodysitesVersionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionContains, 'assessedBodysites.version.contains');
        }
        if (assessedBodysitesVersionNotContains !== undefined && assessedBodysitesVersionNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionNotContains, 'assessedBodysites.version.not.contains');
        }
        if (assessedBodysitesVersionBeginsWith !== undefined && assessedBodysitesVersionBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionBeginsWith, 'assessedBodysites.version.beginsWith');
        }
        if (assessedBodysitesVersionNotBeginsWith !== undefined && assessedBodysitesVersionNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionNotBeginsWith, 'assessedBodysites.version.not.beginsWith');
        }
        if (assessedBodysitesVersionEndsWith !== undefined && assessedBodysitesVersionEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionEndsWith, 'assessedBodysites.version.endsWith');
        }
        if (assessedBodysitesVersionNotEndsWith !== undefined && assessedBodysitesVersionNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesVersionNotEndsWith, 'assessedBodysites.version.not.endsWith');
        }
        if (assessedBodysitesSynonymsNotExists !== undefined && assessedBodysitesSynonymsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSynonymsNotExists, 'assessedBodysites.synonyms.not.exists');
        }
        if (assessedBodysitesSynonymsExists !== undefined && assessedBodysitesSynonymsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesSynonymsExists, 'assessedBodysites.synonyms.exists');
        }
        if (assessedBodysitesPropertiesNotExists !== undefined && assessedBodysitesPropertiesNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesPropertiesNotExists, 'assessedBodysites.properties.not.exists');
        }
        if (assessedBodysitesPropertiesExists !== undefined && assessedBodysitesPropertiesExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessedBodysitesPropertiesExists, 'assessedBodysites.properties.exists');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/treatment-responses`;
        return this.httpClient.request<PaginatedTreatmentResponseSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Treatment Response
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTreatmentResponse(requestParameters: UpdateTreatmentResponseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResourceSchema>;
    public updateTreatmentResponse(requestParameters: UpdateTreatmentResponseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResourceSchema>>;
    public updateTreatmentResponse(requestParameters: UpdateTreatmentResponseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResourceSchema>>;
    public updateTreatmentResponse(requestParameters: UpdateTreatmentResponseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const treatmentRresponseId = requestParameters?.treatmentRresponseId;
        if (treatmentRresponseId === null || treatmentRresponseId === undefined) {
            throw new Error('Required parameter treatmentRresponseId was null or undefined when calling updateTreatmentResponse.');
        }
        const treatmentResponseCreateSchema = requestParameters?.treatmentResponseCreateSchema;
        if (treatmentResponseCreateSchema === null || treatmentResponseCreateSchema === undefined) {
            throw new Error('Required parameter treatmentResponseCreateSchema was null or undefined when calling updateTreatmentResponse.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/treatment-responses/${this.configuration.encodeParam({name: "treatmentRresponseId", value: treatmentRresponseId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResourceSchema>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: treatmentResponseCreateSchema,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
