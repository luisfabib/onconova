/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ModifiedResourceSchema } from '../model/models';
import { PaginatedVitalsSchema } from '../model/models';
import { VitalsCreateSchema } from '../model/models';
import { VitalsSchema } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateVitalsRequestParams {
    vitalsCreateSchema: VitalsCreateSchema;
}

export interface DeleteVitalsByIdRequestParams {
    vitalsId: string;
}

export interface GetVitalsRequestParams {
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    heightNotExists?: boolean;
    heightExists?: boolean;
    heightLessThan?: number;
    heightLessThanOrEqual?: number;
    heightGreaterThan?: number;
    heightGreaterThanOrEqual?: number;
    heightEqual?: number;
    heightNotEqual?: number;
    heightBetween?: Array<any>;
    heightNotBetween?: Array<any>;
    weightNotExists?: boolean;
    weightExists?: boolean;
    weightLessThan?: number;
    weightLessThanOrEqual?: number;
    weightGreaterThan?: number;
    weightGreaterThanOrEqual?: number;
    weightEqual?: number;
    weightNotEqual?: number;
    weightBetween?: Array<any>;
    weightNotBetween?: Array<any>;
    bloodPressureSystolicNotExists?: boolean;
    bloodPressureSystolicExists?: boolean;
    bloodPressureSystolicLessThan?: number;
    bloodPressureSystolicLessThanOrEqual?: number;
    bloodPressureSystolicGreaterThan?: number;
    bloodPressureSystolicGreaterThanOrEqual?: number;
    bloodPressureSystolicEqual?: number;
    bloodPressureSystolicNotEqual?: number;
    bloodPressureSystolicBetween?: Array<any>;
    bloodPressureSystolicNotBetween?: Array<any>;
    bloodPressureDiastolicNotExists?: boolean;
    bloodPressureDiastolicExists?: boolean;
    bloodPressureDiastolicLessThan?: number;
    bloodPressureDiastolicLessThanOrEqual?: number;
    bloodPressureDiastolicGreaterThan?: number;
    bloodPressureDiastolicGreaterThanOrEqual?: number;
    bloodPressureDiastolicEqual?: number;
    bloodPressureDiastolicNotEqual?: number;
    bloodPressureDiastolicBetween?: Array<any>;
    bloodPressureDiastolicNotBetween?: Array<any>;
    temperatureNotExists?: boolean;
    temperatureExists?: boolean;
    temperatureLessThan?: number;
    temperatureLessThanOrEqual?: number;
    temperatureGreaterThan?: number;
    temperatureGreaterThanOrEqual?: number;
    temperatureEqual?: number;
    temperatureNotEqual?: number;
    temperatureBetween?: Array<any>;
    temperatureNotBetween?: Array<any>;
    bodyMassIndexNotExists?: boolean;
    bodyMassIndexExists?: boolean;
    bodyMassIndexLessThan?: number;
    bodyMassIndexLessThanOrEqual?: number;
    bodyMassIndexGreaterThan?: number;
    bodyMassIndexGreaterThanOrEqual?: number;
    bodyMassIndexEqual?: number;
    bodyMassIndexNotEqual?: number;
    bodyMassIndexBetween?: Array<any>;
    bodyMassIndexNotBetween?: Array<any>;
    limit?: number;
    offset?: number;
}

export interface GetVitalsByIdRequestParams {
    vitalsId: string;
}

export interface UpdateVitalsByIdRequestParams {
    vitalsId: string;
    vitalsCreateSchema: VitalsCreateSchema;
}


export interface VitalsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Vitals
     * 
* @param requestParameters
     */
    createVitals(requestParameters: CreateVitalsRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

    /**
     * Delete Vitals
     * 
* @param requestParameters
     */
    deleteVitalsById(requestParameters: DeleteVitalsByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Vitals Matching The Query
     * 
* @param requestParameters
     */
    getVitals(requestParameters: GetVitalsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedVitalsSchema>;

    /**
     * Get Vitals By Id
     * 
* @param requestParameters
     */
    getVitalsById(requestParameters: GetVitalsByIdRequestParams, extraHttpRequestParams?: any): Observable<VitalsSchema>;

    /**
     * Update Vitals
     * 
* @param requestParameters
     */
    updateVitalsById(requestParameters: UpdateVitalsByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResourceSchema>;

}
