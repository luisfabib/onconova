{
  "openapi": "3.1.0",
  "info": {
  "title": "POP API",
  "version": "1.0.0",
  "description": "Precision Oncology Platform API for exchange of research cancer data"
  },
  "paths": {
  "/api/auth/token/pair": {
  "post": {
  "operationId": "getTokenPair",
  "summary": "Obtain Token Pair",
  "parameters": [],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TokenPairSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Auth"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/UserCredentialsSchema"
  }
  }
  },
  "required": true
  }
  }
  },
  "/api/auth/token/refresh": {
  "post": {
  "operationId": "refreshTokenPair",
  "summary": "Refresh Token Pair",
  "parameters": [],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RefreshedTokenPairSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Auth"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TokenRefreshSchema"
  }
  }
  },
  "required": true
  }
  }
  },
  "/api/auth/users": {
  "get": {
  "operationId": "getUsers",
  "summary": "Get All Users Matching The Query",
  "parameters": [],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  }
  },
  "tags": [
  "Auth"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/auth/users/{userId}": {
  "get": {
  "operationId": "getUserById",
  "summary": "Get User By Id",
  "parameters": [
  {
  "in": "path",
  "name": "userId",
  "schema": {
  "title": "Userid",
  "type": "integer"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/UserSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Auth"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases": {
  "post": {
  "operationId": "createPatientCase",
  "summary": "Create Patient Case",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCaseCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getPatientCases",
  "summary": "Get All Patient Cases Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "age.lessThan",
  "schema": {
  "description": "Age - Filter for entries with values less than the specified value",
  "title": "Age.Lessthan",
  "type": "integer",
  "x-orm-lookup": "db_age__lt"
  },
  "required": false,
  "description": "Age - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "age.lessThanOrEqual",
  "schema": {
  "description": "Age - Filter for entries with values less than or equal to the specified value",
  "title": "Age.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "db_age__lte"
  },
  "required": false,
  "description": "Age - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "age.greaterThan",
  "schema": {
  "description": "Age - Filter for entries with values greater than the specified value",
  "title": "Age.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "db_age__gt"
  },
  "required": false,
  "description": "Age - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "age.greaterThanOrEqual",
  "schema": {
  "description": "Age - Filter for entries with values greater than or equal to the specified value",
  "title": "Age.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "db_age__gte"
  },
  "required": false,
  "description": "Age - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "age.equal",
  "schema": {
  "description": "Age - Filter for entries with values exactly equal to the specified value",
  "title": "Age.Equal",
  "type": "integer",
  "x-orm-lookup": "db_age__exact"
  },
  "required": false,
  "description": "Age - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "age.not.equal",
  "schema": {
  "description": "Age - Filter for entries with values not equal to the specified value",
  "title": "Age.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "db_age__exact"
  },
  "required": false,
  "description": "Age - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "age.between",
  "schema": {
  "description": "Age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Age.Between",
  "type": "array",
  "x-orm-lookup": "db_age__range"
  },
  "required": false,
  "description": "Age - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "age.not.between",
  "schema": {
  "description": "Age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Age.Not.Between",
  "type": "array",
  "x-orm-lookup": "db_age__range"
  },
  "required": false,
  "description": "Age - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.lessThan",
  "schema": {
  "description": "Data completion rate - Filter for entries with values less than the specified value",
  "title": "Datacompletionrate.Lessthan",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__lt"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.lessThanOrEqual",
  "schema": {
  "description": "Data completion rate - Filter for entries with values less than or equal to the specified value",
  "title": "Datacompletionrate.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__lte"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.greaterThan",
  "schema": {
  "description": "Data completion rate - Filter for entries with values greater than the specified value",
  "title": "Datacompletionrate.Greaterthan",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__gt"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.greaterThanOrEqual",
  "schema": {
  "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value",
  "title": "Datacompletionrate.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__gte"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.equal",
  "schema": {
  "description": "Data completion rate - Filter for entries with values exactly equal to the specified value",
  "title": "Datacompletionrate.Equal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__exact"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.not.equal",
  "schema": {
  "description": "Data completion rate - Filter for entries with values not equal to the specified value",
  "title": "Datacompletionrate.Not.Equal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__exact"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.between",
  "schema": {
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Datacompletionrate.Between",
  "type": "array",
  "x-orm-lookup": "db_data_completion_rate__range"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dataCompletionRate.not.between",
  "schema": {
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Datacompletionrate.Not.Between",
  "type": "array",
  "x-orm-lookup": "db_data_completion_rate__range"
  },
  "required": false,
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "pseudoidentifier",
  "schema": {
  "description": "Pseudoidentifier - Filter for full text matches",
  "title": "Pseudoidentifier",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iexact"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.not",
  "schema": {
  "description": "Pseudoidentifier - Filter for full text mismatches",
  "title": "Pseudoidentifier.Not",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iexact"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.contains",
  "schema": {
  "description": "Pseudoidentifier - Filter for partial text matches",
  "title": "Pseudoidentifier.Contains",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__icontains"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.not.contains",
  "schema": {
  "description": "Pseudoidentifier - Filter for partial text mismatches",
  "title": "Pseudoidentifier.Not.Contains",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__icontains"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.beginsWith",
  "schema": {
  "description": "Pseudoidentifier - Filter for entries starting with the text",
  "title": "Pseudoidentifier.Beginswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__istartswith"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.not.beginsWith",
  "schema": {
  "description": "Pseudoidentifier - Filter for entries not starting with the text",
  "title": "Pseudoidentifier.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__istartswith"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.endsWith",
  "schema": {
  "description": "Pseudoidentifier - Filter for entries ending with the text",
  "title": "Pseudoidentifier.Endswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iendswith"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "pseudoidentifier.not.endsWith",
  "schema": {
  "description": "Pseudoidentifier - Filter for entries not ending with the text",
  "title": "Pseudoidentifier.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iendswith"
  },
  "required": false,
  "description": "Pseudoidentifier - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "gender",
  "schema": {
  "description": "Gender - Filter for a matching concept code",
  "title": "Gender",
  "type": "string",
  "x-orm-lookup": "gender__code__iexact"
  },
  "required": false,
  "description": "Gender - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "gender.not",
  "schema": {
  "description": "Gender - Filter for a mismatching concept code",
  "title": "Gender.Not",
  "type": "string",
  "x-orm-lookup": "gender__code__iexact"
  },
  "required": false,
  "description": "Gender - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "gender.anyOf",
  "schema": {
  "description": "Gender - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Gender.Anyof",
  "type": "array",
  "x-orm-lookup": "gender__code__in"
  },
  "required": false,
  "description": "Gender - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "gender.not.anyOf",
  "schema": {
  "description": "Gender - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Gender.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "gender__code__in"
  },
  "required": false,
  "description": "Gender - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "gender.descendantsOf",
  "schema": {
  "description": "Gender - Filter for all child concepts of a given concepts code",
  "title": "Gender.Descendantsof",
  "type": "string",
  "x-orm-lookup": "gender__None"
  },
  "required": false,
  "description": "Gender - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "race.not.exists",
  "schema": {
  "description": "Race - Filter for entries without a value",
  "title": "Race.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "race__isnull"
  },
  "required": false,
  "description": "Race - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "race.exists",
  "schema": {
  "description": "Race - Filter for entries with a value",
  "title": "Race.Exists",
  "type": "boolean",
  "x-orm-lookup": "race__isnull"
  },
  "required": false,
  "description": "Race - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "race",
  "schema": {
  "description": "Race - Filter for a matching concept code",
  "title": "Race",
  "type": "string",
  "x-orm-lookup": "race__code__iexact"
  },
  "required": false,
  "description": "Race - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "race.not",
  "schema": {
  "description": "Race - Filter for a mismatching concept code",
  "title": "Race.Not",
  "type": "string",
  "x-orm-lookup": "race__code__iexact"
  },
  "required": false,
  "description": "Race - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "race.anyOf",
  "schema": {
  "description": "Race - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Race.Anyof",
  "type": "array",
  "x-orm-lookup": "race__code__in"
  },
  "required": false,
  "description": "Race - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "race.not.anyOf",
  "schema": {
  "description": "Race - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Race.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "race__code__in"
  },
  "required": false,
  "description": "Race - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "race.descendantsOf",
  "schema": {
  "description": "Race - Filter for all child concepts of a given concepts code",
  "title": "Race.Descendantsof",
  "type": "string",
  "x-orm-lookup": "race__None"
  },
  "required": false,
  "description": "Race - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "sexAtBirth.not.exists",
  "schema": {
  "description": "Birth sex - Filter for entries without a value",
  "title": "Sexatbirth.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "sex_at_birth__isnull"
  },
  "required": false,
  "description": "Birth sex - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "sexAtBirth.exists",
  "schema": {
  "description": "Birth sex - Filter for entries with a value",
  "title": "Sexatbirth.Exists",
  "type": "boolean",
  "x-orm-lookup": "sex_at_birth__isnull"
  },
  "required": false,
  "description": "Birth sex - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "sexAtBirth",
  "schema": {
  "description": "Birth sex - Filter for a matching concept code",
  "title": "Sexatbirth",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__code__iexact"
  },
  "required": false,
  "description": "Birth sex - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "sexAtBirth.not",
  "schema": {
  "description": "Birth sex - Filter for a mismatching concept code",
  "title": "Sexatbirth.Not",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__code__iexact"
  },
  "required": false,
  "description": "Birth sex - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "sexAtBirth.anyOf",
  "schema": {
  "description": "Birth sex - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Sexatbirth.Anyof",
  "type": "array",
  "x-orm-lookup": "sex_at_birth__code__in"
  },
  "required": false,
  "description": "Birth sex - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "sexAtBirth.not.anyOf",
  "schema": {
  "description": "Birth sex - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Sexatbirth.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "sex_at_birth__code__in"
  },
  "required": false,
  "description": "Birth sex - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "sexAtBirth.descendantsOf",
  "schema": {
  "description": "Birth sex - Filter for all child concepts of a given concepts code",
  "title": "Sexatbirth.Descendantsof",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__None"
  },
  "required": false,
  "description": "Birth sex - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "genderIdentity.not.exists",
  "schema": {
  "description": "Gender identity - Filter for entries without a value",
  "title": "Genderidentity.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "gender_identity__isnull"
  },
  "required": false,
  "description": "Gender identity - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genderIdentity.exists",
  "schema": {
  "description": "Gender identity - Filter for entries with a value",
  "title": "Genderidentity.Exists",
  "type": "boolean",
  "x-orm-lookup": "gender_identity__isnull"
  },
  "required": false,
  "description": "Gender identity - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genderIdentity",
  "schema": {
  "description": "Gender identity - Filter for a matching concept code",
  "title": "Genderidentity",
  "type": "string",
  "x-orm-lookup": "gender_identity__code__iexact"
  },
  "required": false,
  "description": "Gender identity - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "genderIdentity.not",
  "schema": {
  "description": "Gender identity - Filter for a mismatching concept code",
  "title": "Genderidentity.Not",
  "type": "string",
  "x-orm-lookup": "gender_identity__code__iexact"
  },
  "required": false,
  "description": "Gender identity - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "genderIdentity.anyOf",
  "schema": {
  "description": "Gender identity - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genderidentity.Anyof",
  "type": "array",
  "x-orm-lookup": "gender_identity__code__in"
  },
  "required": false,
  "description": "Gender identity - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "genderIdentity.not.anyOf",
  "schema": {
  "description": "Gender identity - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genderidentity.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "gender_identity__code__in"
  },
  "required": false,
  "description": "Gender identity - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "genderIdentity.descendantsOf",
  "schema": {
  "description": "Gender identity - Filter for all child concepts of a given concepts code",
  "title": "Genderidentity.Descendantsof",
  "type": "string",
  "x-orm-lookup": "gender_identity__None"
  },
  "required": false,
  "description": "Gender identity - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "dateOfBirth.before",
  "schema": {
  "description": "Date of birth - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateofbirth.Before",
  "type": "string",
  "x-orm-lookup": "date_of_birth__lt"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.after",
  "schema": {
  "description": "Date of birth - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateofbirth.After",
  "type": "string",
  "x-orm-lookup": "date_of_birth__gt"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.onOrBefore",
  "schema": {
  "description": "Date of birth - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateofbirth.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_of_birth__lte"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.onOrAfter",
  "schema": {
  "description": "Date of birth - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateofbirth.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_of_birth__gte"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.on",
  "schema": {
  "description": "Date of birth - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateofbirth.On",
  "type": "string",
  "x-orm-lookup": "date_of_birth__exact"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.not.on",
  "schema": {
  "description": "Date of birth - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateofbirth.Not.On",
  "type": "string",
  "x-orm-lookup": "date_of_birth__exact"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "dateOfBirth.between",
  "schema": {
  "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofbirth.Between",
  "type": "array",
  "x-orm-lookup": "date_of_birth__range"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dateOfBirth.not.between",
  "schema": {
  "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofbirth.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_of_birth__range"
  },
  "required": false,
  "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "isDeceased",
  "schema": {
  "description": "Is deceased - ('Filter for yes/no statement',)",
  "title": "Isdeceased",
  "type": "boolean",
  "x-orm-lookup": "is_deceased__exact"
  },
  "required": false,
  "description": "Is deceased - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "dateOfDeath.not.exists",
  "schema": {
  "description": "Date of death - Filter for entries without a value",
  "title": "Dateofdeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_of_death__isnull"
  },
  "required": false,
  "description": "Date of death - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.exists",
  "schema": {
  "description": "Date of death - Filter for entries with a value",
  "title": "Dateofdeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_of_death__isnull"
  },
  "required": false,
  "description": "Date of death - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.before",
  "schema": {
  "description": "Date of death - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateofdeath.Before",
  "type": "string",
  "x-orm-lookup": "date_of_death__lt"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.after",
  "schema": {
  "description": "Date of death - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateofdeath.After",
  "type": "string",
  "x-orm-lookup": "date_of_death__gt"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.onOrBefore",
  "schema": {
  "description": "Date of death - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateofdeath.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_of_death__lte"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.onOrAfter",
  "schema": {
  "description": "Date of death - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateofdeath.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_of_death__gte"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.on",
  "schema": {
  "description": "Date of death - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateofdeath.On",
  "type": "string",
  "x-orm-lookup": "date_of_death__exact"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.not.on",
  "schema": {
  "description": "Date of death - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateofdeath.Not.On",
  "type": "string",
  "x-orm-lookup": "date_of_death__exact"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "dateOfDeath.between",
  "schema": {
  "description": "Date of death - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofdeath.Between",
  "type": "array",
  "x-orm-lookup": "date_of_death__range"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dateOfDeath.not.between",
  "schema": {
  "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofdeath.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_of_death__range"
  },
  "required": false,
  "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "causeOfDeath.not.exists",
  "schema": {
  "description": "Cause of death - Filter for entries without a value",
  "title": "Causeofdeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "cause_of_death__isnull"
  },
  "required": false,
  "description": "Cause of death - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "causeOfDeath.exists",
  "schema": {
  "description": "Cause of death - Filter for entries with a value",
  "title": "Causeofdeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "cause_of_death__isnull"
  },
  "required": false,
  "description": "Cause of death - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "causeOfDeath",
  "schema": {
  "description": "Cause of death - Filter for a matching concept code",
  "title": "Causeofdeath",
  "type": "string",
  "x-orm-lookup": "cause_of_death__code__iexact"
  },
  "required": false,
  "description": "Cause of death - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "causeOfDeath.not",
  "schema": {
  "description": "Cause of death - Filter for a mismatching concept code",
  "title": "Causeofdeath.Not",
  "type": "string",
  "x-orm-lookup": "cause_of_death__code__iexact"
  },
  "required": false,
  "description": "Cause of death - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "causeOfDeath.anyOf",
  "schema": {
  "description": "Cause of death - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Causeofdeath.Anyof",
  "type": "array",
  "x-orm-lookup": "cause_of_death__code__in"
  },
  "required": false,
  "description": "Cause of death - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "causeOfDeath.not.anyOf",
  "schema": {
  "description": "Cause of death - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Causeofdeath.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "cause_of_death__code__in"
  },
  "required": false,
  "description": "Cause of death - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "causeOfDeath.descendantsOf",
  "schema": {
  "description": "Cause of death - Filter for all child concepts of a given concepts code",
  "title": "Causeofdeath.Descendantsof",
  "type": "string",
  "x-orm-lookup": "cause_of_death__None"
  },
  "required": false,
  "description": "Cause of death - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "manager",
  "schema": {
  "description": "Filter for a particular case manager by its username",
  "title": "Manager",
  "type": "string"
  },
  "required": false,
  "description": "Filter for a particular case manager by its username"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_PatientCase_"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases/bundle": {
  "post": {
  "operationId": "createPatientCaseBundleById",
  "summary": "Create Patient Case Bundle",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCaseBundleCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases/{caseId}/data-completion/{category}": {
  "post": {
  "operationId": "createPatientCaseDataCompletion",
  "summary": "Create Patient Case Data Completion",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "category",
  "schema": {
  "enum": [
  "comorbidities-assessments",
  "family-histories",
  "genomic-signatures",
  "genomic-variants",
  "lifestyles",
  "comorbidities",
  "neoplastic-entities",
  "performance-status",
  "radiotherapies",
  "risk-assessments",
  "stagings",
  "surgeries",
  "systemic-therapies",
  "tumor-markers",
  "vitals",
  "tumor-board-reviews",
  "adverse-events",
  "therapy-responses"
  ],
  "title": "PatientCaseDataCategories",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "delete": {
  "operationId": "deletePatientCaseDataCompletion",
  "summary": "Delete Patient Case Data Completion",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "category",
  "schema": {
  "enum": [
  "comorbidities-assessments",
  "family-histories",
  "genomic-signatures",
  "genomic-variants",
  "lifestyles",
  "comorbidities",
  "neoplastic-entities",
  "performance-status",
  "radiotherapies",
  "risk-assessments",
  "stagings",
  "surgeries",
  "systemic-therapies",
  "tumor-markers",
  "vitals",
  "tumor-board-reviews",
  "adverse-events",
  "therapy-responses"
  ],
  "title": "PatientCaseDataCategories",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getPatientCaseDataCompletionStatus",
  "summary": "Get Patient Case Data Completion Status",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "category",
  "schema": {
  "enum": [
  "comorbidities-assessments",
  "family-histories",
  "genomic-signatures",
  "genomic-variants",
  "lifestyles",
  "comorbidities",
  "neoplastic-entities",
  "performance-status",
  "radiotherapies",
  "risk-assessments",
  "stagings",
  "surgeries",
  "systemic-therapies",
  "tumor-markers",
  "vitals",
  "tumor-board-reviews",
  "adverse-events",
  "therapy-responses"
  ],
  "title": "PatientCaseDataCategories",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCaseDataCompletionStatusSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases/{caseId}": {
  "delete": {
  "operationId": "deletePatientCaseById",
  "summary": "Delete Patient Case",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getPatientCaseById",
  "summary": "Get Patient Case By Id",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCase"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updatePatientCaseById",
  "summary": "Update Patient Case",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCaseCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases/bundle/{caseId}": {
  "get": {
  "operationId": "getPatientCaseBundleById",
  "summary": "Get Patient Case Bundle By Id",
  "parameters": [
  {
  "in": "path",
  "name": "caseId",
  "schema": {
  "title": "Caseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCaseBundle"
  }
  }
  }
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/patient-cases/pseudo/{pseudoidentifier}": {
  "get": {
  "operationId": "getPatientCaseByPseudoidentifier",
  "summary": "Get Patient Case By Pseudoidentifier",
  "parameters": [
  {
  "in": "path",
  "name": "pseudoidentifier",
  "schema": {
  "title": "Pseudoidentifier",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PatientCase"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Patient Cases"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/neoplastic-entities": {
  "post": {
  "operationId": "createNeoplasticEntity",
  "summary": "Create Neoplastic Entity",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Neoplastic Entities"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/NeoplasticEntityCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getNeoplasticEntities",
  "summary": "Get All Neoplastic Entities Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "relationship",
  "schema": {
  "allOf": [
  {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  }
  ],
  "description": "Neoplastic relationship - ('Filter for single value choice',)",
  "x-orm-lookup": "relationship__exact"
  },
  "required": false,
  "description": "Neoplastic relationship - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "relationship.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  }
  ],
  "description": "Neoplastic relationship - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "relationship__exact"
  },
  "required": false,
  "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "relationship.anyOf",
  "schema": {
  "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  },
  "title": "Relationship.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__in"
  },
  "required": false,
  "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.not.exists",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries without a value",
  "title": "Relatedprimaryid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "related_primary_id__isnull"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.exists",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries with a value",
  "title": "Relatedprimaryid.Exists",
  "type": "boolean",
  "x-orm-lookup": "related_primary_id__isnull"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId",
  "schema": {
  "description": "Related primary neoplasm - Filter for full text matches",
  "title": "Relatedprimaryid",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iexact"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.not",
  "schema": {
  "description": "Related primary neoplasm - Filter for full text mismatches",
  "title": "Relatedprimaryid.Not",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iexact"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.contains",
  "schema": {
  "description": "Related primary neoplasm - Filter for partial text matches",
  "title": "Relatedprimaryid.Contains",
  "type": "string",
  "x-orm-lookup": "related_primary_id__icontains"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.not.contains",
  "schema": {
  "description": "Related primary neoplasm - Filter for partial text mismatches",
  "title": "Relatedprimaryid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_primary_id__icontains"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.beginsWith",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries starting with the text",
  "title": "Relatedprimaryid.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__istartswith"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.not.beginsWith",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries not starting with the text",
  "title": "Relatedprimaryid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__istartswith"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.endsWith",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries ending with the text",
  "title": "Relatedprimaryid.Endswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iendswith"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "relatedPrimaryId.not.endsWith",
  "schema": {
  "description": "Related primary neoplasm - Filter for entries not ending with the text",
  "title": "Relatedprimaryid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iendswith"
  },
  "required": false,
  "description": "Related primary neoplasm - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assertionDate.before",
  "schema": {
  "description": "Assertion date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Assertiondate.Before",
  "type": "string",
  "x-orm-lookup": "assertion_date__lt"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.after",
  "schema": {
  "description": "Assertion date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Assertiondate.After",
  "type": "string",
  "x-orm-lookup": "assertion_date__gt"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.onOrBefore",
  "schema": {
  "description": "Assertion date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Assertiondate.Onorbefore",
  "type": "string",
  "x-orm-lookup": "assertion_date__lte"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.onOrAfter",
  "schema": {
  "description": "Assertion date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Assertiondate.Onorafter",
  "type": "string",
  "x-orm-lookup": "assertion_date__gte"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.on",
  "schema": {
  "description": "Assertion date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Assertiondate.On",
  "type": "string",
  "x-orm-lookup": "assertion_date__exact"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.not.on",
  "schema": {
  "description": "Assertion date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Assertiondate.Not.On",
  "type": "string",
  "x-orm-lookup": "assertion_date__exact"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "assertionDate.between",
  "schema": {
  "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Assertiondate.Between",
  "type": "array",
  "x-orm-lookup": "assertion_date__range"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "assertionDate.not.between",
  "schema": {
  "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Assertiondate.Not.Between",
  "type": "array",
  "x-orm-lookup": "assertion_date__range"
  },
  "required": false,
  "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "topography",
  "schema": {
  "description": "Topography - Filter for a matching concept code",
  "title": "Topography",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "required": false,
  "description": "Topography - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "topography.not",
  "schema": {
  "description": "Topography - Filter for a mismatching concept code",
  "title": "Topography.Not",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "required": false,
  "description": "Topography - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "topography.anyOf",
  "schema": {
  "description": "Topography - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "required": false,
  "description": "Topography - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "topography.not.anyOf",
  "schema": {
  "description": "Topography - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "required": false,
  "description": "Topography - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "topography.descendantsOf",
  "schema": {
  "description": "Topography - Filter for all child concepts of a given concepts code",
  "title": "Topography.Descendantsof",
  "type": "string",
  "x-orm-lookup": "topography__None"
  },
  "required": false,
  "description": "Topography - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "morphology",
  "schema": {
  "description": "Morphology - Filter for a matching concept code",
  "title": "Morphology",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "required": false,
  "description": "Morphology - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "morphology.not",
  "schema": {
  "description": "Morphology - Filter for a mismatching concept code",
  "title": "Morphology.Not",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "required": false,
  "description": "Morphology - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "morphology.anyOf",
  "schema": {
  "description": "Morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "required": false,
  "description": "Morphology - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "morphology.not.anyOf",
  "schema": {
  "description": "Morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "required": false,
  "description": "Morphology - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "morphology.descendantsOf",
  "schema": {
  "description": "Morphology - Filter for all child concepts of a given concepts code",
  "title": "Morphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "morphology__None"
  },
  "required": false,
  "description": "Morphology - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "differentitation.not.exists",
  "schema": {
  "description": "Differentiation - Filter for entries without a value",
  "title": "Differentitation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "differentitation__isnull"
  },
  "required": false,
  "description": "Differentiation - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "differentitation.exists",
  "schema": {
  "description": "Differentiation - Filter for entries with a value",
  "title": "Differentitation.Exists",
  "type": "boolean",
  "x-orm-lookup": "differentitation__isnull"
  },
  "required": false,
  "description": "Differentiation - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "differentitation",
  "schema": {
  "description": "Differentiation - Filter for a matching concept code",
  "title": "Differentitation",
  "type": "string",
  "x-orm-lookup": "differentitation__code__iexact"
  },
  "required": false,
  "description": "Differentiation - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "differentitation.not",
  "schema": {
  "description": "Differentiation - Filter for a mismatching concept code",
  "title": "Differentitation.Not",
  "type": "string",
  "x-orm-lookup": "differentitation__code__iexact"
  },
  "required": false,
  "description": "Differentiation - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "differentitation.anyOf",
  "schema": {
  "description": "Differentiation - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Differentitation.Anyof",
  "type": "array",
  "x-orm-lookup": "differentitation__code__in"
  },
  "required": false,
  "description": "Differentiation - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "differentitation.not.anyOf",
  "schema": {
  "description": "Differentiation - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Differentitation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "differentitation__code__in"
  },
  "required": false,
  "description": "Differentiation - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "differentitation.descendantsOf",
  "schema": {
  "description": "Differentiation - Filter for all child concepts of a given concepts code",
  "title": "Differentitation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "differentitation__None"
  },
  "required": false,
  "description": "Differentiation - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "laterality.not.exists",
  "schema": {
  "description": "Laterality - Filter for entries without a value",
  "title": "Laterality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "laterality__isnull"
  },
  "required": false,
  "description": "Laterality - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "laterality.exists",
  "schema": {
  "description": "Laterality - Filter for entries with a value",
  "title": "Laterality.Exists",
  "type": "boolean",
  "x-orm-lookup": "laterality__isnull"
  },
  "required": false,
  "description": "Laterality - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "laterality",
  "schema": {
  "description": "Laterality - Filter for a matching concept code",
  "title": "Laterality",
  "type": "string",
  "x-orm-lookup": "laterality__code__iexact"
  },
  "required": false,
  "description": "Laterality - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "laterality.not",
  "schema": {
  "description": "Laterality - Filter for a mismatching concept code",
  "title": "Laterality.Not",
  "type": "string",
  "x-orm-lookup": "laterality__code__iexact"
  },
  "required": false,
  "description": "Laterality - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "laterality.anyOf",
  "schema": {
  "description": "Laterality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Laterality.Anyof",
  "type": "array",
  "x-orm-lookup": "laterality__code__in"
  },
  "required": false,
  "description": "Laterality - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "laterality.not.anyOf",
  "schema": {
  "description": "Laterality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Laterality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "laterality__code__in"
  },
  "required": false,
  "description": "Laterality - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "laterality.descendantsOf",
  "schema": {
  "description": "Laterality - Filter for all child concepts of a given concepts code",
  "title": "Laterality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "laterality__None"
  },
  "required": false,
  "description": "Laterality - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_NeoplasticEntity_"
  }
  }
  }
  }
  },
  "tags": [
  "Neoplastic Entities"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/neoplastic-entities/{entityId}": {
  "delete": {
  "operationId": "deleteNeoplasticEntityById",
  "summary": "Delete Neoplastic Entity",
  "parameters": [
  {
  "in": "path",
  "name": "entityId",
  "schema": {
  "title": "Entityid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Neoplastic Entities"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getNeoplasticEntityById",
  "summary": "Get Neoplastic Entity By Id",
  "parameters": [
  {
  "in": "path",
  "name": "entityId",
  "schema": {
  "title": "Entityid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/NeoplasticEntity"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Neoplastic Entities"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateNeoplasticEntityById",
  "summary": "Update Neoplastic Entity",
  "parameters": [
  {
  "in": "path",
  "name": "entityId",
  "schema": {
  "title": "Entityid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Neoplastic Entities"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/NeoplasticEntityCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/stagings": {
  "post": {
  "operationId": "createStaging",
  "summary": "Create Staging",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Stagings"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TNMStagingCreate"
  },
  {
  "$ref": "#/components/schemas/FIGOStagingCreate"
  },
  {
  "$ref": "#/components/schemas/BinetStagingCreate"
  },
  {
  "$ref": "#/components/schemas/RaiStagingCreate"
  },
  {
  "$ref": "#/components/schemas/BreslowDepthCreate"
  },
  {
  "$ref": "#/components/schemas/ClarkStagingCreate"
  },
  {
  "$ref": "#/components/schemas/ISSStagingCreate"
  },
  {
  "$ref": "#/components/schemas/RISSStagingCreate"
  },
  {
  "$ref": "#/components/schemas/GleasonGradeCreate"
  },
  {
  "$ref": "#/components/schemas/INSSStageCreate"
  },
  {
  "$ref": "#/components/schemas/INRGSSStageCreate"
  },
  {
  "$ref": "#/components/schemas/WilmsStageCreate"
  },
  {
  "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"
  },
  {
  "$ref": "#/components/schemas/LymphomaStagingCreate"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getStagings",
  "summary": "Get All Stagings Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "stagingDomain",
  "schema": {
  "allOf": [
  {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "stagingDomain.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "stagingDomain.anyOf",
  "schema": {
  "description": "None - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  },
  "title": "Stagingdomain.Anyof",
  "type": "array",
  "x-orm-lookup": "None__in"
  },
  "required": false,
  "description": "None - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "stage",
  "schema": {
  "description": "None - Filter for a matching concept code",
  "title": "Stage",
  "type": "string",
  "x-orm-lookup": "None__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "stage.not",
  "schema": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Stage.Not",
  "type": "string",
  "x-orm-lookup": "None__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "stage.anyOf",
  "schema": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Stage.Anyof",
  "type": "array",
  "x-orm-lookup": "None__code__in"
  },
  "required": false,
  "description": "None - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "stage.not.anyOf",
  "schema": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Stage.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "None__code__in"
  },
  "required": false,
  "description": "None - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "stage.descendantsOf",
  "schema": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Stage.Descendantsof",
  "type": "string",
  "x-orm-lookup": "None__None"
  },
  "required": false,
  "description": "None - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Staging date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Staging date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Staging date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Staging date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Staging date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Staging date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Staging date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds",
  "schema": {
  "description": "Staged neoplastic entities - Filter for full text matches",
  "title": "Stagedentitiesids",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iexact"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.not",
  "schema": {
  "description": "Staged neoplastic entities - Filter for full text mismatches",
  "title": "Stagedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iexact"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.contains",
  "schema": {
  "description": "Staged neoplastic entities - Filter for partial text matches",
  "title": "Stagedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__icontains"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.not.contains",
  "schema": {
  "description": "Staged neoplastic entities - Filter for partial text mismatches",
  "title": "Stagedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__icontains"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.beginsWith",
  "schema": {
  "description": "Staged neoplastic entities - Filter for entries starting with the text",
  "title": "Stagedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__istartswith"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Staged neoplastic entities - Filter for entries not starting with the text",
  "title": "Stagedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__istartswith"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.endsWith",
  "schema": {
  "description": "Staged neoplastic entities - Filter for entries ending with the text",
  "title": "Stagedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iendswith"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "stagedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Staged neoplastic entities - Filter for entries not ending with the text",
  "title": "Stagedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iendswith"
  },
  "required": false,
  "description": "Staged neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_AnyStaging_"
  }
  }
  }
  }
  },
  "tags": [
  "Stagings"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/stagings/{stagingId}": {
  "delete": {
  "operationId": "deleteStagingById",
  "summary": "Delete Staging",
  "parameters": [
  {
  "in": "path",
  "name": "stagingId",
  "schema": {
  "title": "Stagingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Stagings"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getStagingById",
  "summary": "Get Staging By Id",
  "parameters": [
  {
  "in": "path",
  "name": "stagingId",
  "schema": {
  "title": "Stagingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AnyStaging"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Stagings"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateStagingById",
  "summary": "Update Staging",
  "parameters": [
  {
  "in": "path",
  "name": "stagingId",
  "schema": {
  "title": "Stagingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Stagings"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TNMStagingCreate"
  },
  {
  "$ref": "#/components/schemas/FIGOStagingCreate"
  },
  {
  "$ref": "#/components/schemas/BinetStagingCreate"
  },
  {
  "$ref": "#/components/schemas/RaiStagingCreate"
  },
  {
  "$ref": "#/components/schemas/BreslowDepthCreate"
  },
  {
  "$ref": "#/components/schemas/ClarkStagingCreate"
  },
  {
  "$ref": "#/components/schemas/ISSStagingCreate"
  },
  {
  "$ref": "#/components/schemas/RISSStagingCreate"
  },
  {
  "$ref": "#/components/schemas/GleasonGradeCreate"
  },
  {
  "$ref": "#/components/schemas/INSSStageCreate"
  },
  {
  "$ref": "#/components/schemas/INRGSSStageCreate"
  },
  {
  "$ref": "#/components/schemas/WilmsStageCreate"
  },
  {
  "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"
  },
  {
  "$ref": "#/components/schemas/LymphomaStagingCreate"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/risk-assessments": {
  "post": {
  "operationId": "createRiskAssessment",
  "summary": "Create Risk Assessment",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Risk Assessments"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RiskAssessmentCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRiskAssessments",
  "summary": "Get All Risk Assessments Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "methodology",
  "schema": {
  "description": "Assessment methodology - Filter for a matching concept code",
  "title": "Methodology",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "required": false,
  "description": "Assessment methodology - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "methodology.not",
  "schema": {
  "description": "Assessment methodology - Filter for a mismatching concept code",
  "title": "Methodology.Not",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "required": false,
  "description": "Assessment methodology - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "methodology.anyOf",
  "schema": {
  "description": "Assessment methodology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "required": false,
  "description": "Assessment methodology - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "methodology.not.anyOf",
  "schema": {
  "description": "Assessment methodology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "required": false,
  "description": "Assessment methodology - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "methodology.descendantsOf",
  "schema": {
  "description": "Assessment methodology - Filter for all child concepts of a given concepts code",
  "title": "Methodology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "methodology__None"
  },
  "required": false,
  "description": "Assessment methodology - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "risk",
  "schema": {
  "description": "Risk - Filter for a matching concept code",
  "title": "Risk",
  "type": "string",
  "x-orm-lookup": "risk__code__iexact"
  },
  "required": false,
  "description": "Risk - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "risk.not",
  "schema": {
  "description": "Risk - Filter for a mismatching concept code",
  "title": "Risk.Not",
  "type": "string",
  "x-orm-lookup": "risk__code__iexact"
  },
  "required": false,
  "description": "Risk - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "risk.anyOf",
  "schema": {
  "description": "Risk - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Risk.Anyof",
  "type": "array",
  "x-orm-lookup": "risk__code__in"
  },
  "required": false,
  "description": "Risk - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "risk.not.anyOf",
  "schema": {
  "description": "Risk - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Risk.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "risk__code__in"
  },
  "required": false,
  "description": "Risk - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "risk.descendantsOf",
  "schema": {
  "description": "Risk - Filter for all child concepts of a given concepts code",
  "title": "Risk.Descendantsof",
  "type": "string",
  "x-orm-lookup": "risk__None"
  },
  "required": false,
  "description": "Risk - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "score.not.exists",
  "schema": {
  "description": "Score - Filter for entries without a value",
  "title": "Score.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "score__isnull"
  },
  "required": false,
  "description": "Score - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "score.exists",
  "schema": {
  "description": "Score - Filter for entries with a value",
  "title": "Score.Exists",
  "type": "boolean",
  "x-orm-lookup": "score__isnull"
  },
  "required": false,
  "description": "Score - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "score.lessThan",
  "schema": {
  "description": "Score - Filter for entries with values less than the specified value",
  "title": "Score.Lessthan",
  "type": "number",
  "x-orm-lookup": "score__lt"
  },
  "required": false,
  "description": "Score - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "score.lessThanOrEqual",
  "schema": {
  "description": "Score - Filter for entries with values less than or equal to the specified value",
  "title": "Score.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "score__lte"
  },
  "required": false,
  "description": "Score - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "score.greaterThan",
  "schema": {
  "description": "Score - Filter for entries with values greater than the specified value",
  "title": "Score.Greaterthan",
  "type": "number",
  "x-orm-lookup": "score__gt"
  },
  "required": false,
  "description": "Score - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "score.greaterThanOrEqual",
  "schema": {
  "description": "Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Score.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "score__gte"
  },
  "required": false,
  "description": "Score - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "score.equal",
  "schema": {
  "description": "Score - Filter for entries with values exactly equal to the specified value",
  "title": "Score.Equal",
  "type": "number",
  "x-orm-lookup": "score__exact"
  },
  "required": false,
  "description": "Score - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "score.not.equal",
  "schema": {
  "description": "Score - Filter for entries with values not equal to the specified value",
  "title": "Score.Not.Equal",
  "type": "number",
  "x-orm-lookup": "score__exact"
  },
  "required": false,
  "description": "Score - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "score.between",
  "schema": {
  "description": "Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Score.Between",
  "type": "array",
  "x-orm-lookup": "score__range"
  },
  "required": false,
  "description": "Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "score.not.between",
  "schema": {
  "description": "Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Score.Not.Between",
  "type": "array",
  "x-orm-lookup": "score__range"
  },
  "required": false,
  "description": "Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for full text matches",
  "title": "Assessedentitiesids",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for full text mismatches",
  "title": "Assessedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.contains",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for partial text matches",
  "title": "Assessedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.contains",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for partial text mismatches",
  "title": "Assessedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.beginsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries starting with the text",
  "title": "Assessedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
  "title": "Assessedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.endsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries ending with the text",
  "title": "Assessedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
  "title": "Assessedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_RiskAssessment_"
  }
  }
  }
  }
  },
  "tags": [
  "Risk Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/risk-assessments/{riskAssessmentId}": {
  "delete": {
  "operationId": "deleteRiskAssessmentById",
  "summary": "Delete Risk Assessment",
  "parameters": [
  {
  "in": "path",
  "name": "riskAssessmentId",
  "schema": {
  "title": "Riskassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Risk Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRiskAssessmentById",
  "summary": "Get Risk Assessment By Id",
  "parameters": [
  {
  "in": "path",
  "name": "riskAssessmentId",
  "schema": {
  "title": "Riskassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RiskAssessment"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Risk Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateRiskAssessmentById",
  "summary": "Update Risk Assessment",
  "parameters": [
  {
  "in": "path",
  "name": "riskAssessmentId",
  "schema": {
  "title": "Riskassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Risk Assessments"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RiskAssessmentCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/tumor-markers": {
  "post": {
  "operationId": "createTumorMarker",
  "summary": "Create Tumor Marker",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TumorMarkerCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTumorMarkers",
  "summary": "Get All Tumor Markers Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "analyte",
  "schema": {
  "description": "Analyte - Filter for a matching concept code",
  "title": "Analyte",
  "type": "string",
  "x-orm-lookup": "analyte__code__iexact"
  },
  "required": false,
  "description": "Analyte - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "analyte.not",
  "schema": {
  "description": "Analyte - Filter for a mismatching concept code",
  "title": "Analyte.Not",
  "type": "string",
  "x-orm-lookup": "analyte__code__iexact"
  },
  "required": false,
  "description": "Analyte - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "analyte.anyOf",
  "schema": {
  "description": "Analyte - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analyte.Anyof",
  "type": "array",
  "x-orm-lookup": "analyte__code__in"
  },
  "required": false,
  "description": "Analyte - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "analyte.not.anyOf",
  "schema": {
  "description": "Analyte - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analyte.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "analyte__code__in"
  },
  "required": false,
  "description": "Analyte - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "analyte.descendantsOf",
  "schema": {
  "description": "Analyte - Filter for all child concepts of a given concepts code",
  "title": "Analyte.Descendantsof",
  "type": "string",
  "x-orm-lookup": "analyte__None"
  },
  "required": false,
  "description": "Analyte - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "massConcentration.not.exists",
  "schema": {
  "description": "Mass concentration - Filter for entries without a value",
  "title": "Massconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "mass_concentration__isnull"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "massConcentration.exists",
  "schema": {
  "description": "Mass concentration - Filter for entries with a value",
  "title": "Massconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "mass_concentration__isnull"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "massConcentration.lessThan",
  "schema": {
  "description": "Mass concentration - Filter for entries with values less than the specified value",
  "title": "Massconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "mass_concentration__lt"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.lessThanOrEqual",
  "schema": {
  "description": "Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Massconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__lte"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.greaterThan",
  "schema": {
  "description": "Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Massconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "mass_concentration__gt"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.greaterThanOrEqual",
  "schema": {
  "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Massconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__gte"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.equal",
  "schema": {
  "description": "Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Massconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__exact"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.not.equal",
  "schema": {
  "description": "Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Massconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__exact"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "massConcentration.between",
  "schema": {
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Massconcentration.Between",
  "type": "array",
  "x-orm-lookup": "mass_concentration__range"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "massConcentration.not.between",
  "schema": {
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Massconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "mass_concentration__range"
  },
  "required": false,
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.not.exists",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries without a value",
  "title": "Arbitraryconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "arbitrary_concentration__isnull"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.exists",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with a value",
  "title": "Arbitraryconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "arbitrary_concentration__isnull"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.lessThan",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values less than the specified value",
  "title": "Arbitraryconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__lt"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.lessThanOrEqual",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Arbitraryconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__lte"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.greaterThan",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values greater than the specified value",
  "title": "Arbitraryconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__gt"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.greaterThanOrEqual",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Arbitraryconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__gte"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.equal",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Arbitraryconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__exact"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.not.equal",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value",
  "title": "Arbitraryconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__exact"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.between",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Arbitraryconcentration.Between",
  "type": "array",
  "x-orm-lookup": "arbitrary_concentration__range"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "arbitraryConcentration.not.between",
  "schema": {
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Arbitraryconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "arbitrary_concentration__range"
  },
  "required": false,
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "substanceConcentration.not.exists",
  "schema": {
  "description": "Substance concentration - Filter for entries without a value",
  "title": "Substanceconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "substance_concentration__isnull"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.exists",
  "schema": {
  "description": "Substance concentration - Filter for entries with a value",
  "title": "Substanceconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "substance_concentration__isnull"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.lessThan",
  "schema": {
  "description": "Substance concentration - Filter for entries with values less than the specified value",
  "title": "Substanceconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "substance_concentration__lt"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.lessThanOrEqual",
  "schema": {
  "description": "Substance concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Substanceconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__lte"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.greaterThan",
  "schema": {
  "description": "Substance concentration - Filter for entries with values greater than the specified value",
  "title": "Substanceconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "substance_concentration__gt"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.greaterThanOrEqual",
  "schema": {
  "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Substanceconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__gte"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.equal",
  "schema": {
  "description": "Substance concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Substanceconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__exact"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.not.equal",
  "schema": {
  "description": "Substance concentration - Filter for entries with values not equal to the specified value",
  "title": "Substanceconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__exact"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "substanceConcentration.between",
  "schema": {
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Substanceconcentration.Between",
  "type": "array",
  "x-orm-lookup": "substance_concentration__range"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "substanceConcentration.not.between",
  "schema": {
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Substanceconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "substance_concentration__range"
  },
  "required": false,
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "fraction.not.exists",
  "schema": {
  "description": "Fraction - Filter for entries without a value",
  "title": "Fraction.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "fraction__isnull"
  },
  "required": false,
  "description": "Fraction - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "fraction.exists",
  "schema": {
  "description": "Fraction - Filter for entries with a value",
  "title": "Fraction.Exists",
  "type": "boolean",
  "x-orm-lookup": "fraction__isnull"
  },
  "required": false,
  "description": "Fraction - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "fraction.lessThan",
  "schema": {
  "description": "Fraction - Filter for entries with values less than the specified value",
  "title": "Fraction.Lessthan",
  "type": "number",
  "x-orm-lookup": "fraction__lt"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "fraction.lessThanOrEqual",
  "schema": {
  "description": "Fraction - Filter for entries with values less than or equal to the specified value",
  "title": "Fraction.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "fraction__lte"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "fraction.greaterThan",
  "schema": {
  "description": "Fraction - Filter for entries with values greater than the specified value",
  "title": "Fraction.Greaterthan",
  "type": "number",
  "x-orm-lookup": "fraction__gt"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "fraction.greaterThanOrEqual",
  "schema": {
  "description": "Fraction - Filter for entries with values greater than or equal to the specified value",
  "title": "Fraction.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "fraction__gte"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "fraction.equal",
  "schema": {
  "description": "Fraction - Filter for entries with values exactly equal to the specified value",
  "title": "Fraction.Equal",
  "type": "number",
  "x-orm-lookup": "fraction__exact"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "fraction.not.equal",
  "schema": {
  "description": "Fraction - Filter for entries with values not equal to the specified value",
  "title": "Fraction.Not.Equal",
  "type": "number",
  "x-orm-lookup": "fraction__exact"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "fraction.between",
  "schema": {
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Fraction.Between",
  "type": "array",
  "x-orm-lookup": "fraction__range"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "fraction.not.between",
  "schema": {
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Fraction.Not.Between",
  "type": "array",
  "x-orm-lookup": "fraction__range"
  },
  "required": false,
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.not.exists",
  "schema": {
  "description": "Multiples of the median - Filter for entries without a value",
  "title": "Multipleofmedian.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "multiple_of_median__isnull"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.exists",
  "schema": {
  "description": "Multiples of the median - Filter for entries with a value",
  "title": "Multipleofmedian.Exists",
  "type": "boolean",
  "x-orm-lookup": "multiple_of_median__isnull"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.lessThan",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values less than the specified value",
  "title": "Multipleofmedian.Lessthan",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__lt"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.lessThanOrEqual",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value",
  "title": "Multipleofmedian.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__lte"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.greaterThan",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values greater than the specified value",
  "title": "Multipleofmedian.Greaterthan",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__gt"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.greaterThanOrEqual",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value",
  "title": "Multipleofmedian.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__gte"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.equal",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value",
  "title": "Multipleofmedian.Equal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__exact"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.not.equal",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values not equal to the specified value",
  "title": "Multipleofmedian.Not.Equal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__exact"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.between",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Multipleofmedian.Between",
  "type": "array",
  "x-orm-lookup": "multiple_of_median__range"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "multipleOfMedian.not.between",
  "schema": {
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Multipleofmedian.Not.Between",
  "type": "array",
  "x-orm-lookup": "multiple_of_median__range"
  },
  "required": false,
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "tumorProportionScore.not.exists",
  "schema": {
  "description": "Immune Cells Score (ICS) - Filter for entries without a value",
  "title": "Tumorproportionscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "tumor_proportion_score__isnull"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "tumorProportionScore.exists",
  "schema": {
  "description": "Immune Cells Score (ICS) - Filter for entries with a value",
  "title": "Tumorproportionscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "tumor_proportion_score__isnull"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "tumorProportionScore",
  "schema": {
  "allOf": [
  {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)",
  "x-orm-lookup": "tumor_proportion_score__exact"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "tumorProportionScore.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "tumor_proportion_score__exact"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "tumorProportionScore.anyOf",
  "schema": {
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  },
  "title": "Tumorproportionscore.Anyof",
  "type": "array",
  "x-orm-lookup": "tumor_proportion_score__in"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "immuneCellScore.not.exists",
  "schema": {
  "description": "Immune Cells Score (ICS) - Filter for entries without a value",
  "title": "Immunecellscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "immune_cell_score__isnull"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "immuneCellScore.exists",
  "schema": {
  "description": "Immune Cells Score (ICS) - Filter for entries with a value",
  "title": "Immunecellscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "immune_cell_score__isnull"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "immuneCellScore",
  "schema": {
  "allOf": [
  {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)",
  "x-orm-lookup": "immune_cell_score__exact"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "immuneCellScore.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "immune_cell_score__exact"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "immuneCellScore.anyOf",
  "schema": {
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  },
  "title": "Immunecellscore.Anyof",
  "type": "array",
  "x-orm-lookup": "immune_cell_score__in"
  },
  "required": false,
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.not.exists",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries without a value",
  "title": "Combinedpositivescore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "combined_positive_score__isnull"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.exists",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with a value",
  "title": "Combinedpositivescore.Exists",
  "type": "boolean",
  "x-orm-lookup": "combined_positive_score__isnull"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.lessThan",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value",
  "title": "Combinedpositivescore.Lessthan",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__lt"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.lessThanOrEqual",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value",
  "title": "Combinedpositivescore.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__lte"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.greaterThan",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value",
  "title": "Combinedpositivescore.Greaterthan",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__gt"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.greaterThanOrEqual",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value",
  "title": "Combinedpositivescore.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__gte"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.equal",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value",
  "title": "Combinedpositivescore.Equal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__exact"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.not.equal",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value",
  "title": "Combinedpositivescore.Not.Equal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__exact"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.between",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Combinedpositivescore.Between",
  "type": "array",
  "x-orm-lookup": "combined_positive_score__range"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "combinedPositiveScore.not.between",
  "schema": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Combinedpositivescore.Not.Between",
  "type": "array",
  "x-orm-lookup": "combined_positive_score__range"
  },
  "required": false,
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "immunohistochemicalScore.not.exists",
  "schema": {
  "description": "Immunohistochemical Score - Filter for entries without a value",
  "title": "Immunohistochemicalscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "immunohistochemical_score__isnull"
  },
  "required": false,
  "description": "Immunohistochemical Score - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "immunohistochemicalScore.exists",
  "schema": {
  "description": "Immunohistochemical Score - Filter for entries with a value",
  "title": "Immunohistochemicalscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "immunohistochemical_score__isnull"
  },
  "required": false,
  "description": "Immunohistochemical Score - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "immunohistochemicalScore",
  "schema": {
  "allOf": [
  {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immunohistochemical Score - ('Filter for single value choice',)",
  "x-orm-lookup": "immunohistochemical_score__exact"
  },
  "required": false,
  "description": "Immunohistochemical Score - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "immunohistochemicalScore.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "immunohistochemical_score__exact"
  },
  "required": false,
  "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "immunohistochemicalScore.anyOf",
  "schema": {
  "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  },
  "title": "Immunohistochemicalscore.Anyof",
  "type": "array",
  "x-orm-lookup": "immunohistochemical_score__in"
  },
  "required": false,
  "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "presence.not.exists",
  "schema": {
  "description": "Presence - Filter for entries without a value",
  "title": "Presence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "presence__isnull"
  },
  "required": false,
  "description": "Presence - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "presence.exists",
  "schema": {
  "description": "Presence - Filter for entries with a value",
  "title": "Presence.Exists",
  "type": "boolean",
  "x-orm-lookup": "presence__isnull"
  },
  "required": false,
  "description": "Presence - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "presence",
  "schema": {
  "allOf": [
  {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  }
  ],
  "description": "Presence - ('Filter for single value choice',)",
  "x-orm-lookup": "presence__exact"
  },
  "required": false,
  "description": "Presence - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "presence.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  }
  ],
  "description": "Presence - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "presence__exact"
  },
  "required": false,
  "description": "Presence - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "presence.anyOf",
  "schema": {
  "description": "Presence - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  },
  "title": "Presence.Anyof",
  "type": "array",
  "x-orm-lookup": "presence__in"
  },
  "required": false,
  "description": "Presence - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "nuclearExpressionStatus.not.exists",
  "schema": {
  "description": "Nuclear expression status - Filter for entries without a value",
  "title": "Nuclearexpressionstatus.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "nuclear_expression_status__isnull"
  },
  "required": false,
  "description": "Nuclear expression status - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "nuclearExpressionStatus.exists",
  "schema": {
  "description": "Nuclear expression status - Filter for entries with a value",
  "title": "Nuclearexpressionstatus.Exists",
  "type": "boolean",
  "x-orm-lookup": "nuclear_expression_status__isnull"
  },
  "required": false,
  "description": "Nuclear expression status - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "nuclearExpressionStatus",
  "schema": {
  "allOf": [
  {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  }
  ],
  "description": "Nuclear expression status - ('Filter for single value choice',)",
  "x-orm-lookup": "nuclear_expression_status__exact"
  },
  "required": false,
  "description": "Nuclear expression status - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "nuclearExpressionStatus.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  }
  ],
  "description": "Nuclear expression status - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "nuclear_expression_status__exact"
  },
  "required": false,
  "description": "Nuclear expression status - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "nuclearExpressionStatus.anyOf",
  "schema": {
  "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  },
  "title": "Nuclearexpressionstatus.Anyof",
  "type": "array",
  "x-orm-lookup": "nuclear_expression_status__in"
  },
  "required": false,
  "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds",
  "schema": {
  "description": "Related neoplastic entities - Filter for full text matches",
  "title": "Relatedentitiesids",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not",
  "schema": {
  "description": "Related neoplastic entities - Filter for full text mismatches",
  "title": "Relatedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.contains",
  "schema": {
  "description": "Related neoplastic entities - Filter for partial text matches",
  "title": "Relatedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.contains",
  "schema": {
  "description": "Related neoplastic entities - Filter for partial text mismatches",
  "title": "Relatedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.beginsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries starting with the text",
  "title": "Relatedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries not starting with the text",
  "title": "Relatedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.endsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries ending with the text",
  "title": "Relatedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries not ending with the text",
  "title": "Relatedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_TumorMarker_"
  }
  }
  }
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/tumor-markers/{tumorMarkerId}": {
  "delete": {
  "operationId": "deleteTumorMarkerById",
  "summary": "Delete Tumor Marker",
  "parameters": [
  {
  "in": "path",
  "name": "tumorMarkerId",
  "schema": {
  "title": "Tumormarkerid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTumorMarkerById",
  "summary": "Get Tumor Marker By Id",
  "parameters": [
  {
  "in": "path",
  "name": "tumorMarkerId",
  "schema": {
  "title": "Tumormarkerid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TumorMarker"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateTumorMarkerById",
  "summary": "Update Neoplastic Entity",
  "parameters": [
  {
  "in": "path",
  "name": "tumorMarkerId",
  "schema": {
  "title": "Tumormarkerid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TumorMarkerCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/tumor-markers/analytes/{analyteCode}/details": {
  "get": {
  "operationId": "getTumorMarkerAnalyteDetailsByCode",
  "summary": "Get Tumor Marker Analyte Details By Code",
  "parameters": [
  {
  "in": "path",
  "name": "analyteCode",
  "schema": {
  "title": "Analytecode",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AnalyteDetails"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Markers"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/systemic-therapies": {
  "post": {
  "operationId": "createSystemicTherapy",
  "summary": "Create Systemic Therapy",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapyCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSystemicTherapies",
  "summary": "Get All Systemic Therapies Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "period.overlaps",
  "schema": {
  "description": "Treatment period - Filter for entries overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "required": false,
  "description": "Treatment period - Filter for entries overlapping with the time period"
  },
  {
  "in": "query",
  "name": "period.not.overlaps",
  "schema": {
  "description": "Treatment period - Filter for entries not overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "required": false,
  "description": "Treatment period - Filter for entries not overlapping with the time period"
  },
  {
  "in": "query",
  "name": "period.contains",
  "schema": {
  "description": "Treatment period - Filter for entries containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "required": false,
  "description": "Treatment period - Filter for entries containing the time period"
  },
  {
  "in": "query",
  "name": "period.not.contains",
  "schema": {
  "description": "Treatment period - Filter for entries not containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "required": false,
  "description": "Treatment period - Filter for entries not containing the time period"
  },
  {
  "in": "query",
  "name": "period.containedBy",
  "schema": {
  "description": "Treatment period - Filter for entries whose period are contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "required": false,
  "description": "Treatment period - Filter for entries whose period are contined by the time period"
  },
  {
  "in": "query",
  "name": "period.not.containedBy",
  "schema": {
  "description": "Treatment period - Filter for entries whose period are not contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "required": false,
  "description": "Treatment period - Filter for entries whose period are not contined by the time period"
  },
  {
  "in": "query",
  "name": "cycles.lessThan",
  "schema": {
  "description": "Cycles - Filter for entries with values less than the specified value",
  "title": "Cycles.Lessthan",
  "type": "integer",
  "x-orm-lookup": "cycles__lt"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "cycles.lessThanOrEqual",
  "schema": {
  "description": "Cycles - Filter for entries with values less than or equal to the specified value",
  "title": "Cycles.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "cycles__lte"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "cycles.greaterThan",
  "schema": {
  "description": "Cycles - Filter for entries with values greater than the specified value",
  "title": "Cycles.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "cycles__gt"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "cycles.greaterThanOrEqual",
  "schema": {
  "description": "Cycles - Filter for entries with values greater than or equal to the specified value",
  "title": "Cycles.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "cycles__gte"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "cycles.equal",
  "schema": {
  "description": "Cycles - Filter for entries with values exactly equal to the specified value",
  "title": "Cycles.Equal",
  "type": "integer",
  "x-orm-lookup": "cycles__exact"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "cycles.not.equal",
  "schema": {
  "description": "Cycles - Filter for entries with values not equal to the specified value",
  "title": "Cycles.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "cycles__exact"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "cycles.between",
  "schema": {
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Cycles.Between",
  "type": "array",
  "x-orm-lookup": "cycles__range"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "cycles.not.between",
  "schema": {
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Cycles.Not.Between",
  "type": "array",
  "x-orm-lookup": "cycles__range"
  },
  "required": false,
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "intent",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.anyOf",
  "schema": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "required": false,
  "description": "Intent - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "role.not.exists",
  "schema": {
  "description": "Treatment Role - Filter for entries without a value",
  "title": "Role.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "role__isnull"
  },
  "required": false,
  "description": "Treatment Role - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "role.exists",
  "schema": {
  "description": "Treatment Role - Filter for entries with a value",
  "title": "Role.Exists",
  "type": "boolean",
  "x-orm-lookup": "role__isnull"
  },
  "required": false,
  "description": "Treatment Role - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "role",
  "schema": {
  "description": "Treatment Role - Filter for a matching concept code",
  "title": "Role",
  "type": "string",
  "x-orm-lookup": "role__code__iexact"
  },
  "required": false,
  "description": "Treatment Role - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "role.not",
  "schema": {
  "description": "Treatment Role - Filter for a mismatching concept code",
  "title": "Role.Not",
  "type": "string",
  "x-orm-lookup": "role__code__iexact"
  },
  "required": false,
  "description": "Treatment Role - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "role.anyOf",
  "schema": {
  "description": "Treatment Role - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Role.Anyof",
  "type": "array",
  "x-orm-lookup": "role__code__in"
  },
  "required": false,
  "description": "Treatment Role - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "role.not.anyOf",
  "schema": {
  "description": "Treatment Role - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Role.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "role__code__in"
  },
  "required": false,
  "description": "Treatment Role - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "role.descendantsOf",
  "schema": {
  "description": "Treatment Role - Filter for all child concepts of a given concepts code",
  "title": "Role.Descendantsof",
  "type": "string",
  "x-orm-lookup": "role__None"
  },
  "required": false,
  "description": "Treatment Role - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "terminationReason.not.exists",
  "schema": {
  "description": "Termination reason - Filter for entries without a value",
  "title": "Terminationreason.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "required": false,
  "description": "Termination reason - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "terminationReason.exists",
  "schema": {
  "description": "Termination reason - Filter for entries with a value",
  "title": "Terminationreason.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "required": false,
  "description": "Termination reason - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "terminationReason",
  "schema": {
  "description": "Termination reason - Filter for a matching concept code",
  "title": "Terminationreason",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "required": false,
  "description": "Termination reason - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "terminationReason.not",
  "schema": {
  "description": "Termination reason - Filter for a mismatching concept code",
  "title": "Terminationreason.Not",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "required": false,
  "description": "Termination reason - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "terminationReason.anyOf",
  "schema": {
  "description": "Termination reason - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "required": false,
  "description": "Termination reason - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "terminationReason.not.anyOf",
  "schema": {
  "description": "Termination reason - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "required": false,
  "description": "Termination reason - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "terminationReason.descendantsOf",
  "schema": {
  "description": "Termination reason - Filter for all child concepts of a given concepts code",
  "title": "Terminationreason.Descendantsof",
  "type": "string",
  "x-orm-lookup": "termination_reason__None"
  },
  "required": false,
  "description": "Termination reason - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Medications.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Medications.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Medications.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Medications.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Medications.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Medications.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Medications.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Medications.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Medications.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Medications.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Medications.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Medications.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Medications.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Medications.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "medications.createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Medications.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Medications.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Medications.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Medications.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Medications.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Medications.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Medications.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Medications.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Medications.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Medications.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Medications.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Medications.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Medications.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.description",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "medications.description.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "medications.description.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "medications.description.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "medications.description.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "medications.description.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "medications.description.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "medications.description.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "medications.drug",
  "schema": {
  "description": "Antineoplastic Drug - Filter for a matching concept code",
  "title": "Medications.Drug",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "required": false,
  "description": "Antineoplastic Drug - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "medications.drug.not",
  "schema": {
  "description": "Antineoplastic Drug - Filter for a mismatching concept code",
  "title": "Medications.Drug.Not",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "required": false,
  "description": "Antineoplastic Drug - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "medications.drug.anyOf",
  "schema": {
  "description": "Antineoplastic Drug - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Drug.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "required": false,
  "description": "Antineoplastic Drug - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "medications.drug.not.anyOf",
  "schema": {
  "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Drug.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "required": false,
  "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "medications.drug.descendantsOf",
  "schema": {
  "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code",
  "title": "Medications.Drug.Descendantsof",
  "type": "string",
  "x-orm-lookup": "drug__None"
  },
  "required": false,
  "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "medications.route.not.exists",
  "schema": {
  "description": "Route - Filter for entries without a value",
  "title": "Medications.Route.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "route__isnull"
  },
  "required": false,
  "description": "Route - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.route.exists",
  "schema": {
  "description": "Route - Filter for entries with a value",
  "title": "Medications.Route.Exists",
  "type": "boolean",
  "x-orm-lookup": "route__isnull"
  },
  "required": false,
  "description": "Route - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.route",
  "schema": {
  "description": "Route - Filter for a matching concept code",
  "title": "Medications.Route",
  "type": "string",
  "x-orm-lookup": "route__code__iexact"
  },
  "required": false,
  "description": "Route - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "medications.route.not",
  "schema": {
  "description": "Route - Filter for a mismatching concept code",
  "title": "Medications.Route.Not",
  "type": "string",
  "x-orm-lookup": "route__code__iexact"
  },
  "required": false,
  "description": "Route - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "medications.route.anyOf",
  "schema": {
  "description": "Route - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Route.Anyof",
  "type": "array",
  "x-orm-lookup": "route__code__in"
  },
  "required": false,
  "description": "Route - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "medications.route.not.anyOf",
  "schema": {
  "description": "Route - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Route.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "route__code__in"
  },
  "required": false,
  "description": "Route - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "medications.route.descendantsOf",
  "schema": {
  "description": "Route - Filter for all child concepts of a given concepts code",
  "title": "Medications.Route.Descendantsof",
  "type": "string",
  "x-orm-lookup": "route__None"
  },
  "required": false,
  "description": "Route - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "medications.usedOfflabel.not.exists",
  "schema": {
  "description": "Off-label use - Filter for entries without a value",
  "title": "Medications.Usedofflabel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__isnull"
  },
  "required": false,
  "description": "Off-label use - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.usedOfflabel.exists",
  "schema": {
  "description": "Off-label use - Filter for entries with a value",
  "title": "Medications.Usedofflabel.Exists",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__isnull"
  },
  "required": false,
  "description": "Off-label use - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.usedOfflabel",
  "schema": {
  "description": "Off-label use - ('Filter for yes/no statement',)",
  "title": "Medications.Usedofflabel",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__exact"
  },
  "required": false,
  "description": "Off-label use - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "medications.withinSoc.not.exists",
  "schema": {
  "description": "Within SOC - Filter for entries without a value",
  "title": "Medications.Withinsoc.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "within_soc__isnull"
  },
  "required": false,
  "description": "Within SOC - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.withinSoc.exists",
  "schema": {
  "description": "Within SOC - Filter for entries with a value",
  "title": "Medications.Withinsoc.Exists",
  "type": "boolean",
  "x-orm-lookup": "within_soc__isnull"
  },
  "required": false,
  "description": "Within SOC - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.withinSoc",
  "schema": {
  "description": "Within SOC - ('Filter for yes/no statement',)",
  "title": "Medications.Withinsoc",
  "type": "boolean",
  "x-orm-lookup": "within_soc__exact"
  },
  "required": false,
  "description": "Within SOC - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.not.exists",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries without a value",
  "title": "Medications.Dosagemassconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_concentration__isnull"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.exists",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with a value",
  "title": "Medications.Dosagemassconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_concentration__isnull"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.lessThan",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemassconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__lt"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.lessThanOrEqual",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__lte"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.greaterThan",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemassconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__gt"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.greaterThanOrEqual",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__gte"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.equal",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__exact"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.not.equal",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__exact"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.between",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemassconcentration.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_concentration__range"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageMassConcentration.not.between",
  "schema": {
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemassconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_concentration__range"
  },
  "required": false,
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.not.exists",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries without a value",
  "title": "Medications.Dosagemass.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass__isnull"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.exists",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with a value",
  "title": "Medications.Dosagemass.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass__isnull"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.lessThan",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemass.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass__lt"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.lessThanOrEqual",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemass.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__lte"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.greaterThan",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemass.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass__gt"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.greaterThanOrEqual",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemass.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__gte"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.equal",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemass.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__exact"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.not.equal",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemass.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__exact"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.between",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemass.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass__range"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageMass.not.between",
  "schema": {
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemass.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass__range"
  },
  "required": false,
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.not.exists",
  "schema": {
  "description": "Dosage - Volume - Filter for entries without a value",
  "title": "Medications.Dosagevolume.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_volume__isnull"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.exists",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with a value",
  "title": "Medications.Dosagevolume.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_volume__isnull"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.lessThan",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagevolume.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_volume__lt"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.lessThanOrEqual",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagevolume.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__lte"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.greaterThan",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagevolume.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_volume__gt"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.greaterThanOrEqual",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagevolume.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__gte"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.equal",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagevolume.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__exact"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.not.equal",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagevolume.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__exact"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.between",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagevolume.Between",
  "type": "array",
  "x-orm-lookup": "dosage_volume__range"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageVolume.not.between",
  "schema": {
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagevolume.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_volume__range"
  },
  "required": false,
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.not.exists",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries without a value",
  "title": "Medications.Dosagemasssurface.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_surface__isnull"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.exists",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with a value",
  "title": "Medications.Dosagemasssurface.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_surface__isnull"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.lessThan",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemasssurface.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__lt"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.lessThanOrEqual",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemasssurface.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__lte"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.greaterThan",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemasssurface.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__gt"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.greaterThanOrEqual",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemasssurface.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__gte"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.equal",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemasssurface.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__exact"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.not.equal",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemasssurface.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__exact"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.between",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemasssurface.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_surface__range"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageMassSurface.not.between",
  "schema": {
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemasssurface.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_surface__range"
  },
  "required": false,
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.not.exists",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries without a value",
  "title": "Medications.Dosageratemassconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_concentration__isnull"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.exists",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with a value",
  "title": "Medications.Dosageratemassconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_concentration__isnull"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.lessThan",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemassconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__lt"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.lessThanOrEqual",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__lte"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.greaterThan",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemassconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__gt"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.greaterThanOrEqual",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__gte"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.equal",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__exact"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.not.equal",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__exact"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.between",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemassconcentration.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_concentration__range"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassConcentration.not.between",
  "schema": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemassconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_concentration__range"
  },
  "required": false,
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.not.exists",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries without a value",
  "title": "Medications.Dosageratemass.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass__isnull"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.exists",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with a value",
  "title": "Medications.Dosageratemass.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass__isnull"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.lessThan",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemass.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__lt"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.lessThanOrEqual",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemass.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__lte"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.greaterThan",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemass.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__gt"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.greaterThanOrEqual",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemass.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__gte"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.equal",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemass.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__exact"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.not.equal",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemass.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__exact"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.between",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemass.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass__range"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMass.not.between",
  "schema": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemass.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass__range"
  },
  "required": false,
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.not.exists",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries without a value",
  "title": "Medications.Dosageratevolume.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_volume__isnull"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.exists",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with a value",
  "title": "Medications.Dosageratevolume.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_volume__isnull"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.lessThan",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratevolume.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__lt"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.lessThanOrEqual",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratevolume.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__lte"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.greaterThan",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratevolume.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__gt"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.greaterThanOrEqual",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratevolume.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__gte"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.equal",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratevolume.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__exact"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.not.equal",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratevolume.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__exact"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.between",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratevolume.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_volume__range"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateVolume.not.between",
  "schema": {
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratevolume.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_volume__range"
  },
  "required": false,
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.not.exists",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries without a value",
  "title": "Medications.Dosageratemasssurface.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_surface__isnull"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.exists",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with a value",
  "title": "Medications.Dosageratemasssurface.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_surface__isnull"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.lessThan",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemasssurface.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__lt"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.lessThanOrEqual",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__lte"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.greaterThan",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemasssurface.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__gt"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.greaterThanOrEqual",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__gte"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.equal",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__exact"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.not.equal",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__exact"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.between",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemasssurface.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_surface__range"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "medications.dosageRateMassSurface.not.between",
  "schema": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemasssurface.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_surface__range"
  },
  "required": false,
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_SystemicTherapySchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/systemic-therapies/{systemicTherapyId}/medications": {
  "post": {
  "operationId": "createSystemicTherapyMedication",
  "summary": "Create Systemic Therapy Medication",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapyMedicationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSystemicTherapyMedications",
  "summary": "Get Systemic Therapy Medications Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/SystemicTherapyMedicationSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/systemic-therapies/{systemicTherapyId}": {
  "delete": {
  "operationId": "deleteSystemicTherapyById",
  "summary": "Delete Systemic Therapy",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSystemicTherapyById",
  "summary": "Get Systemic Therapy By Id",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapySchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateSystemicTherapy",
  "summary": "Update Systemic Therapy",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapyCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}": {
  "delete": {
  "operationId": "deleteSystemicTherapyMedication",
  "summary": "Delete Systemic Therapy Medication",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "medicationId",
  "schema": {
  "title": "Medicationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSystemicTherapyMedicationById",
  "summary": "Get Systemic Therapy Medication By Id",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "medicationId",
  "schema": {
  "title": "Medicationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapyMedicationSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateSystemicTherapyMedication",
  "summary": "Update Systemic Therapy Medication",
  "parameters": [
  {
  "in": "path",
  "name": "systemicTherapyId",
  "schema": {
  "title": "Systemictherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "medicationId",
  "schema": {
  "title": "Medicationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Systemic Therapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SystemicTherapyMedicationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/surgeries": {
  "post": {
  "operationId": "createSurgery",
  "summary": "Create Surgery",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Surgeries"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SurgeryCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSurgeries",
  "summary": "Get All Surgeries Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "procedure",
  "schema": {
  "description": "Surgical procedure - Filter for a matching concept code",
  "title": "Procedure",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "required": false,
  "description": "Surgical procedure - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "procedure.not",
  "schema": {
  "description": "Surgical procedure - Filter for a mismatching concept code",
  "title": "Procedure.Not",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "required": false,
  "description": "Surgical procedure - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "procedure.anyOf",
  "schema": {
  "description": "Surgical procedure - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Procedure.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "required": false,
  "description": "Surgical procedure - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "procedure.not.anyOf",
  "schema": {
  "description": "Surgical procedure - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Procedure.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "required": false,
  "description": "Surgical procedure - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "procedure.descendantsOf",
  "schema": {
  "description": "Surgical procedure - Filter for all child concepts of a given concepts code",
  "title": "Procedure.Descendantsof",
  "type": "string",
  "x-orm-lookup": "procedure__None"
  },
  "required": false,
  "description": "Surgical procedure - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "intent",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.anyOf",
  "schema": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "required": false,
  "description": "Intent - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "bodysite.not.exists",
  "schema": {
  "description": "Anatomical location - Filter for entries without a value",
  "title": "Bodysite.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite__isnull"
  },
  "required": false,
  "description": "Anatomical location - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "bodysite.exists",
  "schema": {
  "description": "Anatomical location - Filter for entries with a value",
  "title": "Bodysite.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite__isnull"
  },
  "required": false,
  "description": "Anatomical location - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "bodysite",
  "schema": {
  "description": "Anatomical location - Filter for a matching concept code",
  "title": "Bodysite",
  "type": "string",
  "x-orm-lookup": "bodysite__code__iexact"
  },
  "required": false,
  "description": "Anatomical location - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "bodysite.not",
  "schema": {
  "description": "Anatomical location - Filter for a mismatching concept code",
  "title": "Bodysite.Not",
  "type": "string",
  "x-orm-lookup": "bodysite__code__iexact"
  },
  "required": false,
  "description": "Anatomical location - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "bodysite.anyOf",
  "schema": {
  "description": "Anatomical location - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysite.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite__code__in"
  },
  "required": false,
  "description": "Anatomical location - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysite.not.anyOf",
  "schema": {
  "description": "Anatomical location - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysite.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite__code__in"
  },
  "required": false,
  "description": "Anatomical location - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysite.descendantsOf",
  "schema": {
  "description": "Anatomical location - Filter for all child concepts of a given concepts code",
  "title": "Bodysite.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite__None"
  },
  "required": false,
  "description": "Anatomical location - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.not.exists",
  "schema": {
  "description": "Anatomical location qualifier - Filter for entries without a value",
  "title": "Bodysitequalifier.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_qualifier__isnull"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.exists",
  "schema": {
  "description": "Anatomical location qualifier - Filter for entries with a value",
  "title": "Bodysitequalifier.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_qualifier__isnull"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier",
  "schema": {
  "description": "Anatomical location qualifier - Filter for a matching concept code",
  "title": "Bodysitequalifier",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__code__iexact"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.not",
  "schema": {
  "description": "Anatomical location qualifier - Filter for a mismatching concept code",
  "title": "Bodysitequalifier.Not",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__code__iexact"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.anyOf",
  "schema": {
  "description": "Anatomical location qualifier - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitequalifier.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_qualifier__code__in"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.not.anyOf",
  "schema": {
  "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitequalifier.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_qualifier__code__in"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysiteQualifier.descendantsOf",
  "schema": {
  "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code",
  "title": "Bodysitequalifier.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__None"
  },
  "required": false,
  "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.not.exists",
  "schema": {
  "description": "Anatomical location laterality - Filter for entries without a value",
  "title": "Bodysitelaterality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_laterality__isnull"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.exists",
  "schema": {
  "description": "Anatomical location laterality - Filter for entries with a value",
  "title": "Bodysitelaterality.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_laterality__isnull"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality",
  "schema": {
  "description": "Anatomical location laterality - Filter for a matching concept code",
  "title": "Bodysitelaterality",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__code__iexact"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.not",
  "schema": {
  "description": "Anatomical location laterality - Filter for a mismatching concept code",
  "title": "Bodysitelaterality.Not",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__code__iexact"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.anyOf",
  "schema": {
  "description": "Anatomical location laterality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitelaterality.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_laterality__code__in"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.not.anyOf",
  "schema": {
  "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitelaterality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_laterality__code__in"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "bodysiteLaterality.descendantsOf",
  "schema": {
  "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code",
  "title": "Bodysitelaterality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__None"
  },
  "required": false,
  "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "outcome.not.exists",
  "schema": {
  "description": "Outcome - Filter for entries without a value",
  "title": "Outcome.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "outcome__isnull"
  },
  "required": false,
  "description": "Outcome - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "outcome.exists",
  "schema": {
  "description": "Outcome - Filter for entries with a value",
  "title": "Outcome.Exists",
  "type": "boolean",
  "x-orm-lookup": "outcome__isnull"
  },
  "required": false,
  "description": "Outcome - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "outcome",
  "schema": {
  "description": "Outcome - Filter for a matching concept code",
  "title": "Outcome",
  "type": "string",
  "x-orm-lookup": "outcome__code__iexact"
  },
  "required": false,
  "description": "Outcome - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "outcome.not",
  "schema": {
  "description": "Outcome - Filter for a mismatching concept code",
  "title": "Outcome.Not",
  "type": "string",
  "x-orm-lookup": "outcome__code__iexact"
  },
  "required": false,
  "description": "Outcome - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "outcome.anyOf",
  "schema": {
  "description": "Outcome - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Outcome.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__code__in"
  },
  "required": false,
  "description": "Outcome - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "outcome.not.anyOf",
  "schema": {
  "description": "Outcome - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Outcome.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__code__in"
  },
  "required": false,
  "description": "Outcome - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "outcome.descendantsOf",
  "schema": {
  "description": "Outcome - Filter for all child concepts of a given concepts code",
  "title": "Outcome.Descendantsof",
  "type": "string",
  "x-orm-lookup": "outcome__None"
  },
  "required": false,
  "description": "Outcome - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_Surgery_"
  }
  }
  }
  }
  },
  "tags": [
  "Surgeries"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/surgeries/{surgeryId}": {
  "delete": {
  "operationId": "deleteSurgeryById",
  "summary": "Delete Surgery",
  "parameters": [
  {
  "in": "path",
  "name": "surgeryId",
  "schema": {
  "title": "Surgeryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Surgeries"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getSurgeryById",
  "summary": "Get Surgery By Id",
  "parameters": [
  {
  "in": "path",
  "name": "surgeryId",
  "schema": {
  "title": "Surgeryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Surgery"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Surgeries"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateSurgeryById",
  "summary": "Update Surgery",
  "parameters": [
  {
  "in": "path",
  "name": "surgeryId",
  "schema": {
  "title": "Surgeryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Surgeries"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/SurgeryCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies": {
  "post": {
  "operationId": "createRadiotherapy",
  "summary": "Create Radiotherapy",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapyCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapies",
  "summary": "Get All Radiotherapies Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "period.overlaps",
  "schema": {
  "description": "Treatment period - Filter for entries overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "required": false,
  "description": "Treatment period - Filter for entries overlapping with the time period"
  },
  {
  "in": "query",
  "name": "period.not.overlaps",
  "schema": {
  "description": "Treatment period - Filter for entries not overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "required": false,
  "description": "Treatment period - Filter for entries not overlapping with the time period"
  },
  {
  "in": "query",
  "name": "period.contains",
  "schema": {
  "description": "Treatment period - Filter for entries containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "required": false,
  "description": "Treatment period - Filter for entries containing the time period"
  },
  {
  "in": "query",
  "name": "period.not.contains",
  "schema": {
  "description": "Treatment period - Filter for entries not containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "required": false,
  "description": "Treatment period - Filter for entries not containing the time period"
  },
  {
  "in": "query",
  "name": "period.containedBy",
  "schema": {
  "description": "Treatment period - Filter for entries whose period are contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "required": false,
  "description": "Treatment period - Filter for entries whose period are contined by the time period"
  },
  {
  "in": "query",
  "name": "period.not.containedBy",
  "schema": {
  "description": "Treatment period - Filter for entries whose period are not contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "required": false,
  "description": "Treatment period - Filter for entries whose period are not contined by the time period"
  },
  {
  "in": "query",
  "name": "sessions.lessThan",
  "schema": {
  "description": "Total sessions - Filter for entries with values less than the specified value",
  "title": "Sessions.Lessthan",
  "type": "integer",
  "x-orm-lookup": "sessions__lt"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "sessions.lessThanOrEqual",
  "schema": {
  "description": "Total sessions - Filter for entries with values less than or equal to the specified value",
  "title": "Sessions.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "sessions__lte"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "sessions.greaterThan",
  "schema": {
  "description": "Total sessions - Filter for entries with values greater than the specified value",
  "title": "Sessions.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "sessions__gt"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "sessions.greaterThanOrEqual",
  "schema": {
  "description": "Total sessions - Filter for entries with values greater than or equal to the specified value",
  "title": "Sessions.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "sessions__gte"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "sessions.equal",
  "schema": {
  "description": "Total sessions - Filter for entries with values exactly equal to the specified value",
  "title": "Sessions.Equal",
  "type": "integer",
  "x-orm-lookup": "sessions__exact"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "sessions.not.equal",
  "schema": {
  "description": "Total sessions - Filter for entries with values not equal to the specified value",
  "title": "Sessions.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "sessions__exact"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "sessions.between",
  "schema": {
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Sessions.Between",
  "type": "array",
  "x-orm-lookup": "sessions__range"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "sessions.not.between",
  "schema": {
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Sessions.Not.Between",
  "type": "array",
  "x-orm-lookup": "sessions__range"
  },
  "required": false,
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "intent",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "required": false,
  "description": "Intent - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "intent.anyOf",
  "schema": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "required": false,
  "description": "Intent - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "terminationReason.not.exists",
  "schema": {
  "description": "Termination reason - Filter for entries without a value",
  "title": "Terminationreason.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "required": false,
  "description": "Termination reason - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "terminationReason.exists",
  "schema": {
  "description": "Termination reason - Filter for entries with a value",
  "title": "Terminationreason.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "required": false,
  "description": "Termination reason - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "terminationReason",
  "schema": {
  "description": "Termination reason - Filter for a matching concept code",
  "title": "Terminationreason",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "required": false,
  "description": "Termination reason - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "terminationReason.not",
  "schema": {
  "description": "Termination reason - Filter for a mismatching concept code",
  "title": "Terminationreason.Not",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "required": false,
  "description": "Termination reason - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "terminationReason.anyOf",
  "schema": {
  "description": "Termination reason - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "required": false,
  "description": "Termination reason - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "terminationReason.not.anyOf",
  "schema": {
  "description": "Termination reason - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "required": false,
  "description": "Termination reason - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "terminationReason.descendantsOf",
  "schema": {
  "description": "Termination reason - Filter for all child concepts of a given concepts code",
  "title": "Terminationreason.Descendantsof",
  "type": "string",
  "x-orm-lookup": "termination_reason__None"
  },
  "required": false,
  "description": "Termination reason - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.contains",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "targetedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "required": false,
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Dosages.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Dosages.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Dosages.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Dosages.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Dosages.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Dosages.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Dosages.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Dosages.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dosages.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dosages.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Dosages.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Dosages.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Dosages.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Dosages.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Dosages.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Dosages.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Dosages.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Dosages.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.description",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "dosages.description.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.description.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "dosages.description.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "dosages.description.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.description.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "dosages.description.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.description.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dosages.fractions.not.exists",
  "schema": {
  "description": "Total fractions - Filter for entries without a value",
  "title": "Dosages.Fractions.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "fractions__isnull"
  },
  "required": false,
  "description": "Total fractions - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.exists",
  "schema": {
  "description": "Total fractions - Filter for entries with a value",
  "title": "Dosages.Fractions.Exists",
  "type": "boolean",
  "x-orm-lookup": "fractions__isnull"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.lessThan",
  "schema": {
  "description": "Total fractions - Filter for entries with values less than the specified value",
  "title": "Dosages.Fractions.Lessthan",
  "type": "integer",
  "x-orm-lookup": "fractions__lt"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.lessThanOrEqual",
  "schema": {
  "description": "Total fractions - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Fractions.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "fractions__lte"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.greaterThan",
  "schema": {
  "description": "Total fractions - Filter for entries with values greater than the specified value",
  "title": "Dosages.Fractions.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "fractions__gt"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.greaterThanOrEqual",
  "schema": {
  "description": "Total fractions - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Fractions.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "fractions__gte"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.equal",
  "schema": {
  "description": "Total fractions - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Fractions.Equal",
  "type": "integer",
  "x-orm-lookup": "fractions__exact"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.not.equal",
  "schema": {
  "description": "Total fractions - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Fractions.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "fractions__exact"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.fractions.between",
  "schema": {
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Fractions.Between",
  "type": "array",
  "x-orm-lookup": "fractions__range"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.fractions.not.between",
  "schema": {
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Fractions.Not.Between",
  "type": "array",
  "x-orm-lookup": "fractions__range"
  },
  "required": false,
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.dose.not.exists",
  "schema": {
  "description": "Total radiation dose - Filter for entries without a value",
  "title": "Dosages.Dose.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dose__isnull"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.dose.exists",
  "schema": {
  "description": "Total radiation dose - Filter for entries with a value",
  "title": "Dosages.Dose.Exists",
  "type": "boolean",
  "x-orm-lookup": "dose__isnull"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.dose.lessThan",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values less than the specified value",
  "title": "Dosages.Dose.Lessthan",
  "type": "number",
  "x-orm-lookup": "dose__lt"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.lessThanOrEqual",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Dose.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dose__lte"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.greaterThan",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values greater than the specified value",
  "title": "Dosages.Dose.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dose__gt"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.greaterThanOrEqual",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Dose.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dose__gte"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.equal",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Dose.Equal",
  "type": "number",
  "x-orm-lookup": "dose__exact"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.not.equal",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Dose.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dose__exact"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "dosages.dose.between",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Dosages.Dose.Between",
  "type": "array",
  "x-orm-lookup": "dose__range"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.dose.not.between",
  "schema": {
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Dosages.Dose.Not.Between",
  "type": "array",
  "x-orm-lookup": "dose__range"
  },
  "required": false,
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolume",
  "schema": {
  "description": "Irradiated volume - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolume",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolume.not",
  "schema": {
  "description": "Irradiated volume - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolume.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolume.anyOf",
  "schema": {
  "description": "Irradiated volume - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolume.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume__code__in"
  },
  "required": false,
  "description": "Irradiated volume - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolume.not.anyOf",
  "schema": {
  "description": "Irradiated volume - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolume.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume__code__in"
  },
  "required": false,
  "description": "Irradiated volume - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolume.descendantsOf",
  "schema": {
  "description": "Irradiated volume - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolume.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__None"
  },
  "required": false,
  "description": "Irradiated volume - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.not.exists",
  "schema": {
  "description": "Irradiated volume morphology - Filter for entries without a value",
  "title": "Dosages.Irradiatedvolumemorphology.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_morphology__isnull"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.exists",
  "schema": {
  "description": "Irradiated volume morphology - Filter for entries with a value",
  "title": "Dosages.Irradiatedvolumemorphology.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_morphology__isnull"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology",
  "schema": {
  "description": "Irradiated volume morphology - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolumemorphology",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.not",
  "schema": {
  "description": "Irradiated volume morphology - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolumemorphology.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.anyOf",
  "schema": {
  "description": "Irradiated volume morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumemorphology.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_morphology__code__in"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.not.anyOf",
  "schema": {
  "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_morphology__code__in"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeMorphology.descendantsOf",
  "schema": {
  "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolumemorphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__None"
  },
  "required": false,
  "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.not.exists",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for entries without a value",
  "title": "Dosages.Irradiatedvolumequalifier.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_qualifier__isnull"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.exists",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for entries with a value",
  "title": "Dosages.Irradiatedvolumequalifier.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_qualifier__isnull"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolumequalifier",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.not",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolumequalifier.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__code__iexact"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.anyOf",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumequalifier.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_qualifier__code__in"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.not.anyOf",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_qualifier__code__in"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "dosages.irradiatedVolumeQualifier.descendantsOf",
  "schema": {
  "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolumequalifier.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__None"
  },
  "required": false,
  "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "settings.id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Settings.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Settings.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Settings.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Settings.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Settings.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Settings.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Settings.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Settings.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Settings.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Settings.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Settings.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Settings.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Settings.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Settings.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "settings.createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Settings.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Settings.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Settings.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "settings.createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Settings.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Settings.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Settings.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Settings.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Settings.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Settings.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Settings.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Settings.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Settings.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Settings.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Settings.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Settings.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Settings.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.description",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "settings.description.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "settings.description.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "settings.description.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "settings.description.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "settings.description.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "settings.description.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "settings.description.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "settings.modality",
  "schema": {
  "description": "Modality - Filter for a matching concept code",
  "title": "Settings.Modality",
  "type": "string",
  "x-orm-lookup": "modality__code__iexact"
  },
  "required": false,
  "description": "Modality - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "settings.modality.not",
  "schema": {
  "description": "Modality - Filter for a mismatching concept code",
  "title": "Settings.Modality.Not",
  "type": "string",
  "x-orm-lookup": "modality__code__iexact"
  },
  "required": false,
  "description": "Modality - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "settings.modality.anyOf",
  "schema": {
  "description": "Modality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Modality.Anyof",
  "type": "array",
  "x-orm-lookup": "modality__code__in"
  },
  "required": false,
  "description": "Modality - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "settings.modality.not.anyOf",
  "schema": {
  "description": "Modality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Modality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "modality__code__in"
  },
  "required": false,
  "description": "Modality - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "settings.modality.descendantsOf",
  "schema": {
  "description": "Modality - Filter for all child concepts of a given concepts code",
  "title": "Settings.Modality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "modality__None"
  },
  "required": false,
  "description": "Modality - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "settings.technique",
  "schema": {
  "description": "Technique - Filter for a matching concept code",
  "title": "Settings.Technique",
  "type": "string",
  "x-orm-lookup": "technique__code__iexact"
  },
  "required": false,
  "description": "Technique - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "settings.technique.not",
  "schema": {
  "description": "Technique - Filter for a mismatching concept code",
  "title": "Settings.Technique.Not",
  "type": "string",
  "x-orm-lookup": "technique__code__iexact"
  },
  "required": false,
  "description": "Technique - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "settings.technique.anyOf",
  "schema": {
  "description": "Technique - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Technique.Anyof",
  "type": "array",
  "x-orm-lookup": "technique__code__in"
  },
  "required": false,
  "description": "Technique - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "settings.technique.not.anyOf",
  "schema": {
  "description": "Technique - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Technique.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "technique__code__in"
  },
  "required": false,
  "description": "Technique - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "settings.technique.descendantsOf",
  "schema": {
  "description": "Technique - Filter for all child concepts of a given concepts code",
  "title": "Settings.Technique.Descendantsof",
  "type": "string",
  "x-orm-lookup": "technique__None"
  },
  "required": false,
  "description": "Technique - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_RadiotherapySchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies/{radiotherapyId}/dosages": {
  "post": {
  "operationId": "createRadiotherapyDosage",
  "summary": "Create Radiotherapy Dosage",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapyDosageCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapyDosages",
  "summary": "Get Radiotherapy Dosages Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/RadiotherapyDosageSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies/{radiotherapyId}/settings": {
  "post": {
  "operationId": "createRadiotherapySetting",
  "summary": "Create Radiotherapy Setting",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapySettingCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapySettings",
  "summary": "Get Radiotherapy Settings Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/RadiotherapySettingSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies/{radiotherapyId}": {
  "delete": {
  "operationId": "deleteRadiotherapyById",
  "summary": "Delete Radiotherapy",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapyById",
  "summary": "Get Radiotherapy By Id",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapySchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateRadiotherapy",
  "summary": "Update Radiotherapy",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapyCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}": {
  "delete": {
  "operationId": "deleteRadiotherapyDosage",
  "summary": "Delete Radiotherapy Dosage",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "dosageId",
  "schema": {
  "title": "Dosageid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapyDosageById",
  "summary": "Get Radiotherapy Dosage By Id",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "dosageId",
  "schema": {
  "title": "Dosageid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapyDosageSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateRadiotherapyDosage",
  "summary": "Update Radiotherapy Dosage",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "dosageId",
  "schema": {
  "title": "Dosageid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapyDosageCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/radiotherapies/{radiotherapyId}/settings/{settingId}": {
  "delete": {
  "operationId": "deleteRadiotherapySetting",
  "summary": "Delete Radiotherapy Setting",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "settingId",
  "schema": {
  "title": "Settingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getRadiotherapySettingById",
  "summary": "Get Radiotherapy Setting By Id",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "settingId",
  "schema": {
  "title": "Settingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapySettingSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateRadiotherapySetting",
  "summary": "Update Radiotherapy Setting",
  "parameters": [
  {
  "in": "path",
  "name": "radiotherapyId",
  "schema": {
  "title": "Radiotherapyid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "settingId",
  "schema": {
  "title": "Settingid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Radiotherapies"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/RadiotherapySettingCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events": {
  "post": {
  "operationId": "createAdverseEvent",
  "summary": "Create Adverse Event",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEvents",
  "summary": "Get All Adverse Events Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Event date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Event date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Event date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Event date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Event date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Event date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Event date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Event date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Event date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "event",
  "schema": {
  "description": "Adverse event - Filter for a matching concept code",
  "title": "Event",
  "type": "string",
  "x-orm-lookup": "event__code__iexact"
  },
  "required": false,
  "description": "Adverse event - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "event.not",
  "schema": {
  "description": "Adverse event - Filter for a mismatching concept code",
  "title": "Event.Not",
  "type": "string",
  "x-orm-lookup": "event__code__iexact"
  },
  "required": false,
  "description": "Adverse event - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "event.anyOf",
  "schema": {
  "description": "Adverse event - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Event.Anyof",
  "type": "array",
  "x-orm-lookup": "event__code__in"
  },
  "required": false,
  "description": "Adverse event - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "event.not.anyOf",
  "schema": {
  "description": "Adverse event - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Event.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "event__code__in"
  },
  "required": false,
  "description": "Adverse event - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "event.descendantsOf",
  "schema": {
  "description": "Adverse event - Filter for all child concepts of a given concepts code",
  "title": "Event.Descendantsof",
  "type": "string",
  "x-orm-lookup": "event__None"
  },
  "required": false,
  "description": "Adverse event - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "grade.lessThan",
  "schema": {
  "description": "Grade - Filter for entries with values less than the specified value",
  "title": "Grade.Lessthan",
  "type": "integer",
  "x-orm-lookup": "grade__lt"
  },
  "required": false,
  "description": "Grade - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "grade.lessThanOrEqual",
  "schema": {
  "description": "Grade - Filter for entries with values less than or equal to the specified value",
  "title": "Grade.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "grade__lte"
  },
  "required": false,
  "description": "Grade - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "grade.greaterThan",
  "schema": {
  "description": "Grade - Filter for entries with values greater than the specified value",
  "title": "Grade.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "grade__gt"
  },
  "required": false,
  "description": "Grade - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "grade.greaterThanOrEqual",
  "schema": {
  "description": "Grade - Filter for entries with values greater than or equal to the specified value",
  "title": "Grade.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "grade__gte"
  },
  "required": false,
  "description": "Grade - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "grade.equal",
  "schema": {
  "description": "Grade - Filter for entries with values exactly equal to the specified value",
  "title": "Grade.Equal",
  "type": "integer",
  "x-orm-lookup": "grade__exact"
  },
  "required": false,
  "description": "Grade - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "grade.not.equal",
  "schema": {
  "description": "Grade - Filter for entries with values not equal to the specified value",
  "title": "Grade.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "grade__exact"
  },
  "required": false,
  "description": "Grade - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "grade.between",
  "schema": {
  "description": "Grade - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Grade.Between",
  "type": "array",
  "x-orm-lookup": "grade__range"
  },
  "required": false,
  "description": "Grade - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "grade.not.between",
  "schema": {
  "description": "Grade - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Grade.Not.Between",
  "type": "array",
  "x-orm-lookup": "grade__range"
  },
  "required": false,
  "description": "Grade - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "outcome",
  "schema": {
  "allOf": [
  {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  }
  ],
  "description": "Date resolved - ('Filter for single value choice',)",
  "x-orm-lookup": "outcome__exact"
  },
  "required": false,
  "description": "Date resolved - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "outcome.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  }
  ],
  "description": "Date resolved - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "outcome__exact"
  },
  "required": false,
  "description": "Date resolved - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "outcome.anyOf",
  "schema": {
  "description": "Date resolved - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  },
  "title": "Outcome.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__in"
  },
  "required": false,
  "description": "Date resolved - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "dateResolved.not.exists",
  "schema": {
  "description": "Date resolved - Filter for entries without a value",
  "title": "Dateresolved.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_resolved__isnull"
  },
  "required": false,
  "description": "Date resolved - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dateResolved.exists",
  "schema": {
  "description": "Date resolved - Filter for entries with a value",
  "title": "Dateresolved.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_resolved__isnull"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dateResolved.before",
  "schema": {
  "description": "Date resolved - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateresolved.Before",
  "type": "string",
  "x-orm-lookup": "date_resolved__lt"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.after",
  "schema": {
  "description": "Date resolved - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateresolved.After",
  "type": "string",
  "x-orm-lookup": "date_resolved__gt"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.onOrBefore",
  "schema": {
  "description": "Date resolved - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateresolved.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_resolved__lte"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.onOrAfter",
  "schema": {
  "description": "Date resolved - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateresolved.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_resolved__gte"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.on",
  "schema": {
  "description": "Date resolved - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateresolved.On",
  "type": "string",
  "x-orm-lookup": "date_resolved__exact"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.not.on",
  "schema": {
  "description": "Date resolved - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateresolved.Not.On",
  "type": "string",
  "x-orm-lookup": "date_resolved__exact"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "dateResolved.between",
  "schema": {
  "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateresolved.Between",
  "type": "array",
  "x-orm-lookup": "date_resolved__range"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "dateResolved.not.between",
  "schema": {
  "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateresolved.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_resolved__range"
  },
  "required": false,
  "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Suspectedcauses.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Suspectedcauses.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Suspectedcauses.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Suspectedcauses.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Suspectedcauses.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Suspectedcauses.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Suspectedcauses.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Suspectedcauses.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Suspectedcauses.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Suspectedcauses.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Suspectedcauses.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Suspectedcauses.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.description.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.not.exists",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries without a value",
  "title": "Suspectedcauses.Systemictherapyid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "systemic_therapy_id__isnull"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.exists",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries with a value",
  "title": "Suspectedcauses.Systemictherapyid.Exists",
  "type": "boolean",
  "x-orm-lookup": "systemic_therapy_id__isnull"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId",
  "schema": {
  "description": "Suspected systemic therapy - Filter for full text matches",
  "title": "Suspectedcauses.Systemictherapyid",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iexact"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.not",
  "schema": {
  "description": "Suspected systemic therapy - Filter for full text mismatches",
  "title": "Suspectedcauses.Systemictherapyid.Not",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iexact"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.contains",
  "schema": {
  "description": "Suspected systemic therapy - Filter for partial text matches",
  "title": "Suspectedcauses.Systemictherapyid.Contains",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__icontains"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.not.contains",
  "schema": {
  "description": "Suspected systemic therapy - Filter for partial text mismatches",
  "title": "Suspectedcauses.Systemictherapyid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__icontains"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.beginsWith",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries starting with the text",
  "title": "Suspectedcauses.Systemictherapyid.Beginswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__istartswith"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.not.beginsWith",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__istartswith"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.endsWith",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries ending with the text",
  "title": "Suspectedcauses.Systemictherapyid.Endswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iendswith"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.systemicTherapyId.not.endsWith",
  "schema": {
  "description": "Suspected systemic therapy - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Systemictherapyid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iendswith"
  },
  "required": false,
  "description": "Suspected systemic therapy - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.not.exists",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries without a value",
  "title": "Suspectedcauses.Medicationid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "medication_id__isnull"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.exists",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries with a value",
  "title": "Suspectedcauses.Medicationid.Exists",
  "type": "boolean",
  "x-orm-lookup": "medication_id__isnull"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for full text matches",
  "title": "Suspectedcauses.Medicationid",
  "type": "string",
  "x-orm-lookup": "medication_id__iexact"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.not",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for full text mismatches",
  "title": "Suspectedcauses.Medicationid.Not",
  "type": "string",
  "x-orm-lookup": "medication_id__iexact"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.contains",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for partial text matches",
  "title": "Suspectedcauses.Medicationid.Contains",
  "type": "string",
  "x-orm-lookup": "medication_id__icontains"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.not.contains",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for partial text mismatches",
  "title": "Suspectedcauses.Medicationid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "medication_id__icontains"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.beginsWith",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries starting with the text",
  "title": "Suspectedcauses.Medicationid.Beginswith",
  "type": "string",
  "x-orm-lookup": "medication_id__istartswith"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.not.beginsWith",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Medicationid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "medication_id__istartswith"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.endsWith",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries ending with the text",
  "title": "Suspectedcauses.Medicationid.Endswith",
  "type": "string",
  "x-orm-lookup": "medication_id__iendswith"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.medicationId.not.endsWith",
  "schema": {
  "description": "Suspected systemic therapy medication - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Medicationid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "medication_id__iendswith"
  },
  "required": false,
  "description": "Suspected systemic therapy medication - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.not.exists",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries without a value",
  "title": "Suspectedcauses.Radiotherapyid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "radiotherapy_id__isnull"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.exists",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries with a value",
  "title": "Suspectedcauses.Radiotherapyid.Exists",
  "type": "boolean",
  "x-orm-lookup": "radiotherapy_id__isnull"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId",
  "schema": {
  "description": "Suspected radiotherapy - Filter for full text matches",
  "title": "Suspectedcauses.Radiotherapyid",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iexact"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.not",
  "schema": {
  "description": "Suspected radiotherapy - Filter for full text mismatches",
  "title": "Suspectedcauses.Radiotherapyid.Not",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iexact"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.contains",
  "schema": {
  "description": "Suspected radiotherapy - Filter for partial text matches",
  "title": "Suspectedcauses.Radiotherapyid.Contains",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__icontains"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.not.contains",
  "schema": {
  "description": "Suspected radiotherapy - Filter for partial text mismatches",
  "title": "Suspectedcauses.Radiotherapyid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__icontains"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.beginsWith",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries starting with the text",
  "title": "Suspectedcauses.Radiotherapyid.Beginswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__istartswith"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.not.beginsWith",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__istartswith"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.endsWith",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries ending with the text",
  "title": "Suspectedcauses.Radiotherapyid.Endswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iendswith"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.radiotherapyId.not.endsWith",
  "schema": {
  "description": "Suspected radiotherapy - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Radiotherapyid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iendswith"
  },
  "required": false,
  "description": "Suspected radiotherapy - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.not.exists",
  "schema": {
  "description": "Suspected surgery - Filter for entries without a value",
  "title": "Suspectedcauses.Surgeryid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "surgery_id__isnull"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.exists",
  "schema": {
  "description": "Suspected surgery - Filter for entries with a value",
  "title": "Suspectedcauses.Surgeryid.Exists",
  "type": "boolean",
  "x-orm-lookup": "surgery_id__isnull"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId",
  "schema": {
  "description": "Suspected surgery - Filter for full text matches",
  "title": "Suspectedcauses.Surgeryid",
  "type": "string",
  "x-orm-lookup": "surgery_id__iexact"
  },
  "required": false,
  "description": "Suspected surgery - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.not",
  "schema": {
  "description": "Suspected surgery - Filter for full text mismatches",
  "title": "Suspectedcauses.Surgeryid.Not",
  "type": "string",
  "x-orm-lookup": "surgery_id__iexact"
  },
  "required": false,
  "description": "Suspected surgery - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.contains",
  "schema": {
  "description": "Suspected surgery - Filter for partial text matches",
  "title": "Suspectedcauses.Surgeryid.Contains",
  "type": "string",
  "x-orm-lookup": "surgery_id__icontains"
  },
  "required": false,
  "description": "Suspected surgery - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.not.contains",
  "schema": {
  "description": "Suspected surgery - Filter for partial text mismatches",
  "title": "Suspectedcauses.Surgeryid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "surgery_id__icontains"
  },
  "required": false,
  "description": "Suspected surgery - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.beginsWith",
  "schema": {
  "description": "Suspected surgery - Filter for entries starting with the text",
  "title": "Suspectedcauses.Surgeryid.Beginswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__istartswith"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.not.beginsWith",
  "schema": {
  "description": "Suspected surgery - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Surgeryid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__istartswith"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.endsWith",
  "schema": {
  "description": "Suspected surgery - Filter for entries ending with the text",
  "title": "Suspectedcauses.Surgeryid.Endswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__iendswith"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.surgeryId.not.endsWith",
  "schema": {
  "description": "Suspected surgery - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Surgeryid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__iendswith"
  },
  "required": false,
  "description": "Suspected surgery - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "suspectedCauses.causality.not.exists",
  "schema": {
  "description": "Causality - Filter for entries without a value",
  "title": "Suspectedcauses.Causality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "causality__isnull"
  },
  "required": false,
  "description": "Causality - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.causality.exists",
  "schema": {
  "description": "Causality - Filter for entries with a value",
  "title": "Suspectedcauses.Causality.Exists",
  "type": "boolean",
  "x-orm-lookup": "causality__isnull"
  },
  "required": false,
  "description": "Causality - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "suspectedCauses.causality",
  "schema": {
  "allOf": [
  {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  }
  ],
  "description": "Causality - ('Filter for single value choice',)",
  "x-orm-lookup": "causality__exact"
  },
  "required": false,
  "description": "Causality - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.causality.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  }
  ],
  "description": "Causality - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "causality__exact"
  },
  "required": false,
  "description": "Causality - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "suspectedCauses.causality.anyOf",
  "schema": {
  "description": "Causality - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  },
  "title": "Suspectedcauses.Causality.Anyof",
  "type": "array",
  "x-orm-lookup": "causality__in"
  },
  "required": false,
  "description": "Causality - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "mitigations.id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Mitigations.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Mitigations.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Mitigations.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Mitigations.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Mitigations.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Mitigations.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Mitigations.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Mitigations.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Mitigations.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Mitigations.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Mitigations.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Mitigations.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Mitigations.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Mitigations.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Mitigations.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Mitigations.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Mitigations.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Mitigations.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.description",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "mitigations.description.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.description.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "mitigations.description.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "mitigations.description.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.description.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "mitigations.description.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.description.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "mitigations.category",
  "schema": {
  "allOf": [
  {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  }
  ],
  "description": "Mitigation category - ('Filter for single value choice',)",
  "x-orm-lookup": "category__exact"
  },
  "required": false,
  "description": "Mitigation category - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "mitigations.category.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  }
  ],
  "description": "Mitigation category - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "category__exact"
  },
  "required": false,
  "description": "Mitigation category - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "mitigations.category.anyOf",
  "schema": {
  "description": "Mitigation category - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  },
  "title": "Mitigations.Category.Anyof",
  "type": "array",
  "x-orm-lookup": "category__in"
  },
  "required": false,
  "description": "Mitigation category - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.not.exists",
  "schema": {
  "description": "Treatment Adjustment - Filter for entries without a value",
  "title": "Mitigations.Adjustment.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "adjustment__isnull"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.exists",
  "schema": {
  "description": "Treatment Adjustment - Filter for entries with a value",
  "title": "Mitigations.Adjustment.Exists",
  "type": "boolean",
  "x-orm-lookup": "adjustment__isnull"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment",
  "schema": {
  "description": "Treatment Adjustment - Filter for a matching concept code",
  "title": "Mitigations.Adjustment",
  "type": "string",
  "x-orm-lookup": "adjustment__code__iexact"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.not",
  "schema": {
  "description": "Treatment Adjustment - Filter for a mismatching concept code",
  "title": "Mitigations.Adjustment.Not",
  "type": "string",
  "x-orm-lookup": "adjustment__code__iexact"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.anyOf",
  "schema": {
  "description": "Treatment Adjustment - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Adjustment.Anyof",
  "type": "array",
  "x-orm-lookup": "adjustment__code__in"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.not.anyOf",
  "schema": {
  "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Adjustment.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "adjustment__code__in"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.adjustment.descendantsOf",
  "schema": {
  "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Adjustment.Descendantsof",
  "type": "string",
  "x-orm-lookup": "adjustment__None"
  },
  "required": false,
  "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "mitigations.drug.not.exists",
  "schema": {
  "description": "Pharmacological drug - Filter for entries without a value",
  "title": "Mitigations.Drug.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "drug__isnull"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.drug.exists",
  "schema": {
  "description": "Pharmacological drug - Filter for entries with a value",
  "title": "Mitigations.Drug.Exists",
  "type": "boolean",
  "x-orm-lookup": "drug__isnull"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.drug",
  "schema": {
  "description": "Pharmacological drug - Filter for a matching concept code",
  "title": "Mitigations.Drug",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.drug.not",
  "schema": {
  "description": "Pharmacological drug - Filter for a mismatching concept code",
  "title": "Mitigations.Drug.Not",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.drug.anyOf",
  "schema": {
  "description": "Pharmacological drug - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Drug.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.drug.not.anyOf",
  "schema": {
  "description": "Pharmacological drug - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Drug.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.drug.descendantsOf",
  "schema": {
  "description": "Pharmacological drug - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Drug.Descendantsof",
  "type": "string",
  "x-orm-lookup": "drug__None"
  },
  "required": false,
  "description": "Pharmacological drug - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.not.exists",
  "schema": {
  "description": "Procedure - Filter for entries without a value",
  "title": "Mitigations.Procedure.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "procedure__isnull"
  },
  "required": false,
  "description": "Procedure - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.exists",
  "schema": {
  "description": "Procedure - Filter for entries with a value",
  "title": "Mitigations.Procedure.Exists",
  "type": "boolean",
  "x-orm-lookup": "procedure__isnull"
  },
  "required": false,
  "description": "Procedure - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.procedure",
  "schema": {
  "description": "Procedure - Filter for a matching concept code",
  "title": "Mitigations.Procedure",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "required": false,
  "description": "Procedure - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.not",
  "schema": {
  "description": "Procedure - Filter for a mismatching concept code",
  "title": "Mitigations.Procedure.Not",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "required": false,
  "description": "Procedure - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.anyOf",
  "schema": {
  "description": "Procedure - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Procedure.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "required": false,
  "description": "Procedure - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.not.anyOf",
  "schema": {
  "description": "Procedure - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Procedure.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "required": false,
  "description": "Procedure - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.procedure.descendantsOf",
  "schema": {
  "description": "Procedure - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Procedure.Descendantsof",
  "type": "string",
  "x-orm-lookup": "procedure__None"
  },
  "required": false,
  "description": "Procedure - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "mitigations.management.not.exists",
  "schema": {
  "description": "Management - Filter for entries without a value",
  "title": "Mitigations.Management.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "management__isnull"
  },
  "required": false,
  "description": "Management - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "mitigations.management.exists",
  "schema": {
  "description": "Management - Filter for entries with a value",
  "title": "Mitigations.Management.Exists",
  "type": "boolean",
  "x-orm-lookup": "management__isnull"
  },
  "required": false,
  "description": "Management - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "mitigations.management",
  "schema": {
  "description": "Management - Filter for a matching concept code",
  "title": "Mitigations.Management",
  "type": "string",
  "x-orm-lookup": "management__code__iexact"
  },
  "required": false,
  "description": "Management - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.management.not",
  "schema": {
  "description": "Management - Filter for a mismatching concept code",
  "title": "Mitigations.Management.Not",
  "type": "string",
  "x-orm-lookup": "management__code__iexact"
  },
  "required": false,
  "description": "Management - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "mitigations.management.anyOf",
  "schema": {
  "description": "Management - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Management.Anyof",
  "type": "array",
  "x-orm-lookup": "management__code__in"
  },
  "required": false,
  "description": "Management - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.management.not.anyOf",
  "schema": {
  "description": "Management - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Management.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "management__code__in"
  },
  "required": false,
  "description": "Management - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "mitigations.management.descendantsOf",
  "schema": {
  "description": "Management - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Management.Descendantsof",
  "type": "string",
  "x-orm-lookup": "management__None"
  },
  "required": false,
  "description": "Management - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_AdverseEventSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events/{adverseEventId}/mitigations": {
  "post": {
  "operationId": "createAdverseEventMitigation",
  "summary": "Create Adverse Event Mitigation",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventMitigationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEventMitigations",
  "summary": "Get Adverse Event Mitigations Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/AdverseEventMitigationSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events/{adverseEventId}/suspected-causes": {
  "post": {
  "operationId": "createAdverseEventSuspectedCause",
  "summary": "Create Adverse Event Suspected Cause",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEventSuspectedCauses",
  "summary": "Get Adverse Event Suspected Causes Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events/{adverseEventId}": {
  "delete": {
  "operationId": "deleteAdverseEventById",
  "summary": "Delete Adverse Event",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEventById",
  "summary": "Get Adverse Event By Id",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateAdverseEvent",
  "summary": "Update Adverse Event",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}": {
  "delete": {
  "operationId": "deleteAdverseEventMitigation",
  "summary": "Delete Adverse Event Mitigation",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "mitigationId",
  "schema": {
  "title": "Mitigationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEventMitigationById",
  "summary": "Get Adverse Event Mitigation By Id",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "mitigationId",
  "schema": {
  "title": "Mitigationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventMitigationSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateAdverseEventMitigation",
  "summary": "Update Adverse Event Mitigation",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "mitigationId",
  "schema": {
  "title": "Mitigationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventMitigationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}": {
  "delete": {
  "operationId": "deleteAdverseEventSuspectedCause",
  "summary": "Delete Adverse Event Suspected Cause",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "causeId",
  "schema": {
  "title": "Causeid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getAdverseEventSuspectedCauseById",
  "summary": "Get Adverse Event Suspected Cause By Id",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "causeId",
  "schema": {
  "title": "Causeid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateAdverseEventSuspectedCause",
  "summary": "Update Adverse Event Suspected Cause",
  "parameters": [
  {
  "in": "path",
  "name": "adverseEventId",
  "schema": {
  "title": "Adverseeventid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "causeId",
  "schema": {
  "title": "Causeid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Adverse Events"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/treatment-responses": {
  "post": {
  "operationId": "createTreatmentResponse",
  "summary": "Create Treatment Response",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Treatment Responses"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TreatmentResponseCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTreatmentResponses",
  "summary": "Get All Treatment Responses Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "recist",
  "schema": {
  "description": "RECIST - Filter for a matching concept code",
  "title": "Recist",
  "type": "string",
  "x-orm-lookup": "recist__code__iexact"
  },
  "required": false,
  "description": "RECIST - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "recist.not",
  "schema": {
  "description": "RECIST - Filter for a mismatching concept code",
  "title": "Recist.Not",
  "type": "string",
  "x-orm-lookup": "recist__code__iexact"
  },
  "required": false,
  "description": "RECIST - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "recist.anyOf",
  "schema": {
  "description": "RECIST - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Recist.Anyof",
  "type": "array",
  "x-orm-lookup": "recist__code__in"
  },
  "required": false,
  "description": "RECIST - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "recist.not.anyOf",
  "schema": {
  "description": "RECIST - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Recist.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "recist__code__in"
  },
  "required": false,
  "description": "RECIST - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "recist.descendantsOf",
  "schema": {
  "description": "RECIST - Filter for all child concepts of a given concepts code",
  "title": "Recist.Descendantsof",
  "type": "string",
  "x-orm-lookup": "recist__None"
  },
  "required": false,
  "description": "RECIST - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "recistInterpreted.not.exists",
  "schema": {
  "description": "RECIST Interpreted? - Filter for entries without a value",
  "title": "Recistinterpreted.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__isnull"
  },
  "required": false,
  "description": "RECIST Interpreted? - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recistInterpreted.exists",
  "schema": {
  "description": "RECIST Interpreted? - Filter for entries with a value",
  "title": "Recistinterpreted.Exists",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__isnull"
  },
  "required": false,
  "description": "RECIST Interpreted? - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recistInterpreted",
  "schema": {
  "description": "RECIST Interpreted? - ('Filter for yes/no statement',)",
  "title": "Recistinterpreted",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__exact"
  },
  "required": false,
  "description": "RECIST Interpreted? - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "methodology",
  "schema": {
  "description": "Assessment method - Filter for a matching concept code",
  "title": "Methodology",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "required": false,
  "description": "Assessment method - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "methodology.not",
  "schema": {
  "description": "Assessment method - Filter for a mismatching concept code",
  "title": "Methodology.Not",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "required": false,
  "description": "Assessment method - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "methodology.anyOf",
  "schema": {
  "description": "Assessment method - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "required": false,
  "description": "Assessment method - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "methodology.not.anyOf",
  "schema": {
  "description": "Assessment method - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "required": false,
  "description": "Assessment method - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "methodology.descendantsOf",
  "schema": {
  "description": "Assessment method - Filter for all child concepts of a given concepts code",
  "title": "Methodology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "methodology__None"
  },
  "required": false,
  "description": "Assessment method - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for full text matches",
  "title": "Assessedentitiesids",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for full text mismatches",
  "title": "Assessedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.contains",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for partial text matches",
  "title": "Assessedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.contains",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for partial text mismatches",
  "title": "Assessedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.beginsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries starting with the text",
  "title": "Assessedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
  "title": "Assessedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.endsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries ending with the text",
  "title": "Assessedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
  "title": "Assessedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "required": false,
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessedBodysites.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "assessedBodysites.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_TreatmentResponseSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Treatment Responses"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/treatment-responses/{treatmentRresponseId}": {
  "delete": {
  "operationId": "deleteTreatmentResponse",
  "summary": "Delete Treatment Response",
  "parameters": [
  {
  "in": "path",
  "name": "treatmentRresponseId",
  "schema": {
  "title": "Treatmentrresponseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Treatment Responses"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTreatmentResponseById",
  "summary": "Get Treatment Response By Id",
  "parameters": [
  {
  "in": "path",
  "name": "treatmentRresponseId",
  "schema": {
  "title": "Treatmentrresponseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TreatmentResponseSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Treatment Responses"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateTreatmentResponse",
  "summary": "Update Treatment Response",
  "parameters": [
  {
  "in": "path",
  "name": "treatmentRresponseId",
  "schema": {
  "title": "Treatmentrresponseid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Treatment Responses"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/TreatmentResponseCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/tumor-boards": {
  "post": {
  "operationId": "createTumorBoard",
  "summary": "Create Tumor Board",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UnspecifiedTumorBoardCreateSchema"
  },
  {
  "$ref": "#/components/schemas/MolecularTumorBoardCreateSchema"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTumorBoards",
  "summary": "Get All Tumor Boards Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds",
  "schema": {
  "description": "Related neoplastic entities - Filter for full text matches",
  "title": "Relatedentitiesids",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not",
  "schema": {
  "description": "Related neoplastic entities - Filter for full text mismatches",
  "title": "Relatedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.contains",
  "schema": {
  "description": "Related neoplastic entities - Filter for partial text matches",
  "title": "Relatedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.contains",
  "schema": {
  "description": "Related neoplastic entities - Filter for partial text mismatches",
  "title": "Relatedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.beginsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries starting with the text",
  "title": "Relatedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.beginsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries not starting with the text",
  "title": "Relatedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.endsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries ending with the text",
  "title": "Relatedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "relatedEntitiesIds.not.endsWith",
  "schema": {
  "description": "Related neoplastic entities - Filter for entries not ending with the text",
  "title": "Relatedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "required": false,
  "description": "Related neoplastic entities - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recommendations.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recommendations.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recommendations.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recommendations.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recommendations.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recommendations.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recommendations.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recommendations.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recommendations.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recommendations.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recommendations.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recommendations.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recommendations.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recommendations.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recommendations.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recommendations.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recommendations.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recommendations.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_AnyTumorBoard_"
  }
  }
  }
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/tumor-boards/{tumorBoardId}": {
  "delete": {
  "operationId": "deleteTumorBoardById",
  "summary": "Delete Tumor Board",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getTumorBoardById",
  "summary": "Get Tumor Board By Id",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AnyTumorBoard"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateTumorBoardById",
  "summary": "Update Tumor Board",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UnspecifiedTumorBoardCreateSchema"
  },
  {
  "$ref": "#/components/schemas/MolecularTumorBoardCreateSchema"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations": {
  "post": {
  "operationId": "createMolecularTherapeuticRecommendation",
  "summary": "Create Molecular Tumor Board Therapeutic Recommendation",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getMolecularTherapeuticRecommendations",
  "summary": "Get Molecular Tumor Board Therapeutic Recommendations Matching The Query",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}": {
  "delete": {
  "operationId": "deleteMolecularTherapeuticRecommendation",
  "summary": "Delete Molecular Tumor Board Therapeutic Recommendation",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "recommendationId",
  "schema": {
  "title": "Recommendationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getMOlecularTherapeuticRecommendationById",
  "summary": "Get Molecular Tumor Board Therapeutic Recommendation By Id",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "recommendationId",
  "schema": {
  "title": "Recommendationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateMolecularTherapeuticRecommendation",
  "summary": "Update Molecular Tumor Board Therapeutic Recommendation",
  "parameters": [
  {
  "in": "path",
  "name": "tumorBoardId",
  "schema": {
  "title": "Tumorboardid",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "path",
  "name": "recommendationId",
  "schema": {
  "title": "Recommendationid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Tumor Boards"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/performance-status": {
  "post": {
  "operationId": "createPerformanceStatus",
  "summary": "Create Performance Status",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Performance Status"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PerformanceStatusCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getPerformanceStatus",
  "summary": "Get All Performance Status Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "ecogInterpretation.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Ecoginterpretation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_interpretation__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "ecogInterpretation.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Ecoginterpretation.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_interpretation__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "ecogInterpretation",
  "schema": {
  "description": "None - Filter for a matching concept code",
  "title": "Ecoginterpretation",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "ecogInterpretation.not",
  "schema": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Ecoginterpretation.Not",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "ecogInterpretation.anyOf",
  "schema": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Ecoginterpretation.Anyof",
  "type": "array",
  "x-orm-lookup": "ecog_interpretation__code__in"
  },
  "required": false,
  "description": "None - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "ecogInterpretation.not.anyOf",
  "schema": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Ecoginterpretation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "ecog_interpretation__code__in"
  },
  "required": false,
  "description": "None - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "ecogInterpretation.descendantsOf",
  "schema": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Ecoginterpretation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__None"
  },
  "required": false,
  "description": "None - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Karnofskyinterpretation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_interpretation__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Karnofskyinterpretation.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_interpretation__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation",
  "schema": {
  "description": "None - Filter for a matching concept code",
  "title": "Karnofskyinterpretation",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.not",
  "schema": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Karnofskyinterpretation.Not",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__code__iexact"
  },
  "required": false,
  "description": "None - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.anyOf",
  "schema": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Karnofskyinterpretation.Anyof",
  "type": "array",
  "x-orm-lookup": "karnofsky_interpretation__code__in"
  },
  "required": false,
  "description": "None - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.not.anyOf",
  "schema": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Karnofskyinterpretation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "karnofsky_interpretation__code__in"
  },
  "required": false,
  "description": "None - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "karnofskyInterpretation.descendantsOf",
  "schema": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Karnofskyinterpretation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__None"
  },
  "required": false,
  "description": "None - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "ecogScore.not.exists",
  "schema": {
  "description": "ECOG Score - Filter for entries without a value",
  "title": "Ecogscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_score__isnull"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "ecogScore.exists",
  "schema": {
  "description": "ECOG Score - Filter for entries with a value",
  "title": "Ecogscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_score__isnull"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "ecogScore.lessThan",
  "schema": {
  "description": "ECOG Score - Filter for entries with values less than the specified value",
  "title": "Ecogscore.Lessthan",
  "type": "integer",
  "x-orm-lookup": "ecog_score__lt"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.lessThanOrEqual",
  "schema": {
  "description": "ECOG Score - Filter for entries with values less than or equal to the specified value",
  "title": "Ecogscore.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__lte"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.greaterThan",
  "schema": {
  "description": "ECOG Score - Filter for entries with values greater than the specified value",
  "title": "Ecogscore.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "ecog_score__gt"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.greaterThanOrEqual",
  "schema": {
  "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Ecogscore.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__gte"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.equal",
  "schema": {
  "description": "ECOG Score - Filter for entries with values exactly equal to the specified value",
  "title": "Ecogscore.Equal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__exact"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.not.equal",
  "schema": {
  "description": "ECOG Score - Filter for entries with values not equal to the specified value",
  "title": "Ecogscore.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__exact"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "ecogScore.between",
  "schema": {
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Ecogscore.Between",
  "type": "array",
  "x-orm-lookup": "ecog_score__range"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "ecogScore.not.between",
  "schema": {
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Ecogscore.Not.Between",
  "type": "array",
  "x-orm-lookup": "ecog_score__range"
  },
  "required": false,
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "karnofskyScore.not.exists",
  "schema": {
  "description": "Karnofsky Score - Filter for entries without a value",
  "title": "Karnofskyscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_score__isnull"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.exists",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with a value",
  "title": "Karnofskyscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_score__isnull"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.lessThan",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values less than the specified value",
  "title": "Karnofskyscore.Lessthan",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__lt"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.lessThanOrEqual",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value",
  "title": "Karnofskyscore.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__lte"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.greaterThan",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values greater than the specified value",
  "title": "Karnofskyscore.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__gt"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.greaterThanOrEqual",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Karnofskyscore.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__gte"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.equal",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value",
  "title": "Karnofskyscore.Equal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__exact"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.not.equal",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values not equal to the specified value",
  "title": "Karnofskyscore.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__exact"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "karnofskyScore.between",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Karnofskyscore.Between",
  "type": "array",
  "x-orm-lookup": "karnofsky_score__range"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "karnofskyScore.not.between",
  "schema": {
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Karnofskyscore.Not.Between",
  "type": "array",
  "x-orm-lookup": "karnofsky_score__range"
  },
  "required": false,
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_PerformanceStatus_"
  }
  }
  }
  }
  },
  "tags": [
  "Performance Status"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/performance-status/{performanceStatusId}": {
  "delete": {
  "operationId": "deletePerformanceStatus",
  "summary": "Delete Performance Status",
  "parameters": [
  {
  "in": "path",
  "name": "performanceStatusId",
  "schema": {
  "title": "Performancestatusid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Performance Status"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getPerformanceStatusById",
  "summary": "Get Performance Status By Id",
  "parameters": [
  {
  "in": "path",
  "name": "performanceStatusId",
  "schema": {
  "title": "Performancestatusid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PerformanceStatus"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Performance Status"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updatePerformanceStatusById",
  "summary": "Update Performance Status",
  "parameters": [
  {
  "in": "path",
  "name": "performanceStatusId",
  "schema": {
  "title": "Performancestatusid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Performance Status"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/PerformanceStatusCreate"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/genomic-variants": {
  "post": {
  "operationId": "createGenomicVariant",
  "summary": "Create Genomic Variant",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Genomic Variants"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/GenomicVariantCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getGenomicVariants",
  "summary": "Get All Genomic Variants Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "genePanel.not.exists",
  "schema": {
  "description": "Gene panel - Filter for entries without a value",
  "title": "Genepanel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "gene_panel__isnull"
  },
  "required": false,
  "description": "Gene panel - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genePanel.exists",
  "schema": {
  "description": "Gene panel - Filter for entries with a value",
  "title": "Genepanel.Exists",
  "type": "boolean",
  "x-orm-lookup": "gene_panel__isnull"
  },
  "required": false,
  "description": "Gene panel - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genePanel",
  "schema": {
  "description": "Gene panel - Filter for full text matches",
  "title": "Genepanel",
  "type": "string",
  "x-orm-lookup": "gene_panel__iexact"
  },
  "required": false,
  "description": "Gene panel - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genePanel.not",
  "schema": {
  "description": "Gene panel - Filter for full text mismatches",
  "title": "Genepanel.Not",
  "type": "string",
  "x-orm-lookup": "gene_panel__iexact"
  },
  "required": false,
  "description": "Gene panel - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genePanel.contains",
  "schema": {
  "description": "Gene panel - Filter for partial text matches",
  "title": "Genepanel.Contains",
  "type": "string",
  "x-orm-lookup": "gene_panel__icontains"
  },
  "required": false,
  "description": "Gene panel - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genePanel.not.contains",
  "schema": {
  "description": "Gene panel - Filter for partial text mismatches",
  "title": "Genepanel.Not.Contains",
  "type": "string",
  "x-orm-lookup": "gene_panel__icontains"
  },
  "required": false,
  "description": "Gene panel - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genePanel.beginsWith",
  "schema": {
  "description": "Gene panel - Filter for entries starting with the text",
  "title": "Genepanel.Beginswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__istartswith"
  },
  "required": false,
  "description": "Gene panel - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genePanel.not.beginsWith",
  "schema": {
  "description": "Gene panel - Filter for entries not starting with the text",
  "title": "Genepanel.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__istartswith"
  },
  "required": false,
  "description": "Gene panel - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genePanel.endsWith",
  "schema": {
  "description": "Gene panel - Filter for entries ending with the text",
  "title": "Genepanel.Endswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__iendswith"
  },
  "required": false,
  "description": "Gene panel - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genePanel.not.endsWith",
  "schema": {
  "description": "Gene panel - Filter for entries not ending with the text",
  "title": "Genepanel.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__iendswith"
  },
  "required": false,
  "description": "Gene panel - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "assessment.not.exists",
  "schema": {
  "description": "Assessment - Filter for entries without a value",
  "title": "Assessment.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "assessment__isnull"
  },
  "required": false,
  "description": "Assessment - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "assessment.exists",
  "schema": {
  "description": "Assessment - Filter for entries with a value",
  "title": "Assessment.Exists",
  "type": "boolean",
  "x-orm-lookup": "assessment__isnull"
  },
  "required": false,
  "description": "Assessment - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "assessment",
  "schema": {
  "allOf": [
  {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  }
  ],
  "description": "Assessment - ('Filter for single value choice',)",
  "x-orm-lookup": "assessment__exact"
  },
  "required": false,
  "description": "Assessment - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "assessment.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  }
  ],
  "description": "Assessment - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "assessment__exact"
  },
  "required": false,
  "description": "Assessment - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "assessment.anyOf",
  "schema": {
  "description": "Assessment - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  },
  "title": "Assessment.Anyof",
  "type": "array",
  "x-orm-lookup": "assessment__in"
  },
  "required": false,
  "description": "Assessment - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "confidence.not.exists",
  "schema": {
  "description": "Confidence - Filter for entries without a value",
  "title": "Confidence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "confidence__isnull"
  },
  "required": false,
  "description": "Confidence - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "confidence.exists",
  "schema": {
  "description": "Confidence - Filter for entries with a value",
  "title": "Confidence.Exists",
  "type": "boolean",
  "x-orm-lookup": "confidence__isnull"
  },
  "required": false,
  "description": "Confidence - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "confidence",
  "schema": {
  "allOf": [
  {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  }
  ],
  "description": "Confidence - ('Filter for single value choice',)",
  "x-orm-lookup": "confidence__exact"
  },
  "required": false,
  "description": "Confidence - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "confidence.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  }
  ],
  "description": "Confidence - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "confidence__exact"
  },
  "required": false,
  "description": "Confidence - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "confidence.anyOf",
  "schema": {
  "description": "Confidence - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  },
  "title": "Confidence.Anyof",
  "type": "array",
  "x-orm-lookup": "confidence__in"
  },
  "required": false,
  "description": "Confidence - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "analysisMethod.not.exists",
  "schema": {
  "description": "Analysis method - Filter for entries without a value",
  "title": "Analysismethod.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "analysis_method__isnull"
  },
  "required": false,
  "description": "Analysis method - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "analysisMethod.exists",
  "schema": {
  "description": "Analysis method - Filter for entries with a value",
  "title": "Analysismethod.Exists",
  "type": "boolean",
  "x-orm-lookup": "analysis_method__isnull"
  },
  "required": false,
  "description": "Analysis method - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "analysisMethod",
  "schema": {
  "description": "Analysis method - Filter for a matching concept code",
  "title": "Analysismethod",
  "type": "string",
  "x-orm-lookup": "analysis_method__code__iexact"
  },
  "required": false,
  "description": "Analysis method - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "analysisMethod.not",
  "schema": {
  "description": "Analysis method - Filter for a mismatching concept code",
  "title": "Analysismethod.Not",
  "type": "string",
  "x-orm-lookup": "analysis_method__code__iexact"
  },
  "required": false,
  "description": "Analysis method - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "analysisMethod.anyOf",
  "schema": {
  "description": "Analysis method - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analysismethod.Anyof",
  "type": "array",
  "x-orm-lookup": "analysis_method__code__in"
  },
  "required": false,
  "description": "Analysis method - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "analysisMethod.not.anyOf",
  "schema": {
  "description": "Analysis method - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analysismethod.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "analysis_method__code__in"
  },
  "required": false,
  "description": "Analysis method - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "analysisMethod.descendantsOf",
  "schema": {
  "description": "Analysis method - Filter for all child concepts of a given concepts code",
  "title": "Analysismethod.Descendantsof",
  "type": "string",
  "x-orm-lookup": "analysis_method__None"
  },
  "required": false,
  "description": "Analysis method - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "clinicalRelevance.not.exists",
  "schema": {
  "description": "Clinical relevance - Filter for entries without a value",
  "title": "Clinicalrelevance.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinical_relevance__isnull"
  },
  "required": false,
  "description": "Clinical relevance - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "clinicalRelevance.exists",
  "schema": {
  "description": "Clinical relevance - Filter for entries with a value",
  "title": "Clinicalrelevance.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinical_relevance__isnull"
  },
  "required": false,
  "description": "Clinical relevance - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "clinicalRelevance",
  "schema": {
  "allOf": [
  {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  }
  ],
  "description": "Clinical relevance - ('Filter for single value choice',)",
  "x-orm-lookup": "clinical_relevance__exact"
  },
  "required": false,
  "description": "Clinical relevance - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "clinicalRelevance.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  }
  ],
  "description": "Clinical relevance - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "clinical_relevance__exact"
  },
  "required": false,
  "description": "Clinical relevance - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "clinicalRelevance.anyOf",
  "schema": {
  "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  },
  "title": "Clinicalrelevance.Anyof",
  "type": "array",
  "x-orm-lookup": "clinical_relevance__in"
  },
  "required": false,
  "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.not.exists",
  "schema": {
  "description": "Cytogenetic location - Filter for entries without a value",
  "title": "Cytogeneticlocation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "cytogenetic_location__isnull"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.exists",
  "schema": {
  "description": "Cytogenetic location - Filter for entries with a value",
  "title": "Cytogeneticlocation.Exists",
  "type": "boolean",
  "x-orm-lookup": "cytogenetic_location__isnull"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation",
  "schema": {
  "description": "Cytogenetic location - Filter for full text matches",
  "title": "Cytogeneticlocation",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iexact"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.not",
  "schema": {
  "description": "Cytogenetic location - Filter for full text mismatches",
  "title": "Cytogeneticlocation.Not",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iexact"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.contains",
  "schema": {
  "description": "Cytogenetic location - Filter for partial text matches",
  "title": "Cytogeneticlocation.Contains",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__icontains"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.not.contains",
  "schema": {
  "description": "Cytogenetic location - Filter for partial text mismatches",
  "title": "Cytogeneticlocation.Not.Contains",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__icontains"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.beginsWith",
  "schema": {
  "description": "Cytogenetic location - Filter for entries starting with the text",
  "title": "Cytogeneticlocation.Beginswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__istartswith"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.not.beginsWith",
  "schema": {
  "description": "Cytogenetic location - Filter for entries not starting with the text",
  "title": "Cytogeneticlocation.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__istartswith"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.endsWith",
  "schema": {
  "description": "Cytogenetic location - Filter for entries ending with the text",
  "title": "Cytogeneticlocation.Endswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iendswith"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "cytogeneticLocation.not.endsWith",
  "schema": {
  "description": "Cytogenetic location - Filter for entries not ending with the text",
  "title": "Cytogeneticlocation.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iendswith"
  },
  "required": false,
  "description": "Cytogenetic location - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.not.exists",
  "schema": {
  "description": "Genome assembly version - Filter for entries without a value",
  "title": "Genomeassemblyversion.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genome_assembly_version__isnull"
  },
  "required": false,
  "description": "Genome assembly version - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.exists",
  "schema": {
  "description": "Genome assembly version - Filter for entries with a value",
  "title": "Genomeassemblyversion.Exists",
  "type": "boolean",
  "x-orm-lookup": "genome_assembly_version__isnull"
  },
  "required": false,
  "description": "Genome assembly version - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion",
  "schema": {
  "description": "Genome assembly version - Filter for a matching concept code",
  "title": "Genomeassemblyversion",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__code__iexact"
  },
  "required": false,
  "description": "Genome assembly version - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.not",
  "schema": {
  "description": "Genome assembly version - Filter for a mismatching concept code",
  "title": "Genomeassemblyversion.Not",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__code__iexact"
  },
  "required": false,
  "description": "Genome assembly version - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.anyOf",
  "schema": {
  "description": "Genome assembly version - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genomeassemblyversion.Anyof",
  "type": "array",
  "x-orm-lookup": "genome_assembly_version__code__in"
  },
  "required": false,
  "description": "Genome assembly version - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.not.anyOf",
  "schema": {
  "description": "Genome assembly version - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genomeassemblyversion.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "genome_assembly_version__code__in"
  },
  "required": false,
  "description": "Genome assembly version - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "genomeAssemblyVersion.descendantsOf",
  "schema": {
  "description": "Genome assembly version - Filter for all child concepts of a given concepts code",
  "title": "Genomeassemblyversion.Descendantsof",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__None"
  },
  "required": false,
  "description": "Genome assembly version - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "genomicRefseq.not.exists",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries without a value",
  "title": "Genomicrefseq.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_refseq__isnull"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genomicRefseq.exists",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries with a value",
  "title": "Genomicrefseq.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_refseq__isnull"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genomicRefseq",
  "schema": {
  "description": "Genomic RefSeq - Filter for full text matches",
  "title": "Genomicrefseq",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iexact"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genomicRefseq.not",
  "schema": {
  "description": "Genomic RefSeq - Filter for full text mismatches",
  "title": "Genomicrefseq.Not",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iexact"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genomicRefseq.contains",
  "schema": {
  "description": "Genomic RefSeq - Filter for partial text matches",
  "title": "Genomicrefseq.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__icontains"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genomicRefseq.not.contains",
  "schema": {
  "description": "Genomic RefSeq - Filter for partial text mismatches",
  "title": "Genomicrefseq.Not.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__icontains"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genomicRefseq.beginsWith",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries starting with the text",
  "title": "Genomicrefseq.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__istartswith"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genomicRefseq.not.beginsWith",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries not starting with the text",
  "title": "Genomicrefseq.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__istartswith"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genomicRefseq.endsWith",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries ending with the text",
  "title": "Genomicrefseq.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iendswith"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genomicRefseq.not.endsWith",
  "schema": {
  "description": "Genomic RefSeq - Filter for entries not ending with the text",
  "title": "Genomicrefseq.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iendswith"
  },
  "required": false,
  "description": "Genomic RefSeq - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.not.exists",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries without a value",
  "title": "Transcriptrefseq.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "transcript_refseq__isnull"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.exists",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries with a value",
  "title": "Transcriptrefseq.Exists",
  "type": "boolean",
  "x-orm-lookup": "transcript_refseq__isnull"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "transcriptRefseq",
  "schema": {
  "description": "Transcript RefSeq - Filter for full text matches",
  "title": "Transcriptrefseq",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iexact"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.not",
  "schema": {
  "description": "Transcript RefSeq - Filter for full text mismatches",
  "title": "Transcriptrefseq.Not",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iexact"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.contains",
  "schema": {
  "description": "Transcript RefSeq - Filter for partial text matches",
  "title": "Transcriptrefseq.Contains",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__icontains"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.not.contains",
  "schema": {
  "description": "Transcript RefSeq - Filter for partial text mismatches",
  "title": "Transcriptrefseq.Not.Contains",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__icontains"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.beginsWith",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries starting with the text",
  "title": "Transcriptrefseq.Beginswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__istartswith"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.not.beginsWith",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries not starting with the text",
  "title": "Transcriptrefseq.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__istartswith"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.endsWith",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries ending with the text",
  "title": "Transcriptrefseq.Endswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iendswith"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "transcriptRefseq.not.endsWith",
  "schema": {
  "description": "Transcript RefSeq - Filter for entries not ending with the text",
  "title": "Transcriptrefseq.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iendswith"
  },
  "required": false,
  "description": "Transcript RefSeq - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "codingHgvs.not.exists",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries without a value",
  "title": "Codinghgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "coding_hgvs__isnull"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "codingHgvs.exists",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries with a value",
  "title": "Codinghgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "coding_hgvs__isnull"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "codingHgvs",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for full text matches",
  "title": "Codinghgvs",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iexact"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "codingHgvs.not",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches",
  "title": "Codinghgvs.Not",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iexact"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "codingHgvs.contains",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text matches",
  "title": "Codinghgvs.Contains",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__icontains"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "codingHgvs.not.contains",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches",
  "title": "Codinghgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__icontains"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "codingHgvs.beginsWith",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text",
  "title": "Codinghgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__istartswith"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "codingHgvs.not.beginsWith",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text",
  "title": "Codinghgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__istartswith"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "codingHgvs.endsWith",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text",
  "title": "Codinghgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iendswith"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "codingHgvs.not.endsWith",
  "schema": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text",
  "title": "Codinghgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iendswith"
  },
  "required": false,
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "proteinHgvs.not.exists",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value",
  "title": "Proteinhgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "protein_hgvs__isnull"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "proteinHgvs.exists",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value",
  "title": "Proteinhgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "protein_hgvs__isnull"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "proteinHgvs",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches",
  "title": "Proteinhgvs",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iexact"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "proteinHgvs.not",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches",
  "title": "Proteinhgvs.Not",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iexact"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "proteinHgvs.contains",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches",
  "title": "Proteinhgvs.Contains",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__icontains"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "proteinHgvs.not.contains",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches",
  "title": "Proteinhgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__icontains"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "proteinHgvs.beginsWith",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text",
  "title": "Proteinhgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__istartswith"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "proteinHgvs.not.beginsWith",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text",
  "title": "Proteinhgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__istartswith"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "proteinHgvs.endsWith",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text",
  "title": "Proteinhgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iendswith"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "proteinHgvs.not.endsWith",
  "schema": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text",
  "title": "Proteinhgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iendswith"
  },
  "required": false,
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genomicHgvs.not.exists",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries without a value",
  "title": "Genomichgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_hgvs__isnull"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genomicHgvs.exists",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries with a value",
  "title": "Genomichgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_hgvs__isnull"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genomicHgvs",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for full text matches",
  "title": "Genomichgvs",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iexact"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genomicHgvs.not",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for full text mismatches",
  "title": "Genomichgvs.Not",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iexact"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genomicHgvs.contains",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for partial text matches",
  "title": "Genomichgvs.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__icontains"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genomicHgvs.not.contains",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for partial text mismatches",
  "title": "Genomichgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__icontains"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genomicHgvs.beginsWith",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries starting with the text",
  "title": "Genomichgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__istartswith"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genomicHgvs.not.beginsWith",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text",
  "title": "Genomichgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__istartswith"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genomicHgvs.endsWith",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries ending with the text",
  "title": "Genomichgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iendswith"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genomicHgvs.not.endsWith",
  "schema": {
  "description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text",
  "title": "Genomichgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iendswith"
  },
  "required": false,
  "description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "dnaChangeType.not.exists",
  "schema": {
  "description": "Coding DNA change type - Filter for entries without a value",
  "title": "Dnachangetype.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dna_change_type__isnull"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "dnaChangeType.exists",
  "schema": {
  "description": "Coding DNA change type - Filter for entries with a value",
  "title": "Dnachangetype.Exists",
  "type": "boolean",
  "x-orm-lookup": "dna_change_type__isnull"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "dnaChangeType",
  "schema": {
  "description": "Coding DNA change type - Filter for a matching concept code",
  "title": "Dnachangetype",
  "type": "string",
  "x-orm-lookup": "dna_change_type__code__iexact"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "dnaChangeType.not",
  "schema": {
  "description": "Coding DNA change type - Filter for a mismatching concept code",
  "title": "Dnachangetype.Not",
  "type": "string",
  "x-orm-lookup": "dna_change_type__code__iexact"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "dnaChangeType.anyOf",
  "schema": {
  "description": "Coding DNA change type - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dnachangetype.Anyof",
  "type": "array",
  "x-orm-lookup": "dna_change_type__code__in"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "dnaChangeType.not.anyOf",
  "schema": {
  "description": "Coding DNA change type - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dnachangetype.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "dna_change_type__code__in"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "dnaChangeType.descendantsOf",
  "schema": {
  "description": "Coding DNA change type - Filter for all child concepts of a given concepts code",
  "title": "Dnachangetype.Descendantsof",
  "type": "string",
  "x-orm-lookup": "dna_change_type__None"
  },
  "required": false,
  "description": "Coding DNA change type - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.not.exists",
  "schema": {
  "description": "Aminoacid change type - Filter for entries without a value",
  "title": "Aminoacidchangetype.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "aminoacid_change_type__isnull"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.exists",
  "schema": {
  "description": "Aminoacid change type - Filter for entries with a value",
  "title": "Aminoacidchangetype.Exists",
  "type": "boolean",
  "x-orm-lookup": "aminoacid_change_type__isnull"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType",
  "schema": {
  "description": "Aminoacid change type - Filter for a matching concept code",
  "title": "Aminoacidchangetype",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__code__iexact"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.not",
  "schema": {
  "description": "Aminoacid change type - Filter for a mismatching concept code",
  "title": "Aminoacidchangetype.Not",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__code__iexact"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.anyOf",
  "schema": {
  "description": "Aminoacid change type - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Aminoacidchangetype.Anyof",
  "type": "array",
  "x-orm-lookup": "aminoacid_change_type__code__in"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.not.anyOf",
  "schema": {
  "description": "Aminoacid change type - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Aminoacidchangetype.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "aminoacid_change_type__code__in"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "aminoacidChangeType.descendantsOf",
  "schema": {
  "description": "Aminoacid change type - Filter for all child concepts of a given concepts code",
  "title": "Aminoacidchangetype.Descendantsof",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__None"
  },
  "required": false,
  "description": "Aminoacid change type - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "molecularConsequence.not.exists",
  "schema": {
  "description": "Molecular consequence - Filter for entries without a value",
  "title": "Molecularconsequence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "molecular_consequence__isnull"
  },
  "required": false,
  "description": "Molecular consequence - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "molecularConsequence.exists",
  "schema": {
  "description": "Molecular consequence - Filter for entries with a value",
  "title": "Molecularconsequence.Exists",
  "type": "boolean",
  "x-orm-lookup": "molecular_consequence__isnull"
  },
  "required": false,
  "description": "Molecular consequence - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "molecularConsequence",
  "schema": {
  "description": "Molecular consequence - Filter for a matching concept code",
  "title": "Molecularconsequence",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__code__iexact"
  },
  "required": false,
  "description": "Molecular consequence - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "molecularConsequence.not",
  "schema": {
  "description": "Molecular consequence - Filter for a mismatching concept code",
  "title": "Molecularconsequence.Not",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__code__iexact"
  },
  "required": false,
  "description": "Molecular consequence - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "molecularConsequence.anyOf",
  "schema": {
  "description": "Molecular consequence - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Molecularconsequence.Anyof",
  "type": "array",
  "x-orm-lookup": "molecular_consequence__code__in"
  },
  "required": false,
  "description": "Molecular consequence - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "molecularConsequence.not.anyOf",
  "schema": {
  "description": "Molecular consequence - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Molecularconsequence.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "molecular_consequence__code__in"
  },
  "required": false,
  "description": "Molecular consequence - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "molecularConsequence.descendantsOf",
  "schema": {
  "description": "Molecular consequence - Filter for all child concepts of a given concepts code",
  "title": "Molecularconsequence.Descendantsof",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__None"
  },
  "required": false,
  "description": "Molecular consequence - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "copyNumber.not.exists",
  "schema": {
  "description": "Copy number - Filter for entries without a value",
  "title": "Copynumber.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "copy_number__isnull"
  },
  "required": false,
  "description": "Copy number - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "copyNumber.exists",
  "schema": {
  "description": "Copy number - Filter for entries with a value",
  "title": "Copynumber.Exists",
  "type": "boolean",
  "x-orm-lookup": "copy_number__isnull"
  },
  "required": false,
  "description": "Copy number - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "copyNumber.lessThan",
  "schema": {
  "description": "Copy number - Filter for entries with values less than the specified value",
  "title": "Copynumber.Lessthan",
  "type": "integer",
  "x-orm-lookup": "copy_number__lt"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.lessThanOrEqual",
  "schema": {
  "description": "Copy number - Filter for entries with values less than or equal to the specified value",
  "title": "Copynumber.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "copy_number__lte"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.greaterThan",
  "schema": {
  "description": "Copy number - Filter for entries with values greater than the specified value",
  "title": "Copynumber.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "copy_number__gt"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.greaterThanOrEqual",
  "schema": {
  "description": "Copy number - Filter for entries with values greater than or equal to the specified value",
  "title": "Copynumber.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "copy_number__gte"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.equal",
  "schema": {
  "description": "Copy number - Filter for entries with values exactly equal to the specified value",
  "title": "Copynumber.Equal",
  "type": "integer",
  "x-orm-lookup": "copy_number__exact"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.not.equal",
  "schema": {
  "description": "Copy number - Filter for entries with values not equal to the specified value",
  "title": "Copynumber.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "copy_number__exact"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "copyNumber.between",
  "schema": {
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Copynumber.Between",
  "type": "array",
  "x-orm-lookup": "copy_number__range"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "copyNumber.not.between",
  "schema": {
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Copynumber.Not.Between",
  "type": "array",
  "x-orm-lookup": "copy_number__range"
  },
  "required": false,
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "alleleFrequency.not.exists",
  "schema": {
  "description": "Allele frequency - Filter for entries without a value",
  "title": "Allelefrequency.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_frequency__isnull"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.exists",
  "schema": {
  "description": "Allele frequency - Filter for entries with a value",
  "title": "Allelefrequency.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_frequency__isnull"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.lessThan",
  "schema": {
  "description": "Allele frequency - Filter for entries with values less than the specified value",
  "title": "Allelefrequency.Lessthan",
  "type": "number",
  "x-orm-lookup": "allele_frequency__lt"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.lessThanOrEqual",
  "schema": {
  "description": "Allele frequency - Filter for entries with values less than or equal to the specified value",
  "title": "Allelefrequency.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__lte"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.greaterThan",
  "schema": {
  "description": "Allele frequency - Filter for entries with values greater than the specified value",
  "title": "Allelefrequency.Greaterthan",
  "type": "number",
  "x-orm-lookup": "allele_frequency__gt"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.greaterThanOrEqual",
  "schema": {
  "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value",
  "title": "Allelefrequency.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__gte"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.equal",
  "schema": {
  "description": "Allele frequency - Filter for entries with values exactly equal to the specified value",
  "title": "Allelefrequency.Equal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__exact"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.not.equal",
  "schema": {
  "description": "Allele frequency - Filter for entries with values not equal to the specified value",
  "title": "Allelefrequency.Not.Equal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__exact"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleFrequency.between",
  "schema": {
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Allelefrequency.Between",
  "type": "array",
  "x-orm-lookup": "allele_frequency__range"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "alleleFrequency.not.between",
  "schema": {
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Allelefrequency.Not.Between",
  "type": "array",
  "x-orm-lookup": "allele_frequency__range"
  },
  "required": false,
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "alleleDepth.not.exists",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries without a value",
  "title": "Alleledepth.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_depth__isnull"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "alleleDepth.exists",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with a value",
  "title": "Alleledepth.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_depth__isnull"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "alleleDepth.lessThan",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values less than the specified value",
  "title": "Alleledepth.Lessthan",
  "type": "integer",
  "x-orm-lookup": "allele_depth__lt"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.lessThanOrEqual",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value",
  "title": "Alleledepth.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__lte"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.greaterThan",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values greater than the specified value",
  "title": "Alleledepth.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "allele_depth__gt"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.greaterThanOrEqual",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value",
  "title": "Alleledepth.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__gte"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.equal",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value",
  "title": "Alleledepth.Equal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__exact"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.not.equal",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value",
  "title": "Alleledepth.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__exact"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "alleleDepth.between",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Alleledepth.Between",
  "type": "array",
  "x-orm-lookup": "allele_depth__range"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "alleleDepth.not.between",
  "schema": {
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Alleledepth.Not.Between",
  "type": "array",
  "x-orm-lookup": "allele_depth__range"
  },
  "required": false,
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "zygosity.not.exists",
  "schema": {
  "description": "Zygosity - Filter for entries without a value",
  "title": "Zygosity.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "zygosity__isnull"
  },
  "required": false,
  "description": "Zygosity - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "zygosity.exists",
  "schema": {
  "description": "Zygosity - Filter for entries with a value",
  "title": "Zygosity.Exists",
  "type": "boolean",
  "x-orm-lookup": "zygosity__isnull"
  },
  "required": false,
  "description": "Zygosity - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "zygosity",
  "schema": {
  "description": "Zygosity - Filter for a matching concept code",
  "title": "Zygosity",
  "type": "string",
  "x-orm-lookup": "zygosity__code__iexact"
  },
  "required": false,
  "description": "Zygosity - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "zygosity.not",
  "schema": {
  "description": "Zygosity - Filter for a mismatching concept code",
  "title": "Zygosity.Not",
  "type": "string",
  "x-orm-lookup": "zygosity__code__iexact"
  },
  "required": false,
  "description": "Zygosity - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "zygosity.anyOf",
  "schema": {
  "description": "Zygosity - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Zygosity.Anyof",
  "type": "array",
  "x-orm-lookup": "zygosity__code__in"
  },
  "required": false,
  "description": "Zygosity - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "zygosity.not.anyOf",
  "schema": {
  "description": "Zygosity - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Zygosity.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "zygosity__code__in"
  },
  "required": false,
  "description": "Zygosity - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "zygosity.descendantsOf",
  "schema": {
  "description": "Zygosity - Filter for all child concepts of a given concepts code",
  "title": "Zygosity.Descendantsof",
  "type": "string",
  "x-orm-lookup": "zygosity__None"
  },
  "required": false,
  "description": "Zygosity - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "inheritance.not.exists",
  "schema": {
  "description": "Inheritance - Filter for entries without a value",
  "title": "Inheritance.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "inheritance__isnull"
  },
  "required": false,
  "description": "Inheritance - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "inheritance.exists",
  "schema": {
  "description": "Inheritance - Filter for entries with a value",
  "title": "Inheritance.Exists",
  "type": "boolean",
  "x-orm-lookup": "inheritance__isnull"
  },
  "required": false,
  "description": "Inheritance - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "inheritance",
  "schema": {
  "description": "Inheritance - Filter for a matching concept code",
  "title": "Inheritance",
  "type": "string",
  "x-orm-lookup": "inheritance__code__iexact"
  },
  "required": false,
  "description": "Inheritance - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "inheritance.not",
  "schema": {
  "description": "Inheritance - Filter for a mismatching concept code",
  "title": "Inheritance.Not",
  "type": "string",
  "x-orm-lookup": "inheritance__code__iexact"
  },
  "required": false,
  "description": "Inheritance - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "inheritance.anyOf",
  "schema": {
  "description": "Inheritance - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Inheritance.Anyof",
  "type": "array",
  "x-orm-lookup": "inheritance__code__in"
  },
  "required": false,
  "description": "Inheritance - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "inheritance.not.anyOf",
  "schema": {
  "description": "Inheritance - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Inheritance.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "inheritance__code__in"
  },
  "required": false,
  "description": "Inheritance - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "inheritance.descendantsOf",
  "schema": {
  "description": "Inheritance - Filter for all child concepts of a given concepts code",
  "title": "Inheritance.Descendantsof",
  "type": "string",
  "x-orm-lookup": "inheritance__None"
  },
  "required": false,
  "description": "Inheritance - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "coordinateSystem.not.exists",
  "schema": {
  "description": "Coordinate system - Filter for entries without a value",
  "title": "Coordinatesystem.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "coordinate_system__isnull"
  },
  "required": false,
  "description": "Coordinate system - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "coordinateSystem.exists",
  "schema": {
  "description": "Coordinate system - Filter for entries with a value",
  "title": "Coordinatesystem.Exists",
  "type": "boolean",
  "x-orm-lookup": "coordinate_system__isnull"
  },
  "required": false,
  "description": "Coordinate system - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "coordinateSystem",
  "schema": {
  "description": "Coordinate system - Filter for a matching concept code",
  "title": "Coordinatesystem",
  "type": "string",
  "x-orm-lookup": "coordinate_system__code__iexact"
  },
  "required": false,
  "description": "Coordinate system - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "coordinateSystem.not",
  "schema": {
  "description": "Coordinate system - Filter for a mismatching concept code",
  "title": "Coordinatesystem.Not",
  "type": "string",
  "x-orm-lookup": "coordinate_system__code__iexact"
  },
  "required": false,
  "description": "Coordinate system - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "coordinateSystem.anyOf",
  "schema": {
  "description": "Coordinate system - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Coordinatesystem.Anyof",
  "type": "array",
  "x-orm-lookup": "coordinate_system__code__in"
  },
  "required": false,
  "description": "Coordinate system - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "coordinateSystem.not.anyOf",
  "schema": {
  "description": "Coordinate system - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Coordinatesystem.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "coordinate_system__code__in"
  },
  "required": false,
  "description": "Coordinate system - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "coordinateSystem.descendantsOf",
  "schema": {
  "description": "Coordinate system - Filter for all child concepts of a given concepts code",
  "title": "Coordinatesystem.Descendantsof",
  "type": "string",
  "x-orm-lookup": "coordinate_system__None"
  },
  "required": false,
  "description": "Coordinate system - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "exactGenomicCoordinates.not.exists",
  "schema": {
  "description": "Exact genomic coordinates - Filter for entries without a value",
  "title": "Exactgenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "exact_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Exact genomic coordinates - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "exactGenomicCoordinates.exists",
  "schema": {
  "description": "Exact genomic coordinates - Filter for entries with a value",
  "title": "Exactgenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "exact_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Exact genomic coordinates - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "innerGenomicCoordinates.not.exists",
  "schema": {
  "description": "Inner genomic coordinates - Filter for entries without a value",
  "title": "Innergenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "inner_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Inner genomic coordinates - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "innerGenomicCoordinates.exists",
  "schema": {
  "description": "Inner genomic coordinates - Filter for entries with a value",
  "title": "Innergenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "inner_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Inner genomic coordinates - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "outerGenomicCoordinates.not.exists",
  "schema": {
  "description": "Outer genomic coordinates - Filter for entries without a value",
  "title": "Outergenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "outer_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Outer genomic coordinates - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "outerGenomicCoordinates.exists",
  "schema": {
  "description": "Outer genomic coordinates - Filter for entries with a value",
  "title": "Outergenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "outer_genomic_coordinates__isnull"
  },
  "required": false,
  "description": "Outer genomic coordinates - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "clinvar.not.exists",
  "schema": {
  "description": "ClinVar accession number - Filter for entries without a value",
  "title": "Clinvar.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinvar__isnull"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "clinvar.exists",
  "schema": {
  "description": "ClinVar accession number - Filter for entries with a value",
  "title": "Clinvar.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinvar__isnull"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "clinvar",
  "schema": {
  "description": "ClinVar accession number - Filter for full text matches",
  "title": "Clinvar",
  "type": "string",
  "x-orm-lookup": "clinvar__iexact"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "clinvar.not",
  "schema": {
  "description": "ClinVar accession number - Filter for full text mismatches",
  "title": "Clinvar.Not",
  "type": "string",
  "x-orm-lookup": "clinvar__iexact"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "clinvar.contains",
  "schema": {
  "description": "ClinVar accession number - Filter for partial text matches",
  "title": "Clinvar.Contains",
  "type": "string",
  "x-orm-lookup": "clinvar__icontains"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "clinvar.not.contains",
  "schema": {
  "description": "ClinVar accession number - Filter for partial text mismatches",
  "title": "Clinvar.Not.Contains",
  "type": "string",
  "x-orm-lookup": "clinvar__icontains"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "clinvar.beginsWith",
  "schema": {
  "description": "ClinVar accession number - Filter for entries starting with the text",
  "title": "Clinvar.Beginswith",
  "type": "string",
  "x-orm-lookup": "clinvar__istartswith"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "clinvar.not.beginsWith",
  "schema": {
  "description": "ClinVar accession number - Filter for entries not starting with the text",
  "title": "Clinvar.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "clinvar__istartswith"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "clinvar.endsWith",
  "schema": {
  "description": "ClinVar accession number - Filter for entries ending with the text",
  "title": "Clinvar.Endswith",
  "type": "string",
  "x-orm-lookup": "clinvar__iendswith"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "clinvar.not.endsWith",
  "schema": {
  "description": "ClinVar accession number - Filter for entries not ending with the text",
  "title": "Clinvar.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "clinvar__iendswith"
  },
  "required": false,
  "description": "ClinVar accession number - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genes.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genes.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genes.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genes.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genes.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genes.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genes.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genes.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genes.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Genes.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genes.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genes.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genes.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genes.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genes.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genes.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genes.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genes.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genes.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genes.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genes.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genes.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genes.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genes.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genes.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genes.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genes.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genes.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genes.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genes.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "genes.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "genes.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "genes.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "genes.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "genes.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "genes.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "genes.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "genes.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genes.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "genes.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "genes.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "chromosomes.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "chromosomes.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "chromosomes.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "chromosomes.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "chromosomes.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "chromosomes.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "chromosomes.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "chromosomes.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "chromosomes.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "chromosomes.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "chromosomes.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_GenomicVariantSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Genomic Variants"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/genomic-variants/{genomicVariantId}": {
  "delete": {
  "operationId": "deleteGenomicVariant",
  "summary": "Delete Genomic Variant",
  "parameters": [
  {
  "in": "path",
  "name": "genomicVariantId",
  "schema": {
  "title": "Genomicvariantid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Variants"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getGenomicVariantById",
  "summary": "Get Genomic Variant By Id",
  "parameters": [
  {
  "in": "path",
  "name": "genomicVariantId",
  "schema": {
  "title": "Genomicvariantid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/GenomicVariantSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Variants"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateGenomicVariant",
  "summary": "Update Genomic Variant",
  "parameters": [
  {
  "in": "path",
  "name": "genomicVariantId",
  "schema": {
  "title": "Genomicvariantid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Variants"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/GenomicVariantCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/genomic-signatures": {
  "post": {
  "operationId": "createGenomicSignature",
  "summary": "Create Genomic Signature",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Genomic Signatures"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMutationalBurdenCreateSchema"
  },
  {
  "$ref": "#/components/schemas/MicrosatelliteInstabilityCreateSchema"
  },
  {
  "$ref": "#/components/schemas/LossOfHeterozygosityCreateSchema"
  },
  {
  "$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreateSchema"
  },
  {
  "$ref": "#/components/schemas/TumorNeoantigenBurdenCreateSchema"
  },
  {
  "$ref": "#/components/schemas/AneuploidScoreCreateSchema"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getGenomicSignatures",
  "summary": "Get All Genomic Signatures Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "category",
  "schema": {
  "allOf": [
  {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "category.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "category.anyOf",
  "schema": {
  "description": "None - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  },
  "title": "Category.Anyof",
  "type": "array",
  "x-orm-lookup": "None__in"
  },
  "required": false,
  "description": "None - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_AnyGenomicSignature_"
  }
  }
  }
  }
  },
  "tags": [
  "Genomic Signatures"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/genomic-signatures/{genomicSignatureId}": {
  "delete": {
  "operationId": "deleteGenomicSignatureById",
  "summary": "Delete Genomic Signature",
  "parameters": [
  {
  "in": "path",
  "name": "genomicSignatureId",
  "schema": {
  "title": "Genomicsignatureid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Signatures"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getGenomicSignatureById",
  "summary": "Get Genomic Signature By Id",
  "parameters": [
  {
  "in": "path",
  "name": "genomicSignatureId",
  "schema": {
  "title": "Genomicsignatureid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/AnyGenomicSignature"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Signatures"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateGenomicSignatureById",
  "summary": "Update Genomic Signature",
  "parameters": [
  {
  "in": "path",
  "name": "genomicSignatureId",
  "schema": {
  "title": "Genomicsignatureid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Genomic Signatures"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMutationalBurdenCreateSchema"
  },
  {
  "$ref": "#/components/schemas/MicrosatelliteInstabilityCreateSchema"
  },
  {
  "$ref": "#/components/schemas/LossOfHeterozygosityCreateSchema"
  },
  {
  "$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreateSchema"
  },
  {
  "$ref": "#/components/schemas/TumorNeoantigenBurdenCreateSchema"
  },
  {
  "$ref": "#/components/schemas/AneuploidScoreCreateSchema"
  }
  ],
  "title": "Payload"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/lifestyles": {
  "post": {
  "operationId": "createLifestyle",
  "summary": "Create Lifestyle",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Lifestyles"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/LifestyleCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getLifestyles",
  "summary": "Get All Lifestyles Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "smokingStatus.not.exists",
  "schema": {
  "description": "Alcohol consumption - Filter for entries without a value",
  "title": "Smokingstatus.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_status__isnull"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "smokingStatus.exists",
  "schema": {
  "description": "Alcohol consumption - Filter for entries with a value",
  "title": "Smokingstatus.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_status__isnull"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "smokingStatus",
  "schema": {
  "description": "Alcohol consumption - Filter for a matching concept code",
  "title": "Smokingstatus",
  "type": "string",
  "x-orm-lookup": "smoking_status__code__iexact"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "smokingStatus.not",
  "schema": {
  "description": "Alcohol consumption - Filter for a mismatching concept code",
  "title": "Smokingstatus.Not",
  "type": "string",
  "x-orm-lookup": "smoking_status__code__iexact"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "smokingStatus.anyOf",
  "schema": {
  "description": "Alcohol consumption - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Smokingstatus.Anyof",
  "type": "array",
  "x-orm-lookup": "smoking_status__code__in"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "smokingStatus.not.anyOf",
  "schema": {
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Smokingstatus.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "smoking_status__code__in"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "smokingStatus.descendantsOf",
  "schema": {
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
  "title": "Smokingstatus.Descendantsof",
  "type": "string",
  "x-orm-lookup": "smoking_status__None"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "smokingPackyears.not.exists",
  "schema": {
  "description": "Smoking packyears - Filter for entries without a value",
  "title": "Smokingpackyears.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_packyears__isnull"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.exists",
  "schema": {
  "description": "Smoking packyears - Filter for entries with a value",
  "title": "Smokingpackyears.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_packyears__isnull"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.lessThan",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values less than the specified value",
  "title": "Smokingpackyears.Lessthan",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__lt"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.lessThanOrEqual",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value",
  "title": "Smokingpackyears.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__lte"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.greaterThan",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values greater than the specified value",
  "title": "Smokingpackyears.Greaterthan",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__gt"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.greaterThanOrEqual",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value",
  "title": "Smokingpackyears.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__gte"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.equal",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value",
  "title": "Smokingpackyears.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__exact"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.not.equal",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values not equal to the specified value",
  "title": "Smokingpackyears.Not.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__exact"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingPackyears.between",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingpackyears.Between",
  "type": "array",
  "x-orm-lookup": "smoking_packyears__range"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "smokingPackyears.not.between",
  "schema": {
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingpackyears.Not.Between",
  "type": "array",
  "x-orm-lookup": "smoking_packyears__range"
  },
  "required": false,
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "smokingQuited.not.exists",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries without a value",
  "title": "Smokingquited.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_quited__isnull"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "smokingQuited.exists",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with a value",
  "title": "Smokingquited.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_quited__isnull"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "smokingQuited.lessThan",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values less than the specified value",
  "title": "Smokingquited.Lessthan",
  "type": "number",
  "x-orm-lookup": "smoking_quited__lt"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.lessThanOrEqual",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value",
  "title": "Smokingquited.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__lte"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.greaterThan",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values greater than the specified value",
  "title": "Smokingquited.Greaterthan",
  "type": "number",
  "x-orm-lookup": "smoking_quited__gt"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.greaterThanOrEqual",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value",
  "title": "Smokingquited.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__gte"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.equal",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value",
  "title": "Smokingquited.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__exact"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.not.equal",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value",
  "title": "Smokingquited.Not.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__exact"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "smokingQuited.between",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingquited.Between",
  "type": "array",
  "x-orm-lookup": "smoking_quited__range"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "smokingQuited.not.between",
  "schema": {
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingquited.Not.Between",
  "type": "array",
  "x-orm-lookup": "smoking_quited__range"
  },
  "required": false,
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.not.exists",
  "schema": {
  "description": "Alcohol consumption - Filter for entries without a value",
  "title": "Alcoholconsumption.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "alcohol_consumption__isnull"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.exists",
  "schema": {
  "description": "Alcohol consumption - Filter for entries with a value",
  "title": "Alcoholconsumption.Exists",
  "type": "boolean",
  "x-orm-lookup": "alcohol_consumption__isnull"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "alcoholConsumption",
  "schema": {
  "description": "Alcohol consumption - Filter for a matching concept code",
  "title": "Alcoholconsumption",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__code__iexact"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.not",
  "schema": {
  "description": "Alcohol consumption - Filter for a mismatching concept code",
  "title": "Alcoholconsumption.Not",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__code__iexact"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.anyOf",
  "schema": {
  "description": "Alcohol consumption - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Alcoholconsumption.Anyof",
  "type": "array",
  "x-orm-lookup": "alcohol_consumption__code__in"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.not.anyOf",
  "schema": {
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Alcoholconsumption.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "alcohol_consumption__code__in"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "alcoholConsumption.descendantsOf",
  "schema": {
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
  "title": "Alcoholconsumption.Descendantsof",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__None"
  },
  "required": false,
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "nightSleep.not.exists",
  "schema": {
  "description": "Night sleep - Filter for entries without a value",
  "title": "Nightsleep.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "night_sleep__isnull"
  },
  "required": false,
  "description": "Night sleep - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "nightSleep.exists",
  "schema": {
  "description": "Night sleep - Filter for entries with a value",
  "title": "Nightsleep.Exists",
  "type": "boolean",
  "x-orm-lookup": "night_sleep__isnull"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "nightSleep.lessThan",
  "schema": {
  "description": "Night sleep - Filter for entries with values less than the specified value",
  "title": "Nightsleep.Lessthan",
  "type": "number",
  "x-orm-lookup": "night_sleep__lt"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.lessThanOrEqual",
  "schema": {
  "description": "Night sleep - Filter for entries with values less than or equal to the specified value",
  "title": "Nightsleep.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "night_sleep__lte"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.greaterThan",
  "schema": {
  "description": "Night sleep - Filter for entries with values greater than the specified value",
  "title": "Nightsleep.Greaterthan",
  "type": "number",
  "x-orm-lookup": "night_sleep__gt"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.greaterThanOrEqual",
  "schema": {
  "description": "Night sleep - Filter for entries with values greater than or equal to the specified value",
  "title": "Nightsleep.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "night_sleep__gte"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.equal",
  "schema": {
  "description": "Night sleep - Filter for entries with values exactly equal to the specified value",
  "title": "Nightsleep.Equal",
  "type": "number",
  "x-orm-lookup": "night_sleep__exact"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.not.equal",
  "schema": {
  "description": "Night sleep - Filter for entries with values not equal to the specified value",
  "title": "Nightsleep.Not.Equal",
  "type": "number",
  "x-orm-lookup": "night_sleep__exact"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "nightSleep.between",
  "schema": {
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Nightsleep.Between",
  "type": "array",
  "x-orm-lookup": "night_sleep__range"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "nightSleep.not.between",
  "schema": {
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Nightsleep.Not.Between",
  "type": "array",
  "x-orm-lookup": "night_sleep__range"
  },
  "required": false,
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "recreationalDrugs.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "exposures.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "exposures.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "exposures.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "exposures.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "exposures.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "exposures.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "exposures.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "exposures.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "exposures.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "exposures.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "exposures.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "exposures.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "exposures.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "exposures.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "exposures.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "exposures.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "exposures.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "exposures.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "exposures.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_LifestyleSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Lifestyles"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/lifestyles/{lifestyleId}": {
  "delete": {
  "operationId": "deleteLifestyleById",
  "summary": "Delete Lifestyle",
  "parameters": [
  {
  "in": "path",
  "name": "lifestyleId",
  "schema": {
  "title": "Lifestyleid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Lifestyles"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getLifestyleById",
  "summary": "Get Lifestyle By Id",
  "parameters": [
  {
  "in": "path",
  "name": "lifestyleId",
  "schema": {
  "title": "Lifestyleid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/LifestyleSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Lifestyles"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateLifestyleById",
  "summary": "Update Lifestyle",
  "parameters": [
  {
  "in": "path",
  "name": "lifestyleId",
  "schema": {
  "title": "Lifestyleid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Lifestyles"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/LifestyleCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/family-histories": {
  "post": {
  "operationId": "createFamilyHistory",
  "summary": "Create Family History",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Family Histories"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/FamilyHistoryCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getFamilyHistories",
  "summary": "Get All Family Member Histories Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "relationship",
  "schema": {
  "description": "Relationship - Filter for a matching concept code",
  "title": "Relationship",
  "type": "string",
  "x-orm-lookup": "relationship__code__iexact"
  },
  "required": false,
  "description": "Relationship - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "relationship.not",
  "schema": {
  "description": "Relationship - Filter for a mismatching concept code",
  "title": "Relationship.Not",
  "type": "string",
  "x-orm-lookup": "relationship__code__iexact"
  },
  "required": false,
  "description": "Relationship - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "relationship.anyOf",
  "schema": {
  "description": "Relationship - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Relationship.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__code__in"
  },
  "required": false,
  "description": "Relationship - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "relationship.not.anyOf",
  "schema": {
  "description": "Relationship - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Relationship.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__code__in"
  },
  "required": false,
  "description": "Relationship - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "relationship.descendantsOf",
  "schema": {
  "description": "Relationship - Filter for all child concepts of a given concepts code",
  "title": "Relationship.Descendantsof",
  "type": "string",
  "x-orm-lookup": "relationship__None"
  },
  "required": false,
  "description": "Relationship - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "hadCancer",
  "schema": {
  "description": "Had cancer - ('Filter for yes/no statement',)",
  "title": "Hadcancer",
  "type": "boolean",
  "x-orm-lookup": "had_cancer__exact"
  },
  "required": false,
  "description": "Had cancer - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "contributedToDeath.not.exists",
  "schema": {
  "description": "Contributed to death - Filter for entries without a value",
  "title": "Contributedtodeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__isnull"
  },
  "required": false,
  "description": "Contributed to death - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "contributedToDeath.exists",
  "schema": {
  "description": "Contributed to death - Filter for entries with a value",
  "title": "Contributedtodeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__isnull"
  },
  "required": false,
  "description": "Contributed to death - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "contributedToDeath",
  "schema": {
  "description": "Contributed to death - ('Filter for yes/no statement',)",
  "title": "Contributedtodeath",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__exact"
  },
  "required": false,
  "description": "Contributed to death - ('Filter for yes/no statement',)"
  },
  {
  "in": "query",
  "name": "onsetAge.not.exists",
  "schema": {
  "description": "Onset age - Filter for entries without a value",
  "title": "Onsetage.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "onset_age__isnull"
  },
  "required": false,
  "description": "Onset age - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "onsetAge.exists",
  "schema": {
  "description": "Onset age - Filter for entries with a value",
  "title": "Onsetage.Exists",
  "type": "boolean",
  "x-orm-lookup": "onset_age__isnull"
  },
  "required": false,
  "description": "Onset age - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "onsetAge.lessThan",
  "schema": {
  "description": "Onset age - Filter for entries with values less than the specified value",
  "title": "Onsetage.Lessthan",
  "type": "integer",
  "x-orm-lookup": "onset_age__lt"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.lessThanOrEqual",
  "schema": {
  "description": "Onset age - Filter for entries with values less than or equal to the specified value",
  "title": "Onsetage.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "onset_age__lte"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.greaterThan",
  "schema": {
  "description": "Onset age - Filter for entries with values greater than the specified value",
  "title": "Onsetage.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "onset_age__gt"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.greaterThanOrEqual",
  "schema": {
  "description": "Onset age - Filter for entries with values greater than or equal to the specified value",
  "title": "Onsetage.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "onset_age__gte"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.equal",
  "schema": {
  "description": "Onset age - Filter for entries with values exactly equal to the specified value",
  "title": "Onsetage.Equal",
  "type": "integer",
  "x-orm-lookup": "onset_age__exact"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.not.equal",
  "schema": {
  "description": "Onset age - Filter for entries with values not equal to the specified value",
  "title": "Onsetage.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "onset_age__exact"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "onsetAge.between",
  "schema": {
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Onsetage.Between",
  "type": "array",
  "x-orm-lookup": "onset_age__range"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "onsetAge.not.between",
  "schema": {
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Onsetage.Not.Between",
  "type": "array",
  "x-orm-lookup": "onset_age__range"
  },
  "required": false,
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "topography.not.exists",
  "schema": {
  "description": "Topography - Filter for entries without a value",
  "title": "Topography.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "topography__isnull"
  },
  "required": false,
  "description": "Topography - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "topography.exists",
  "schema": {
  "description": "Topography - Filter for entries with a value",
  "title": "Topography.Exists",
  "type": "boolean",
  "x-orm-lookup": "topography__isnull"
  },
  "required": false,
  "description": "Topography - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "topography",
  "schema": {
  "description": "Topography - Filter for a matching concept code",
  "title": "Topography",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "required": false,
  "description": "Topography - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "topography.not",
  "schema": {
  "description": "Topography - Filter for a mismatching concept code",
  "title": "Topography.Not",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "required": false,
  "description": "Topography - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "topography.anyOf",
  "schema": {
  "description": "Topography - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "required": false,
  "description": "Topography - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "topography.not.anyOf",
  "schema": {
  "description": "Topography - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "required": false,
  "description": "Topography - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "topography.descendantsOf",
  "schema": {
  "description": "Topography - Filter for all child concepts of a given concepts code",
  "title": "Topography.Descendantsof",
  "type": "string",
  "x-orm-lookup": "topography__None"
  },
  "required": false,
  "description": "Topography - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "morphology.not.exists",
  "schema": {
  "description": "Morphology - Filter for entries without a value",
  "title": "Morphology.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "morphology__isnull"
  },
  "required": false,
  "description": "Morphology - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "morphology.exists",
  "schema": {
  "description": "Morphology - Filter for entries with a value",
  "title": "Morphology.Exists",
  "type": "boolean",
  "x-orm-lookup": "morphology__isnull"
  },
  "required": false,
  "description": "Morphology - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "morphology",
  "schema": {
  "description": "Morphology - Filter for a matching concept code",
  "title": "Morphology",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "required": false,
  "description": "Morphology - Filter for a matching concept code"
  },
  {
  "in": "query",
  "name": "morphology.not",
  "schema": {
  "description": "Morphology - Filter for a mismatching concept code",
  "title": "Morphology.Not",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "required": false,
  "description": "Morphology - Filter for a mismatching concept code"
  },
  {
  "in": "query",
  "name": "morphology.anyOf",
  "schema": {
  "description": "Morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "required": false,
  "description": "Morphology - Filter for a matching set of concept codes"
  },
  {
  "in": "query",
  "name": "morphology.not.anyOf",
  "schema": {
  "description": "Morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "required": false,
  "description": "Morphology - Filter for a mismmatching set of concept codes"
  },
  {
  "in": "query",
  "name": "morphology.descendantsOf",
  "schema": {
  "description": "Morphology - Filter for all child concepts of a given concepts code",
  "title": "Morphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "morphology__None"
  },
  "required": false,
  "description": "Morphology - Filter for all child concepts of a given concepts code"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_FamilyHistorySchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Family Histories"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/family-histories/{familyHistoryId}": {
  "delete": {
  "operationId": "deleteFamilyHistoryById",
  "summary": "Delete Family History",
  "parameters": [
  {
  "in": "path",
  "name": "familyHistoryId",
  "schema": {
  "title": "Familyhistoryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Family Histories"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getFamilyHistoryById",
  "summary": "Get Family History By Id",
  "parameters": [
  {
  "in": "path",
  "name": "familyHistoryId",
  "schema": {
  "title": "Familyhistoryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/FamilyHistorySchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Family Histories"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateFamilyHistory",
  "summary": "Update Family History",
  "parameters": [
  {
  "in": "path",
  "name": "familyHistoryId",
  "schema": {
  "title": "Familyhistoryid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Family Histories"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/FamilyHistoryCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/comorbidities-assessments": {
  "post": {
  "operationId": "createComorbiditiesAssessment",
  "summary": "Create Comorbidities Assessment",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getComorbiditiesAssessments",
  "summary": "Get All Comorbidities Assessments Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "indexconditionId",
  "schema": {
  "description": "Index neoplastic entity - Filter for full text matches",
  "title": "Indexconditionid",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iexact"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "indexconditionId.not",
  "schema": {
  "description": "Index neoplastic entity - Filter for full text mismatches",
  "title": "Indexconditionid.Not",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iexact"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "indexconditionId.contains",
  "schema": {
  "description": "Index neoplastic entity - Filter for partial text matches",
  "title": "Indexconditionid.Contains",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__icontains"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "indexconditionId.not.contains",
  "schema": {
  "description": "Index neoplastic entity - Filter for partial text mismatches",
  "title": "Indexconditionid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__icontains"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "indexconditionId.beginsWith",
  "schema": {
  "description": "Index neoplastic entity - Filter for entries starting with the text",
  "title": "Indexconditionid.Beginswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__istartswith"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "indexconditionId.not.beginsWith",
  "schema": {
  "description": "Index neoplastic entity - Filter for entries not starting with the text",
  "title": "Indexconditionid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__istartswith"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "indexconditionId.endsWith",
  "schema": {
  "description": "Index neoplastic entity - Filter for entries ending with the text",
  "title": "Indexconditionid.Endswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iendswith"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "indexconditionId.not.endsWith",
  "schema": {
  "description": "Index neoplastic entity - Filter for entries not ending with the text",
  "title": "Indexconditionid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iendswith"
  },
  "required": false,
  "description": "Index neoplastic entity - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "panel.not.exists",
  "schema": {
  "description": "Panel - Filter for entries without a value",
  "title": "Panel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "panel__isnull"
  },
  "required": false,
  "description": "Panel - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "panel.exists",
  "schema": {
  "description": "Panel - Filter for entries with a value",
  "title": "Panel.Exists",
  "type": "boolean",
  "x-orm-lookup": "panel__isnull"
  },
  "required": false,
  "description": "Panel - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "panel",
  "schema": {
  "allOf": [
  {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  }
  ],
  "description": "Panel - ('Filter for single value choice',)",
  "x-orm-lookup": "panel__exact"
  },
  "required": false,
  "description": "Panel - ('Filter for single value choice',)"
  },
  {
  "in": "query",
  "name": "panel.not",
  "schema": {
  "allOf": [
  {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  }
  ],
  "description": "Panel - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "panel__exact"
  },
  "required": false,
  "description": "Panel - ('Filter for all but a single value choice',)"
  },
  {
  "in": "query",
  "name": "panel.anyOf",
  "schema": {
  "description": "Panel - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  },
  "title": "Panel.Anyof",
  "type": "array",
  "x-orm-lookup": "panel__in"
  },
  "required": false,
  "description": "Panel - ('Filter for excluding a subset of value choices',)"
  },
  {
  "in": "query",
  "name": "presentConditions.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "presentConditions.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "presentConditions.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "presentConditions.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "presentConditions.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "presentConditions.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "presentConditions.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "presentConditions.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "presentConditions.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "presentConditions.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "presentConditions.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "absentConditions.code",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.code.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.code.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.code.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.code.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.code.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.code.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.code.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.system",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.system.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.system.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.system.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.system.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.system.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.system.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.system.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.display.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "absentConditions.display.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "absentConditions.display",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.display.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.display.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.display.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.display.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.display.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.display.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.display.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.version.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "absentConditions.version.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "absentConditions.version",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.version.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.version.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "absentConditions.version.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "absentConditions.version.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.version.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.version.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.version.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "absentConditions.synonyms.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "absentConditions.synonyms.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "absentConditions.properties.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "absentConditions.properties.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "index.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Index.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "index.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Index.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "index.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Index.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "index.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Index.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "index.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Index.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "index.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Index.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "index.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Index.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "index.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Index.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "index.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Index.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "index.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Index.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_ComorbiditiesAssessmentSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/comorbidities-assessments/{comorbiditiesAssessmentId}": {
  "delete": {
  "operationId": "deleteComorbiditiesAssessment",
  "summary": "Delete Comorbidities Assessment",
  "parameters": [
  {
  "in": "path",
  "name": "comorbiditiesAssessmentId",
  "schema": {
  "title": "Comorbiditiesassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getComorbiditiesAssessmentById",
  "summary": "Get Comorbidities Assessment By Id",
  "parameters": [
  {
  "in": "path",
  "name": "comorbiditiesAssessmentId",
  "schema": {
  "title": "Comorbiditiesassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateComorbiditiesAssessment",
  "summary": "Update Comorbidities Assessment",
  "parameters": [
  {
  "in": "path",
  "name": "comorbiditiesAssessmentId",
  "schema": {
  "title": "Comorbiditiesassessmentid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/comorbidities-panels": {
  "get": {
  "operationId": "getComorbiditiesPanels",
  "summary": "Get All Comorbidities Panels",
  "parameters": [],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "$ref": "#/components/schemas/ComorbiditiesPanelSchema"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/comorbidities-panels/{panel}": {
  "get": {
  "operationId": "getComorbiditiesPanelsByName",
  "summary": "Get Comorbidities Panel By Name",
  "parameters": [
  {
  "in": "path",
  "name": "panel",
  "schema": {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesPanel",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ComorbiditiesPanelSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Comorbidities Assessments"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/vitals": {
  "post": {
  "operationId": "createVitals",
  "summary": "Create Vitals",
  "parameters": [],
  "responses": {
  "201": {
  "description": "Created",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  }
  },
  "tags": [
  "Vitals"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/VitalsCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getVitals",
  "summary": "Get All Vitals Matching The Query",
  "parameters": [
  {
  "in": "query",
  "name": "id",
  "schema": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "id.not",
  "schema": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "required": false,
  "description": "Id - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "id.contains",
  "schema": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "id.not.contains",
  "schema": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "required": false,
  "description": "Id - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "id.beginsWith",
  "schema": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "id.not.beginsWith",
  "schema": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "required": false,
  "description": "Id - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "id.endsWith",
  "schema": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "id.not.endsWith",
  "schema": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "required": false,
  "description": "Id - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "createdAt.before",
  "schema": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.after",
  "schema": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrBefore",
  "schema": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.onOrAfter",
  "schema": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.on",
  "schema": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.not.on",
  "schema": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "createdAt.between",
  "schema": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdAt.not.between",
  "schema": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "required": false,
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.before",
  "schema": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.after",
  "schema": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrBefore",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.onOrAfter",
  "schema": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.not.on",
  "schema": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "updatedAt.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedAt.not.between",
  "schema": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "required": false,
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "createdBy.not.exists",
  "schema": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "createdBy.exists",
  "schema": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "required": false,
  "description": "Created By - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "updatedBys.id.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.id.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "updatedBys.username",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.username.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.username.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.email.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.email.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.firstName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.exists",
  "schema": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.exists",
  "schema": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "required": false,
  "description": "None - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName",
  "schema": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not",
  "schema": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "required": false,
  "description": "None - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.contains",
  "schema": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.contains",
  "schema": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "required": false,
  "description": "None - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.beginsWith",
  "schema": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.beginsWith",
  "schema": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "required": false,
  "description": "None - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.endsWith",
  "schema": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "updatedBys.lastName.not.endsWith",
  "schema": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "required": false,
  "description": "None - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "caseId",
  "schema": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text matches"
  },
  {
  "in": "query",
  "name": "caseId.not",
  "schema": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "required": false,
  "description": "Patient case - Filter for full text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.contains",
  "schema": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text matches"
  },
  {
  "in": "query",
  "name": "caseId.not.contains",
  "schema": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "required": false,
  "description": "Patient case - Filter for partial text mismatches"
  },
  {
  "in": "query",
  "name": "caseId.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.beginsWith",
  "schema": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not starting with the text"
  },
  {
  "in": "query",
  "name": "caseId.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries ending with the text"
  },
  {
  "in": "query",
  "name": "caseId.not.endsWith",
  "schema": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "required": false,
  "description": "Patient case - Filter for entries not ending with the text"
  },
  {
  "in": "query",
  "name": "date.before",
  "schema": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates before the specified value"
  },
  {
  "in": "query",
  "name": "date.after",
  "schema": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates after the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrBefore",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or before the specified value"
  },
  {
  "in": "query",
  "name": "date.onOrAfter",
  "schema": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates on or after the specified value"
  },
  {
  "in": "query",
  "name": "date.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
  },
  {
  "in": "query",
  "name": "date.not.on",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not matching the specified value"
  },
  {
  "in": "query",
  "name": "date.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "date.not.between",
  "schema": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "required": false,
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "height.not.exists",
  "schema": {
  "description": "Height - Filter for entries without a value",
  "title": "Height.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "height__isnull"
  },
  "required": false,
  "description": "Height - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "height.exists",
  "schema": {
  "description": "Height - Filter for entries with a value",
  "title": "Height.Exists",
  "type": "boolean",
  "x-orm-lookup": "height__isnull"
  },
  "required": false,
  "description": "Height - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "height.lessThan",
  "schema": {
  "description": "Height - Filter for entries with values less than the specified value",
  "title": "Height.Lessthan",
  "type": "number",
  "x-orm-lookup": "height__lt"
  },
  "required": false,
  "description": "Height - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "height.lessThanOrEqual",
  "schema": {
  "description": "Height - Filter for entries with values less than or equal to the specified value",
  "title": "Height.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "height__lte"
  },
  "required": false,
  "description": "Height - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "height.greaterThan",
  "schema": {
  "description": "Height - Filter for entries with values greater than the specified value",
  "title": "Height.Greaterthan",
  "type": "number",
  "x-orm-lookup": "height__gt"
  },
  "required": false,
  "description": "Height - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "height.greaterThanOrEqual",
  "schema": {
  "description": "Height - Filter for entries with values greater than or equal to the specified value",
  "title": "Height.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "height__gte"
  },
  "required": false,
  "description": "Height - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "height.equal",
  "schema": {
  "description": "Height - Filter for entries with values exactly equal to the specified value",
  "title": "Height.Equal",
  "type": "number",
  "x-orm-lookup": "height__exact"
  },
  "required": false,
  "description": "Height - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "height.not.equal",
  "schema": {
  "description": "Height - Filter for entries with values not equal to the specified value",
  "title": "Height.Not.Equal",
  "type": "number",
  "x-orm-lookup": "height__exact"
  },
  "required": false,
  "description": "Height - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "height.between",
  "schema": {
  "description": "Height - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Height.Between",
  "type": "array",
  "x-orm-lookup": "height__range"
  },
  "required": false,
  "description": "Height - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "height.not.between",
  "schema": {
  "description": "Height - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Height.Not.Between",
  "type": "array",
  "x-orm-lookup": "height__range"
  },
  "required": false,
  "description": "Height - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "weight.not.exists",
  "schema": {
  "description": "Weight - Filter for entries without a value",
  "title": "Weight.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "weight__isnull"
  },
  "required": false,
  "description": "Weight - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "weight.exists",
  "schema": {
  "description": "Weight - Filter for entries with a value",
  "title": "Weight.Exists",
  "type": "boolean",
  "x-orm-lookup": "weight__isnull"
  },
  "required": false,
  "description": "Weight - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "weight.lessThan",
  "schema": {
  "description": "Weight - Filter for entries with values less than the specified value",
  "title": "Weight.Lessthan",
  "type": "number",
  "x-orm-lookup": "weight__lt"
  },
  "required": false,
  "description": "Weight - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "weight.lessThanOrEqual",
  "schema": {
  "description": "Weight - Filter for entries with values less than or equal to the specified value",
  "title": "Weight.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "weight__lte"
  },
  "required": false,
  "description": "Weight - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "weight.greaterThan",
  "schema": {
  "description": "Weight - Filter for entries with values greater than the specified value",
  "title": "Weight.Greaterthan",
  "type": "number",
  "x-orm-lookup": "weight__gt"
  },
  "required": false,
  "description": "Weight - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "weight.greaterThanOrEqual",
  "schema": {
  "description": "Weight - Filter for entries with values greater than or equal to the specified value",
  "title": "Weight.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "weight__gte"
  },
  "required": false,
  "description": "Weight - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "weight.equal",
  "schema": {
  "description": "Weight - Filter for entries with values exactly equal to the specified value",
  "title": "Weight.Equal",
  "type": "number",
  "x-orm-lookup": "weight__exact"
  },
  "required": false,
  "description": "Weight - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "weight.not.equal",
  "schema": {
  "description": "Weight - Filter for entries with values not equal to the specified value",
  "title": "Weight.Not.Equal",
  "type": "number",
  "x-orm-lookup": "weight__exact"
  },
  "required": false,
  "description": "Weight - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "weight.between",
  "schema": {
  "description": "Weight - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Weight.Between",
  "type": "array",
  "x-orm-lookup": "weight__range"
  },
  "required": false,
  "description": "Weight - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "weight.not.between",
  "schema": {
  "description": "Weight - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Weight.Not.Between",
  "type": "array",
  "x-orm-lookup": "weight__range"
  },
  "required": false,
  "description": "Weight - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.not.exists",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries without a value",
  "title": "Bloodpressuresystolic.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_systolic__isnull"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.exists",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with a value",
  "title": "Bloodpressuresystolic.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_systolic__isnull"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.lessThan",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values less than the specified value",
  "title": "Bloodpressuresystolic.Lessthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__lt"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.lessThanOrEqual",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value",
  "title": "Bloodpressuresystolic.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__lte"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.greaterThan",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values greater than the specified value",
  "title": "Bloodpressuresystolic.Greaterthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__gt"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.greaterThanOrEqual",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value",
  "title": "Bloodpressuresystolic.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__gte"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.equal",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value",
  "title": "Bloodpressuresystolic.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__exact"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.not.equal",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value",
  "title": "Bloodpressuresystolic.Not.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__exact"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.between",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressuresystolic.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_systolic__range"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "bloodPressureSystolic.not.between",
  "schema": {
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressuresystolic.Not.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_systolic__range"
  },
  "required": false,
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.not.exists",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries without a value",
  "title": "Bloodpressurediastolic.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_diastolic__isnull"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.exists",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with a value",
  "title": "Bloodpressurediastolic.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_diastolic__isnull"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.lessThan",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values less than the specified value",
  "title": "Bloodpressurediastolic.Lessthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__lt"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.lessThanOrEqual",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value",
  "title": "Bloodpressurediastolic.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__lte"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.greaterThan",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value",
  "title": "Bloodpressurediastolic.Greaterthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__gt"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.greaterThanOrEqual",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value",
  "title": "Bloodpressurediastolic.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__gte"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.equal",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value",
  "title": "Bloodpressurediastolic.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__exact"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.not.equal",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value",
  "title": "Bloodpressurediastolic.Not.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__exact"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.between",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressurediastolic.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_diastolic__range"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "bloodPressureDiastolic.not.between",
  "schema": {
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressurediastolic.Not.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_diastolic__range"
  },
  "required": false,
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "temperature.not.exists",
  "schema": {
  "description": "Temperature - Filter for entries without a value",
  "title": "Temperature.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "temperature__isnull"
  },
  "required": false,
  "description": "Temperature - Filter for entries without a value"
  },
  {
  "in": "query",
  "name": "temperature.exists",
  "schema": {
  "description": "Temperature - Filter for entries with a value",
  "title": "Temperature.Exists",
  "type": "boolean",
  "x-orm-lookup": "temperature__isnull"
  },
  "required": false,
  "description": "Temperature - Filter for entries with a value"
  },
  {
  "in": "query",
  "name": "temperature.lessThan",
  "schema": {
  "description": "Temperature - Filter for entries with values less than the specified value",
  "title": "Temperature.Lessthan",
  "type": "number",
  "x-orm-lookup": "temperature__lt"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "temperature.lessThanOrEqual",
  "schema": {
  "description": "Temperature - Filter for entries with values less than or equal to the specified value",
  "title": "Temperature.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "temperature__lte"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "temperature.greaterThan",
  "schema": {
  "description": "Temperature - Filter for entries with values greater than the specified value",
  "title": "Temperature.Greaterthan",
  "type": "number",
  "x-orm-lookup": "temperature__gt"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "temperature.greaterThanOrEqual",
  "schema": {
  "description": "Temperature - Filter for entries with values greater than or equal to the specified value",
  "title": "Temperature.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "temperature__gte"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "temperature.equal",
  "schema": {
  "description": "Temperature - Filter for entries with values exactly equal to the specified value",
  "title": "Temperature.Equal",
  "type": "number",
  "x-orm-lookup": "temperature__exact"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "temperature.not.equal",
  "schema": {
  "description": "Temperature - Filter for entries with values not equal to the specified value",
  "title": "Temperature.Not.Equal",
  "type": "number",
  "x-orm-lookup": "temperature__exact"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "temperature.between",
  "schema": {
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Temperature.Between",
  "type": "array",
  "x-orm-lookup": "temperature__range"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "temperature.not.between",
  "schema": {
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Temperature.Not.Between",
  "type": "array",
  "x-orm-lookup": "temperature__range"
  },
  "required": false,
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "body_mass_index.lessThan",
  "schema": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Body Mass Index.Lessthan",
  "type": "number",
  "x-orm-lookup": "None__lt"
  },
  "required": false,
  "description": "None - Filter for entries with values less than the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.lessThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Body Mass Index.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "None__lte"
  },
  "required": false,
  "description": "None - Filter for entries with values less than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.greaterThan",
  "schema": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Body Mass Index.Greaterthan",
  "type": "number",
  "x-orm-lookup": "None__gt"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.greaterThanOrEqual",
  "schema": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Body Mass Index.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "None__gte"
  },
  "required": false,
  "description": "None - Filter for entries with values greater than or equal to the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.equal",
  "schema": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Body Mass Index.Equal",
  "type": "number",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values exactly equal to the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.not.equal",
  "schema": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Body Mass Index.Not.Equal",
  "type": "number",
  "x-orm-lookup": "None__exact"
  },
  "required": false,
  "description": "None - Filter for entries with values not equal to the specified value"
  },
  {
  "in": "query",
  "name": "body_mass_index.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Body Mass Index.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "body_mass_index.not.between",
  "schema": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Body Mass Index.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "required": false,
  "description": "None - Filter for entries with values between two specified values (inclusive)"
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_VitalsSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Vitals"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/vitals/{vitalsId}": {
  "delete": {
  "operationId": "deleteVitalsById",
  "summary": "Delete Vitals",
  "parameters": [
  {
  "in": "path",
  "name": "vitalsId",
  "schema": {
  "title": "Vitalsid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "204": {
  "description": "No Content"
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Vitals"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "get": {
  "operationId": "getVitalsById",
  "summary": "Get Vitals By Id",
  "parameters": [
  {
  "in": "path",
  "name": "vitalsId",
  "schema": {
  "title": "Vitalsid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/VitalsSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Vitals"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  },
  "put": {
  "operationId": "updateVitalsById",
  "summary": "Update Vitals",
  "parameters": [
  {
  "in": "path",
  "name": "vitalsId",
  "schema": {
  "title": "Vitalsid",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/ModifiedResourceSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Vitals"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/VitalsCreateSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/measures/{measureName}/units/conversion": {
  "post": {
  "operationId": "convertUnits",
  "summary": "Convert Units",
  "parameters": [
  {
  "in": "path",
  "name": "measureName",
  "schema": {
  "title": "Measurename",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/MeasureSchema"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Measures"
  ],
  "requestBody": {
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/MeasureConversionSchema"
  }
  }
  },
  "required": true
  },
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/measures/{measureName}/units/default": {
  "get": {
  "operationId": "getMeasureDefaultUnits",
  "summary": "Get Measure Default Units",
  "parameters": [
  {
  "in": "path",
  "name": "measureName",
  "schema": {
  "title": "Measurename",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "title": "Response",
  "type": "string"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Measures"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/measures/{measureName}/units": {
  "get": {
  "operationId": "getMeasureUnits",
  "summary": "Get Measure Units",
  "parameters": [
  {
  "in": "path",
  "name": "measureName",
  "schema": {
  "title": "Measurename",
  "type": "string"
  },
  "required": true
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "items": {
  "type": "string"
  },
  "title": "Response",
  "type": "array"
  }
  }
  }
  },
  "404": {
  "description": "Not Found"
  }
  },
  "tags": [
  "Measures"
  ],
  "security": [
  {
  "JWTAuth": []
  }
  ]
  }
  },
  "/api/terminologies/{terminologyName}/concepts": {
  "get": {
  "operationId": "getTerminologyConcepts",
  "summary": "Get Terminology Concepts",
  "parameters": [
  {
  "in": "path",
  "name": "terminologyName",
  "schema": {
  "title": "Terminologyname",
  "type": "string"
  },
  "required": true
  },
  {
  "in": "query",
  "name": "query",
  "schema": {
  "title": "Query",
  "type": "string"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "codes",
  "schema": {
  "items": {
  "type": "string"
  },
  "title": "Codes",
  "type": "array"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "limit",
  "schema": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "required": false
  },
  {
  "in": "query",
  "name": "offset",
  "schema": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  },
  "required": false
  }
  ],
  "responses": {
  "200": {
  "description": "OK",
  "content": {
  "application/json": {
  "schema": {
  "$ref": "#/components/schemas/Paginated_CodedConceptSchema_"
  }
  }
  }
  }
  },
  "tags": [
  "Terminology"
  ]
  }
  }
  },
  "components": {
  "schemas": {
  "TokenPairSchema": {
  "properties": {
  "username": {
  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
  "maxLength": 150,
  "title": "Username",
  "type": "string"
  },
  "refresh": {
  "title": "Refresh",
  "type": "string"
  },
  "access": {
  "title": "Access",
  "type": "string"
  }
  },
  "required": [
  "username",
  "refresh",
  "access"
  ],
  "title": "TokenPair",
  "type": "object"
  },
  "UserCredentialsSchema": {
  "properties": {
  "password": {
  "format": "password",
  "title": "Password",
  "type": "string",
  "writeOnly": true
  },
  "username": {
  "title": "Username",
  "type": "string"
  }
  },
  "required": [
  "password",
  "username"
  ],
  "title": "UserCredentials",
  "type": "object"
  },
  "RefreshedTokenPairSchema": {
  "properties": {
  "refresh": {
  "title": "Refresh",
  "type": "string"
  },
  "access": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Access"
  }
  },
  "required": [
  "refresh",
  "access"
  ],
  "title": "RefreshedTokenPair",
  "type": "object"
  },
  "TokenRefreshSchema": {
  "properties": {
  "refresh": {
  "title": "Refresh",
  "type": "string"
  }
  },
  "required": [
  "refresh"
  ],
  "title": "TokenRefresh",
  "type": "object"
  },
  "UserSchema": {
  "properties": {
  "id": {
  "title": "Id",
  "type": "integer"
  },
  "username": {
  "title": "Username",
  "type": "string"
  },
  "email": {
  "title": "Email",
  "type": "string"
  },
  "firstName": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Firstname"
  },
  "lastName": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Lastname"
  }
  },
  "required": [
  "id",
  "username",
  "email"
  ],
  "title": "User",
  "type": "object"
  },
  "ModifiedResourceSchema": {
  "properties": {
  "id": {
  "format": "uuid",
  "title": "Id",
  "type": "string"
  },
  "description": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Description"
  }
  },
  "required": [
  "id"
  ],
  "title": "ModifiedResource",
  "type": "object"
  },
  "CodedConceptSchema": {
  "properties": {
  "code": {
  "title": "Code",
  "type": "string"
  },
  "system": {
  "title": "System",
  "type": "string"
  },
  "display": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Display"
  },
  "version": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "Version"
  },
  "synonyms": {
  "anyOf": [
  {
  "items": {
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "title": "Synonyms"
  },
  "properties": {
  "anyOf": [
  {
  "type": "object"
  },
  {
  "type": "null"
  }
  ],
  "title": "Properties"
  }
  },
  "required": [
  "code",
  "system"
  ],
  "title": "CodedConcept",
  "type": "object"
  },
  "PatientCaseCreate": {
  "properties": {
  "gender": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Gender for administrative purposes",
  "examples": [],
  "title": "Gender",
  "x-expanded": null,
  "x-terminology": "AdministrativeGender"
  },
  "race": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Race of the patient",
  "examples": [],
  "title": "Race",
  "x-expanded": null,
  "x-terminology": "RaceCategory"
  },
  "sexAtBirth": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Sex assigned at birth",
  "examples": [],
  "title": "Birth sex",
  "x-expanded": null,
  "x-terminology": "BirthSex"
  },
  "genderIdentity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "",
  "examples": [],
  "title": "Gender identity",
  "x-expanded": null,
  "x-terminology": "GenderIdentity"
  },
  "dateOfBirth": {
  "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "format": "date",
  "title": "Date of birth",
  "type": "string",
  "x-expanded": null
  },
  "dateOfDeath": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "title": "Date of death",
  "x-expanded": null
  },
  "causeOfDeath": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the cause of death.",
  "examples": [],
  "title": "Cause of death",
  "x-expanded": null,
  "x-terminology": "CauseOfDeath"
  }
  },
  "required": [
  "gender",
  "dateOfBirth"
  ],
  "title": "PatientCaseCreate",
  "type": "object"
  },
  "Input": {
  "properties": {
  "limit": {
  "default": 100,
  "minimum": 1,
  "title": "Limit",
  "type": "integer"
  },
  "offset": {
  "default": 0,
  "minimum": 0,
  "title": "Offset",
  "type": "integer"
  }
  },
  "title": "Input",
  "type": "object"
  },
  "PatientCaseFilters": {
  "properties": {
  "age.lessThan": {
  "description": "Age - Filter for entries with values less than the specified value",
  "title": "Age.Lessthan",
  "type": "integer",
  "x-orm-lookup": "db_age__lt"
  },
  "age.lessThanOrEqual": {
  "description": "Age - Filter for entries with values less than or equal to the specified value",
  "title": "Age.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "db_age__lte"
  },
  "age.greaterThan": {
  "description": "Age - Filter for entries with values greater than the specified value",
  "title": "Age.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "db_age__gt"
  },
  "age.greaterThanOrEqual": {
  "description": "Age - Filter for entries with values greater than or equal to the specified value",
  "title": "Age.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "db_age__gte"
  },
  "age.equal": {
  "description": "Age - Filter for entries with values exactly equal to the specified value",
  "title": "Age.Equal",
  "type": "integer",
  "x-orm-lookup": "db_age__exact"
  },
  "age.not.equal": {
  "description": "Age - Filter for entries with values not equal to the specified value",
  "title": "Age.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "db_age__exact"
  },
  "age.between": {
  "description": "Age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Age.Between",
  "type": "array",
  "x-orm-lookup": "db_age__range"
  },
  "age.not.between": {
  "description": "Age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Age.Not.Between",
  "type": "array",
  "x-orm-lookup": "db_age__range"
  },
  "dataCompletionRate.lessThan": {
  "description": "Data completion rate - Filter for entries with values less than the specified value",
  "title": "Datacompletionrate.Lessthan",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__lt"
  },
  "dataCompletionRate.lessThanOrEqual": {
  "description": "Data completion rate - Filter for entries with values less than or equal to the specified value",
  "title": "Datacompletionrate.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__lte"
  },
  "dataCompletionRate.greaterThan": {
  "description": "Data completion rate - Filter for entries with values greater than the specified value",
  "title": "Datacompletionrate.Greaterthan",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__gt"
  },
  "dataCompletionRate.greaterThanOrEqual": {
  "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value",
  "title": "Datacompletionrate.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__gte"
  },
  "dataCompletionRate.equal": {
  "description": "Data completion rate - Filter for entries with values exactly equal to the specified value",
  "title": "Datacompletionrate.Equal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__exact"
  },
  "dataCompletionRate.not.equal": {
  "description": "Data completion rate - Filter for entries with values not equal to the specified value",
  "title": "Datacompletionrate.Not.Equal",
  "type": "number",
  "x-orm-lookup": "db_data_completion_rate__exact"
  },
  "dataCompletionRate.between": {
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Datacompletionrate.Between",
  "type": "array",
  "x-orm-lookup": "db_data_completion_rate__range"
  },
  "dataCompletionRate.not.between": {
  "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Datacompletionrate.Not.Between",
  "type": "array",
  "x-orm-lookup": "db_data_completion_rate__range"
  },
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "pseudoidentifier": {
  "description": "Pseudoidentifier - Filter for full text matches",
  "title": "Pseudoidentifier",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iexact"
  },
  "pseudoidentifier.not": {
  "description": "Pseudoidentifier - Filter for full text mismatches",
  "title": "Pseudoidentifier.Not",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iexact"
  },
  "pseudoidentifier.contains": {
  "description": "Pseudoidentifier - Filter for partial text matches",
  "title": "Pseudoidentifier.Contains",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__icontains"
  },
  "pseudoidentifier.not.contains": {
  "description": "Pseudoidentifier - Filter for partial text mismatches",
  "title": "Pseudoidentifier.Not.Contains",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__icontains"
  },
  "pseudoidentifier.beginsWith": {
  "description": "Pseudoidentifier - Filter for entries starting with the text",
  "title": "Pseudoidentifier.Beginswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__istartswith"
  },
  "pseudoidentifier.not.beginsWith": {
  "description": "Pseudoidentifier - Filter for entries not starting with the text",
  "title": "Pseudoidentifier.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__istartswith"
  },
  "pseudoidentifier.endsWith": {
  "description": "Pseudoidentifier - Filter for entries ending with the text",
  "title": "Pseudoidentifier.Endswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iendswith"
  },
  "pseudoidentifier.not.endsWith": {
  "description": "Pseudoidentifier - Filter for entries not ending with the text",
  "title": "Pseudoidentifier.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "pseudoidentifier__iendswith"
  },
  "gender": {
  "description": "Gender - Filter for a matching concept code",
  "title": "Gender",
  "type": "string",
  "x-orm-lookup": "gender__code__iexact"
  },
  "gender.not": {
  "description": "Gender - Filter for a mismatching concept code",
  "title": "Gender.Not",
  "type": "string",
  "x-orm-lookup": "gender__code__iexact"
  },
  "gender.anyOf": {
  "description": "Gender - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Gender.Anyof",
  "type": "array",
  "x-orm-lookup": "gender__code__in"
  },
  "gender.not.anyOf": {
  "description": "Gender - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Gender.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "gender__code__in"
  },
  "gender.descendantsOf": {
  "description": "Gender - Filter for all child concepts of a given concepts code",
  "title": "Gender.Descendantsof",
  "type": "string",
  "x-orm-lookup": "gender__None"
  },
  "race.not.exists": {
  "description": "Race - Filter for entries without a value",
  "title": "Race.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "race__isnull"
  },
  "race.exists": {
  "description": "Race - Filter for entries with a value",
  "title": "Race.Exists",
  "type": "boolean",
  "x-orm-lookup": "race__isnull"
  },
  "race": {
  "description": "Race - Filter for a matching concept code",
  "title": "Race",
  "type": "string",
  "x-orm-lookup": "race__code__iexact"
  },
  "race.not": {
  "description": "Race - Filter for a mismatching concept code",
  "title": "Race.Not",
  "type": "string",
  "x-orm-lookup": "race__code__iexact"
  },
  "race.anyOf": {
  "description": "Race - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Race.Anyof",
  "type": "array",
  "x-orm-lookup": "race__code__in"
  },
  "race.not.anyOf": {
  "description": "Race - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Race.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "race__code__in"
  },
  "race.descendantsOf": {
  "description": "Race - Filter for all child concepts of a given concepts code",
  "title": "Race.Descendantsof",
  "type": "string",
  "x-orm-lookup": "race__None"
  },
  "sexAtBirth.not.exists": {
  "description": "Birth sex - Filter for entries without a value",
  "title": "Sexatbirth.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "sex_at_birth__isnull"
  },
  "sexAtBirth.exists": {
  "description": "Birth sex - Filter for entries with a value",
  "title": "Sexatbirth.Exists",
  "type": "boolean",
  "x-orm-lookup": "sex_at_birth__isnull"
  },
  "sexAtBirth": {
  "description": "Birth sex - Filter for a matching concept code",
  "title": "Sexatbirth",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__code__iexact"
  },
  "sexAtBirth.not": {
  "description": "Birth sex - Filter for a mismatching concept code",
  "title": "Sexatbirth.Not",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__code__iexact"
  },
  "sexAtBirth.anyOf": {
  "description": "Birth sex - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Sexatbirth.Anyof",
  "type": "array",
  "x-orm-lookup": "sex_at_birth__code__in"
  },
  "sexAtBirth.not.anyOf": {
  "description": "Birth sex - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Sexatbirth.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "sex_at_birth__code__in"
  },
  "sexAtBirth.descendantsOf": {
  "description": "Birth sex - Filter for all child concepts of a given concepts code",
  "title": "Sexatbirth.Descendantsof",
  "type": "string",
  "x-orm-lookup": "sex_at_birth__None"
  },
  "genderIdentity.not.exists": {
  "description": "Gender identity - Filter for entries without a value",
  "title": "Genderidentity.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "gender_identity__isnull"
  },
  "genderIdentity.exists": {
  "description": "Gender identity - Filter for entries with a value",
  "title": "Genderidentity.Exists",
  "type": "boolean",
  "x-orm-lookup": "gender_identity__isnull"
  },
  "genderIdentity": {
  "description": "Gender identity - Filter for a matching concept code",
  "title": "Genderidentity",
  "type": "string",
  "x-orm-lookup": "gender_identity__code__iexact"
  },
  "genderIdentity.not": {
  "description": "Gender identity - Filter for a mismatching concept code",
  "title": "Genderidentity.Not",
  "type": "string",
  "x-orm-lookup": "gender_identity__code__iexact"
  },
  "genderIdentity.anyOf": {
  "description": "Gender identity - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genderidentity.Anyof",
  "type": "array",
  "x-orm-lookup": "gender_identity__code__in"
  },
  "genderIdentity.not.anyOf": {
  "description": "Gender identity - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genderidentity.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "gender_identity__code__in"
  },
  "genderIdentity.descendantsOf": {
  "description": "Gender identity - Filter for all child concepts of a given concepts code",
  "title": "Genderidentity.Descendantsof",
  "type": "string",
  "x-orm-lookup": "gender_identity__None"
  },
  "dateOfBirth.before": {
  "description": "Date of birth - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateofbirth.Before",
  "type": "string",
  "x-orm-lookup": "date_of_birth__lt"
  },
  "dateOfBirth.after": {
  "description": "Date of birth - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateofbirth.After",
  "type": "string",
  "x-orm-lookup": "date_of_birth__gt"
  },
  "dateOfBirth.onOrBefore": {
  "description": "Date of birth - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateofbirth.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_of_birth__lte"
  },
  "dateOfBirth.onOrAfter": {
  "description": "Date of birth - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateofbirth.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_of_birth__gte"
  },
  "dateOfBirth.on": {
  "description": "Date of birth - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateofbirth.On",
  "type": "string",
  "x-orm-lookup": "date_of_birth__exact"
  },
  "dateOfBirth.not.on": {
  "description": "Date of birth - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateofbirth.Not.On",
  "type": "string",
  "x-orm-lookup": "date_of_birth__exact"
  },
  "dateOfBirth.between": {
  "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofbirth.Between",
  "type": "array",
  "x-orm-lookup": "date_of_birth__range"
  },
  "dateOfBirth.not.between": {
  "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofbirth.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_of_birth__range"
  },
  "isDeceased": {
  "description": "Is deceased - ('Filter for yes/no statement',)",
  "title": "Isdeceased",
  "type": "boolean",
  "x-orm-lookup": "is_deceased__exact"
  },
  "dateOfDeath.not.exists": {
  "description": "Date of death - Filter for entries without a value",
  "title": "Dateofdeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_of_death__isnull"
  },
  "dateOfDeath.exists": {
  "description": "Date of death - Filter for entries with a value",
  "title": "Dateofdeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_of_death__isnull"
  },
  "dateOfDeath.before": {
  "description": "Date of death - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateofdeath.Before",
  "type": "string",
  "x-orm-lookup": "date_of_death__lt"
  },
  "dateOfDeath.after": {
  "description": "Date of death - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateofdeath.After",
  "type": "string",
  "x-orm-lookup": "date_of_death__gt"
  },
  "dateOfDeath.onOrBefore": {
  "description": "Date of death - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateofdeath.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_of_death__lte"
  },
  "dateOfDeath.onOrAfter": {
  "description": "Date of death - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateofdeath.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_of_death__gte"
  },
  "dateOfDeath.on": {
  "description": "Date of death - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateofdeath.On",
  "type": "string",
  "x-orm-lookup": "date_of_death__exact"
  },
  "dateOfDeath.not.on": {
  "description": "Date of death - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateofdeath.Not.On",
  "type": "string",
  "x-orm-lookup": "date_of_death__exact"
  },
  "dateOfDeath.between": {
  "description": "Date of death - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofdeath.Between",
  "type": "array",
  "x-orm-lookup": "date_of_death__range"
  },
  "dateOfDeath.not.between": {
  "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateofdeath.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_of_death__range"
  },
  "causeOfDeath.not.exists": {
  "description": "Cause of death - Filter for entries without a value",
  "title": "Causeofdeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "cause_of_death__isnull"
  },
  "causeOfDeath.exists": {
  "description": "Cause of death - Filter for entries with a value",
  "title": "Causeofdeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "cause_of_death__isnull"
  },
  "causeOfDeath": {
  "description": "Cause of death - Filter for a matching concept code",
  "title": "Causeofdeath",
  "type": "string",
  "x-orm-lookup": "cause_of_death__code__iexact"
  },
  "causeOfDeath.not": {
  "description": "Cause of death - Filter for a mismatching concept code",
  "title": "Causeofdeath.Not",
  "type": "string",
  "x-orm-lookup": "cause_of_death__code__iexact"
  },
  "causeOfDeath.anyOf": {
  "description": "Cause of death - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Causeofdeath.Anyof",
  "type": "array",
  "x-orm-lookup": "cause_of_death__code__in"
  },
  "causeOfDeath.not.anyOf": {
  "description": "Cause of death - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Causeofdeath.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "cause_of_death__code__in"
  },
  "causeOfDeath.descendantsOf": {
  "description": "Cause of death - Filter for all child concepts of a given concepts code",
  "title": "Causeofdeath.Descendantsof",
  "type": "string",
  "x-orm-lookup": "cause_of_death__None"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "manager": {
  "description": "Filter for a particular case manager by its username",
  "title": "Manager",
  "type": "string"
  }
  },
  "title": "PatientCaseFilters",
  "type": "object"
  },
  "Paginated_PatientCase_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/PatientCase"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[PatientCase]",
  "type": "object"
  },
  "PatientCase": {
  "properties": {
  "age": {
  "description": "Approximate age of the patient in years",
  "django_field": "db_age",
  "title": "Age",
  "type": "integer"
  },
  "dataCompletionRate": {
  "description": "Percentage indicating the completeness of a case in terms of its data.",
  "title": "Data completion rate",
  "type": "number"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "pseudoidentifier": {
  "description": "Pseudoidentifier of the patient",
  "examples": [],
  "maxLength": 40,
  "title": "Pseudoidentifier",
  "type": "string",
  "x-expanded": null
  },
  "gender": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Gender for administrative purposes",
  "examples": [],
  "title": "Gender",
  "x-expanded": null,
  "x-terminology": "AdministrativeGender"
  },
  "race": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Race of the patient",
  "examples": [],
  "title": "Race",
  "x-expanded": null,
  "x-terminology": "RaceCategory"
  },
  "sexAtBirth": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Sex assigned at birth",
  "examples": [],
  "title": "Birth sex",
  "x-expanded": null,
  "x-terminology": "BirthSex"
  },
  "genderIdentity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "",
  "examples": [],
  "title": "Gender identity",
  "x-expanded": null,
  "x-terminology": "GenderIdentity"
  },
  "dateOfBirth": {
  "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "format": "date",
  "title": "Date of birth",
  "type": "string",
  "x-expanded": null
  },
  "isDeceased": {
  "description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)",
  "examples": [],
  "title": "Is deceased",
  "type": "boolean",
  "x-expanded": null
  },
  "dateOfDeath": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "title": "Date of death",
  "x-expanded": null
  },
  "causeOfDeath": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the cause of death.",
  "examples": [],
  "title": "Cause of death",
  "x-expanded": null,
  "x-terminology": "CauseOfDeath"
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  }
  },
  "required": [
  "age",
  "dataCompletionRate",
  "id",
  "createdAt",
  "updatedAt",
  "pseudoidentifier",
  "gender",
  "dateOfBirth",
  "isDeceased"
  ],
  "title": "PatientCase",
  "type": "object"
  },
  "NeoplasticEntityCreate": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's neoplasm(s) are recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "relationship": {
  "$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices",
  "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.",
  "examples": [],
  "maxLength": 30,
  "title": "Neoplastic relationship",
  "x-expanded": null
  },
  "relatedPrimaryId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.",
  "examples": [],
  "title": "Related primary neoplasm",
  "x-expanded": null
  },
  "assertionDate": {
  "description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged",
  "examples": [],
  "format": "date",
  "title": "Assertion date",
  "type": "string",
  "x-expanded": null
  },
  "topography": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Anatomical location of the neoplasm(s)",
  "examples": [],
  "title": "Topography",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "morphology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself",
  "examples": [],
  "title": "Morphology",
  "x-expanded": null,
  "x-terminology": "CancerMorphology"
  },
  "differentitation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphologic differentitation characteristics of the neoplasm(s)",
  "examples": [],
  "title": "Differentiation",
  "x-expanded": null,
  "x-terminology": "HistologyDifferentiation"
  },
  "laterality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Laterality qualifier for the location of the neoplasm(s)",
  "examples": [],
  "title": "Laterality",
  "x-expanded": null,
  "x-terminology": "LateralityQualifier"
  }
  },
  "required": [
  "caseId",
  "relationship",
  "assertionDate",
  "topography",
  "morphology"
  ],
  "title": "NeoplasticEntityCreate",
  "type": "object"
  },
  "NeoplasticEntityRelationshipChoices": {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  },
  "PatientCaseBundleCreate": {
  "properties": {
  "neoplasticEntities": {
  "description": "Neoplastic entities",
  "items": {
  "$ref": "#/components/schemas/NeoplasticEntityCreate"
  },
  "title": "Neoplasticentities",
  "type": "array"
  },
  "pseudoidentifier": {
  "description": "Pseudoidentifier of the patient",
  "examples": [],
  "maxLength": 40,
  "title": "Pseudoidentifier",
  "type": "string",
  "x-expanded": null
  },
  "gender": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Gender for administrative purposes",
  "examples": [],
  "title": "Gender",
  "x-expanded": null,
  "x-terminology": "AdministrativeGender"
  },
  "race": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Race of the patient",
  "examples": [],
  "title": "Race",
  "x-expanded": null,
  "x-terminology": "RaceCategory"
  },
  "sexAtBirth": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Sex assigned at birth",
  "examples": [],
  "title": "Birth sex",
  "x-expanded": null,
  "x-terminology": "BirthSex"
  },
  "genderIdentity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "",
  "examples": [],
  "title": "Gender identity",
  "x-expanded": null,
  "x-terminology": "GenderIdentity"
  },
  "dateOfBirth": {
  "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "format": "date",
  "title": "Date of birth",
  "type": "string",
  "x-expanded": null
  },
  "dateOfDeath": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "title": "Date of death",
  "x-expanded": null
  },
  "causeOfDeath": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the cause of death.",
  "examples": [],
  "title": "Cause of death",
  "x-expanded": null,
  "x-terminology": "CauseOfDeath"
  }
  },
  "required": [
  "neoplasticEntities",
  "pseudoidentifier",
  "gender",
  "dateOfBirth"
  ],
  "title": "PatientCaseBundleCreate",
  "type": "object"
  },
  "PatientCaseDataCategories": {
  "enum": [
  "comorbidities-assessments",
  "family-histories",
  "genomic-signatures",
  "genomic-variants",
  "lifestyles",
  "comorbidities",
  "neoplastic-entities",
  "performance-status",
  "radiotherapies",
  "risk-assessments",
  "stagings",
  "surgeries",
  "systemic-therapies",
  "tumor-markers",
  "vitals",
  "tumor-board-reviews",
  "adverse-events",
  "therapy-responses"
  ],
  "title": "PatientCaseDataCategories",
  "type": "string"
  },
  "PatientCaseDataCompletionStatusSchema": {
  "properties": {
  "status": {
  "description": "Boolean indicating whether the data category has been marked as completed",
  "title": "Status",
  "type": "boolean"
  },
  "username": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Username of the person who marked the category as completed",
  "title": "Username"
  },
  "timestamp": {
  "anyOf": [
  {
  "format": "date-time",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Username of the person who marked the category as completed",
  "title": "Timestamp"
  }
  },
  "required": [
  "status"
  ],
  "title": "PatientCaseDataCompletionStatusSchema",
  "type": "object"
  },
  "NeoplasticEntity": {
  "properties": {
  "description": {
  "description": "Human-readable description of the neoplastic entity",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's neoplasm(s) are recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "relationship": {
  "$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices",
  "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.",
  "examples": [],
  "maxLength": 30,
  "title": "Neoplastic relationship",
  "x-expanded": null
  },
  "relatedPrimaryId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.",
  "examples": [],
  "title": "Related primary neoplasm",
  "x-expanded": null
  },
  "assertionDate": {
  "description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged",
  "examples": [],
  "format": "date",
  "title": "Assertion date",
  "type": "string",
  "x-expanded": null
  },
  "topography": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Anatomical location of the neoplasm(s)",
  "examples": [],
  "title": "Topography",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "morphology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself",
  "examples": [],
  "title": "Morphology",
  "x-expanded": null,
  "x-terminology": "CancerMorphology"
  },
  "differentitation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphologic differentitation characteristics of the neoplasm(s)",
  "examples": [],
  "title": "Differentiation",
  "x-expanded": null,
  "x-terminology": "HistologyDifferentiation"
  },
  "laterality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Laterality qualifier for the location of the neoplasm(s)",
  "examples": [],
  "title": "Laterality",
  "x-expanded": null,
  "x-terminology": "LateralityQualifier"
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "relationship",
  "assertionDate",
  "topography",
  "morphology"
  ],
  "title": "NeoplasticEntity",
  "type": "object"
  },
  "PatientCaseBundle": {
  "properties": {
  "age": {
  "description": "Approximate age of the patient in years",
  "title": "Age",
  "type": "integer"
  },
  "neoplasticEntities": {
  "description": "Neoplastic entities",
  "items": {
  "$ref": "#/components/schemas/NeoplasticEntity"
  },
  "title": "Neoplasticentities",
  "type": "array"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "pseudoidentifier": {
  "description": "Pseudoidentifier of the patient",
  "examples": [],
  "maxLength": 40,
  "title": "Pseudoidentifier",
  "type": "string",
  "x-expanded": null
  },
  "gender": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Gender for administrative purposes",
  "examples": [],
  "title": "Gender",
  "x-expanded": null,
  "x-terminology": "AdministrativeGender"
  },
  "race": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Race of the patient",
  "examples": [],
  "title": "Race",
  "x-expanded": null,
  "x-terminology": "RaceCategory"
  },
  "sexAtBirth": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Sex assigned at birth",
  "examples": [],
  "title": "Birth sex",
  "x-expanded": null,
  "x-terminology": "BirthSex"
  },
  "genderIdentity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "",
  "examples": [],
  "title": "Gender identity",
  "x-expanded": null,
  "x-terminology": "GenderIdentity"
  },
  "dateOfBirth": {
  "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "format": "date",
  "title": "Date of birth",
  "type": "string",
  "x-expanded": null
  },
  "isDeceased": {
  "description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)",
  "examples": [],
  "title": "Is deceased",
  "type": "boolean",
  "x-expanded": null
  },
  "dateOfDeath": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
  "examples": [],
  "title": "Date of death",
  "x-expanded": null
  },
  "causeOfDeath": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the cause of death.",
  "examples": [],
  "title": "Cause of death",
  "x-expanded": null,
  "x-terminology": "CauseOfDeath"
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  }
  },
  "required": [
  "age",
  "id",
  "createdAt",
  "updatedAt",
  "pseudoidentifier",
  "gender",
  "dateOfBirth",
  "isDeceased"
  ],
  "title": "PatientCaseBundle",
  "type": "object"
  },
  "NeoplasticEntityFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "relationship": {
  "allOf": [
  {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  }
  ],
  "description": "Neoplastic relationship - ('Filter for single value choice',)",
  "x-orm-lookup": "relationship__exact"
  },
  "relationship.not": {
  "allOf": [
  {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  }
  ],
  "description": "Neoplastic relationship - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "relationship__exact"
  },
  "relationship.anyOf": {
  "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "primary",
  "metastatic",
  "local_recurrence",
  "regional_recurrence"
  ],
  "title": "NeoplasticEntityRelationshipChoices",
  "type": "string"
  },
  "title": "Relationship.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__in"
  },
  "relatedPrimaryId.not.exists": {
  "description": "Related primary neoplasm - Filter for entries without a value",
  "title": "Relatedprimaryid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "related_primary_id__isnull"
  },
  "relatedPrimaryId.exists": {
  "description": "Related primary neoplasm - Filter for entries with a value",
  "title": "Relatedprimaryid.Exists",
  "type": "boolean",
  "x-orm-lookup": "related_primary_id__isnull"
  },
  "relatedPrimaryId": {
  "description": "Related primary neoplasm - Filter for full text matches",
  "title": "Relatedprimaryid",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iexact"
  },
  "relatedPrimaryId.not": {
  "description": "Related primary neoplasm - Filter for full text mismatches",
  "title": "Relatedprimaryid.Not",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iexact"
  },
  "relatedPrimaryId.contains": {
  "description": "Related primary neoplasm - Filter for partial text matches",
  "title": "Relatedprimaryid.Contains",
  "type": "string",
  "x-orm-lookup": "related_primary_id__icontains"
  },
  "relatedPrimaryId.not.contains": {
  "description": "Related primary neoplasm - Filter for partial text mismatches",
  "title": "Relatedprimaryid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_primary_id__icontains"
  },
  "relatedPrimaryId.beginsWith": {
  "description": "Related primary neoplasm - Filter for entries starting with the text",
  "title": "Relatedprimaryid.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__istartswith"
  },
  "relatedPrimaryId.not.beginsWith": {
  "description": "Related primary neoplasm - Filter for entries not starting with the text",
  "title": "Relatedprimaryid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__istartswith"
  },
  "relatedPrimaryId.endsWith": {
  "description": "Related primary neoplasm - Filter for entries ending with the text",
  "title": "Relatedprimaryid.Endswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iendswith"
  },
  "relatedPrimaryId.not.endsWith": {
  "description": "Related primary neoplasm - Filter for entries not ending with the text",
  "title": "Relatedprimaryid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_primary_id__iendswith"
  },
  "assertionDate.before": {
  "description": "Assertion date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Assertiondate.Before",
  "type": "string",
  "x-orm-lookup": "assertion_date__lt"
  },
  "assertionDate.after": {
  "description": "Assertion date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Assertiondate.After",
  "type": "string",
  "x-orm-lookup": "assertion_date__gt"
  },
  "assertionDate.onOrBefore": {
  "description": "Assertion date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Assertiondate.Onorbefore",
  "type": "string",
  "x-orm-lookup": "assertion_date__lte"
  },
  "assertionDate.onOrAfter": {
  "description": "Assertion date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Assertiondate.Onorafter",
  "type": "string",
  "x-orm-lookup": "assertion_date__gte"
  },
  "assertionDate.on": {
  "description": "Assertion date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Assertiondate.On",
  "type": "string",
  "x-orm-lookup": "assertion_date__exact"
  },
  "assertionDate.not.on": {
  "description": "Assertion date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Assertiondate.Not.On",
  "type": "string",
  "x-orm-lookup": "assertion_date__exact"
  },
  "assertionDate.between": {
  "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Assertiondate.Between",
  "type": "array",
  "x-orm-lookup": "assertion_date__range"
  },
  "assertionDate.not.between": {
  "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Assertiondate.Not.Between",
  "type": "array",
  "x-orm-lookup": "assertion_date__range"
  },
  "topography": {
  "description": "Topography - Filter for a matching concept code",
  "title": "Topography",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "topography.not": {
  "description": "Topography - Filter for a mismatching concept code",
  "title": "Topography.Not",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "topography.anyOf": {
  "description": "Topography - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "topography.not.anyOf": {
  "description": "Topography - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "topography.descendantsOf": {
  "description": "Topography - Filter for all child concepts of a given concepts code",
  "title": "Topography.Descendantsof",
  "type": "string",
  "x-orm-lookup": "topography__None"
  },
  "morphology": {
  "description": "Morphology - Filter for a matching concept code",
  "title": "Morphology",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "morphology.not": {
  "description": "Morphology - Filter for a mismatching concept code",
  "title": "Morphology.Not",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "morphology.anyOf": {
  "description": "Morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "morphology.not.anyOf": {
  "description": "Morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "morphology.descendantsOf": {
  "description": "Morphology - Filter for all child concepts of a given concepts code",
  "title": "Morphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "morphology__None"
  },
  "differentitation.not.exists": {
  "description": "Differentiation - Filter for entries without a value",
  "title": "Differentitation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "differentitation__isnull"
  },
  "differentitation.exists": {
  "description": "Differentiation - Filter for entries with a value",
  "title": "Differentitation.Exists",
  "type": "boolean",
  "x-orm-lookup": "differentitation__isnull"
  },
  "differentitation": {
  "description": "Differentiation - Filter for a matching concept code",
  "title": "Differentitation",
  "type": "string",
  "x-orm-lookup": "differentitation__code__iexact"
  },
  "differentitation.not": {
  "description": "Differentiation - Filter for a mismatching concept code",
  "title": "Differentitation.Not",
  "type": "string",
  "x-orm-lookup": "differentitation__code__iexact"
  },
  "differentitation.anyOf": {
  "description": "Differentiation - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Differentitation.Anyof",
  "type": "array",
  "x-orm-lookup": "differentitation__code__in"
  },
  "differentitation.not.anyOf": {
  "description": "Differentiation - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Differentitation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "differentitation__code__in"
  },
  "differentitation.descendantsOf": {
  "description": "Differentiation - Filter for all child concepts of a given concepts code",
  "title": "Differentitation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "differentitation__None"
  },
  "laterality.not.exists": {
  "description": "Laterality - Filter for entries without a value",
  "title": "Laterality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "laterality__isnull"
  },
  "laterality.exists": {
  "description": "Laterality - Filter for entries with a value",
  "title": "Laterality.Exists",
  "type": "boolean",
  "x-orm-lookup": "laterality__isnull"
  },
  "laterality": {
  "description": "Laterality - Filter for a matching concept code",
  "title": "Laterality",
  "type": "string",
  "x-orm-lookup": "laterality__code__iexact"
  },
  "laterality.not": {
  "description": "Laterality - Filter for a mismatching concept code",
  "title": "Laterality.Not",
  "type": "string",
  "x-orm-lookup": "laterality__code__iexact"
  },
  "laterality.anyOf": {
  "description": "Laterality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Laterality.Anyof",
  "type": "array",
  "x-orm-lookup": "laterality__code__in"
  },
  "laterality.not.anyOf": {
  "description": "Laterality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Laterality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "laterality__code__in"
  },
  "laterality.descendantsOf": {
  "description": "Laterality - Filter for all child concepts of a given concepts code",
  "title": "Laterality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "laterality__None"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  }
  },
  "title": "NeoplasticEntityFilters",
  "type": "object"
  },
  "Paginated_NeoplasticEntity_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/NeoplasticEntity"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[NeoplasticEntity]",
  "type": "object"
  },
  "BinetStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "binet",
  "default": "binet",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Binet stage",
  "examples": [],
  "title": "Binet Stage",
  "x-expanded": null,
  "x-terminology": "BinetStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "BinetStagingCreate",
  "type": "object"
  },
  "BreslowDepthCreate": {
  "properties": {
  "stagingDomain": {
  "const": "breslow",
  "default": "breslow",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "depth": {
  "description": "Breslow depth given in milimeters",
  "examples": [],
  "title": "Breslow depth",
  "type": "number",
  "x-expanded": null
  },
  "isUlcered": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the primary tumour presents ulceration",
  "examples": [],
  "title": "Ulcered",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date",
  "depth"
  ],
  "title": "BreslowDepthCreate",
  "type": "object"
  },
  "ClarkStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "clark",
  "default": "clark",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Clark level stage",
  "examples": [],
  "title": "Clark Level Stage",
  "x-expanded": null,
  "x-terminology": "ClarkLevel"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "ClarkStagingCreate",
  "type": "object"
  },
  "FIGOStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "figo",
  "default": "figo",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the FIGO stage",
  "examples": [],
  "title": "FIGO Stage",
  "x-expanded": null,
  "x-terminology": "FIGOStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the FIGO staging",
  "examples": [],
  "title": "FIGO staging methodology",
  "x-expanded": null,
  "x-terminology": "FIGOStagingMethod"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "FIGOStagingCreate",
  "type": "object"
  },
  "GleasonGradeCreate": {
  "properties": {
  "stagingDomain": {
  "const": "gleason",
  "default": "gleason",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Gleason grade stage",
  "examples": [],
  "title": "Gleason grade Stage",
  "x-expanded": null,
  "x-terminology": "GleasonGradeGroupStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "GleasonGradeCreate",
  "type": "object"
  },
  "INRGSSStageCreate": {
  "properties": {
  "stagingDomain": {
  "const": "inrgss",
  "default": "inrgss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the INRGSS stage",
  "examples": [],
  "title": "INRGSS Stage",
  "x-expanded": null,
  "x-terminology": "NeuroblastomaINRGSSStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "INRGSSStageCreate",
  "type": "object"
  },
  "INSSStageCreate": {
  "properties": {
  "stagingDomain": {
  "const": "inss",
  "default": "inss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the INSS stage",
  "examples": [],
  "title": "INSS Stage",
  "x-expanded": null,
  "x-terminology": "NeuroblastomaINSSStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "INSSStageCreate",
  "type": "object"
  },
  "ISSStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "iss",
  "default": "iss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of theISS stage",
  "examples": [],
  "title": "ISS Stage",
  "x-expanded": null,
  "x-terminology": "MyelomaISSStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "ISSStagingCreate",
  "type": "object"
  },
  "LymphomaStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "lymphoma",
  "default": "lymphoma",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Lymphoma stage",
  "examples": [],
  "title": "Lymphoma Stage",
  "x-expanded": null,
  "x-terminology": "LymphomaStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the Lymphoma staging",
  "examples": [],
  "title": "Lymphoma staging methodology",
  "x-expanded": null,
  "x-terminology": "LymphomaStagingMethod"
  },
  "bulky": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.",
  "examples": [],
  "title": "Bulky disease modifier",
  "x-expanded": null
  },
  "pathological": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the staging was based on clinical or pathologic evidence.",
  "examples": [],
  "title": "Pathological staging",
  "x-expanded": null
  },
  "modifiers": {
  "default": [],
  "description": "Qualifier acting as modifier for the lymphoma stage",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Lymphoma stage modifier",
  "type": "array",
  "x-expanded": null,
  "x-terminology": "LymphomaStageValueModifier"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "LymphomaStagingCreate",
  "type": "object"
  },
  "RISSStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "riss",
  "default": "riss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the RISS stage",
  "examples": [],
  "title": "RISS Stage",
  "x-expanded": null,
  "x-terminology": "MyelomaRISSStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "RISSStagingCreate",
  "type": "object"
  },
  "RaiStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "rai",
  "default": "rai",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Rai stage",
  "examples": [],
  "title": "Rai Stage",
  "x-expanded": null,
  "x-terminology": "RaiStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the Rai staging",
  "examples": [],
  "title": "Rai staging methodology",
  "x-expanded": null,
  "x-terminology": "RaiStagingMethod"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "RaiStagingCreate",
  "type": "object"
  },
  "RhabdomyosarcomaClinicalGroupCreate": {
  "properties": {
  "stagingDomain": {
  "const": "rhabdomyosarcoma",
  "default": "rhabdomyosarcoma",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the rhabdomyosarcoma clinical group",
  "examples": [],
  "title": "Rhabdomyosarcoma clinical group",
  "x-expanded": null,
  "x-terminology": "RhabdomyosarcomaClinicalGroup"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "RhabdomyosarcomaClinicalGroupCreate",
  "type": "object"
  },
  "TNMStagingCreate": {
  "properties": {
  "stagingDomain": {
  "const": "tnm",
  "default": "tnm",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The information determined as a result of making the observation, if the information has a simple value",
  "examples": [],
  "title": "TNM Stage",
  "x-expanded": null,
  "x-terminology": "TNMStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for TNM staging",
  "examples": [],
  "title": "TNM Staging methodology",
  "x-expanded": null,
  "x-terminology": "TNMStagingMethod"
  },
  "pathological": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.",
  "examples": [],
  "title": "Pathological staging",
  "x-expanded": null
  },
  "primarytumor": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "T stage (extent of the primary tumor)",
  "examples": [],
  "title": "T Stage",
  "x-expanded": null,
  "x-terminology": "TNMPrimaryTumorCategory"
  },
  "regionalnodes": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "N stage (degree of spread to regional lymph nodes)",
  "examples": [],
  "title": "N Stage",
  "x-expanded": null,
  "x-terminology": "TNMRegionalNodesCategory"
  },
  "distantmetastases": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "M stage (presence of distant metastasis)",
  "examples": [],
  "title": "M Stage",
  "x-expanded": null,
  "x-terminology": "TNMDistantMetastasesCategory"
  },
  "grade": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "G stage (grade of the cancer cells)",
  "examples": [],
  "title": "G Stage",
  "x-expanded": null,
  "x-terminology": "TNMGradeCategory"
  },
  "residualtumor": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "R stage (extent of residual tumor cells after operation)",
  "examples": [],
  "title": "R Stage",
  "x-expanded": null,
  "x-terminology": "TNMResidualTumorCategory"
  },
  "lymphaticinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "L stage (invasion into lymphatic vessels)",
  "examples": [],
  "title": "L Stage",
  "x-expanded": null,
  "x-terminology": "TNMLymphaticInvasionCategory"
  },
  "venousinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "V stage (invasion into venous vessels)",
  "examples": [],
  "title": "V Stage",
  "x-expanded": null,
  "x-terminology": "TNMVenousInvasionCategory"
  },
  "perineuralinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Pn stage (invasion into adjunct nerves)",
  "examples": [],
  "title": "Pn Stage",
  "x-expanded": null,
  "x-terminology": "TNMPerineuralInvasionCategory"
  },
  "serumtumormarkerlevel": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "S stage (serum tumor marker level)",
  "examples": [],
  "title": "S Stage",
  "x-expanded": null,
  "x-terminology": "TNMSerumTumorMarkerLevelCategory"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "TNMStagingCreate",
  "type": "object"
  },
  "WilmsStageCreate": {
  "properties": {
  "stagingDomain": {
  "const": "wilms",
  "default": "wilms",
  "title": "Stagingdomain",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Wilms stage",
  "examples": [],
  "title": "Wilms Stage",
  "x-expanded": null,
  "x-terminology": "WilmsTumorStage"
  }
  },
  "required": [
  "caseId",
  "date",
  "stage"
  ],
  "title": "WilmsStageCreate",
  "type": "object"
  },
  "StagingDomain": {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  },
  "StagingFilters": {
  "properties": {
  "stagingDomain": {
  "allOf": [
  {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "stagingDomain.not": {
  "allOf": [
  {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "stagingDomain.anyOf": {
  "description": "None - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "tnm",
  "figo",
  "binet",
  "rai",
  "breslow",
  "clark",
  "iss",
  "riss",
  "inss",
  "inrgss",
  "gleason",
  "rhabdomyosarcoma",
  "wilms",
  "lymphoma"
  ],
  "title": "StagingDomain",
  "type": "string"
  },
  "title": "Stagingdomain.Anyof",
  "type": "array",
  "x-orm-lookup": "None__in"
  },
  "stage": {
  "description": "None - Filter for a matching concept code",
  "title": "Stage",
  "type": "string",
  "x-orm-lookup": "None__code__iexact"
  },
  "stage.not": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Stage.Not",
  "type": "string",
  "x-orm-lookup": "None__code__iexact"
  },
  "stage.anyOf": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Stage.Anyof",
  "type": "array",
  "x-orm-lookup": "None__code__in"
  },
  "stage.not.anyOf": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Stage.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "None__code__in"
  },
  "stage.descendantsOf": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Stage.Descendantsof",
  "type": "string",
  "x-orm-lookup": "None__None"
  },
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Staging date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Staging date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Staging date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Staging date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Staging date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Staging date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Staging date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "stagedEntitiesIds": {
  "description": "Staged neoplastic entities - Filter for full text matches",
  "title": "Stagedentitiesids",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iexact"
  },
  "stagedEntitiesIds.not": {
  "description": "Staged neoplastic entities - Filter for full text mismatches",
  "title": "Stagedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iexact"
  },
  "stagedEntitiesIds.contains": {
  "description": "Staged neoplastic entities - Filter for partial text matches",
  "title": "Stagedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__icontains"
  },
  "stagedEntitiesIds.not.contains": {
  "description": "Staged neoplastic entities - Filter for partial text mismatches",
  "title": "Stagedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__icontains"
  },
  "stagedEntitiesIds.beginsWith": {
  "description": "Staged neoplastic entities - Filter for entries starting with the text",
  "title": "Stagedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__istartswith"
  },
  "stagedEntitiesIds.not.beginsWith": {
  "description": "Staged neoplastic entities - Filter for entries not starting with the text",
  "title": "Stagedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__istartswith"
  },
  "stagedEntitiesIds.endsWith": {
  "description": "Staged neoplastic entities - Filter for entries ending with the text",
  "title": "Stagedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iendswith"
  },
  "stagedEntitiesIds.not.endsWith": {
  "description": "Staged neoplastic entities - Filter for entries not ending with the text",
  "title": "Stagedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "staged_entities_ids__iendswith"
  }
  },
  "title": "StagingFilters",
  "type": "object"
  },
  "AnyStaging": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TNMStaging"
  },
  {
  "$ref": "#/components/schemas/FIGOStaging"
  },
  {
  "$ref": "#/components/schemas/BinetStaging"
  },
  {
  "$ref": "#/components/schemas/RaiStaging"
  },
  {
  "$ref": "#/components/schemas/BreslowDepth"
  },
  {
  "$ref": "#/components/schemas/ClarkStaging"
  },
  {
  "$ref": "#/components/schemas/ISSStaging"
  },
  {
  "$ref": "#/components/schemas/RISSStaging"
  },
  {
  "$ref": "#/components/schemas/GleasonGrade"
  },
  {
  "$ref": "#/components/schemas/INSSStage"
  },
  {
  "$ref": "#/components/schemas/INRGSSStage"
  },
  {
  "$ref": "#/components/schemas/WilmsStage"
  },
  {
  "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroup"
  },
  {
  "$ref": "#/components/schemas/LymphomaStaging"
  }
  ]
  },
  "BinetStaging": {
  "properties": {
  "stagingDomain": {
  "const": "binet",
  "default": "binet",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Binet stage",
  "examples": [],
  "title": "Binet Stage",
  "x-expanded": null,
  "x-terminology": "BinetStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "BinetStaging",
  "type": "object"
  },
  "BreslowDepth": {
  "properties": {
  "stagingDomain": {
  "const": "breslow",
  "default": "breslow",
  "title": "Stagingdomain",
  "type": "string"
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "depth": {
  "description": "Breslow depth given in milimeters",
  "examples": [],
  "title": "Breslow depth",
  "type": "number",
  "x-expanded": null
  },
  "isUlcered": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the primary tumour presents ulceration",
  "examples": [],
  "title": "Ulcered",
  "x-expanded": null
  }
  },
  "required": [
  "stage",
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "depth"
  ],
  "title": "BreslowDepth",
  "type": "object"
  },
  "ClarkStaging": {
  "properties": {
  "stagingDomain": {
  "const": "clark",
  "default": "clark",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Clark level stage",
  "examples": [],
  "title": "Clark Level Stage",
  "x-expanded": null,
  "x-terminology": "ClarkLevel"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "ClarkStaging",
  "type": "object"
  },
  "FIGOStaging": {
  "properties": {
  "stagingDomain": {
  "const": "figo",
  "default": "figo",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the FIGO stage",
  "examples": [],
  "title": "FIGO Stage",
  "x-expanded": null,
  "x-terminology": "FIGOStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the FIGO staging",
  "examples": [],
  "title": "FIGO staging methodology",
  "x-expanded": null,
  "x-terminology": "FIGOStagingMethod"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "FIGOStaging",
  "type": "object"
  },
  "GleasonGrade": {
  "properties": {
  "stagingDomain": {
  "const": "gleason",
  "default": "gleason",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Gleason grade stage",
  "examples": [],
  "title": "Gleason grade Stage",
  "x-expanded": null,
  "x-terminology": "GleasonGradeGroupStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "GleasonGrade",
  "type": "object"
  },
  "INRGSSStage": {
  "properties": {
  "stagingDomain": {
  "const": "inrgss",
  "default": "inrgss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the INRGSS stage",
  "examples": [],
  "title": "INRGSS Stage",
  "x-expanded": null,
  "x-terminology": "NeuroblastomaINRGSSStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "INRGSSStage",
  "type": "object"
  },
  "INSSStage": {
  "properties": {
  "stagingDomain": {
  "const": "inss",
  "default": "inss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the INSS stage",
  "examples": [],
  "title": "INSS Stage",
  "x-expanded": null,
  "x-terminology": "NeuroblastomaINSSStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "INSSStage",
  "type": "object"
  },
  "ISSStaging": {
  "properties": {
  "stagingDomain": {
  "const": "iss",
  "default": "iss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of theISS stage",
  "examples": [],
  "title": "ISS Stage",
  "x-expanded": null,
  "x-terminology": "MyelomaISSStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "ISSStaging",
  "type": "object"
  },
  "LymphomaStaging": {
  "properties": {
  "stagingDomain": {
  "const": "lymphoma",
  "default": "lymphoma",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Lymphoma stage",
  "examples": [],
  "title": "Lymphoma Stage",
  "x-expanded": null,
  "x-terminology": "LymphomaStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the Lymphoma staging",
  "examples": [],
  "title": "Lymphoma staging methodology",
  "x-expanded": null,
  "x-terminology": "LymphomaStagingMethod"
  },
  "bulky": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.",
  "examples": [],
  "title": "Bulky disease modifier",
  "x-expanded": null
  },
  "pathological": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the staging was based on clinical or pathologic evidence.",
  "examples": [],
  "title": "Pathological staging",
  "x-expanded": null
  },
  "modifiers": {
  "default": [],
  "description": "Qualifier acting as modifier for the lymphoma stage",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Lymphoma stage modifier",
  "type": "array",
  "x-expanded": null,
  "x-terminology": "LymphomaStageValueModifier"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "LymphomaStaging",
  "type": "object"
  },
  "Paginated_AnyStaging_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/AnyStaging"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[AnyStaging]",
  "type": "object"
  },
  "RISSStaging": {
  "properties": {
  "stagingDomain": {
  "const": "riss",
  "default": "riss",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the RISS stage",
  "examples": [],
  "title": "RISS Stage",
  "x-expanded": null,
  "x-terminology": "MyelomaRISSStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "RISSStaging",
  "type": "object"
  },
  "RaiStaging": {
  "properties": {
  "stagingDomain": {
  "const": "rai",
  "default": "rai",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Rai stage",
  "examples": [],
  "title": "Rai Stage",
  "x-expanded": null,
  "x-terminology": "RaiStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for the Rai staging",
  "examples": [],
  "title": "Rai staging methodology",
  "x-expanded": null,
  "x-terminology": "RaiStagingMethod"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "RaiStaging",
  "type": "object"
  },
  "RhabdomyosarcomaClinicalGroup": {
  "properties": {
  "stagingDomain": {
  "const": "rhabdomyosarcoma",
  "default": "rhabdomyosarcoma",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the rhabdomyosarcoma clinical group",
  "examples": [],
  "title": "Rhabdomyosarcoma clinical group",
  "x-expanded": null,
  "x-terminology": "RhabdomyosarcomaClinicalGroup"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "RhabdomyosarcomaClinicalGroup",
  "type": "object"
  },
  "TNMStaging": {
  "properties": {
  "stagingDomain": {
  "const": "tnm",
  "default": "tnm",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The information determined as a result of making the observation, if the information has a simple value",
  "examples": [],
  "title": "TNM Stage",
  "x-expanded": null,
  "x-terminology": "TNMStage"
  },
  "methodology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Methodology used for TNM staging",
  "examples": [],
  "title": "TNM Staging methodology",
  "x-expanded": null,
  "x-terminology": "TNMStagingMethod"
  },
  "pathological": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.",
  "examples": [],
  "title": "Pathological staging",
  "x-expanded": null
  },
  "primarytumor": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "T stage (extent of the primary tumor)",
  "examples": [],
  "title": "T Stage",
  "x-expanded": null,
  "x-terminology": "TNMPrimaryTumorCategory"
  },
  "regionalnodes": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "N stage (degree of spread to regional lymph nodes)",
  "examples": [],
  "title": "N Stage",
  "x-expanded": null,
  "x-terminology": "TNMRegionalNodesCategory"
  },
  "distantmetastases": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "M stage (presence of distant metastasis)",
  "examples": [],
  "title": "M Stage",
  "x-expanded": null,
  "x-terminology": "TNMDistantMetastasesCategory"
  },
  "grade": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "G stage (grade of the cancer cells)",
  "examples": [],
  "title": "G Stage",
  "x-expanded": null,
  "x-terminology": "TNMGradeCategory"
  },
  "residualtumor": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "R stage (extent of residual tumor cells after operation)",
  "examples": [],
  "title": "R Stage",
  "x-expanded": null,
  "x-terminology": "TNMResidualTumorCategory"
  },
  "lymphaticinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "L stage (invasion into lymphatic vessels)",
  "examples": [],
  "title": "L Stage",
  "x-expanded": null,
  "x-terminology": "TNMLymphaticInvasionCategory"
  },
  "venousinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "V stage (invasion into venous vessels)",
  "examples": [],
  "title": "V Stage",
  "x-expanded": null,
  "x-terminology": "TNMVenousInvasionCategory"
  },
  "perineuralinvasion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Pn stage (invasion into adjunct nerves)",
  "examples": [],
  "title": "Pn Stage",
  "x-expanded": null,
  "x-terminology": "TNMPerineuralInvasionCategory"
  },
  "serumtumormarkerlevel": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "S stage (serum tumor marker level)",
  "examples": [],
  "title": "S Stage",
  "x-expanded": null,
  "x-terminology": "TNMSerumTumorMarkerLevelCategory"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "TNMStaging",
  "type": "object"
  },
  "WilmsStage": {
  "properties": {
  "stagingDomain": {
  "const": "wilms",
  "default": "wilms",
  "title": "Stagingdomain",
  "type": "string"
  },
  "description": {
  "description": "Human-readable description of the staging",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer is staged",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the staging was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Staging date",
  "type": "string",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "stagedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the staging.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Staged neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "stage": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The value of the Wilms stage",
  "examples": [],
  "title": "Wilms Stage",
  "x-expanded": null,
  "x-terminology": "WilmsTumorStage"
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "stage"
  ],
  "title": "WilmsStage",
  "type": "object"
  },
  "RiskAssessmentCreate": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's cancer risk is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the risk assessment was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "methodology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Indicates the method or type of risk assessment",
  "examples": [],
  "title": "Assessment methodology",
  "x-expanded": null,
  "x-terminology": "CancerRiskAssessmentMethod"
  },
  "risk": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Assessed risk",
  "examples": [],
  "title": "Risk",
  "x-expanded": null,
  "x-terminology": "CancerRiskAssessmentClassification"
  },
  "score": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Quantitative score used to classify the risk",
  "examples": [],
  "title": "Score",
  "x-expanded": null
  },
  "assessedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were assessed to estimate the risk.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Assessed neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date",
  "methodology",
  "risk"
  ],
  "title": "RiskAssessmentCreate",
  "type": "object"
  },
  "RiskAssessmentFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "methodology": {
  "description": "Assessment methodology - Filter for a matching concept code",
  "title": "Methodology",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "methodology.not": {
  "description": "Assessment methodology - Filter for a mismatching concept code",
  "title": "Methodology.Not",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "methodology.anyOf": {
  "description": "Assessment methodology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "methodology.not.anyOf": {
  "description": "Assessment methodology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "methodology.descendantsOf": {
  "description": "Assessment methodology - Filter for all child concepts of a given concepts code",
  "title": "Methodology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "methodology__None"
  },
  "risk": {
  "description": "Risk - Filter for a matching concept code",
  "title": "Risk",
  "type": "string",
  "x-orm-lookup": "risk__code__iexact"
  },
  "risk.not": {
  "description": "Risk - Filter for a mismatching concept code",
  "title": "Risk.Not",
  "type": "string",
  "x-orm-lookup": "risk__code__iexact"
  },
  "risk.anyOf": {
  "description": "Risk - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Risk.Anyof",
  "type": "array",
  "x-orm-lookup": "risk__code__in"
  },
  "risk.not.anyOf": {
  "description": "Risk - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Risk.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "risk__code__in"
  },
  "risk.descendantsOf": {
  "description": "Risk - Filter for all child concepts of a given concepts code",
  "title": "Risk.Descendantsof",
  "type": "string",
  "x-orm-lookup": "risk__None"
  },
  "score.not.exists": {
  "description": "Score - Filter for entries without a value",
  "title": "Score.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "score__isnull"
  },
  "score.exists": {
  "description": "Score - Filter for entries with a value",
  "title": "Score.Exists",
  "type": "boolean",
  "x-orm-lookup": "score__isnull"
  },
  "score.lessThan": {
  "description": "Score - Filter for entries with values less than the specified value",
  "title": "Score.Lessthan",
  "type": "number",
  "x-orm-lookup": "score__lt"
  },
  "score.lessThanOrEqual": {
  "description": "Score - Filter for entries with values less than or equal to the specified value",
  "title": "Score.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "score__lte"
  },
  "score.greaterThan": {
  "description": "Score - Filter for entries with values greater than the specified value",
  "title": "Score.Greaterthan",
  "type": "number",
  "x-orm-lookup": "score__gt"
  },
  "score.greaterThanOrEqual": {
  "description": "Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Score.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "score__gte"
  },
  "score.equal": {
  "description": "Score - Filter for entries with values exactly equal to the specified value",
  "title": "Score.Equal",
  "type": "number",
  "x-orm-lookup": "score__exact"
  },
  "score.not.equal": {
  "description": "Score - Filter for entries with values not equal to the specified value",
  "title": "Score.Not.Equal",
  "type": "number",
  "x-orm-lookup": "score__exact"
  },
  "score.between": {
  "description": "Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Score.Between",
  "type": "array",
  "x-orm-lookup": "score__range"
  },
  "score.not.between": {
  "description": "Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Score.Not.Between",
  "type": "array",
  "x-orm-lookup": "score__range"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "assessedEntitiesIds": {
  "description": "Assessed neoplastic entities - Filter for full text matches",
  "title": "Assessedentitiesids",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "assessedEntitiesIds.not": {
  "description": "Assessed neoplastic entities - Filter for full text mismatches",
  "title": "Assessedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "assessedEntitiesIds.contains": {
  "description": "Assessed neoplastic entities - Filter for partial text matches",
  "title": "Assessedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "assessedEntitiesIds.not.contains": {
  "description": "Assessed neoplastic entities - Filter for partial text mismatches",
  "title": "Assessedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "assessedEntitiesIds.beginsWith": {
  "description": "Assessed neoplastic entities - Filter for entries starting with the text",
  "title": "Assessedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "assessedEntitiesIds.not.beginsWith": {
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
  "title": "Assessedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "assessedEntitiesIds.endsWith": {
  "description": "Assessed neoplastic entities - Filter for entries ending with the text",
  "title": "Assessedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "assessedEntitiesIds.not.endsWith": {
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
  "title": "Assessedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  }
  },
  "title": "RiskAssessmentFilters",
  "type": "object"
  },
  "Paginated_RiskAssessment_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/RiskAssessment"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[RiskAssessment]",
  "type": "object"
  },
  "RiskAssessment": {
  "properties": {
  "description": {
  "description": "Human-readable description of the tumor marker",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's cancer risk is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the risk assessment was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "methodology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Indicates the method or type of risk assessment",
  "examples": [],
  "title": "Assessment methodology",
  "x-expanded": null,
  "x-terminology": "CancerRiskAssessmentMethod"
  },
  "risk": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Assessed risk",
  "examples": [],
  "title": "Risk",
  "x-expanded": null,
  "x-terminology": "CancerRiskAssessmentClassification"
  },
  "score": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Quantitative score used to classify the risk",
  "examples": [],
  "title": "Score",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "assessedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were assessed to estimate the risk.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Assessed neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "methodology",
  "risk"
  ],
  "title": "RiskAssessment",
  "type": "object"
  },
  "MeasureSchema": {
  "description": "Represents a measure value with its unit.\n\nAttributes:\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.",
  "properties": {
  "value": {
  "title": "Value",
  "type": "number"
  },
  "unit": {
  "title": "Unit",
  "type": "string"
  }
  },
  "required": [
  "value",
  "unit"
  ],
  "title": "Measure",
  "type": "object"
  },
  "TumorMarkerCreate": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient related to the tumor marker result",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the tumor marker was analyzed.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "analyte": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The chemical or biological substance/agent that is analyzed.",
  "examples": [],
  "title": "Analyte",
  "x-expanded": null,
  "x-terminology": "TumorMarkerAnalyte"
  },
  "massConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Mass concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Mass concentration",
  "x-expanded": null
  },
  "arbitraryConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Arbitrary concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Arbitrary concentration",
  "x-expanded": null
  },
  "substanceConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Substance concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Substance concentration",
  "x-expanded": null
  },
  "fraction": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Analyte fraction (if revelant/measured)",
  "examples": [],
  "title": "Fraction",
  "x-expanded": null
  },
  "multipleOfMedian": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Multiples of the median analyte (if revelant/measured)",
  "examples": [],
  "title": "Multiples of the median",
  "x-expanded": null
  },
  "tumorProportionScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the percentage of cells in a tumor that express PD-L1",
  "examples": [],
  "title": "Immune Cells Score (ICS)",
  "x-expanded": null
  },
  "immuneCellScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the percentage of PD-L1 positive immune cells",
  "examples": [],
  "title": "Immune Cells Score (ICS)",
  "x-expanded": null
  },
  "combinedPositiveScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100",
  "examples": [],
  "title": "Combined Positive Score (CPS)",
  "x-expanded": null
  },
  "immunohistochemicalScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the number of analyte-positive cells in a sample",
  "examples": [],
  "title": "Immunohistochemical Score",
  "x-expanded": null
  },
  "presence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerPresenceChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether an analyte has tested positive or negative.",
  "examples": [],
  "title": "Presence",
  "x-expanded": null
  },
  "nuclearExpressionStatus": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the status of expression of the analyte",
  "examples": [],
  "title": "Nuclear expression status",
  "x-expanded": null
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date",
  "analyte"
  ],
  "title": "TumorMarkerCreate",
  "type": "object"
  },
  "TumorMarkerImmuneCellScoreChoices": {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  },
  "TumorMarkerImmunohistochemicalScoreChoices": {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  },
  "TumorMarkerNuclearExpressionStatusChoices": {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  },
  "TumorMarkerPresenceChoices": {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  },
  "TumorMarkerTumorProportionScoreChoices": {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  },
  "TumorMarkerFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "analyte": {
  "description": "Analyte - Filter for a matching concept code",
  "title": "Analyte",
  "type": "string",
  "x-orm-lookup": "analyte__code__iexact"
  },
  "analyte.not": {
  "description": "Analyte - Filter for a mismatching concept code",
  "title": "Analyte.Not",
  "type": "string",
  "x-orm-lookup": "analyte__code__iexact"
  },
  "analyte.anyOf": {
  "description": "Analyte - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analyte.Anyof",
  "type": "array",
  "x-orm-lookup": "analyte__code__in"
  },
  "analyte.not.anyOf": {
  "description": "Analyte - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analyte.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "analyte__code__in"
  },
  "analyte.descendantsOf": {
  "description": "Analyte - Filter for all child concepts of a given concepts code",
  "title": "Analyte.Descendantsof",
  "type": "string",
  "x-orm-lookup": "analyte__None"
  },
  "massConcentration.not.exists": {
  "description": "Mass concentration - Filter for entries without a value",
  "title": "Massconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "mass_concentration__isnull"
  },
  "massConcentration.exists": {
  "description": "Mass concentration - Filter for entries with a value",
  "title": "Massconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "mass_concentration__isnull"
  },
  "massConcentration.lessThan": {
  "description": "Mass concentration - Filter for entries with values less than the specified value",
  "title": "Massconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "mass_concentration__lt"
  },
  "massConcentration.lessThanOrEqual": {
  "description": "Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Massconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__lte"
  },
  "massConcentration.greaterThan": {
  "description": "Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Massconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "mass_concentration__gt"
  },
  "massConcentration.greaterThanOrEqual": {
  "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Massconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__gte"
  },
  "massConcentration.equal": {
  "description": "Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Massconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__exact"
  },
  "massConcentration.not.equal": {
  "description": "Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Massconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "mass_concentration__exact"
  },
  "massConcentration.between": {
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Massconcentration.Between",
  "type": "array",
  "x-orm-lookup": "mass_concentration__range"
  },
  "massConcentration.not.between": {
  "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Massconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "mass_concentration__range"
  },
  "arbitraryConcentration.not.exists": {
  "description": "Arbitrary concentration - Filter for entries without a value",
  "title": "Arbitraryconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "arbitrary_concentration__isnull"
  },
  "arbitraryConcentration.exists": {
  "description": "Arbitrary concentration - Filter for entries with a value",
  "title": "Arbitraryconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "arbitrary_concentration__isnull"
  },
  "arbitraryConcentration.lessThan": {
  "description": "Arbitrary concentration - Filter for entries with values less than the specified value",
  "title": "Arbitraryconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__lt"
  },
  "arbitraryConcentration.lessThanOrEqual": {
  "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Arbitraryconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__lte"
  },
  "arbitraryConcentration.greaterThan": {
  "description": "Arbitrary concentration - Filter for entries with values greater than the specified value",
  "title": "Arbitraryconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__gt"
  },
  "arbitraryConcentration.greaterThanOrEqual": {
  "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Arbitraryconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__gte"
  },
  "arbitraryConcentration.equal": {
  "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Arbitraryconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__exact"
  },
  "arbitraryConcentration.not.equal": {
  "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value",
  "title": "Arbitraryconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "arbitrary_concentration__exact"
  },
  "arbitraryConcentration.between": {
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Arbitraryconcentration.Between",
  "type": "array",
  "x-orm-lookup": "arbitrary_concentration__range"
  },
  "arbitraryConcentration.not.between": {
  "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Arbitraryconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "arbitrary_concentration__range"
  },
  "substanceConcentration.not.exists": {
  "description": "Substance concentration - Filter for entries without a value",
  "title": "Substanceconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "substance_concentration__isnull"
  },
  "substanceConcentration.exists": {
  "description": "Substance concentration - Filter for entries with a value",
  "title": "Substanceconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "substance_concentration__isnull"
  },
  "substanceConcentration.lessThan": {
  "description": "Substance concentration - Filter for entries with values less than the specified value",
  "title": "Substanceconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "substance_concentration__lt"
  },
  "substanceConcentration.lessThanOrEqual": {
  "description": "Substance concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Substanceconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__lte"
  },
  "substanceConcentration.greaterThan": {
  "description": "Substance concentration - Filter for entries with values greater than the specified value",
  "title": "Substanceconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "substance_concentration__gt"
  },
  "substanceConcentration.greaterThanOrEqual": {
  "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Substanceconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__gte"
  },
  "substanceConcentration.equal": {
  "description": "Substance concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Substanceconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__exact"
  },
  "substanceConcentration.not.equal": {
  "description": "Substance concentration - Filter for entries with values not equal to the specified value",
  "title": "Substanceconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "substance_concentration__exact"
  },
  "substanceConcentration.between": {
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Substanceconcentration.Between",
  "type": "array",
  "x-orm-lookup": "substance_concentration__range"
  },
  "substanceConcentration.not.between": {
  "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Substanceconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "substance_concentration__range"
  },
  "fraction.not.exists": {
  "description": "Fraction - Filter for entries without a value",
  "title": "Fraction.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "fraction__isnull"
  },
  "fraction.exists": {
  "description": "Fraction - Filter for entries with a value",
  "title": "Fraction.Exists",
  "type": "boolean",
  "x-orm-lookup": "fraction__isnull"
  },
  "fraction.lessThan": {
  "description": "Fraction - Filter for entries with values less than the specified value",
  "title": "Fraction.Lessthan",
  "type": "number",
  "x-orm-lookup": "fraction__lt"
  },
  "fraction.lessThanOrEqual": {
  "description": "Fraction - Filter for entries with values less than or equal to the specified value",
  "title": "Fraction.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "fraction__lte"
  },
  "fraction.greaterThan": {
  "description": "Fraction - Filter for entries with values greater than the specified value",
  "title": "Fraction.Greaterthan",
  "type": "number",
  "x-orm-lookup": "fraction__gt"
  },
  "fraction.greaterThanOrEqual": {
  "description": "Fraction - Filter for entries with values greater than or equal to the specified value",
  "title": "Fraction.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "fraction__gte"
  },
  "fraction.equal": {
  "description": "Fraction - Filter for entries with values exactly equal to the specified value",
  "title": "Fraction.Equal",
  "type": "number",
  "x-orm-lookup": "fraction__exact"
  },
  "fraction.not.equal": {
  "description": "Fraction - Filter for entries with values not equal to the specified value",
  "title": "Fraction.Not.Equal",
  "type": "number",
  "x-orm-lookup": "fraction__exact"
  },
  "fraction.between": {
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Fraction.Between",
  "type": "array",
  "x-orm-lookup": "fraction__range"
  },
  "fraction.not.between": {
  "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Fraction.Not.Between",
  "type": "array",
  "x-orm-lookup": "fraction__range"
  },
  "multipleOfMedian.not.exists": {
  "description": "Multiples of the median - Filter for entries without a value",
  "title": "Multipleofmedian.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "multiple_of_median__isnull"
  },
  "multipleOfMedian.exists": {
  "description": "Multiples of the median - Filter for entries with a value",
  "title": "Multipleofmedian.Exists",
  "type": "boolean",
  "x-orm-lookup": "multiple_of_median__isnull"
  },
  "multipleOfMedian.lessThan": {
  "description": "Multiples of the median - Filter for entries with values less than the specified value",
  "title": "Multipleofmedian.Lessthan",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__lt"
  },
  "multipleOfMedian.lessThanOrEqual": {
  "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value",
  "title": "Multipleofmedian.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__lte"
  },
  "multipleOfMedian.greaterThan": {
  "description": "Multiples of the median - Filter for entries with values greater than the specified value",
  "title": "Multipleofmedian.Greaterthan",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__gt"
  },
  "multipleOfMedian.greaterThanOrEqual": {
  "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value",
  "title": "Multipleofmedian.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__gte"
  },
  "multipleOfMedian.equal": {
  "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value",
  "title": "Multipleofmedian.Equal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__exact"
  },
  "multipleOfMedian.not.equal": {
  "description": "Multiples of the median - Filter for entries with values not equal to the specified value",
  "title": "Multipleofmedian.Not.Equal",
  "type": "number",
  "x-orm-lookup": "multiple_of_median__exact"
  },
  "multipleOfMedian.between": {
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Multipleofmedian.Between",
  "type": "array",
  "x-orm-lookup": "multiple_of_median__range"
  },
  "multipleOfMedian.not.between": {
  "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Multipleofmedian.Not.Between",
  "type": "array",
  "x-orm-lookup": "multiple_of_median__range"
  },
  "tumorProportionScore.not.exists": {
  "description": "Immune Cells Score (ICS) - Filter for entries without a value",
  "title": "Tumorproportionscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "tumor_proportion_score__isnull"
  },
  "tumorProportionScore.exists": {
  "description": "Immune Cells Score (ICS) - Filter for entries with a value",
  "title": "Tumorproportionscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "tumor_proportion_score__isnull"
  },
  "tumorProportionScore": {
  "allOf": [
  {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)",
  "x-orm-lookup": "tumor_proportion_score__exact"
  },
  "tumorProportionScore.not": {
  "allOf": [
  {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "tumor_proportion_score__exact"
  },
  "tumorProportionScore.anyOf": {
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "TC0",
  "TC1",
  "TC2",
  "TC3"
  ],
  "title": "TumorMarkerTumorProportionScoreChoices",
  "type": "string"
  },
  "title": "Tumorproportionscore.Anyof",
  "type": "array",
  "x-orm-lookup": "tumor_proportion_score__in"
  },
  "immuneCellScore.not.exists": {
  "description": "Immune Cells Score (ICS) - Filter for entries without a value",
  "title": "Immunecellscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "immune_cell_score__isnull"
  },
  "immuneCellScore.exists": {
  "description": "Immune Cells Score (ICS) - Filter for entries with a value",
  "title": "Immunecellscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "immune_cell_score__isnull"
  },
  "immuneCellScore": {
  "allOf": [
  {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)",
  "x-orm-lookup": "immune_cell_score__exact"
  },
  "immuneCellScore.not": {
  "allOf": [
  {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "immune_cell_score__exact"
  },
  "immuneCellScore.anyOf": {
  "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "IC0",
  "IC1",
  "IC2",
  "IC3"
  ],
  "title": "TumorMarkerImmuneCellScoreChoices",
  "type": "string"
  },
  "title": "Immunecellscore.Anyof",
  "type": "array",
  "x-orm-lookup": "immune_cell_score__in"
  },
  "combinedPositiveScore.not.exists": {
  "description": "Combined Positive Score (CPS) - Filter for entries without a value",
  "title": "Combinedpositivescore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "combined_positive_score__isnull"
  },
  "combinedPositiveScore.exists": {
  "description": "Combined Positive Score (CPS) - Filter for entries with a value",
  "title": "Combinedpositivescore.Exists",
  "type": "boolean",
  "x-orm-lookup": "combined_positive_score__isnull"
  },
  "combinedPositiveScore.lessThan": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value",
  "title": "Combinedpositivescore.Lessthan",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__lt"
  },
  "combinedPositiveScore.lessThanOrEqual": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value",
  "title": "Combinedpositivescore.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__lte"
  },
  "combinedPositiveScore.greaterThan": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value",
  "title": "Combinedpositivescore.Greaterthan",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__gt"
  },
  "combinedPositiveScore.greaterThanOrEqual": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value",
  "title": "Combinedpositivescore.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__gte"
  },
  "combinedPositiveScore.equal": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value",
  "title": "Combinedpositivescore.Equal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__exact"
  },
  "combinedPositiveScore.not.equal": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value",
  "title": "Combinedpositivescore.Not.Equal",
  "type": "number",
  "x-orm-lookup": "combined_positive_score__exact"
  },
  "combinedPositiveScore.between": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Combinedpositivescore.Between",
  "type": "array",
  "x-orm-lookup": "combined_positive_score__range"
  },
  "combinedPositiveScore.not.between": {
  "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Combinedpositivescore.Not.Between",
  "type": "array",
  "x-orm-lookup": "combined_positive_score__range"
  },
  "immunohistochemicalScore.not.exists": {
  "description": "Immunohistochemical Score - Filter for entries without a value",
  "title": "Immunohistochemicalscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "immunohistochemical_score__isnull"
  },
  "immunohistochemicalScore.exists": {
  "description": "Immunohistochemical Score - Filter for entries with a value",
  "title": "Immunohistochemicalscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "immunohistochemical_score__isnull"
  },
  "immunohistochemicalScore": {
  "allOf": [
  {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immunohistochemical Score - ('Filter for single value choice',)",
  "x-orm-lookup": "immunohistochemical_score__exact"
  },
  "immunohistochemicalScore.not": {
  "allOf": [
  {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  }
  ],
  "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "immunohistochemical_score__exact"
  },
  "immunohistochemicalScore.anyOf": {
  "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "0",
  "1+",
  "2+",
  "3+",
  "indeterminate"
  ],
  "title": "TumorMarkerImmunohistochemicalScoreChoices",
  "type": "string"
  },
  "title": "Immunohistochemicalscore.Anyof",
  "type": "array",
  "x-orm-lookup": "immunohistochemical_score__in"
  },
  "presence.not.exists": {
  "description": "Presence - Filter for entries without a value",
  "title": "Presence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "presence__isnull"
  },
  "presence.exists": {
  "description": "Presence - Filter for entries with a value",
  "title": "Presence.Exists",
  "type": "boolean",
  "x-orm-lookup": "presence__isnull"
  },
  "presence": {
  "allOf": [
  {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  }
  ],
  "description": "Presence - ('Filter for single value choice',)",
  "x-orm-lookup": "presence__exact"
  },
  "presence.not": {
  "allOf": [
  {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  }
  ],
  "description": "Presence - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "presence__exact"
  },
  "presence.anyOf": {
  "description": "Presence - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "TumorMarkerPresenceChoices",
  "type": "string"
  },
  "title": "Presence.Anyof",
  "type": "array",
  "x-orm-lookup": "presence__in"
  },
  "nuclearExpressionStatus.not.exists": {
  "description": "Nuclear expression status - Filter for entries without a value",
  "title": "Nuclearexpressionstatus.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "nuclear_expression_status__isnull"
  },
  "nuclearExpressionStatus.exists": {
  "description": "Nuclear expression status - Filter for entries with a value",
  "title": "Nuclearexpressionstatus.Exists",
  "type": "boolean",
  "x-orm-lookup": "nuclear_expression_status__isnull"
  },
  "nuclearExpressionStatus": {
  "allOf": [
  {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  }
  ],
  "description": "Nuclear expression status - ('Filter for single value choice',)",
  "x-orm-lookup": "nuclear_expression_status__exact"
  },
  "nuclearExpressionStatus.not": {
  "allOf": [
  {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  }
  ],
  "description": "Nuclear expression status - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "nuclear_expression_status__exact"
  },
  "nuclearExpressionStatus.anyOf": {
  "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "intact",
  "loss",
  "indeterminate"
  ],
  "title": "TumorMarkerNuclearExpressionStatusChoices",
  "type": "string"
  },
  "title": "Nuclearexpressionstatus.Anyof",
  "type": "array",
  "x-orm-lookup": "nuclear_expression_status__in"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "relatedEntitiesIds": {
  "description": "Related neoplastic entities - Filter for full text matches",
  "title": "Relatedentitiesids",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "relatedEntitiesIds.not": {
  "description": "Related neoplastic entities - Filter for full text mismatches",
  "title": "Relatedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "relatedEntitiesIds.contains": {
  "description": "Related neoplastic entities - Filter for partial text matches",
  "title": "Relatedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "relatedEntitiesIds.not.contains": {
  "description": "Related neoplastic entities - Filter for partial text mismatches",
  "title": "Relatedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "relatedEntitiesIds.beginsWith": {
  "description": "Related neoplastic entities - Filter for entries starting with the text",
  "title": "Relatedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "relatedEntitiesIds.not.beginsWith": {
  "description": "Related neoplastic entities - Filter for entries not starting with the text",
  "title": "Relatedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "relatedEntitiesIds.endsWith": {
  "description": "Related neoplastic entities - Filter for entries ending with the text",
  "title": "Relatedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "relatedEntitiesIds.not.endsWith": {
  "description": "Related neoplastic entities - Filter for entries not ending with the text",
  "title": "Relatedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  }
  },
  "title": "TumorMarkerFilters",
  "type": "object"
  },
  "Paginated_TumorMarker_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/TumorMarker"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[TumorMarker]",
  "type": "object"
  },
  "TumorMarker": {
  "properties": {
  "description": {
  "description": "Human-readable description of the tumor marker",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient related to the tumor marker result",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the tumor marker was analyzed.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "analyte": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The chemical or biological substance/agent that is analyzed.",
  "examples": [],
  "title": "Analyte",
  "x-expanded": null,
  "x-terminology": "TumorMarkerAnalyte"
  },
  "massConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Mass concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Mass concentration",
  "x-expanded": null
  },
  "arbitraryConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Arbitrary concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Arbitrary concentration",
  "x-expanded": null
  },
  "substanceConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Substance concentration of the analyte (if revelant/measured)",
  "examples": [],
  "title": "Substance concentration",
  "x-expanded": null
  },
  "fraction": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Analyte fraction (if revelant/measured)",
  "examples": [],
  "title": "Fraction",
  "x-expanded": null
  },
  "multipleOfMedian": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Multiples of the median analyte (if revelant/measured)",
  "examples": [],
  "title": "Multiples of the median",
  "x-expanded": null
  },
  "tumorProportionScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the percentage of cells in a tumor that express PD-L1",
  "examples": [],
  "title": "Immune Cells Score (ICS)",
  "x-expanded": null
  },
  "immuneCellScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the percentage of PD-L1 positive immune cells",
  "examples": [],
  "title": "Immune Cells Score (ICS)",
  "x-expanded": null
  },
  "combinedPositiveScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100",
  "examples": [],
  "title": "Combined Positive Score (CPS)",
  "x-expanded": null
  },
  "immunohistochemicalScore": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the number of analyte-positive cells in a sample",
  "examples": [],
  "title": "Immunohistochemical Score",
  "x-expanded": null
  },
  "presence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerPresenceChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether an analyte has tested positive or negative.",
  "examples": [],
  "title": "Presence",
  "x-expanded": null
  },
  "nuclearExpressionStatus": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Categorization of the status of expression of the analyte",
  "examples": [],
  "title": "Nuclear expression status",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "analyte"
  ],
  "title": "TumorMarker",
  "type": "object"
  },
  "AnalyteDetails": {
  "properties": {
  "acronym": {
  "title": "Acronym",
  "type": "string"
  },
  "display": {
  "title": "Display",
  "type": "string"
  },
  "valueTypes": {
  "items": {
  "$ref": "#/components/schemas/AnalyteResultType"
  },
  "title": "Valuetypes",
  "type": "array"
  }
  },
  "required": [
  "acronym",
  "display",
  "valueTypes"
  ],
  "title": "AnalyteDetails",
  "type": "object"
  },
  "AnalyteResultType": {
  "enum": [
  "MassConcentration",
  "ArbitraryConcentration",
  "SubstanceConcentration",
  "MultipleOfMedian",
  "Fraction",
  "Presence",
  "CombinedPositiveScore",
  "ImmuneCellsScore",
  "TumorProportionScore",
  "ImmunoHistoChemicalScore",
  "NuclearExpressionStatus"
  ],
  "title": "AnalyteResultType",
  "type": "string"
  },
  "PeriodSchema": {
  "properties": {
  "start": {
  "format": "date",
  "title": "Start",
  "type": "string"
  },
  "end": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "title": "End"
  }
  },
  "required": [
  "start"
  ],
  "title": "Period",
  "type": "object"
  },
  "SystemicTherapyCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who received the systemic therapy",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "period": {
  "$ref": "#/components/schemas/PeriodSchema",
  "description": "Clinically-relevant period during which the therapy was administered to the patient.",
  "examples": [],
  "title": "Treatment period",
  "x-expanded": null
  },
  "cycles": {
  "description": "The total number of treatment cycles during the treatment period.",
  "examples": [],
  "title": "Cycles",
  "type": "integer",
  "x-expanded": null
  },
  "intent": {
  "$ref": "#/components/schemas/SystemicTherapyIntentChoices",
  "description": "Treatment intent of the system therapy",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "role": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates the role of this therapy in the overall treatment strategy.",
  "examples": [],
  "title": "Treatment Role",
  "x-expanded": null,
  "x-terminology": "TreatmentCategory"
  },
  "terminationReason": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Explanation for the premature or planned termination of the systemic therapy",
  "examples": [],
  "title": "Termination reason",
  "x-expanded": null,
  "x-terminology": "TreatmentTerminationReason"
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the systemic therapy",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "period",
  "cycles",
  "intent"
  ],
  "title": "SystemicTherapyCreate",
  "type": "object"
  },
  "SystemicTherapyIntentChoices": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  },
  "SystemicTherapyFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "period.overlaps": {
  "description": "Treatment period - Filter for entries overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "period.not.overlaps": {
  "description": "Treatment period - Filter for entries not overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "period.contains": {
  "description": "Treatment period - Filter for entries containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "period.not.contains": {
  "description": "Treatment period - Filter for entries not containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "period.containedBy": {
  "description": "Treatment period - Filter for entries whose period are contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "period.not.containedBy": {
  "description": "Treatment period - Filter for entries whose period are not contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "cycles.lessThan": {
  "description": "Cycles - Filter for entries with values less than the specified value",
  "title": "Cycles.Lessthan",
  "type": "integer",
  "x-orm-lookup": "cycles__lt"
  },
  "cycles.lessThanOrEqual": {
  "description": "Cycles - Filter for entries with values less than or equal to the specified value",
  "title": "Cycles.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "cycles__lte"
  },
  "cycles.greaterThan": {
  "description": "Cycles - Filter for entries with values greater than the specified value",
  "title": "Cycles.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "cycles__gt"
  },
  "cycles.greaterThanOrEqual": {
  "description": "Cycles - Filter for entries with values greater than or equal to the specified value",
  "title": "Cycles.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "cycles__gte"
  },
  "cycles.equal": {
  "description": "Cycles - Filter for entries with values exactly equal to the specified value",
  "title": "Cycles.Equal",
  "type": "integer",
  "x-orm-lookup": "cycles__exact"
  },
  "cycles.not.equal": {
  "description": "Cycles - Filter for entries with values not equal to the specified value",
  "title": "Cycles.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "cycles__exact"
  },
  "cycles.between": {
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Cycles.Between",
  "type": "array",
  "x-orm-lookup": "cycles__range"
  },
  "cycles.not.between": {
  "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Cycles.Not.Between",
  "type": "array",
  "x-orm-lookup": "cycles__range"
  },
  "intent": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.not": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.anyOf": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SystemicTherapyIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "role.not.exists": {
  "description": "Treatment Role - Filter for entries without a value",
  "title": "Role.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "role__isnull"
  },
  "role.exists": {
  "description": "Treatment Role - Filter for entries with a value",
  "title": "Role.Exists",
  "type": "boolean",
  "x-orm-lookup": "role__isnull"
  },
  "role": {
  "description": "Treatment Role - Filter for a matching concept code",
  "title": "Role",
  "type": "string",
  "x-orm-lookup": "role__code__iexact"
  },
  "role.not": {
  "description": "Treatment Role - Filter for a mismatching concept code",
  "title": "Role.Not",
  "type": "string",
  "x-orm-lookup": "role__code__iexact"
  },
  "role.anyOf": {
  "description": "Treatment Role - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Role.Anyof",
  "type": "array",
  "x-orm-lookup": "role__code__in"
  },
  "role.not.anyOf": {
  "description": "Treatment Role - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Role.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "role__code__in"
  },
  "role.descendantsOf": {
  "description": "Treatment Role - Filter for all child concepts of a given concepts code",
  "title": "Role.Descendantsof",
  "type": "string",
  "x-orm-lookup": "role__None"
  },
  "terminationReason.not.exists": {
  "description": "Termination reason - Filter for entries without a value",
  "title": "Terminationreason.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "terminationReason.exists": {
  "description": "Termination reason - Filter for entries with a value",
  "title": "Terminationreason.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "terminationReason": {
  "description": "Termination reason - Filter for a matching concept code",
  "title": "Terminationreason",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "terminationReason.not": {
  "description": "Termination reason - Filter for a mismatching concept code",
  "title": "Terminationreason.Not",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "terminationReason.anyOf": {
  "description": "Termination reason - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "terminationReason.not.anyOf": {
  "description": "Termination reason - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "terminationReason.descendantsOf": {
  "description": "Termination reason - Filter for all child concepts of a given concepts code",
  "title": "Terminationreason.Descendantsof",
  "type": "string",
  "x-orm-lookup": "termination_reason__None"
  },
  "targetedEntitiesIds": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.not": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.not.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.not.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "targetedEntitiesIds.not.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "medications.id": {
  "description": "Id - Filter for full text matches",
  "title": "Medications.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "medications.id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Medications.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "medications.id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Medications.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "medications.id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Medications.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "medications.id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Medications.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "medications.id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Medications.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "medications.id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Medications.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "medications.id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Medications.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "medications.createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Medications.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "medications.createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Medications.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "medications.createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Medications.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "medications.createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Medications.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "medications.createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Medications.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "medications.createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Medications.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "medications.createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "medications.createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "medications.updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "medications.updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Medications.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "medications.updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "medications.updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "medications.updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Medications.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "medications.updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Medications.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "medications.updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "medications.updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Medications.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "medications.createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Medications.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "medications.createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Medications.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "medications.updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Medications.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "medications.updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "medications.updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Medications.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "medications.updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "medications.updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "medications.updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Medications.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "medications.updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Medications.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "medications.updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Medications.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "medications.updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Medications.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "medications.updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Medications.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "medications.updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "medications.updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "medications.updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "medications.updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "medications.updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "medications.updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "medications.updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "medications.updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "medications.updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Medications.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "medications.updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Medications.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "medications.updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "medications.updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "medications.updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "medications.updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "medications.updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "medications.updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "medications.updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "medications.updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "medications.description": {
  "description": "None - Filter for full text matches",
  "title": "Medications.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.description.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Medications.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "medications.description.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Medications.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.description.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Medications.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "medications.description.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Medications.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.description.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Medications.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "medications.description.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Medications.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.description.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Medications.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "medications.drug": {
  "description": "Antineoplastic Drug - Filter for a matching concept code",
  "title": "Medications.Drug",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "medications.drug.not": {
  "description": "Antineoplastic Drug - Filter for a mismatching concept code",
  "title": "Medications.Drug.Not",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "medications.drug.anyOf": {
  "description": "Antineoplastic Drug - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Drug.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "medications.drug.not.anyOf": {
  "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Drug.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "medications.drug.descendantsOf": {
  "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code",
  "title": "Medications.Drug.Descendantsof",
  "type": "string",
  "x-orm-lookup": "drug__None"
  },
  "medications.route.not.exists": {
  "description": "Route - Filter for entries without a value",
  "title": "Medications.Route.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "route__isnull"
  },
  "medications.route.exists": {
  "description": "Route - Filter for entries with a value",
  "title": "Medications.Route.Exists",
  "type": "boolean",
  "x-orm-lookup": "route__isnull"
  },
  "medications.route": {
  "description": "Route - Filter for a matching concept code",
  "title": "Medications.Route",
  "type": "string",
  "x-orm-lookup": "route__code__iexact"
  },
  "medications.route.not": {
  "description": "Route - Filter for a mismatching concept code",
  "title": "Medications.Route.Not",
  "type": "string",
  "x-orm-lookup": "route__code__iexact"
  },
  "medications.route.anyOf": {
  "description": "Route - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Route.Anyof",
  "type": "array",
  "x-orm-lookup": "route__code__in"
  },
  "medications.route.not.anyOf": {
  "description": "Route - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Medications.Route.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "route__code__in"
  },
  "medications.route.descendantsOf": {
  "description": "Route - Filter for all child concepts of a given concepts code",
  "title": "Medications.Route.Descendantsof",
  "type": "string",
  "x-orm-lookup": "route__None"
  },
  "medications.usedOfflabel.not.exists": {
  "description": "Off-label use - Filter for entries without a value",
  "title": "Medications.Usedofflabel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__isnull"
  },
  "medications.usedOfflabel.exists": {
  "description": "Off-label use - Filter for entries with a value",
  "title": "Medications.Usedofflabel.Exists",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__isnull"
  },
  "medications.usedOfflabel": {
  "description": "Off-label use - ('Filter for yes/no statement',)",
  "title": "Medications.Usedofflabel",
  "type": "boolean",
  "x-orm-lookup": "used_offlabel__exact"
  },
  "medications.withinSoc.not.exists": {
  "description": "Within SOC - Filter for entries without a value",
  "title": "Medications.Withinsoc.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "within_soc__isnull"
  },
  "medications.withinSoc.exists": {
  "description": "Within SOC - Filter for entries with a value",
  "title": "Medications.Withinsoc.Exists",
  "type": "boolean",
  "x-orm-lookup": "within_soc__isnull"
  },
  "medications.withinSoc": {
  "description": "Within SOC - ('Filter for yes/no statement',)",
  "title": "Medications.Withinsoc",
  "type": "boolean",
  "x-orm-lookup": "within_soc__exact"
  },
  "medications.dosageMassConcentration.not.exists": {
  "description": "Dosage - Mass concentration - Filter for entries without a value",
  "title": "Medications.Dosagemassconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_concentration__isnull"
  },
  "medications.dosageMassConcentration.exists": {
  "description": "Dosage - Mass concentration - Filter for entries with a value",
  "title": "Medications.Dosagemassconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_concentration__isnull"
  },
  "medications.dosageMassConcentration.lessThan": {
  "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemassconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__lt"
  },
  "medications.dosageMassConcentration.lessThanOrEqual": {
  "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__lte"
  },
  "medications.dosageMassConcentration.greaterThan": {
  "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemassconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__gt"
  },
  "medications.dosageMassConcentration.greaterThanOrEqual": {
  "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__gte"
  },
  "medications.dosageMassConcentration.equal": {
  "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__exact"
  },
  "medications.dosageMassConcentration.not.equal": {
  "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemassconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_concentration__exact"
  },
  "medications.dosageMassConcentration.between": {
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemassconcentration.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_concentration__range"
  },
  "medications.dosageMassConcentration.not.between": {
  "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemassconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_concentration__range"
  },
  "medications.dosageMass.not.exists": {
  "description": "Dosage - Fixed Mass - Filter for entries without a value",
  "title": "Medications.Dosagemass.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass__isnull"
  },
  "medications.dosageMass.exists": {
  "description": "Dosage - Fixed Mass - Filter for entries with a value",
  "title": "Medications.Dosagemass.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass__isnull"
  },
  "medications.dosageMass.lessThan": {
  "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemass.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass__lt"
  },
  "medications.dosageMass.lessThanOrEqual": {
  "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemass.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__lte"
  },
  "medications.dosageMass.greaterThan": {
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemass.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass__gt"
  },
  "medications.dosageMass.greaterThanOrEqual": {
  "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemass.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__gte"
  },
  "medications.dosageMass.equal": {
  "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemass.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__exact"
  },
  "medications.dosageMass.not.equal": {
  "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemass.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass__exact"
  },
  "medications.dosageMass.between": {
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemass.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass__range"
  },
  "medications.dosageMass.not.between": {
  "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemass.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass__range"
  },
  "medications.dosageVolume.not.exists": {
  "description": "Dosage - Volume - Filter for entries without a value",
  "title": "Medications.Dosagevolume.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_volume__isnull"
  },
  "medications.dosageVolume.exists": {
  "description": "Dosage - Volume - Filter for entries with a value",
  "title": "Medications.Dosagevolume.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_volume__isnull"
  },
  "medications.dosageVolume.lessThan": {
  "description": "Dosage - Volume - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagevolume.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_volume__lt"
  },
  "medications.dosageVolume.lessThanOrEqual": {
  "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagevolume.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__lte"
  },
  "medications.dosageVolume.greaterThan": {
  "description": "Dosage - Volume - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagevolume.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_volume__gt"
  },
  "medications.dosageVolume.greaterThanOrEqual": {
  "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagevolume.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__gte"
  },
  "medications.dosageVolume.equal": {
  "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagevolume.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__exact"
  },
  "medications.dosageVolume.not.equal": {
  "description": "Dosage - Volume - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagevolume.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_volume__exact"
  },
  "medications.dosageVolume.between": {
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagevolume.Between",
  "type": "array",
  "x-orm-lookup": "dosage_volume__range"
  },
  "medications.dosageVolume.not.between": {
  "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagevolume.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_volume__range"
  },
  "medications.dosageMassSurface.not.exists": {
  "description": "Dosage - Mass per body surface - Filter for entries without a value",
  "title": "Medications.Dosagemasssurface.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_surface__isnull"
  },
  "medications.dosageMassSurface.exists": {
  "description": "Dosage - Mass per body surface - Filter for entries with a value",
  "title": "Medications.Dosagemasssurface.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_mass_surface__isnull"
  },
  "medications.dosageMassSurface.lessThan": {
  "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value",
  "title": "Medications.Dosagemasssurface.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__lt"
  },
  "medications.dosageMassSurface.lessThanOrEqual": {
  "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosagemasssurface.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__lte"
  },
  "medications.dosageMassSurface.greaterThan": {
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosagemasssurface.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__gt"
  },
  "medications.dosageMassSurface.greaterThanOrEqual": {
  "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosagemasssurface.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__gte"
  },
  "medications.dosageMassSurface.equal": {
  "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosagemasssurface.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__exact"
  },
  "medications.dosageMassSurface.not.equal": {
  "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosagemasssurface.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_mass_surface__exact"
  },
  "medications.dosageMassSurface.between": {
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemasssurface.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_surface__range"
  },
  "medications.dosageMassSurface.not.between": {
  "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosagemasssurface.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_mass_surface__range"
  },
  "medications.dosageRateMassConcentration.not.exists": {
  "description": "Dosage rate - Mass concentration - Filter for entries without a value",
  "title": "Medications.Dosageratemassconcentration.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_concentration__isnull"
  },
  "medications.dosageRateMassConcentration.exists": {
  "description": "Dosage rate - Mass concentration - Filter for entries with a value",
  "title": "Medications.Dosageratemassconcentration.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_concentration__isnull"
  },
  "medications.dosageRateMassConcentration.lessThan": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemassconcentration.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__lt"
  },
  "medications.dosageRateMassConcentration.lessThanOrEqual": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__lte"
  },
  "medications.dosageRateMassConcentration.greaterThan": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemassconcentration.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__gt"
  },
  "medications.dosageRateMassConcentration.greaterThanOrEqual": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__gte"
  },
  "medications.dosageRateMassConcentration.equal": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__exact"
  },
  "medications.dosageRateMassConcentration.not.equal": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemassconcentration.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_concentration__exact"
  },
  "medications.dosageRateMassConcentration.between": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemassconcentration.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_concentration__range"
  },
  "medications.dosageRateMassConcentration.not.between": {
  "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemassconcentration.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_concentration__range"
  },
  "medications.dosageRateMass.not.exists": {
  "description": "Dosage rate - Fixed Mass - Filter for entries without a value",
  "title": "Medications.Dosageratemass.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass__isnull"
  },
  "medications.dosageRateMass.exists": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with a value",
  "title": "Medications.Dosageratemass.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass__isnull"
  },
  "medications.dosageRateMass.lessThan": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemass.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__lt"
  },
  "medications.dosageRateMass.lessThanOrEqual": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemass.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__lte"
  },
  "medications.dosageRateMass.greaterThan": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemass.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__gt"
  },
  "medications.dosageRateMass.greaterThanOrEqual": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemass.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__gte"
  },
  "medications.dosageRateMass.equal": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemass.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__exact"
  },
  "medications.dosageRateMass.not.equal": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemass.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass__exact"
  },
  "medications.dosageRateMass.between": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemass.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass__range"
  },
  "medications.dosageRateMass.not.between": {
  "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemass.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass__range"
  },
  "medications.dosageRateVolume.not.exists": {
  "description": "Dosage rate - Volume - Filter for entries without a value",
  "title": "Medications.Dosageratevolume.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_volume__isnull"
  },
  "medications.dosageRateVolume.exists": {
  "description": "Dosage rate - Volume - Filter for entries with a value",
  "title": "Medications.Dosageratevolume.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_volume__isnull"
  },
  "medications.dosageRateVolume.lessThan": {
  "description": "Dosage rate - Volume - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratevolume.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__lt"
  },
  "medications.dosageRateVolume.lessThanOrEqual": {
  "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratevolume.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__lte"
  },
  "medications.dosageRateVolume.greaterThan": {
  "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratevolume.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__gt"
  },
  "medications.dosageRateVolume.greaterThanOrEqual": {
  "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratevolume.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__gte"
  },
  "medications.dosageRateVolume.equal": {
  "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratevolume.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__exact"
  },
  "medications.dosageRateVolume.not.equal": {
  "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratevolume.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_volume__exact"
  },
  "medications.dosageRateVolume.between": {
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratevolume.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_volume__range"
  },
  "medications.dosageRateVolume.not.between": {
  "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratevolume.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_volume__range"
  },
  "medications.dosageRateMassSurface.not.exists": {
  "description": "Dosage rate - Mass per body surface - Filter for entries without a value",
  "title": "Medications.Dosageratemasssurface.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_surface__isnull"
  },
  "medications.dosageRateMassSurface.exists": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with a value",
  "title": "Medications.Dosageratemasssurface.Exists",
  "type": "boolean",
  "x-orm-lookup": "dosage_rate_mass_surface__isnull"
  },
  "medications.dosageRateMassSurface.lessThan": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value",
  "title": "Medications.Dosageratemasssurface.Lessthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__lt"
  },
  "medications.dosageRateMassSurface.lessThanOrEqual": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__lte"
  },
  "medications.dosageRateMassSurface.greaterThan": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value",
  "title": "Medications.Dosageratemasssurface.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__gt"
  },
  "medications.dosageRateMassSurface.greaterThanOrEqual": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__gte"
  },
  "medications.dosageRateMassSurface.equal": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__exact"
  },
  "medications.dosageRateMassSurface.not.equal": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value",
  "title": "Medications.Dosageratemasssurface.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dosage_rate_mass_surface__exact"
  },
  "medications.dosageRateMassSurface.between": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemasssurface.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_surface__range"
  },
  "medications.dosageRateMassSurface.not.between": {
  "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Medications.Dosageratemasssurface.Not.Between",
  "type": "array",
  "x-orm-lookup": "dosage_rate_mass_surface__range"
  }
  },
  "title": "SystemicTherapyFilters",
  "type": "object"
  },
  "Paginated_SystemicTherapySchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/SystemicTherapySchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[SystemicTherapySchema]",
  "type": "object"
  },
  "SystemicTherapyMedicationSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "drug": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Antineoplastic drug/medication administered to the patient",
  "examples": [],
  "title": "Antineoplastic Drug",
  "x-expanded": null,
  "x-terminology": "AntineoplasticAgent"
  },
  "route": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Drug administration route",
  "examples": [],
  "title": "Route",
  "x-expanded": null,
  "x-terminology": "DosageRoute"
  },
  "usedOfflabel": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a medication was used off-label at the time of administration",
  "examples": [],
  "title": "Off-label use",
  "x-expanded": null
  },
  "withinSoc": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.",
  "examples": [],
  "title": "Within SOC",
  "x-expanded": null
  },
  "dosageMassConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Mass concentration",
  "x-expanded": null
  },
  "dosageMass": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Fixed Mass",
  "x-expanded": null
  },
  "dosageVolume": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Volume",
  "x-expanded": null
  },
  "dosageMassSurface": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Mass per body surface",
  "x-expanded": null
  },
  "dosageRateMassConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Mass concentration",
  "x-expanded": null
  },
  "dosageRateMass": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Fixed Mass",
  "x-expanded": null
  },
  "dosageRateVolume": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Volume",
  "x-expanded": null
  },
  "dosageRateMassSurface": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Mass per body surface",
  "x-expanded": null
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "drug"
  ],
  "title": "SystemicTherapyMedication",
  "type": "object"
  },
  "SystemicTherapySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who received the systemic therapy",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "period": {
  "$ref": "#/components/schemas/PeriodSchema",
  "description": "Clinically-relevant period during which the therapy was administered to the patient.",
  "examples": [],
  "title": "Treatment period",
  "x-expanded": null
  },
  "cycles": {
  "description": "The total number of treatment cycles during the treatment period.",
  "examples": [],
  "title": "Cycles",
  "type": "integer",
  "x-expanded": null
  },
  "intent": {
  "$ref": "#/components/schemas/SystemicTherapyIntentChoices",
  "description": "Treatment intent of the system therapy",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "role": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates the role of this therapy in the overall treatment strategy.",
  "examples": [],
  "title": "Treatment Role",
  "x-expanded": null,
  "x-terminology": "TreatmentCategory"
  },
  "terminationReason": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Explanation for the premature or planned termination of the systemic therapy",
  "examples": [],
  "title": "Termination reason",
  "x-expanded": null,
  "x-terminology": "TreatmentTerminationReason"
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the systemic therapy",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "medications": {
  "description": "Medications administered during the systemic therapy",
  "items": {
  "$ref": "#/components/schemas/SystemicTherapyMedicationSchema"
  },
  "title": "Medications",
  "type": "array"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "period",
  "cycles",
  "intent",
  "medications"
  ],
  "title": "SystemicTherapy",
  "type": "object"
  },
  "SystemicTherapyMedicationCreateSchema": {
  "properties": {
  "drug": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Antineoplastic drug/medication administered to the patient",
  "examples": [],
  "title": "Antineoplastic Drug",
  "x-expanded": null,
  "x-terminology": "AntineoplasticAgent"
  },
  "route": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Drug administration route",
  "examples": [],
  "title": "Route",
  "x-expanded": null,
  "x-terminology": "DosageRoute"
  },
  "usedOfflabel": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a medication was used off-label at the time of administration",
  "examples": [],
  "title": "Off-label use",
  "x-expanded": null
  },
  "withinSoc": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.",
  "examples": [],
  "title": "Within SOC",
  "x-expanded": null
  },
  "dosageMassConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Mass concentration",
  "x-expanded": null
  },
  "dosageMass": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Fixed Mass",
  "x-expanded": null
  },
  "dosageVolume": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Volume",
  "x-expanded": null
  },
  "dosageMassSurface": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage - Mass per body surface",
  "x-expanded": null
  },
  "dosageRateMassConcentration": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Mass concentration",
  "x-expanded": null
  },
  "dosageRateMass": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Fixed Mass",
  "x-expanded": null
  },
  "dosageRateVolume": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Volume",
  "x-expanded": null
  },
  "dosageRateMassSurface": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)",
  "examples": [],
  "title": "Dosage rate - Mass per body surface",
  "x-expanded": null
  }
  },
  "required": [
  "drug"
  ],
  "title": "SystemicTherapyMedicationCreate",
  "type": "object"
  },
  "SurgeryCreate": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who received the surgical procedure",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date of the surgical procedure.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "procedure": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The specific surgical procedure that was performed",
  "examples": [],
  "title": "Surgical procedure",
  "x-expanded": null,
  "x-terminology": "SurgicalProcedure"
  },
  "intent": {
  "$ref": "#/components/schemas/SurgeryIntentChoices",
  "description": "Therapeutic intent of the surgery",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "bodysite": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "bodysiteQualifier": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "General qualifier for the anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location qualifier",
  "x-expanded": null,
  "x-terminology": "BodyLocationQualifier"
  },
  "bodysiteLaterality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Laterality for the anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location laterality",
  "x-expanded": null,
  "x-terminology": "LateralityQualifier"
  },
  "outcome": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The outcome of the surgery",
  "examples": [],
  "title": "Outcome",
  "x-expanded": null,
  "x-terminology": "ProcedureOutcome"
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the surgery",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date",
  "procedure",
  "intent"
  ],
  "title": "SurgeryCreate",
  "type": "object"
  },
  "SurgeryIntentChoices": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  },
  "SurgeryFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "procedure": {
  "description": "Surgical procedure - Filter for a matching concept code",
  "title": "Procedure",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "procedure.not": {
  "description": "Surgical procedure - Filter for a mismatching concept code",
  "title": "Procedure.Not",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "procedure.anyOf": {
  "description": "Surgical procedure - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Procedure.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "procedure.not.anyOf": {
  "description": "Surgical procedure - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Procedure.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "procedure.descendantsOf": {
  "description": "Surgical procedure - Filter for all child concepts of a given concepts code",
  "title": "Procedure.Descendantsof",
  "type": "string",
  "x-orm-lookup": "procedure__None"
  },
  "intent": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.not": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.anyOf": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "SurgeryIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "bodysite.not.exists": {
  "description": "Anatomical location - Filter for entries without a value",
  "title": "Bodysite.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite__isnull"
  },
  "bodysite.exists": {
  "description": "Anatomical location - Filter for entries with a value",
  "title": "Bodysite.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite__isnull"
  },
  "bodysite": {
  "description": "Anatomical location - Filter for a matching concept code",
  "title": "Bodysite",
  "type": "string",
  "x-orm-lookup": "bodysite__code__iexact"
  },
  "bodysite.not": {
  "description": "Anatomical location - Filter for a mismatching concept code",
  "title": "Bodysite.Not",
  "type": "string",
  "x-orm-lookup": "bodysite__code__iexact"
  },
  "bodysite.anyOf": {
  "description": "Anatomical location - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysite.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite__code__in"
  },
  "bodysite.not.anyOf": {
  "description": "Anatomical location - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysite.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite__code__in"
  },
  "bodysite.descendantsOf": {
  "description": "Anatomical location - Filter for all child concepts of a given concepts code",
  "title": "Bodysite.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite__None"
  },
  "bodysiteQualifier.not.exists": {
  "description": "Anatomical location qualifier - Filter for entries without a value",
  "title": "Bodysitequalifier.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_qualifier__isnull"
  },
  "bodysiteQualifier.exists": {
  "description": "Anatomical location qualifier - Filter for entries with a value",
  "title": "Bodysitequalifier.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_qualifier__isnull"
  },
  "bodysiteQualifier": {
  "description": "Anatomical location qualifier - Filter for a matching concept code",
  "title": "Bodysitequalifier",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__code__iexact"
  },
  "bodysiteQualifier.not": {
  "description": "Anatomical location qualifier - Filter for a mismatching concept code",
  "title": "Bodysitequalifier.Not",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__code__iexact"
  },
  "bodysiteQualifier.anyOf": {
  "description": "Anatomical location qualifier - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitequalifier.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_qualifier__code__in"
  },
  "bodysiteQualifier.not.anyOf": {
  "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitequalifier.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_qualifier__code__in"
  },
  "bodysiteQualifier.descendantsOf": {
  "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code",
  "title": "Bodysitequalifier.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite_qualifier__None"
  },
  "bodysiteLaterality.not.exists": {
  "description": "Anatomical location laterality - Filter for entries without a value",
  "title": "Bodysitelaterality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_laterality__isnull"
  },
  "bodysiteLaterality.exists": {
  "description": "Anatomical location laterality - Filter for entries with a value",
  "title": "Bodysitelaterality.Exists",
  "type": "boolean",
  "x-orm-lookup": "bodysite_laterality__isnull"
  },
  "bodysiteLaterality": {
  "description": "Anatomical location laterality - Filter for a matching concept code",
  "title": "Bodysitelaterality",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__code__iexact"
  },
  "bodysiteLaterality.not": {
  "description": "Anatomical location laterality - Filter for a mismatching concept code",
  "title": "Bodysitelaterality.Not",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__code__iexact"
  },
  "bodysiteLaterality.anyOf": {
  "description": "Anatomical location laterality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitelaterality.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_laterality__code__in"
  },
  "bodysiteLaterality.not.anyOf": {
  "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Bodysitelaterality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "bodysite_laterality__code__in"
  },
  "bodysiteLaterality.descendantsOf": {
  "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code",
  "title": "Bodysitelaterality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "bodysite_laterality__None"
  },
  "outcome.not.exists": {
  "description": "Outcome - Filter for entries without a value",
  "title": "Outcome.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "outcome__isnull"
  },
  "outcome.exists": {
  "description": "Outcome - Filter for entries with a value",
  "title": "Outcome.Exists",
  "type": "boolean",
  "x-orm-lookup": "outcome__isnull"
  },
  "outcome": {
  "description": "Outcome - Filter for a matching concept code",
  "title": "Outcome",
  "type": "string",
  "x-orm-lookup": "outcome__code__iexact"
  },
  "outcome.not": {
  "description": "Outcome - Filter for a mismatching concept code",
  "title": "Outcome.Not",
  "type": "string",
  "x-orm-lookup": "outcome__code__iexact"
  },
  "outcome.anyOf": {
  "description": "Outcome - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Outcome.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__code__in"
  },
  "outcome.not.anyOf": {
  "description": "Outcome - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Outcome.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__code__in"
  },
  "outcome.descendantsOf": {
  "description": "Outcome - Filter for all child concepts of a given concepts code",
  "title": "Outcome.Descendantsof",
  "type": "string",
  "x-orm-lookup": "outcome__None"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "targetedEntitiesIds": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.not": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.not.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.not.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "targetedEntitiesIds.not.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  }
  },
  "title": "SurgeryFilters",
  "type": "object"
  },
  "Paginated_Surgery_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/Surgery"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[Surgery]",
  "type": "object"
  },
  "Surgery": {
  "properties": {
  "description": {
  "description": "Human-readable description of the surgery",
  "title": "Description",
  "type": "string"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who received the surgical procedure",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date of the surgical procedure.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "procedure": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The specific surgical procedure that was performed",
  "examples": [],
  "title": "Surgical procedure",
  "x-expanded": null,
  "x-terminology": "SurgicalProcedure"
  },
  "intent": {
  "$ref": "#/components/schemas/SurgeryIntentChoices",
  "description": "Therapeutic intent of the surgery",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "bodysite": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "bodysiteQualifier": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "General qualifier for the anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location qualifier",
  "x-expanded": null,
  "x-terminology": "BodyLocationQualifier"
  },
  "bodysiteLaterality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Laterality for the anatomical location of the surgery",
  "examples": [],
  "title": "Anatomical location laterality",
  "x-expanded": null,
  "x-terminology": "LateralityQualifier"
  },
  "outcome": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The outcome of the surgery",
  "examples": [],
  "title": "Outcome",
  "x-expanded": null,
  "x-terminology": "ProcedureOutcome"
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the surgery",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "description",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date",
  "procedure",
  "intent"
  ],
  "title": "Surgery",
  "type": "object"
  },
  "RadiotherapyCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who received the radiotherapy",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "period": {
  "$ref": "#/components/schemas/PeriodSchema",
  "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.",
  "examples": [],
  "title": "Treatment period",
  "x-expanded": null
  },
  "sessions": {
  "description": "The total number of radiotherapy sessions over the treatment period.",
  "examples": [],
  "title": "Total sessions",
  "type": "integer",
  "x-expanded": null
  },
  "intent": {
  "$ref": "#/components/schemas/RadiotherapyIntentChoices",
  "description": "Treatment intent of the system therapy",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "terminationReason": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Explanation for the premature or planned termination of the radiotherapy",
  "examples": [],
  "title": "Termination reason",
  "x-expanded": null,
  "x-terminology": "TreatmentTerminationReason"
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the radiotherapy",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "period",
  "sessions",
  "intent"
  ],
  "title": "RadiotherapyCreate",
  "type": "object"
  },
  "RadiotherapyIntentChoices": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  },
  "RadiotherapyFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "period.overlaps": {
  "description": "Treatment period - Filter for entries overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "period.not.overlaps": {
  "description": "Treatment period - Filter for entries not overlapping with the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Overlaps",
  "type": "array",
  "x-orm-lookup": "period__overlap"
  },
  "period.contains": {
  "description": "Treatment period - Filter for entries containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "period.not.contains": {
  "description": "Treatment period - Filter for entries not containing the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Contains",
  "type": "array",
  "x-orm-lookup": "period__contains"
  },
  "period.containedBy": {
  "description": "Treatment period - Filter for entries whose period are contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "period.not.containedBy": {
  "description": "Treatment period - Filter for entries whose period are not contined by the time period",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Period.Not.Containedby",
  "type": "array",
  "x-orm-lookup": "period__contained_by"
  },
  "sessions.lessThan": {
  "description": "Total sessions - Filter for entries with values less than the specified value",
  "title": "Sessions.Lessthan",
  "type": "integer",
  "x-orm-lookup": "sessions__lt"
  },
  "sessions.lessThanOrEqual": {
  "description": "Total sessions - Filter for entries with values less than or equal to the specified value",
  "title": "Sessions.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "sessions__lte"
  },
  "sessions.greaterThan": {
  "description": "Total sessions - Filter for entries with values greater than the specified value",
  "title": "Sessions.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "sessions__gt"
  },
  "sessions.greaterThanOrEqual": {
  "description": "Total sessions - Filter for entries with values greater than or equal to the specified value",
  "title": "Sessions.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "sessions__gte"
  },
  "sessions.equal": {
  "description": "Total sessions - Filter for entries with values exactly equal to the specified value",
  "title": "Sessions.Equal",
  "type": "integer",
  "x-orm-lookup": "sessions__exact"
  },
  "sessions.not.equal": {
  "description": "Total sessions - Filter for entries with values not equal to the specified value",
  "title": "Sessions.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "sessions__exact"
  },
  "sessions.between": {
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Sessions.Between",
  "type": "array",
  "x-orm-lookup": "sessions__range"
  },
  "sessions.not.between": {
  "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Sessions.Not.Between",
  "type": "array",
  "x-orm-lookup": "sessions__range"
  },
  "intent": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.not": {
  "allOf": [
  {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  }
  ],
  "description": "Intent - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "intent__exact"
  },
  "intent.anyOf": {
  "description": "Intent - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "curative",
  "palliative"
  ],
  "title": "RadiotherapyIntentChoices",
  "type": "string"
  },
  "title": "Intent.Anyof",
  "type": "array",
  "x-orm-lookup": "intent__in"
  },
  "terminationReason.not.exists": {
  "description": "Termination reason - Filter for entries without a value",
  "title": "Terminationreason.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "terminationReason.exists": {
  "description": "Termination reason - Filter for entries with a value",
  "title": "Terminationreason.Exists",
  "type": "boolean",
  "x-orm-lookup": "termination_reason__isnull"
  },
  "terminationReason": {
  "description": "Termination reason - Filter for a matching concept code",
  "title": "Terminationreason",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "terminationReason.not": {
  "description": "Termination reason - Filter for a mismatching concept code",
  "title": "Terminationreason.Not",
  "type": "string",
  "x-orm-lookup": "termination_reason__code__iexact"
  },
  "terminationReason.anyOf": {
  "description": "Termination reason - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "terminationReason.not.anyOf": {
  "description": "Termination reason - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Terminationreason.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "termination_reason__code__in"
  },
  "terminationReason.descendantsOf": {
  "description": "Termination reason - Filter for all child concepts of a given concepts code",
  "title": "Terminationreason.Descendantsof",
  "type": "string",
  "x-orm-lookup": "termination_reason__None"
  },
  "targetedEntitiesIds": {
  "description": "Targeted neoplastic entities - Filter for full text matches",
  "title": "Targetedentitiesids",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.not": {
  "description": "Targeted neoplastic entities - Filter for full text mismatches",
  "title": "Targetedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iexact"
  },
  "targetedEntitiesIds.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text matches",
  "title": "Targetedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.not.contains": {
  "description": "Targeted neoplastic entities - Filter for partial text mismatches",
  "title": "Targetedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__icontains"
  },
  "targetedEntitiesIds.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries starting with the text",
  "title": "Targetedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.not.beginsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
  "title": "Targetedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__istartswith"
  },
  "targetedEntitiesIds.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries ending with the text",
  "title": "Targetedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "targetedEntitiesIds.not.endsWith": {
  "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
  "title": "Targetedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "targeted_entities_ids__iendswith"
  },
  "dosages.id": {
  "description": "Id - Filter for full text matches",
  "title": "Dosages.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "dosages.id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Dosages.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "dosages.id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Dosages.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "dosages.id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Dosages.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "dosages.id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Dosages.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "dosages.id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Dosages.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "dosages.id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Dosages.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "dosages.id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Dosages.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "dosages.createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "dosages.createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dosages.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "dosages.createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "dosages.createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "dosages.createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dosages.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "dosages.createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dosages.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "dosages.createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "dosages.createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "dosages.updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "dosages.updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "dosages.updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "dosages.updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "dosages.updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "dosages.updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dosages.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "dosages.updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "dosages.updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dosages.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "dosages.createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Dosages.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "dosages.createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Dosages.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "dosages.updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Dosages.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "dosages.updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "dosages.updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Dosages.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "dosages.updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "dosages.updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "dosages.updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "dosages.updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "dosages.updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "dosages.updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Dosages.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "dosages.updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Dosages.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "dosages.updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "dosages.updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "dosages.updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "dosages.updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "dosages.updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "dosages.updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "dosages.updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "dosages.updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "dosages.updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Dosages.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "dosages.updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Dosages.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "dosages.updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "dosages.updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "dosages.updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "dosages.updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "dosages.updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "dosages.updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "dosages.updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "dosages.updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "dosages.description": {
  "description": "None - Filter for full text matches",
  "title": "Dosages.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.description.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Dosages.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "dosages.description.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Dosages.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.description.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Dosages.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "dosages.description.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Dosages.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.description.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Dosages.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "dosages.description.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Dosages.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.description.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Dosages.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "dosages.fractions.not.exists": {
  "description": "Total fractions - Filter for entries without a value",
  "title": "Dosages.Fractions.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "fractions__isnull"
  },
  "dosages.fractions.exists": {
  "description": "Total fractions - Filter for entries with a value",
  "title": "Dosages.Fractions.Exists",
  "type": "boolean",
  "x-orm-lookup": "fractions__isnull"
  },
  "dosages.fractions.lessThan": {
  "description": "Total fractions - Filter for entries with values less than the specified value",
  "title": "Dosages.Fractions.Lessthan",
  "type": "integer",
  "x-orm-lookup": "fractions__lt"
  },
  "dosages.fractions.lessThanOrEqual": {
  "description": "Total fractions - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Fractions.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "fractions__lte"
  },
  "dosages.fractions.greaterThan": {
  "description": "Total fractions - Filter for entries with values greater than the specified value",
  "title": "Dosages.Fractions.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "fractions__gt"
  },
  "dosages.fractions.greaterThanOrEqual": {
  "description": "Total fractions - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Fractions.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "fractions__gte"
  },
  "dosages.fractions.equal": {
  "description": "Total fractions - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Fractions.Equal",
  "type": "integer",
  "x-orm-lookup": "fractions__exact"
  },
  "dosages.fractions.not.equal": {
  "description": "Total fractions - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Fractions.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "fractions__exact"
  },
  "dosages.fractions.between": {
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Fractions.Between",
  "type": "array",
  "x-orm-lookup": "fractions__range"
  },
  "dosages.fractions.not.between": {
  "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Dosages.Fractions.Not.Between",
  "type": "array",
  "x-orm-lookup": "fractions__range"
  },
  "dosages.dose.not.exists": {
  "description": "Total radiation dose - Filter for entries without a value",
  "title": "Dosages.Dose.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dose__isnull"
  },
  "dosages.dose.exists": {
  "description": "Total radiation dose - Filter for entries with a value",
  "title": "Dosages.Dose.Exists",
  "type": "boolean",
  "x-orm-lookup": "dose__isnull"
  },
  "dosages.dose.lessThan": {
  "description": "Total radiation dose - Filter for entries with values less than the specified value",
  "title": "Dosages.Dose.Lessthan",
  "type": "number",
  "x-orm-lookup": "dose__lt"
  },
  "dosages.dose.lessThanOrEqual": {
  "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value",
  "title": "Dosages.Dose.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "dose__lte"
  },
  "dosages.dose.greaterThan": {
  "description": "Total radiation dose - Filter for entries with values greater than the specified value",
  "title": "Dosages.Dose.Greaterthan",
  "type": "number",
  "x-orm-lookup": "dose__gt"
  },
  "dosages.dose.greaterThanOrEqual": {
  "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value",
  "title": "Dosages.Dose.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "dose__gte"
  },
  "dosages.dose.equal": {
  "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value",
  "title": "Dosages.Dose.Equal",
  "type": "number",
  "x-orm-lookup": "dose__exact"
  },
  "dosages.dose.not.equal": {
  "description": "Total radiation dose - Filter for entries with values not equal to the specified value",
  "title": "Dosages.Dose.Not.Equal",
  "type": "number",
  "x-orm-lookup": "dose__exact"
  },
  "dosages.dose.between": {
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Dosages.Dose.Between",
  "type": "array",
  "x-orm-lookup": "dose__range"
  },
  "dosages.dose.not.between": {
  "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Dosages.Dose.Not.Between",
  "type": "array",
  "x-orm-lookup": "dose__range"
  },
  "dosages.irradiatedVolume": {
  "description": "Irradiated volume - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolume",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__code__iexact"
  },
  "dosages.irradiatedVolume.not": {
  "description": "Irradiated volume - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolume.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__code__iexact"
  },
  "dosages.irradiatedVolume.anyOf": {
  "description": "Irradiated volume - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolume.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume__code__in"
  },
  "dosages.irradiatedVolume.not.anyOf": {
  "description": "Irradiated volume - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolume.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume__code__in"
  },
  "dosages.irradiatedVolume.descendantsOf": {
  "description": "Irradiated volume - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolume.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume__None"
  },
  "dosages.irradiatedVolumeMorphology.not.exists": {
  "description": "Irradiated volume morphology - Filter for entries without a value",
  "title": "Dosages.Irradiatedvolumemorphology.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_morphology__isnull"
  },
  "dosages.irradiatedVolumeMorphology.exists": {
  "description": "Irradiated volume morphology - Filter for entries with a value",
  "title": "Dosages.Irradiatedvolumemorphology.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_morphology__isnull"
  },
  "dosages.irradiatedVolumeMorphology": {
  "description": "Irradiated volume morphology - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolumemorphology",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__code__iexact"
  },
  "dosages.irradiatedVolumeMorphology.not": {
  "description": "Irradiated volume morphology - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolumemorphology.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__code__iexact"
  },
  "dosages.irradiatedVolumeMorphology.anyOf": {
  "description": "Irradiated volume morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumemorphology.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_morphology__code__in"
  },
  "dosages.irradiatedVolumeMorphology.not.anyOf": {
  "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_morphology__code__in"
  },
  "dosages.irradiatedVolumeMorphology.descendantsOf": {
  "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolumemorphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_morphology__None"
  },
  "dosages.irradiatedVolumeQualifier.not.exists": {
  "description": "Irradiated volume qualifier - Filter for entries without a value",
  "title": "Dosages.Irradiatedvolumequalifier.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_qualifier__isnull"
  },
  "dosages.irradiatedVolumeQualifier.exists": {
  "description": "Irradiated volume qualifier - Filter for entries with a value",
  "title": "Dosages.Irradiatedvolumequalifier.Exists",
  "type": "boolean",
  "x-orm-lookup": "irradiated_volume_qualifier__isnull"
  },
  "dosages.irradiatedVolumeQualifier": {
  "description": "Irradiated volume qualifier - Filter for a matching concept code",
  "title": "Dosages.Irradiatedvolumequalifier",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__code__iexact"
  },
  "dosages.irradiatedVolumeQualifier.not": {
  "description": "Irradiated volume qualifier - Filter for a mismatching concept code",
  "title": "Dosages.Irradiatedvolumequalifier.Not",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__code__iexact"
  },
  "dosages.irradiatedVolumeQualifier.anyOf": {
  "description": "Irradiated volume qualifier - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumequalifier.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_qualifier__code__in"
  },
  "dosages.irradiatedVolumeQualifier.not.anyOf": {
  "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "irradiated_volume_qualifier__code__in"
  },
  "dosages.irradiatedVolumeQualifier.descendantsOf": {
  "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code",
  "title": "Dosages.Irradiatedvolumequalifier.Descendantsof",
  "type": "string",
  "x-orm-lookup": "irradiated_volume_qualifier__None"
  },
  "settings.id": {
  "description": "Id - Filter for full text matches",
  "title": "Settings.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "settings.id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Settings.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "settings.id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Settings.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "settings.id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Settings.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "settings.id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Settings.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "settings.id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Settings.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "settings.id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Settings.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "settings.id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Settings.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "settings.createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Settings.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "settings.createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Settings.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "settings.createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Settings.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "settings.createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Settings.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "settings.createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Settings.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "settings.createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Settings.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "settings.createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "settings.createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "settings.updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "settings.updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Settings.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "settings.updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "settings.updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "settings.updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Settings.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "settings.updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Settings.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "settings.updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "settings.updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Settings.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "settings.createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Settings.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "settings.createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Settings.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "settings.updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Settings.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "settings.updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Settings.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "settings.updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Settings.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "settings.updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Settings.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "settings.updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Settings.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "settings.updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Settings.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "settings.updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Settings.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "settings.updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Settings.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "settings.updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Settings.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "settings.updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Settings.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "settings.updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "settings.updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "settings.updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "settings.updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "settings.updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "settings.updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "settings.updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "settings.updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "settings.updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Settings.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "settings.updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Settings.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "settings.updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "settings.updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "settings.updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "settings.updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "settings.updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "settings.updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "settings.updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "settings.updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "settings.description": {
  "description": "None - Filter for full text matches",
  "title": "Settings.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.description.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Settings.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "settings.description.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Settings.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.description.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Settings.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "settings.description.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Settings.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.description.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Settings.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "settings.description.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Settings.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.description.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Settings.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "settings.modality": {
  "description": "Modality - Filter for a matching concept code",
  "title": "Settings.Modality",
  "type": "string",
  "x-orm-lookup": "modality__code__iexact"
  },
  "settings.modality.not": {
  "description": "Modality - Filter for a mismatching concept code",
  "title": "Settings.Modality.Not",
  "type": "string",
  "x-orm-lookup": "modality__code__iexact"
  },
  "settings.modality.anyOf": {
  "description": "Modality - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Modality.Anyof",
  "type": "array",
  "x-orm-lookup": "modality__code__in"
  },
  "settings.modality.not.anyOf": {
  "description": "Modality - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Modality.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "modality__code__in"
  },
  "settings.modality.descendantsOf": {
  "description": "Modality - Filter for all child concepts of a given concepts code",
  "title": "Settings.Modality.Descendantsof",
  "type": "string",
  "x-orm-lookup": "modality__None"
  },
  "settings.technique": {
  "description": "Technique - Filter for a matching concept code",
  "title": "Settings.Technique",
  "type": "string",
  "x-orm-lookup": "technique__code__iexact"
  },
  "settings.technique.not": {
  "description": "Technique - Filter for a mismatching concept code",
  "title": "Settings.Technique.Not",
  "type": "string",
  "x-orm-lookup": "technique__code__iexact"
  },
  "settings.technique.anyOf": {
  "description": "Technique - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Technique.Anyof",
  "type": "array",
  "x-orm-lookup": "technique__code__in"
  },
  "settings.technique.not.anyOf": {
  "description": "Technique - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Settings.Technique.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "technique__code__in"
  },
  "settings.technique.descendantsOf": {
  "description": "Technique - Filter for all child concepts of a given concepts code",
  "title": "Settings.Technique.Descendantsof",
  "type": "string",
  "x-orm-lookup": "technique__None"
  }
  },
  "title": "RadiotherapyFilters",
  "type": "object"
  },
  "Paginated_RadiotherapySchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/RadiotherapySchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[RadiotherapySchema]",
  "type": "object"
  },
  "RadiotherapyDosageSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "fractions": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "The total number of radiotherapy fractions delivered over the treatment period.",
  "examples": [],
  "title": "Total fractions",
  "x-expanded": null
  },
  "dose": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Total radiation dose delivered over the full radiotherapy course",
  "examples": [],
  "title": "Total radiation dose",
  "x-expanded": null
  },
  "irradiatedVolume": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTreatmentLocation"
  },
  "irradiatedVolumeMorphology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphology of the anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume morphology",
  "x-expanded": null,
  "x-terminology": "RadiotherapyVolumeType"
  },
  "irradiatedVolumeQualifier": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "General qualifier for the anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume qualifier",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTreatmentLocationQualifier"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "irradiatedVolume"
  ],
  "title": "RadiotherapyDosage",
  "type": "object"
  },
  "RadiotherapySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who received the radiotherapy",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "period": {
  "$ref": "#/components/schemas/PeriodSchema",
  "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.",
  "examples": [],
  "title": "Treatment period",
  "x-expanded": null
  },
  "sessions": {
  "description": "The total number of radiotherapy sessions over the treatment period.",
  "examples": [],
  "title": "Total sessions",
  "type": "integer",
  "x-expanded": null
  },
  "intent": {
  "$ref": "#/components/schemas/RadiotherapyIntentChoices",
  "description": "Treatment intent of the system therapy",
  "examples": [],
  "maxLength": 30,
  "title": "Intent",
  "x-expanded": null
  },
  "terminationReason": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Explanation for the premature or planned termination of the radiotherapy",
  "examples": [],
  "title": "Termination reason",
  "x-expanded": null,
  "x-terminology": "TreatmentTerminationReason"
  },
  "targetedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were targeted by the radiotherapy",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Targeted neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "dosages": {
  "description": "Radiation doses administered during the radiotherapy",
  "items": {
  "$ref": "#/components/schemas/RadiotherapyDosageSchema"
  },
  "title": "Dosages",
  "type": "array"
  },
  "settings": {
  "description": "Settings of the radiotherapy irradiation procedure",
  "items": {
  "$ref": "#/components/schemas/RadiotherapySettingSchema"
  },
  "title": "Settings",
  "type": "array"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "period",
  "sessions",
  "intent",
  "dosages",
  "settings"
  ],
  "title": "Radiotherapy",
  "type": "object"
  },
  "RadiotherapySettingSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "modality": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Modality of external beam or brachytherapy radiation procedures",
  "examples": [],
  "title": "Modality",
  "x-expanded": null,
  "x-terminology": "RadiotherapyModality"
  },
  "technique": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Technique of external beam or brachytherapy radiation procedures",
  "examples": [],
  "title": "Technique",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTechnique"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "modality",
  "technique"
  ],
  "title": "RadiotherapySetting",
  "type": "object"
  },
  "RadiotherapyDosageCreateSchema": {
  "properties": {
  "fractions": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "The total number of radiotherapy fractions delivered over the treatment period.",
  "examples": [],
  "title": "Total fractions",
  "x-expanded": null
  },
  "dose": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Total radiation dose delivered over the full radiotherapy course",
  "examples": [],
  "title": "Total radiation dose",
  "x-expanded": null
  },
  "irradiatedVolume": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTreatmentLocation"
  },
  "irradiatedVolumeMorphology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphology of the anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume morphology",
  "x-expanded": null,
  "x-terminology": "RadiotherapyVolumeType"
  },
  "irradiatedVolumeQualifier": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "General qualifier for the anatomical location of the irradiated volume",
  "examples": [],
  "title": "Irradiated volume qualifier",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTreatmentLocationQualifier"
  }
  },
  "required": [
  "irradiatedVolume"
  ],
  "title": "RadiotherapyDosageCreate",
  "type": "object"
  },
  "RadiotherapySettingCreateSchema": {
  "properties": {
  "modality": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Modality of external beam or brachytherapy radiation procedures",
  "examples": [],
  "title": "Modality",
  "x-expanded": null,
  "x-terminology": "RadiotherapyModality"
  },
  "technique": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Technique of external beam or brachytherapy radiation procedures",
  "examples": [],
  "title": "Technique",
  "x-expanded": null,
  "x-terminology": "RadiotherapyTechnique"
  }
  },
  "required": [
  "modality",
  "technique"
  ],
  "title": "RadiotherapySettingCreate",
  "type": "object"
  },
  "AdverseEventCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who had the adverse event being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the adverse event ocurred.",
  "examples": [],
  "format": "date",
  "title": "Event date",
  "type": "string",
  "x-expanded": null
  },
  "event": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Classification of the adverse event using CTCAE criteria",
  "examples": [],
  "title": "Adverse event",
  "x-expanded": null,
  "x-terminology": "AdverseEventTerm"
  },
  "grade": {
  "description": "The grade associated with the severity of an adverse event, using CTCAE criteria.",
  "examples": [],
  "title": "Grade",
  "type": "integer",
  "x-expanded": null
  },
  "outcome": {
  "$ref": "#/components/schemas/AdverseEventOutcomeChoices",
  "description": "The date when the adverse event ended or returned to baseline.",
  "examples": [],
  "maxLength": 50,
  "title": "Date resolved",
  "x-expanded": null
  },
  "dateResolved": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The date when the adverse event ended or returned to baseline.",
  "examples": [],
  "title": "Date resolved",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date",
  "event",
  "grade",
  "outcome"
  ],
  "title": "AdverseEventCreate",
  "type": "object"
  },
  "AdverseEventOutcomeChoices": {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  },
  "AdverseEventFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Event date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Event date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Event date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Event date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Event date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Event date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Event date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Event date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "event": {
  "description": "Adverse event - Filter for a matching concept code",
  "title": "Event",
  "type": "string",
  "x-orm-lookup": "event__code__iexact"
  },
  "event.not": {
  "description": "Adverse event - Filter for a mismatching concept code",
  "title": "Event.Not",
  "type": "string",
  "x-orm-lookup": "event__code__iexact"
  },
  "event.anyOf": {
  "description": "Adverse event - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Event.Anyof",
  "type": "array",
  "x-orm-lookup": "event__code__in"
  },
  "event.not.anyOf": {
  "description": "Adverse event - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Event.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "event__code__in"
  },
  "event.descendantsOf": {
  "description": "Adverse event - Filter for all child concepts of a given concepts code",
  "title": "Event.Descendantsof",
  "type": "string",
  "x-orm-lookup": "event__None"
  },
  "grade.lessThan": {
  "description": "Grade - Filter for entries with values less than the specified value",
  "title": "Grade.Lessthan",
  "type": "integer",
  "x-orm-lookup": "grade__lt"
  },
  "grade.lessThanOrEqual": {
  "description": "Grade - Filter for entries with values less than or equal to the specified value",
  "title": "Grade.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "grade__lte"
  },
  "grade.greaterThan": {
  "description": "Grade - Filter for entries with values greater than the specified value",
  "title": "Grade.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "grade__gt"
  },
  "grade.greaterThanOrEqual": {
  "description": "Grade - Filter for entries with values greater than or equal to the specified value",
  "title": "Grade.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "grade__gte"
  },
  "grade.equal": {
  "description": "Grade - Filter for entries with values exactly equal to the specified value",
  "title": "Grade.Equal",
  "type": "integer",
  "x-orm-lookup": "grade__exact"
  },
  "grade.not.equal": {
  "description": "Grade - Filter for entries with values not equal to the specified value",
  "title": "Grade.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "grade__exact"
  },
  "grade.between": {
  "description": "Grade - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Grade.Between",
  "type": "array",
  "x-orm-lookup": "grade__range"
  },
  "grade.not.between": {
  "description": "Grade - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Grade.Not.Between",
  "type": "array",
  "x-orm-lookup": "grade__range"
  },
  "outcome": {
  "allOf": [
  {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  }
  ],
  "description": "Date resolved - ('Filter for single value choice',)",
  "x-orm-lookup": "outcome__exact"
  },
  "outcome.not": {
  "allOf": [
  {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  }
  ],
  "description": "Date resolved - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "outcome__exact"
  },
  "outcome.anyOf": {
  "description": "Date resolved - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "resolved",
  "resolved-with-sequelae",
  "recovering",
  "ongoing",
  "fatal",
  "unknown"
  ],
  "title": "AdverseEventOutcomeChoices",
  "type": "string"
  },
  "title": "Outcome.Anyof",
  "type": "array",
  "x-orm-lookup": "outcome__in"
  },
  "dateResolved.not.exists": {
  "description": "Date resolved - Filter for entries without a value",
  "title": "Dateresolved.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_resolved__isnull"
  },
  "dateResolved.exists": {
  "description": "Date resolved - Filter for entries with a value",
  "title": "Dateresolved.Exists",
  "type": "boolean",
  "x-orm-lookup": "date_resolved__isnull"
  },
  "dateResolved.before": {
  "description": "Date resolved - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Dateresolved.Before",
  "type": "string",
  "x-orm-lookup": "date_resolved__lt"
  },
  "dateResolved.after": {
  "description": "Date resolved - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Dateresolved.After",
  "type": "string",
  "x-orm-lookup": "date_resolved__gt"
  },
  "dateResolved.onOrBefore": {
  "description": "Date resolved - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Dateresolved.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date_resolved__lte"
  },
  "dateResolved.onOrAfter": {
  "description": "Date resolved - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Dateresolved.Onorafter",
  "type": "string",
  "x-orm-lookup": "date_resolved__gte"
  },
  "dateResolved.on": {
  "description": "Date resolved - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Dateresolved.On",
  "type": "string",
  "x-orm-lookup": "date_resolved__exact"
  },
  "dateResolved.not.on": {
  "description": "Date resolved - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Dateresolved.Not.On",
  "type": "string",
  "x-orm-lookup": "date_resolved__exact"
  },
  "dateResolved.between": {
  "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateresolved.Between",
  "type": "array",
  "x-orm-lookup": "date_resolved__range"
  },
  "dateResolved.not.between": {
  "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Dateresolved.Not.Between",
  "type": "array",
  "x-orm-lookup": "date_resolved__range"
  },
  "suspectedCauses.id": {
  "description": "Id - Filter for full text matches",
  "title": "Suspectedcauses.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "suspectedCauses.id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Suspectedcauses.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "suspectedCauses.id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Suspectedcauses.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "suspectedCauses.id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Suspectedcauses.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "suspectedCauses.id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Suspectedcauses.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "suspectedCauses.id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "suspectedCauses.id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Suspectedcauses.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "suspectedCauses.id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "suspectedCauses.createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "suspectedCauses.createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "suspectedCauses.createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "suspectedCauses.createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "suspectedCauses.createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "suspectedCauses.createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "suspectedCauses.createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "suspectedCauses.createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "suspectedCauses.updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "suspectedCauses.updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "suspectedCauses.updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "suspectedCauses.updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "suspectedCauses.updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "suspectedCauses.updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Suspectedcauses.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "suspectedCauses.updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "suspectedCauses.updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Suspectedcauses.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "suspectedCauses.createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Suspectedcauses.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "suspectedCauses.createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Suspectedcauses.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "suspectedCauses.updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "suspectedCauses.updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "suspectedCauses.updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "suspectedCauses.updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "suspectedCauses.updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "suspectedCauses.updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Suspectedcauses.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "suspectedCauses.updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Suspectedcauses.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "suspectedCauses.updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Suspectedcauses.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "suspectedCauses.updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "suspectedCauses.updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Suspectedcauses.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "suspectedCauses.updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "suspectedCauses.updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "suspectedCauses.updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "suspectedCauses.updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "suspectedCauses.updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "suspectedCauses.updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "suspectedCauses.updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "suspectedCauses.updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "suspectedCauses.updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "suspectedCauses.updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Suspectedcauses.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "suspectedCauses.updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "suspectedCauses.updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "suspectedCauses.updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "suspectedCauses.updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "suspectedCauses.updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "suspectedCauses.updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "suspectedCauses.updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "suspectedCauses.updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "suspectedCauses.description": {
  "description": "None - Filter for full text matches",
  "title": "Suspectedcauses.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.description.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Suspectedcauses.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "suspectedCauses.description.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Suspectedcauses.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.description.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Suspectedcauses.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "suspectedCauses.description.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Suspectedcauses.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.description.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "suspectedCauses.description.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Suspectedcauses.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.description.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "suspectedCauses.systemicTherapyId.not.exists": {
  "description": "Suspected systemic therapy - Filter for entries without a value",
  "title": "Suspectedcauses.Systemictherapyid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "systemic_therapy_id__isnull"
  },
  "suspectedCauses.systemicTherapyId.exists": {
  "description": "Suspected systemic therapy - Filter for entries with a value",
  "title": "Suspectedcauses.Systemictherapyid.Exists",
  "type": "boolean",
  "x-orm-lookup": "systemic_therapy_id__isnull"
  },
  "suspectedCauses.systemicTherapyId": {
  "description": "Suspected systemic therapy - Filter for full text matches",
  "title": "Suspectedcauses.Systemictherapyid",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iexact"
  },
  "suspectedCauses.systemicTherapyId.not": {
  "description": "Suspected systemic therapy - Filter for full text mismatches",
  "title": "Suspectedcauses.Systemictherapyid.Not",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iexact"
  },
  "suspectedCauses.systemicTherapyId.contains": {
  "description": "Suspected systemic therapy - Filter for partial text matches",
  "title": "Suspectedcauses.Systemictherapyid.Contains",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__icontains"
  },
  "suspectedCauses.systemicTherapyId.not.contains": {
  "description": "Suspected systemic therapy - Filter for partial text mismatches",
  "title": "Suspectedcauses.Systemictherapyid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__icontains"
  },
  "suspectedCauses.systemicTherapyId.beginsWith": {
  "description": "Suspected systemic therapy - Filter for entries starting with the text",
  "title": "Suspectedcauses.Systemictherapyid.Beginswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__istartswith"
  },
  "suspectedCauses.systemicTherapyId.not.beginsWith": {
  "description": "Suspected systemic therapy - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__istartswith"
  },
  "suspectedCauses.systemicTherapyId.endsWith": {
  "description": "Suspected systemic therapy - Filter for entries ending with the text",
  "title": "Suspectedcauses.Systemictherapyid.Endswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iendswith"
  },
  "suspectedCauses.systemicTherapyId.not.endsWith": {
  "description": "Suspected systemic therapy - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Systemictherapyid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "systemic_therapy_id__iendswith"
  },
  "suspectedCauses.medicationId.not.exists": {
  "description": "Suspected systemic therapy medication - Filter for entries without a value",
  "title": "Suspectedcauses.Medicationid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "medication_id__isnull"
  },
  "suspectedCauses.medicationId.exists": {
  "description": "Suspected systemic therapy medication - Filter for entries with a value",
  "title": "Suspectedcauses.Medicationid.Exists",
  "type": "boolean",
  "x-orm-lookup": "medication_id__isnull"
  },
  "suspectedCauses.medicationId": {
  "description": "Suspected systemic therapy medication - Filter for full text matches",
  "title": "Suspectedcauses.Medicationid",
  "type": "string",
  "x-orm-lookup": "medication_id__iexact"
  },
  "suspectedCauses.medicationId.not": {
  "description": "Suspected systemic therapy medication - Filter for full text mismatches",
  "title": "Suspectedcauses.Medicationid.Not",
  "type": "string",
  "x-orm-lookup": "medication_id__iexact"
  },
  "suspectedCauses.medicationId.contains": {
  "description": "Suspected systemic therapy medication - Filter for partial text matches",
  "title": "Suspectedcauses.Medicationid.Contains",
  "type": "string",
  "x-orm-lookup": "medication_id__icontains"
  },
  "suspectedCauses.medicationId.not.contains": {
  "description": "Suspected systemic therapy medication - Filter for partial text mismatches",
  "title": "Suspectedcauses.Medicationid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "medication_id__icontains"
  },
  "suspectedCauses.medicationId.beginsWith": {
  "description": "Suspected systemic therapy medication - Filter for entries starting with the text",
  "title": "Suspectedcauses.Medicationid.Beginswith",
  "type": "string",
  "x-orm-lookup": "medication_id__istartswith"
  },
  "suspectedCauses.medicationId.not.beginsWith": {
  "description": "Suspected systemic therapy medication - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Medicationid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "medication_id__istartswith"
  },
  "suspectedCauses.medicationId.endsWith": {
  "description": "Suspected systemic therapy medication - Filter for entries ending with the text",
  "title": "Suspectedcauses.Medicationid.Endswith",
  "type": "string",
  "x-orm-lookup": "medication_id__iendswith"
  },
  "suspectedCauses.medicationId.not.endsWith": {
  "description": "Suspected systemic therapy medication - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Medicationid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "medication_id__iendswith"
  },
  "suspectedCauses.radiotherapyId.not.exists": {
  "description": "Suspected radiotherapy - Filter for entries without a value",
  "title": "Suspectedcauses.Radiotherapyid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "radiotherapy_id__isnull"
  },
  "suspectedCauses.radiotherapyId.exists": {
  "description": "Suspected radiotherapy - Filter for entries with a value",
  "title": "Suspectedcauses.Radiotherapyid.Exists",
  "type": "boolean",
  "x-orm-lookup": "radiotherapy_id__isnull"
  },
  "suspectedCauses.radiotherapyId": {
  "description": "Suspected radiotherapy - Filter for full text matches",
  "title": "Suspectedcauses.Radiotherapyid",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iexact"
  },
  "suspectedCauses.radiotherapyId.not": {
  "description": "Suspected radiotherapy - Filter for full text mismatches",
  "title": "Suspectedcauses.Radiotherapyid.Not",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iexact"
  },
  "suspectedCauses.radiotherapyId.contains": {
  "description": "Suspected radiotherapy - Filter for partial text matches",
  "title": "Suspectedcauses.Radiotherapyid.Contains",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__icontains"
  },
  "suspectedCauses.radiotherapyId.not.contains": {
  "description": "Suspected radiotherapy - Filter for partial text mismatches",
  "title": "Suspectedcauses.Radiotherapyid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__icontains"
  },
  "suspectedCauses.radiotherapyId.beginsWith": {
  "description": "Suspected radiotherapy - Filter for entries starting with the text",
  "title": "Suspectedcauses.Radiotherapyid.Beginswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__istartswith"
  },
  "suspectedCauses.radiotherapyId.not.beginsWith": {
  "description": "Suspected radiotherapy - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__istartswith"
  },
  "suspectedCauses.radiotherapyId.endsWith": {
  "description": "Suspected radiotherapy - Filter for entries ending with the text",
  "title": "Suspectedcauses.Radiotherapyid.Endswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iendswith"
  },
  "suspectedCauses.radiotherapyId.not.endsWith": {
  "description": "Suspected radiotherapy - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Radiotherapyid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "radiotherapy_id__iendswith"
  },
  "suspectedCauses.surgeryId.not.exists": {
  "description": "Suspected surgery - Filter for entries without a value",
  "title": "Suspectedcauses.Surgeryid.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "surgery_id__isnull"
  },
  "suspectedCauses.surgeryId.exists": {
  "description": "Suspected surgery - Filter for entries with a value",
  "title": "Suspectedcauses.Surgeryid.Exists",
  "type": "boolean",
  "x-orm-lookup": "surgery_id__isnull"
  },
  "suspectedCauses.surgeryId": {
  "description": "Suspected surgery - Filter for full text matches",
  "title": "Suspectedcauses.Surgeryid",
  "type": "string",
  "x-orm-lookup": "surgery_id__iexact"
  },
  "suspectedCauses.surgeryId.not": {
  "description": "Suspected surgery - Filter for full text mismatches",
  "title": "Suspectedcauses.Surgeryid.Not",
  "type": "string",
  "x-orm-lookup": "surgery_id__iexact"
  },
  "suspectedCauses.surgeryId.contains": {
  "description": "Suspected surgery - Filter for partial text matches",
  "title": "Suspectedcauses.Surgeryid.Contains",
  "type": "string",
  "x-orm-lookup": "surgery_id__icontains"
  },
  "suspectedCauses.surgeryId.not.contains": {
  "description": "Suspected surgery - Filter for partial text mismatches",
  "title": "Suspectedcauses.Surgeryid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "surgery_id__icontains"
  },
  "suspectedCauses.surgeryId.beginsWith": {
  "description": "Suspected surgery - Filter for entries starting with the text",
  "title": "Suspectedcauses.Surgeryid.Beginswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__istartswith"
  },
  "suspectedCauses.surgeryId.not.beginsWith": {
  "description": "Suspected surgery - Filter for entries not starting with the text",
  "title": "Suspectedcauses.Surgeryid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__istartswith"
  },
  "suspectedCauses.surgeryId.endsWith": {
  "description": "Suspected surgery - Filter for entries ending with the text",
  "title": "Suspectedcauses.Surgeryid.Endswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__iendswith"
  },
  "suspectedCauses.surgeryId.not.endsWith": {
  "description": "Suspected surgery - Filter for entries not ending with the text",
  "title": "Suspectedcauses.Surgeryid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "surgery_id__iendswith"
  },
  "suspectedCauses.causality.not.exists": {
  "description": "Causality - Filter for entries without a value",
  "title": "Suspectedcauses.Causality.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "causality__isnull"
  },
  "suspectedCauses.causality.exists": {
  "description": "Causality - Filter for entries with a value",
  "title": "Suspectedcauses.Causality.Exists",
  "type": "boolean",
  "x-orm-lookup": "causality__isnull"
  },
  "suspectedCauses.causality": {
  "allOf": [
  {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  }
  ],
  "description": "Causality - ('Filter for single value choice',)",
  "x-orm-lookup": "causality__exact"
  },
  "suspectedCauses.causality.not": {
  "allOf": [
  {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  }
  ],
  "description": "Causality - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "causality__exact"
  },
  "suspectedCauses.causality.anyOf": {
  "description": "Causality - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  },
  "title": "Suspectedcauses.Causality.Anyof",
  "type": "array",
  "x-orm-lookup": "causality__in"
  },
  "mitigations.id": {
  "description": "Id - Filter for full text matches",
  "title": "Mitigations.Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "mitigations.id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Mitigations.Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "mitigations.id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Mitigations.Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "mitigations.id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Mitigations.Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "mitigations.id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Mitigations.Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "mitigations.id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Mitigations.Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "mitigations.id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Mitigations.Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "mitigations.id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Mitigations.Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "mitigations.createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "mitigations.createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "mitigations.createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "mitigations.createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "mitigations.createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "mitigations.createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Mitigations.Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "mitigations.createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "mitigations.createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "mitigations.updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "mitigations.updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "mitigations.updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "mitigations.updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "mitigations.updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "mitigations.updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Mitigations.Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "mitigations.updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "mitigations.updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Mitigations.Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "mitigations.createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Mitigations.Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "mitigations.createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Mitigations.Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "mitigations.updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Mitigations.Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "mitigations.updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "mitigations.updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Mitigations.Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "mitigations.updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "mitigations.updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "mitigations.updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Mitigations.Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "mitigations.updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Mitigations.Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "mitigations.updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Mitigations.Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "mitigations.updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Mitigations.Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "mitigations.updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Mitigations.Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "mitigations.updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "mitigations.updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "mitigations.updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "mitigations.updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "mitigations.updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "mitigations.updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "mitigations.updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "mitigations.updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "mitigations.updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Mitigations.Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "mitigations.updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Mitigations.Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "mitigations.updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "mitigations.updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "mitigations.updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "mitigations.updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "mitigations.updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "mitigations.updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "mitigations.updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "mitigations.updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "mitigations.description": {
  "description": "None - Filter for full text matches",
  "title": "Mitigations.Description",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.description.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Mitigations.Description.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "mitigations.description.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Mitigations.Description.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.description.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Mitigations.Description.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "mitigations.description.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Mitigations.Description.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.description.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Mitigations.Description.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "mitigations.description.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Mitigations.Description.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.description.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Mitigations.Description.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "mitigations.category": {
  "allOf": [
  {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  }
  ],
  "description": "Mitigation category - ('Filter for single value choice',)",
  "x-orm-lookup": "category__exact"
  },
  "mitigations.category.not": {
  "allOf": [
  {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  }
  ],
  "description": "Mitigation category - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "category__exact"
  },
  "mitigations.category.anyOf": {
  "description": "Mitigation category - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  },
  "title": "Mitigations.Category.Anyof",
  "type": "array",
  "x-orm-lookup": "category__in"
  },
  "mitigations.adjustment.not.exists": {
  "description": "Treatment Adjustment - Filter for entries without a value",
  "title": "Mitigations.Adjustment.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "adjustment__isnull"
  },
  "mitigations.adjustment.exists": {
  "description": "Treatment Adjustment - Filter for entries with a value",
  "title": "Mitigations.Adjustment.Exists",
  "type": "boolean",
  "x-orm-lookup": "adjustment__isnull"
  },
  "mitigations.adjustment": {
  "description": "Treatment Adjustment - Filter for a matching concept code",
  "title": "Mitigations.Adjustment",
  "type": "string",
  "x-orm-lookup": "adjustment__code__iexact"
  },
  "mitigations.adjustment.not": {
  "description": "Treatment Adjustment - Filter for a mismatching concept code",
  "title": "Mitigations.Adjustment.Not",
  "type": "string",
  "x-orm-lookup": "adjustment__code__iexact"
  },
  "mitigations.adjustment.anyOf": {
  "description": "Treatment Adjustment - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Adjustment.Anyof",
  "type": "array",
  "x-orm-lookup": "adjustment__code__in"
  },
  "mitigations.adjustment.not.anyOf": {
  "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Adjustment.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "adjustment__code__in"
  },
  "mitigations.adjustment.descendantsOf": {
  "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Adjustment.Descendantsof",
  "type": "string",
  "x-orm-lookup": "adjustment__None"
  },
  "mitigations.drug.not.exists": {
  "description": "Pharmacological drug - Filter for entries without a value",
  "title": "Mitigations.Drug.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "drug__isnull"
  },
  "mitigations.drug.exists": {
  "description": "Pharmacological drug - Filter for entries with a value",
  "title": "Mitigations.Drug.Exists",
  "type": "boolean",
  "x-orm-lookup": "drug__isnull"
  },
  "mitigations.drug": {
  "description": "Pharmacological drug - Filter for a matching concept code",
  "title": "Mitigations.Drug",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "mitigations.drug.not": {
  "description": "Pharmacological drug - Filter for a mismatching concept code",
  "title": "Mitigations.Drug.Not",
  "type": "string",
  "x-orm-lookup": "drug__code__iexact"
  },
  "mitigations.drug.anyOf": {
  "description": "Pharmacological drug - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Drug.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "mitigations.drug.not.anyOf": {
  "description": "Pharmacological drug - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Drug.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "drug__code__in"
  },
  "mitigations.drug.descendantsOf": {
  "description": "Pharmacological drug - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Drug.Descendantsof",
  "type": "string",
  "x-orm-lookup": "drug__None"
  },
  "mitigations.procedure.not.exists": {
  "description": "Procedure - Filter for entries without a value",
  "title": "Mitigations.Procedure.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "procedure__isnull"
  },
  "mitigations.procedure.exists": {
  "description": "Procedure - Filter for entries with a value",
  "title": "Mitigations.Procedure.Exists",
  "type": "boolean",
  "x-orm-lookup": "procedure__isnull"
  },
  "mitigations.procedure": {
  "description": "Procedure - Filter for a matching concept code",
  "title": "Mitigations.Procedure",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "mitigations.procedure.not": {
  "description": "Procedure - Filter for a mismatching concept code",
  "title": "Mitigations.Procedure.Not",
  "type": "string",
  "x-orm-lookup": "procedure__code__iexact"
  },
  "mitigations.procedure.anyOf": {
  "description": "Procedure - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Procedure.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "mitigations.procedure.not.anyOf": {
  "description": "Procedure - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Procedure.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "procedure__code__in"
  },
  "mitigations.procedure.descendantsOf": {
  "description": "Procedure - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Procedure.Descendantsof",
  "type": "string",
  "x-orm-lookup": "procedure__None"
  },
  "mitigations.management.not.exists": {
  "description": "Management - Filter for entries without a value",
  "title": "Mitigations.Management.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "management__isnull"
  },
  "mitigations.management.exists": {
  "description": "Management - Filter for entries with a value",
  "title": "Mitigations.Management.Exists",
  "type": "boolean",
  "x-orm-lookup": "management__isnull"
  },
  "mitigations.management": {
  "description": "Management - Filter for a matching concept code",
  "title": "Mitigations.Management",
  "type": "string",
  "x-orm-lookup": "management__code__iexact"
  },
  "mitigations.management.not": {
  "description": "Management - Filter for a mismatching concept code",
  "title": "Mitigations.Management.Not",
  "type": "string",
  "x-orm-lookup": "management__code__iexact"
  },
  "mitigations.management.anyOf": {
  "description": "Management - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Management.Anyof",
  "type": "array",
  "x-orm-lookup": "management__code__in"
  },
  "mitigations.management.not.anyOf": {
  "description": "Management - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Mitigations.Management.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "management__code__in"
  },
  "mitigations.management.descendantsOf": {
  "description": "Management - Filter for all child concepts of a given concepts code",
  "title": "Mitigations.Management.Descendantsof",
  "type": "string",
  "x-orm-lookup": "management__None"
  }
  },
  "title": "AdverseEventFilters",
  "type": "object"
  },
  "AdverseEventMitigationCategoryChoices": {
  "enum": [
  "adjustment",
  "pharmacological",
  "procedure"
  ],
  "title": "AdverseEventMitigationCategoryChoices",
  "type": "string"
  },
  "AdverseEventSuspectedCauseCausalityChoices": {
  "enum": [
  "unrelated",
  "unlikely-related",
  "possibly-related",
  "probably-related",
  "definitely-related",
  "conditionally-related"
  ],
  "title": "AdverseEventSuspectedCauseCausalityChoices",
  "type": "string"
  },
  "AdverseEventMitigationSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "category": {
  "$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices",
  "description": "Type of mitigation employed",
  "examples": [],
  "maxLength": 50,
  "title": "Mitigation category",
  "x-expanded": null
  },
  "adjustment": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Treatment Adjustment",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationTreatmentAdjustment"
  },
  "drug": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Pharmacological drug",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationDrug"
  },
  "procedure": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Procedure",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationProcedure"
  },
  "management": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Management type of the adverse event mitigation",
  "examples": [],
  "title": "Management",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationManagement"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "category"
  ],
  "title": "AdverseEventMitigation",
  "type": "object"
  },
  "AdverseEventSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who had the adverse event being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the adverse event ocurred.",
  "examples": [],
  "format": "date",
  "title": "Event date",
  "type": "string",
  "x-expanded": null
  },
  "event": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Classification of the adverse event using CTCAE criteria",
  "examples": [],
  "title": "Adverse event",
  "x-expanded": null,
  "x-terminology": "AdverseEventTerm"
  },
  "grade": {
  "description": "The grade associated with the severity of an adverse event, using CTCAE criteria.",
  "examples": [],
  "title": "Grade",
  "type": "integer",
  "x-expanded": null
  },
  "outcome": {
  "$ref": "#/components/schemas/AdverseEventOutcomeChoices",
  "description": "The date when the adverse event ended or returned to baseline.",
  "examples": [],
  "maxLength": 50,
  "title": "Date resolved",
  "x-expanded": null
  },
  "dateResolved": {
  "anyOf": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The date when the adverse event ended or returned to baseline.",
  "examples": [],
  "title": "Date resolved",
  "x-expanded": null
  },
  "suspectedCauses": {
  "description": "Suspected causes of the adverse event",
  "items": {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"
  },
  "title": "Suspectedcauses",
  "type": "array",
  "validation_aliases": {
  "choices": [
  "suspected_causes",
  "suspectedCauses"
  ]
  }
  },
  "mitigations": {
  "description": "Mitigations of the adverse event",
  "items": {
  "$ref": "#/components/schemas/AdverseEventMitigationSchema"
  },
  "title": "Mitigations",
  "type": "array"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "event",
  "grade",
  "outcome",
  "suspectedCauses",
  "mitigations"
  ],
  "title": "AdverseEvent",
  "type": "object"
  },
  "AdverseEventSuspectedCauseSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "systemicTherapyId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systemic therapy suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected systemic therapy",
  "x-expanded": null
  },
  "medicationId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systemic therapy medication suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected systemic therapy medication",
  "x-expanded": null
  },
  "radiotherapyId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Radiotherapy suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected radiotherapy",
  "x-expanded": null
  },
  "surgeryId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Surgery suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected surgery",
  "x-expanded": null
  },
  "causality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Assessment of the potential causality",
  "examples": [],
  "title": "Causality",
  "x-expanded": null
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description"
  ],
  "title": "AdverseEventSuspectedCause",
  "type": "object"
  },
  "Paginated_AdverseEventSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/AdverseEventSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[AdverseEventSchema]",
  "type": "object"
  },
  "AdverseEventMitigationCreateSchema": {
  "properties": {
  "category": {
  "$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices",
  "description": "Type of mitigation employed",
  "examples": [],
  "maxLength": 50,
  "title": "Mitigation category",
  "x-expanded": null
  },
  "adjustment": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Treatment Adjustment",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationTreatmentAdjustment"
  },
  "drug": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Pharmacological drug",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationDrug"
  },
  "procedure": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)",
  "examples": [],
  "title": "Procedure",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationProcedure"
  },
  "management": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Management type of the adverse event mitigation",
  "examples": [],
  "title": "Management",
  "x-expanded": null,
  "x-terminology": "AdverseEventMitigationManagement"
  }
  },
  "required": [
  "category"
  ],
  "title": "AdverseEventMitigationCreate",
  "type": "object"
  },
  "AdverseEventSuspectedCauseCreateSchema": {
  "properties": {
  "systemicTherapyId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systemic therapy suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected systemic therapy",
  "x-expanded": null
  },
  "medicationId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systemic therapy medication suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected systemic therapy medication",
  "x-expanded": null
  },
  "radiotherapyId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Radiotherapy suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected radiotherapy",
  "x-expanded": null
  },
  "surgeryId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Surgery suspected to be the cause of the adverse event",
  "examples": [],
  "title": "Suspected surgery",
  "x-expanded": null
  },
  "causality": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices",
  "maxLength": 50
  },
  {
  "type": "null"
  }
  ],
  "description": "Assessment of the potential causality",
  "examples": [],
  "title": "Causality",
  "x-expanded": null
  }
  },
  "title": "AdverseEventSuspectedCauseCreate",
  "type": "object"
  },
  "TreatmentResponseCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's treatment response is asseessed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date of the treatment response assessment",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "recist": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The classification of the treatment response according to RECIST",
  "examples": [],
  "title": "RECIST",
  "x-expanded": null,
  "x-terminology": "CancerTreatmentResponse"
  },
  "recistInterpreted": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report",
  "examples": [],
  "title": "RECIST Interpreted?",
  "x-expanded": null
  },
  "methodology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Method used to assess and classify the treatment response",
  "examples": [],
  "title": "Assessment method",
  "x-expanded": null,
  "x-terminology": "CancerTreatmentResponseObservationMethod"
  },
  "assessedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were assesed for treatment response",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Assessed neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "assessedBodysites": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Anatomical location assessed to determine the treatment response",
  "examples": [],
  "title": "Assessed anatomical location",
  "x-expanded": null,
  "x-terminology": "ObservationBodySite"
  }
  },
  "required": [
  "caseId",
  "date",
  "recist",
  "methodology"
  ],
  "title": "TreatmentResponseCreate",
  "type": "object"
  },
  "TreatmentResponseFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "recist": {
  "description": "RECIST - Filter for a matching concept code",
  "title": "Recist",
  "type": "string",
  "x-orm-lookup": "recist__code__iexact"
  },
  "recist.not": {
  "description": "RECIST - Filter for a mismatching concept code",
  "title": "Recist.Not",
  "type": "string",
  "x-orm-lookup": "recist__code__iexact"
  },
  "recist.anyOf": {
  "description": "RECIST - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Recist.Anyof",
  "type": "array",
  "x-orm-lookup": "recist__code__in"
  },
  "recist.not.anyOf": {
  "description": "RECIST - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Recist.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "recist__code__in"
  },
  "recist.descendantsOf": {
  "description": "RECIST - Filter for all child concepts of a given concepts code",
  "title": "Recist.Descendantsof",
  "type": "string",
  "x-orm-lookup": "recist__None"
  },
  "recistInterpreted.not.exists": {
  "description": "RECIST Interpreted? - Filter for entries without a value",
  "title": "Recistinterpreted.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__isnull"
  },
  "recistInterpreted.exists": {
  "description": "RECIST Interpreted? - Filter for entries with a value",
  "title": "Recistinterpreted.Exists",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__isnull"
  },
  "recistInterpreted": {
  "description": "RECIST Interpreted? - ('Filter for yes/no statement',)",
  "title": "Recistinterpreted",
  "type": "boolean",
  "x-orm-lookup": "recist_interpreted__exact"
  },
  "methodology": {
  "description": "Assessment method - Filter for a matching concept code",
  "title": "Methodology",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "methodology.not": {
  "description": "Assessment method - Filter for a mismatching concept code",
  "title": "Methodology.Not",
  "type": "string",
  "x-orm-lookup": "methodology__code__iexact"
  },
  "methodology.anyOf": {
  "description": "Assessment method - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "methodology.not.anyOf": {
  "description": "Assessment method - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Methodology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "methodology__code__in"
  },
  "methodology.descendantsOf": {
  "description": "Assessment method - Filter for all child concepts of a given concepts code",
  "title": "Methodology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "methodology__None"
  },
  "assessedEntitiesIds": {
  "description": "Assessed neoplastic entities - Filter for full text matches",
  "title": "Assessedentitiesids",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "assessedEntitiesIds.not": {
  "description": "Assessed neoplastic entities - Filter for full text mismatches",
  "title": "Assessedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iexact"
  },
  "assessedEntitiesIds.contains": {
  "description": "Assessed neoplastic entities - Filter for partial text matches",
  "title": "Assessedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "assessedEntitiesIds.not.contains": {
  "description": "Assessed neoplastic entities - Filter for partial text mismatches",
  "title": "Assessedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__icontains"
  },
  "assessedEntitiesIds.beginsWith": {
  "description": "Assessed neoplastic entities - Filter for entries starting with the text",
  "title": "Assessedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "assessedEntitiesIds.not.beginsWith": {
  "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
  "title": "Assessedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__istartswith"
  },
  "assessedEntitiesIds.endsWith": {
  "description": "Assessed neoplastic entities - Filter for entries ending with the text",
  "title": "Assessedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "assessedEntitiesIds.not.endsWith": {
  "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
  "title": "Assessedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "assessed_entities_ids__iendswith"
  },
  "assessedBodysites.code": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.system": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.display": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.version": {
  "description": "None - Filter for full text matches",
  "title": "Assessedbodysites.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Assessedbodysites.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "assessedBodysites.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Assessedbodysites.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Assessedbodysites.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "assessedBodysites.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Assessedbodysites.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Assessedbodysites.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "assessedBodysites.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Assessedbodysites.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Assessedbodysites.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "assessedBodysites.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Assessedbodysites.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "assessedBodysites.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Assessedbodysites.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  }
  },
  "title": "TreatmentResponseFilters",
  "type": "object"
  },
  "Paginated_TreatmentResponseSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/TreatmentResponseSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[TreatmentResponseSchema]",
  "type": "object"
  },
  "TreatmentResponseSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's treatment response is asseessed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date of the treatment response assessment",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "recist": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "The classification of the treatment response according to RECIST",
  "examples": [],
  "title": "RECIST",
  "x-expanded": null,
  "x-terminology": "CancerTreatmentResponse"
  },
  "recistInterpreted": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report",
  "examples": [],
  "title": "RECIST Interpreted?",
  "x-expanded": null
  },
  "methodology": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Method used to assess and classify the treatment response",
  "examples": [],
  "title": "Assessment method",
  "x-expanded": null,
  "x-terminology": "CancerTreatmentResponseObservationMethod"
  },
  "assessedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were assesed for treatment response",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Assessed neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "assessedBodysites": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Anatomical location assessed to determine the treatment response",
  "examples": [],
  "title": "Assessed anatomical location",
  "x-expanded": null,
  "x-terminology": "ObservationBodySite"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "recist",
  "methodology"
  ],
  "title": "TreatmentResponse",
  "type": "object"
  },
  "MolecularTumorBoardCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient which was discussed at the tumor board",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the tumor board.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "recommendations": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Recommendation(s) provided by the board regarding the patient's care",
  "examples": [],
  "title": "Recommendations",
  "x-expanded": null,
  "x-terminology": "TumorBoardRecommendation"
  },
  "conductedMolecularComparison": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board",
  "examples": [],
  "title": "Conducted molecular comparison?",
  "x-expanded": null
  },
  "molecularComparisonMatchId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The neoplastic entity that was matched during the molecular comparison",
  "examples": [],
  "title": "Molecular comparison match",
  "x-expanded": null
  },
  "conductedCupCharacterization": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.",
  "examples": [],
  "title": "Conducted CUP characterization?",
  "x-expanded": null
  },
  "characterizedCup": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the cancer of unknown primary (CUP) characterization was successful.",
  "examples": [],
  "title": "Successful CUP characterization?",
  "x-expanded": null
  },
  "reviewedReports": {
  "description": "",
  "examples": [],
  "items": {
  "type": "string"
  },
  "maxItems": 500,
  "title": "Reviewed Reports",
  "type": "array",
  "x-expanded": null
  },
  "category": {
  "const": "molecular",
  "default": "molecular",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "reviewedReports"
  ],
  "title": "MolecularTumorBoardCreate",
  "type": "object"
  },
  "UnspecifiedTumorBoardCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient which was discussed at the tumor board",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the tumor board.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "recommendations": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Recommendation(s) provided by the board regarding the patient's care",
  "examples": [],
  "title": "Recommendations",
  "x-expanded": null,
  "x-terminology": "TumorBoardRecommendation"
  },
  "category": {
  "const": "unspecified",
  "default": "unspecified",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "UnspecifiedTumorBoardCreate",
  "type": "object"
  },
  "TumorBoardFilters2": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "relatedEntitiesIds": {
  "description": "Related neoplastic entities - Filter for full text matches",
  "title": "Relatedentitiesids",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "relatedEntitiesIds.not": {
  "description": "Related neoplastic entities - Filter for full text mismatches",
  "title": "Relatedentitiesids.Not",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iexact"
  },
  "relatedEntitiesIds.contains": {
  "description": "Related neoplastic entities - Filter for partial text matches",
  "title": "Relatedentitiesids.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "relatedEntitiesIds.not.contains": {
  "description": "Related neoplastic entities - Filter for partial text mismatches",
  "title": "Relatedentitiesids.Not.Contains",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__icontains"
  },
  "relatedEntitiesIds.beginsWith": {
  "description": "Related neoplastic entities - Filter for entries starting with the text",
  "title": "Relatedentitiesids.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "relatedEntitiesIds.not.beginsWith": {
  "description": "Related neoplastic entities - Filter for entries not starting with the text",
  "title": "Relatedentitiesids.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__istartswith"
  },
  "relatedEntitiesIds.endsWith": {
  "description": "Related neoplastic entities - Filter for entries ending with the text",
  "title": "Relatedentitiesids.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "relatedEntitiesIds.not.endsWith": {
  "description": "Related neoplastic entities - Filter for entries not ending with the text",
  "title": "Relatedentitiesids.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "related_entities_ids__iendswith"
  },
  "recommendations.code": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.system": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.display": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.version": {
  "description": "None - Filter for full text matches",
  "title": "Recommendations.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recommendations.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recommendations.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recommendations.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recommendations.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recommendations.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recommendations.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recommendations.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recommendations.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recommendations.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recommendations.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recommendations.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recommendations.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recommendations.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recommendations.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  }
  },
  "title": "TumorBoardFilters2",
  "type": "object"
  },
  "AnyTumorBoard": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UnspecifiedTumorBoardSchema"
  },
  {
  "$ref": "#/components/schemas/MolecularTumorBoardSchema"
  }
  ]
  },
  "MolecularTherapeuticRecommendationSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "expectedEffect": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the expected effect of the drug",
  "examples": [],
  "title": "Expected medication action",
  "x-expanded": null,
  "x-terminology": "ExpectedDrugAction"
  },
  "clinicalTrial": {
  "anyOf": [
  {
  "maxLength": 15,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment",
  "examples": [],
  "title": "Recommended clinical trial",
  "x-expanded": null
  },
  "offLabelUse": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the medication(s) recommended were off-label",
  "examples": [],
  "title": "Off-label use",
  "x-expanded": null
  },
  "withinSoc": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the medication(s) recommended were within standard of care",
  "examples": [],
  "title": "Within SOC",
  "x-expanded": null
  },
  "drugs": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Drugs(s) being recommended",
  "examples": [],
  "title": "Drug(s)",
  "x-expanded": null,
  "x-terminology": "AntineoplasticAgent"
  },
  "supportingGenomicVariantsIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Genomic variants that support the recommendation",
  "examples": [],
  "title": "Supporting genomic variants",
  "x-expanded": null
  },
  "supportingGenomicSignaturesIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Genomic signatures that support the recommendation",
  "examples": [],
  "title": "Supporting genomic signatures",
  "x-expanded": null
  },
  "supportingTumorMarkersIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Tumor markers that support the recommendation",
  "examples": [],
  "title": "Supporting tumor markers",
  "x-expanded": null
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description"
  ],
  "title": "MolecularTherapeuticRecommendation",
  "type": "object"
  },
  "MolecularTumorBoardSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient which was discussed at the tumor board",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the tumor board.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "recommendations": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Recommendation(s) provided by the board regarding the patient's care",
  "examples": [],
  "title": "Recommendations",
  "x-expanded": null,
  "x-terminology": "TumorBoardRecommendation"
  },
  "conductedMolecularComparison": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board",
  "examples": [],
  "title": "Conducted molecular comparison?",
  "x-expanded": null
  },
  "molecularComparisonMatchId": {
  "anyOf": [
  {
  "format": "uuid",
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The neoplastic entity that was matched during the molecular comparison",
  "examples": [],
  "title": "Molecular comparison match",
  "x-expanded": null
  },
  "conductedCupCharacterization": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.",
  "examples": [],
  "title": "Conducted CUP characterization?",
  "x-expanded": null
  },
  "characterizedCup": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the cancer of unknown primary (CUP) characterization was successful.",
  "examples": [],
  "title": "Successful CUP characterization?",
  "x-expanded": null
  },
  "reviewedReports": {
  "description": "",
  "examples": [],
  "items": {
  "type": "string"
  },
  "maxItems": 500,
  "title": "Reviewed Reports",
  "type": "array",
  "x-expanded": null
  },
  "category": {
  "const": "molecular",
  "default": "molecular",
  "title": "Category",
  "type": "string"
  },
  "therapeuticRecommendations": {
  "description": "Therapeutic recommendations of the molecular tumor board",
  "items": {
  "$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"
  },
  "title": "Therapeuticrecommendations",
  "type": "array",
  "validation_aliases": {
  "choices": [
  "therapeutic_recommendations",
  "therapeuticRecommendations"
  ]
  }
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "reviewedReports",
  "therapeuticRecommendations"
  ],
  "title": "MolecularTumorBoard",
  "type": "object"
  },
  "Paginated_AnyTumorBoard_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/AnyTumorBoard"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[AnyTumorBoard]",
  "type": "object"
  },
  "UnspecifiedTumorBoardSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient which was discussed at the tumor board",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
  "examples": [],
  "format": "date",
  "title": "Date",
  "type": "string",
  "x-expanded": null
  },
  "relatedEntitiesIds": {
  "default": [],
  "description": "References to the neoplastic entities that were the focus of the tumor board.",
  "examples": [],
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "title": "Related neoplastic entities",
  "type": "array",
  "x-expanded": null
  },
  "recommendations": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Recommendation(s) provided by the board regarding the patient's care",
  "examples": [],
  "title": "Recommendations",
  "x-expanded": null,
  "x-terminology": "TumorBoardRecommendation"
  },
  "category": {
  "const": "unspecified",
  "default": "unspecified",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date"
  ],
  "title": "UnspecifiedTumorBoard",
  "type": "object"
  },
  "MolecularTherapeuticRecommendationCreateSchema": {
  "properties": {
  "expectedEffect": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the expected effect of the drug",
  "examples": [],
  "title": "Expected medication action",
  "x-expanded": null,
  "x-terminology": "ExpectedDrugAction"
  },
  "clinicalTrial": {
  "anyOf": [
  {
  "maxLength": 15,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment",
  "examples": [],
  "title": "Recommended clinical trial",
  "x-expanded": null
  },
  "offLabelUse": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the medication(s) recommended were off-label",
  "examples": [],
  "title": "Off-label use",
  "x-expanded": null
  },
  "withinSoc": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the medication(s) recommended were within standard of care",
  "examples": [],
  "title": "Within SOC",
  "x-expanded": null
  },
  "drugs": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Drugs(s) being recommended",
  "examples": [],
  "title": "Drug(s)",
  "x-expanded": null,
  "x-terminology": "AntineoplasticAgent"
  },
  "supportingGenomicVariantsIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Genomic variants that support the recommendation",
  "examples": [],
  "title": "Supporting genomic variants",
  "x-expanded": null
  },
  "supportingGenomicSignaturesIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Genomic signatures that support the recommendation",
  "examples": [],
  "title": "Supporting genomic signatures",
  "x-expanded": null
  },
  "supportingTumorMarkersIds": {
  "anyOf": [
  {
  "items": {
  "format": "uuid",
  "type": "string"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Tumor markers that support the recommendation",
  "examples": [],
  "title": "Supporting tumor markers",
  "x-expanded": null
  }
  },
  "title": "MolecularTherapeuticRecommendationCreate",
  "type": "object"
  },
  "PerformanceStatusCreate": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's performance status is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the performance score was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "ecogScore": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "ECOG Performance Status Score",
  "examples": [],
  "title": "ECOG Score",
  "x-expanded": null
  },
  "karnofskyScore": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Karnofsky Performance Status Score",
  "examples": [],
  "title": "Karnofsky Score",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "PerformanceStatusCreate",
  "type": "object"
  },
  "PerformanceStatusFilters": {
  "properties": {
  "ecogInterpretation.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Ecoginterpretation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_interpretation__isnull"
  },
  "ecogInterpretation.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Ecoginterpretation.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_interpretation__isnull"
  },
  "ecogInterpretation": {
  "description": "None - Filter for a matching concept code",
  "title": "Ecoginterpretation",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__code__iexact"
  },
  "ecogInterpretation.not": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Ecoginterpretation.Not",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__code__iexact"
  },
  "ecogInterpretation.anyOf": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Ecoginterpretation.Anyof",
  "type": "array",
  "x-orm-lookup": "ecog_interpretation__code__in"
  },
  "ecogInterpretation.not.anyOf": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Ecoginterpretation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "ecog_interpretation__code__in"
  },
  "ecogInterpretation.descendantsOf": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Ecoginterpretation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "ecog_interpretation__None"
  },
  "karnofskyInterpretation.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Karnofskyinterpretation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_interpretation__isnull"
  },
  "karnofskyInterpretation.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Karnofskyinterpretation.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_interpretation__isnull"
  },
  "karnofskyInterpretation": {
  "description": "None - Filter for a matching concept code",
  "title": "Karnofskyinterpretation",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__code__iexact"
  },
  "karnofskyInterpretation.not": {
  "description": "None - Filter for a mismatching concept code",
  "title": "Karnofskyinterpretation.Not",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__code__iexact"
  },
  "karnofskyInterpretation.anyOf": {
  "description": "None - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Karnofskyinterpretation.Anyof",
  "type": "array",
  "x-orm-lookup": "karnofsky_interpretation__code__in"
  },
  "karnofskyInterpretation.not.anyOf": {
  "description": "None - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Karnofskyinterpretation.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "karnofsky_interpretation__code__in"
  },
  "karnofskyInterpretation.descendantsOf": {
  "description": "None - Filter for all child concepts of a given concepts code",
  "title": "Karnofskyinterpretation.Descendantsof",
  "type": "string",
  "x-orm-lookup": "karnofsky_interpretation__None"
  },
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "ecogScore.not.exists": {
  "description": "ECOG Score - Filter for entries without a value",
  "title": "Ecogscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_score__isnull"
  },
  "ecogScore.exists": {
  "description": "ECOG Score - Filter for entries with a value",
  "title": "Ecogscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "ecog_score__isnull"
  },
  "ecogScore.lessThan": {
  "description": "ECOG Score - Filter for entries with values less than the specified value",
  "title": "Ecogscore.Lessthan",
  "type": "integer",
  "x-orm-lookup": "ecog_score__lt"
  },
  "ecogScore.lessThanOrEqual": {
  "description": "ECOG Score - Filter for entries with values less than or equal to the specified value",
  "title": "Ecogscore.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__lte"
  },
  "ecogScore.greaterThan": {
  "description": "ECOG Score - Filter for entries with values greater than the specified value",
  "title": "Ecogscore.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "ecog_score__gt"
  },
  "ecogScore.greaterThanOrEqual": {
  "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Ecogscore.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__gte"
  },
  "ecogScore.equal": {
  "description": "ECOG Score - Filter for entries with values exactly equal to the specified value",
  "title": "Ecogscore.Equal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__exact"
  },
  "ecogScore.not.equal": {
  "description": "ECOG Score - Filter for entries with values not equal to the specified value",
  "title": "Ecogscore.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "ecog_score__exact"
  },
  "ecogScore.between": {
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Ecogscore.Between",
  "type": "array",
  "x-orm-lookup": "ecog_score__range"
  },
  "ecogScore.not.between": {
  "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Ecogscore.Not.Between",
  "type": "array",
  "x-orm-lookup": "ecog_score__range"
  },
  "karnofskyScore.not.exists": {
  "description": "Karnofsky Score - Filter for entries without a value",
  "title": "Karnofskyscore.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_score__isnull"
  },
  "karnofskyScore.exists": {
  "description": "Karnofsky Score - Filter for entries with a value",
  "title": "Karnofskyscore.Exists",
  "type": "boolean",
  "x-orm-lookup": "karnofsky_score__isnull"
  },
  "karnofskyScore.lessThan": {
  "description": "Karnofsky Score - Filter for entries with values less than the specified value",
  "title": "Karnofskyscore.Lessthan",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__lt"
  },
  "karnofskyScore.lessThanOrEqual": {
  "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value",
  "title": "Karnofskyscore.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__lte"
  },
  "karnofskyScore.greaterThan": {
  "description": "Karnofsky Score - Filter for entries with values greater than the specified value",
  "title": "Karnofskyscore.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__gt"
  },
  "karnofskyScore.greaterThanOrEqual": {
  "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value",
  "title": "Karnofskyscore.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__gte"
  },
  "karnofskyScore.equal": {
  "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value",
  "title": "Karnofskyscore.Equal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__exact"
  },
  "karnofskyScore.not.equal": {
  "description": "Karnofsky Score - Filter for entries with values not equal to the specified value",
  "title": "Karnofskyscore.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "karnofsky_score__exact"
  },
  "karnofskyScore.between": {
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Karnofskyscore.Between",
  "type": "array",
  "x-orm-lookup": "karnofsky_score__range"
  },
  "karnofskyScore.not.between": {
  "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Karnofskyscore.Not.Between",
  "type": "array",
  "x-orm-lookup": "karnofsky_score__range"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  }
  },
  "title": "PerformanceStatusFilters",
  "type": "object"
  },
  "Paginated_PerformanceStatus_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/PerformanceStatus"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[PerformanceStatus]",
  "type": "object"
  },
  "PerformanceStatus": {
  "properties": {
  "description": {
  "description": "Human-readable description of the performance status",
  "title": "Description",
  "type": "string"
  },
  "ecogInterpretation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Official interpretation of the ECOG score"
  },
  "karnofskyInterpretation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Official interpretation of the Karnofsky score"
  },
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "caseId": {
  "description": "Indicates the case of the patient who's performance status is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the performance score was performed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "ecogScore": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "ECOG Performance Status Score",
  "examples": [],
  "title": "ECOG Score",
  "x-expanded": null
  },
  "karnofskyScore": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Karnofsky Performance Status Score",
  "examples": [],
  "title": "Karnofsky Score",
  "x-expanded": null
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  }
  },
  "required": [
  "description",
  "ecogInterpretation",
  "karnofskyInterpretation",
  "id",
  "createdAt",
  "updatedAt",
  "caseId",
  "date"
  ],
  "title": "PerformanceStatus",
  "type": "object"
  },
  "GenomicVariantAssessmentChoices": {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  },
  "GenomicVariantClinicalRelevanceChoices": {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  },
  "GenomicVariantConfidenceChoices": {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  },
  "GenomicVariantCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who' genomic variant is described",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the genomic variant was detected and/or reported.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "genePanel": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Commercial or official name of the gene panel tested to identify the variant",
  "examples": [],
  "title": "Gene panel",
  "x-expanded": null
  },
  "assessment": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantAssessmentChoices",
  "maxLength": 15
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.",
  "examples": [],
  "title": "Assessment",
  "x-expanded": null
  },
  "confidence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantConfidenceChoices",
  "maxLength": 15
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.",
  "examples": [],
  "title": "Confidence",
  "x-expanded": null
  },
  "analysisMethod": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Analysis method used to detect the variant",
  "examples": [],
  "title": "Analysis method",
  "x-expanded": null,
  "x-terminology": "StructuralVariantAnalysisMethod"
  },
  "clinicalRelevance": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the clinical relevance or pathogenicity of the variant.",
  "examples": [],
  "title": "Clinical relevance",
  "x-expanded": null
  },
  "cytogeneticLocation": {
  "anyOf": [
  {
  "maxLength": 60,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genetic address of the variant specifying the relevant chromosomal region.",
  "examples": [],
  "title": "Cytogenetic location",
  "x-expanded": null
  },
  "genomeAssemblyVersion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The reference genome assembly versionused in this analysis.",
  "examples": [],
  "title": "Genome assembly version",
  "x-expanded": null,
  "x-terminology": "ReferenceGenomeBuild"
  },
  "genomicRefseq": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')",
  "examples": [],
  "title": "Genomic RefSeq",
  "x-expanded": null
  },
  "transcriptRefseq": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)",
  "examples": [],
  "title": "Transcript RefSeq",
  "x-expanded": null
  },
  "codingHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T",
  "examples": [],
  "title": "Coding DNA change expression (cHGVS)",
  "x-expanded": null
  },
  "proteinHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)",
  "examples": [],
  "title": "Protein/aminoacid change expression (pHGVS)",
  "x-expanded": null
  },
  "genomicHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup",
  "examples": [],
  "title": "Genomic change expression (gHGVS)",
  "x-expanded": null
  },
  "dnaChangeType": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the DNA change type of the variant.",
  "examples": [],
  "title": "Coding DNA change type",
  "x-expanded": null,
  "x-terminology": "DnaChangeType"
  },
  "aminoacidChangeType": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the amino acid change type",
  "examples": [],
  "title": "Aminoacid change type",
  "x-expanded": null,
  "x-terminology": "AminoAcidChangeType"
  },
  "molecularConsequence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.",
  "examples": [],
  "title": "Molecular consequence",
  "x-expanded": null,
  "x-terminology": "MolecularConsequence"
  },
  "copyNumber": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.",
  "examples": [],
  "title": "Copy number",
  "x-expanded": null
  },
  "alleleFrequency": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.",
  "examples": [],
  "title": "Allele frequency",
  "x-expanded": null
  },
  "alleleDepth": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.",
  "examples": [],
  "title": "Allele depth (reads)",
  "x-expanded": null
  },
  "zygosity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The observed level of occurrence of the variant in the set of chromosomes.",
  "examples": [],
  "title": "Zygosity",
  "x-expanded": null,
  "x-terminology": "Zygosity"
  },
  "inheritance": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Variant inheritance origin (if known).",
  "examples": [],
  "title": "Inheritance",
  "x-expanded": null,
  "x-terminology": "VariantInheritance"
  },
  "coordinateSystem": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.",
  "examples": [],
  "title": "Coordinate system",
  "x-expanded": null,
  "x-terminology": "GenomicCoordinateSystem"
  },
  "exactGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The exact integer-based genomic coordinates of the start and end of the variant region. \"High\" can be omitted for single nucleotide variants.",
  "examples": [],
  "title": "Exact genomic coordinates",
  "x-expanded": null
  },
  "innerGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
  "examples": [],
  "title": "Inner genomic coordinates",
  "x-expanded": null
  },
  "outerGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
  "examples": [],
  "title": "Outer genomic coordinates",
  "x-expanded": null
  },
  "clinvar": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Accession number in the ClinVar variant database, given for cross-reference.",
  "examples": [],
  "title": "ClinVar accession number",
  "x-expanded": null
  },
  "genes": {
  "default": [],
  "description": "Gene(s) affected by this variant",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Gene(s)",
  "type": "array",
  "x-expanded": null,
  "x-terminology": "Gene"
  },
  "chromosomes": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Chromosome(s) affected by this variant",
  "examples": [],
  "title": "Chromosome(s)",
  "x-expanded": null,
  "x-terminology": "ChromosomeIdentifier"
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "GenomicVariantCreate",
  "type": "object"
  },
  "RangeSchema": {
  "properties": {
  "start": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "number"
  }
  ],
  "title": "Start"
  },
  "end": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "title": "End"
  }
  },
  "required": [
  "start"
  ],
  "title": "Range",
  "type": "object"
  },
  "GenomicVariantFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "genePanel.not.exists": {
  "description": "Gene panel - Filter for entries without a value",
  "title": "Genepanel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "gene_panel__isnull"
  },
  "genePanel.exists": {
  "description": "Gene panel - Filter for entries with a value",
  "title": "Genepanel.Exists",
  "type": "boolean",
  "x-orm-lookup": "gene_panel__isnull"
  },
  "genePanel": {
  "description": "Gene panel - Filter for full text matches",
  "title": "Genepanel",
  "type": "string",
  "x-orm-lookup": "gene_panel__iexact"
  },
  "genePanel.not": {
  "description": "Gene panel - Filter for full text mismatches",
  "title": "Genepanel.Not",
  "type": "string",
  "x-orm-lookup": "gene_panel__iexact"
  },
  "genePanel.contains": {
  "description": "Gene panel - Filter for partial text matches",
  "title": "Genepanel.Contains",
  "type": "string",
  "x-orm-lookup": "gene_panel__icontains"
  },
  "genePanel.not.contains": {
  "description": "Gene panel - Filter for partial text mismatches",
  "title": "Genepanel.Not.Contains",
  "type": "string",
  "x-orm-lookup": "gene_panel__icontains"
  },
  "genePanel.beginsWith": {
  "description": "Gene panel - Filter for entries starting with the text",
  "title": "Genepanel.Beginswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__istartswith"
  },
  "genePanel.not.beginsWith": {
  "description": "Gene panel - Filter for entries not starting with the text",
  "title": "Genepanel.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__istartswith"
  },
  "genePanel.endsWith": {
  "description": "Gene panel - Filter for entries ending with the text",
  "title": "Genepanel.Endswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__iendswith"
  },
  "genePanel.not.endsWith": {
  "description": "Gene panel - Filter for entries not ending with the text",
  "title": "Genepanel.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "gene_panel__iendswith"
  },
  "assessment.not.exists": {
  "description": "Assessment - Filter for entries without a value",
  "title": "Assessment.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "assessment__isnull"
  },
  "assessment.exists": {
  "description": "Assessment - Filter for entries with a value",
  "title": "Assessment.Exists",
  "type": "boolean",
  "x-orm-lookup": "assessment__isnull"
  },
  "assessment": {
  "allOf": [
  {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  }
  ],
  "description": "Assessment - ('Filter for single value choice',)",
  "x-orm-lookup": "assessment__exact"
  },
  "assessment.not": {
  "allOf": [
  {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  }
  ],
  "description": "Assessment - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "assessment__exact"
  },
  "assessment.anyOf": {
  "description": "Assessment - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "present",
  "absent",
  "no-call",
  "indeterminate"
  ],
  "title": "GenomicVariantAssessmentChoices",
  "type": "string"
  },
  "title": "Assessment.Anyof",
  "type": "array",
  "x-orm-lookup": "assessment__in"
  },
  "confidence.not.exists": {
  "description": "Confidence - Filter for entries without a value",
  "title": "Confidence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "confidence__isnull"
  },
  "confidence.exists": {
  "description": "Confidence - Filter for entries with a value",
  "title": "Confidence.Exists",
  "type": "boolean",
  "x-orm-lookup": "confidence__isnull"
  },
  "confidence": {
  "allOf": [
  {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  }
  ],
  "description": "Confidence - ('Filter for single value choice',)",
  "x-orm-lookup": "confidence__exact"
  },
  "confidence.not": {
  "allOf": [
  {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  }
  ],
  "description": "Confidence - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "confidence__exact"
  },
  "confidence.anyOf": {
  "description": "Confidence - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "low",
  "high",
  "indeterminate"
  ],
  "title": "GenomicVariantConfidenceChoices",
  "type": "string"
  },
  "title": "Confidence.Anyof",
  "type": "array",
  "x-orm-lookup": "confidence__in"
  },
  "analysisMethod.not.exists": {
  "description": "Analysis method - Filter for entries without a value",
  "title": "Analysismethod.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "analysis_method__isnull"
  },
  "analysisMethod.exists": {
  "description": "Analysis method - Filter for entries with a value",
  "title": "Analysismethod.Exists",
  "type": "boolean",
  "x-orm-lookup": "analysis_method__isnull"
  },
  "analysisMethod": {
  "description": "Analysis method - Filter for a matching concept code",
  "title": "Analysismethod",
  "type": "string",
  "x-orm-lookup": "analysis_method__code__iexact"
  },
  "analysisMethod.not": {
  "description": "Analysis method - Filter for a mismatching concept code",
  "title": "Analysismethod.Not",
  "type": "string",
  "x-orm-lookup": "analysis_method__code__iexact"
  },
  "analysisMethod.anyOf": {
  "description": "Analysis method - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analysismethod.Anyof",
  "type": "array",
  "x-orm-lookup": "analysis_method__code__in"
  },
  "analysisMethod.not.anyOf": {
  "description": "Analysis method - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Analysismethod.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "analysis_method__code__in"
  },
  "analysisMethod.descendantsOf": {
  "description": "Analysis method - Filter for all child concepts of a given concepts code",
  "title": "Analysismethod.Descendantsof",
  "type": "string",
  "x-orm-lookup": "analysis_method__None"
  },
  "clinicalRelevance.not.exists": {
  "description": "Clinical relevance - Filter for entries without a value",
  "title": "Clinicalrelevance.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinical_relevance__isnull"
  },
  "clinicalRelevance.exists": {
  "description": "Clinical relevance - Filter for entries with a value",
  "title": "Clinicalrelevance.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinical_relevance__isnull"
  },
  "clinicalRelevance": {
  "allOf": [
  {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  }
  ],
  "description": "Clinical relevance - ('Filter for single value choice',)",
  "x-orm-lookup": "clinical_relevance__exact"
  },
  "clinicalRelevance.not": {
  "allOf": [
  {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  }
  ],
  "description": "Clinical relevance - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "clinical_relevance__exact"
  },
  "clinicalRelevance.anyOf": {
  "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "pathogenic",
  "likely_pathogenic",
  "uncertain_significance",
  "ambiguous",
  "likely_benign",
  "benign"
  ],
  "title": "GenomicVariantClinicalRelevanceChoices",
  "type": "string"
  },
  "title": "Clinicalrelevance.Anyof",
  "type": "array",
  "x-orm-lookup": "clinical_relevance__in"
  },
  "cytogeneticLocation.not.exists": {
  "description": "Cytogenetic location - Filter for entries without a value",
  "title": "Cytogeneticlocation.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "cytogenetic_location__isnull"
  },
  "cytogeneticLocation.exists": {
  "description": "Cytogenetic location - Filter for entries with a value",
  "title": "Cytogeneticlocation.Exists",
  "type": "boolean",
  "x-orm-lookup": "cytogenetic_location__isnull"
  },
  "cytogeneticLocation": {
  "description": "Cytogenetic location - Filter for full text matches",
  "title": "Cytogeneticlocation",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iexact"
  },
  "cytogeneticLocation.not": {
  "description": "Cytogenetic location - Filter for full text mismatches",
  "title": "Cytogeneticlocation.Not",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iexact"
  },
  "cytogeneticLocation.contains": {
  "description": "Cytogenetic location - Filter for partial text matches",
  "title": "Cytogeneticlocation.Contains",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__icontains"
  },
  "cytogeneticLocation.not.contains": {
  "description": "Cytogenetic location - Filter for partial text mismatches",
  "title": "Cytogeneticlocation.Not.Contains",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__icontains"
  },
  "cytogeneticLocation.beginsWith": {
  "description": "Cytogenetic location - Filter for entries starting with the text",
  "title": "Cytogeneticlocation.Beginswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__istartswith"
  },
  "cytogeneticLocation.not.beginsWith": {
  "description": "Cytogenetic location - Filter for entries not starting with the text",
  "title": "Cytogeneticlocation.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__istartswith"
  },
  "cytogeneticLocation.endsWith": {
  "description": "Cytogenetic location - Filter for entries ending with the text",
  "title": "Cytogeneticlocation.Endswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iendswith"
  },
  "cytogeneticLocation.not.endsWith": {
  "description": "Cytogenetic location - Filter for entries not ending with the text",
  "title": "Cytogeneticlocation.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "cytogenetic_location__iendswith"
  },
  "genomeAssemblyVersion.not.exists": {
  "description": "Genome assembly version - Filter for entries without a value",
  "title": "Genomeassemblyversion.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genome_assembly_version__isnull"
  },
  "genomeAssemblyVersion.exists": {
  "description": "Genome assembly version - Filter for entries with a value",
  "title": "Genomeassemblyversion.Exists",
  "type": "boolean",
  "x-orm-lookup": "genome_assembly_version__isnull"
  },
  "genomeAssemblyVersion": {
  "description": "Genome assembly version - Filter for a matching concept code",
  "title": "Genomeassemblyversion",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__code__iexact"
  },
  "genomeAssemblyVersion.not": {
  "description": "Genome assembly version - Filter for a mismatching concept code",
  "title": "Genomeassemblyversion.Not",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__code__iexact"
  },
  "genomeAssemblyVersion.anyOf": {
  "description": "Genome assembly version - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genomeassemblyversion.Anyof",
  "type": "array",
  "x-orm-lookup": "genome_assembly_version__code__in"
  },
  "genomeAssemblyVersion.not.anyOf": {
  "description": "Genome assembly version - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Genomeassemblyversion.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "genome_assembly_version__code__in"
  },
  "genomeAssemblyVersion.descendantsOf": {
  "description": "Genome assembly version - Filter for all child concepts of a given concepts code",
  "title": "Genomeassemblyversion.Descendantsof",
  "type": "string",
  "x-orm-lookup": "genome_assembly_version__None"
  },
  "genomicRefseq.not.exists": {
  "description": "Genomic RefSeq - Filter for entries without a value",
  "title": "Genomicrefseq.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_refseq__isnull"
  },
  "genomicRefseq.exists": {
  "description": "Genomic RefSeq - Filter for entries with a value",
  "title": "Genomicrefseq.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_refseq__isnull"
  },
  "genomicRefseq": {
  "description": "Genomic RefSeq - Filter for full text matches",
  "title": "Genomicrefseq",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iexact"
  },
  "genomicRefseq.not": {
  "description": "Genomic RefSeq - Filter for full text mismatches",
  "title": "Genomicrefseq.Not",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iexact"
  },
  "genomicRefseq.contains": {
  "description": "Genomic RefSeq - Filter for partial text matches",
  "title": "Genomicrefseq.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__icontains"
  },
  "genomicRefseq.not.contains": {
  "description": "Genomic RefSeq - Filter for partial text mismatches",
  "title": "Genomicrefseq.Not.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__icontains"
  },
  "genomicRefseq.beginsWith": {
  "description": "Genomic RefSeq - Filter for entries starting with the text",
  "title": "Genomicrefseq.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__istartswith"
  },
  "genomicRefseq.not.beginsWith": {
  "description": "Genomic RefSeq - Filter for entries not starting with the text",
  "title": "Genomicrefseq.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__istartswith"
  },
  "genomicRefseq.endsWith": {
  "description": "Genomic RefSeq - Filter for entries ending with the text",
  "title": "Genomicrefseq.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iendswith"
  },
  "genomicRefseq.not.endsWith": {
  "description": "Genomic RefSeq - Filter for entries not ending with the text",
  "title": "Genomicrefseq.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_refseq__iendswith"
  },
  "transcriptRefseq.not.exists": {
  "description": "Transcript RefSeq - Filter for entries without a value",
  "title": "Transcriptrefseq.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "transcript_refseq__isnull"
  },
  "transcriptRefseq.exists": {
  "description": "Transcript RefSeq - Filter for entries with a value",
  "title": "Transcriptrefseq.Exists",
  "type": "boolean",
  "x-orm-lookup": "transcript_refseq__isnull"
  },
  "transcriptRefseq": {
  "description": "Transcript RefSeq - Filter for full text matches",
  "title": "Transcriptrefseq",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iexact"
  },
  "transcriptRefseq.not": {
  "description": "Transcript RefSeq - Filter for full text mismatches",
  "title": "Transcriptrefseq.Not",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iexact"
  },
  "transcriptRefseq.contains": {
  "description": "Transcript RefSeq - Filter for partial text matches",
  "title": "Transcriptrefseq.Contains",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__icontains"
  },
  "transcriptRefseq.not.contains": {
  "description": "Transcript RefSeq - Filter for partial text mismatches",
  "title": "Transcriptrefseq.Not.Contains",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__icontains"
  },
  "transcriptRefseq.beginsWith": {
  "description": "Transcript RefSeq - Filter for entries starting with the text",
  "title": "Transcriptrefseq.Beginswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__istartswith"
  },
  "transcriptRefseq.not.beginsWith": {
  "description": "Transcript RefSeq - Filter for entries not starting with the text",
  "title": "Transcriptrefseq.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__istartswith"
  },
  "transcriptRefseq.endsWith": {
  "description": "Transcript RefSeq - Filter for entries ending with the text",
  "title": "Transcriptrefseq.Endswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iendswith"
  },
  "transcriptRefseq.not.endsWith": {
  "description": "Transcript RefSeq - Filter for entries not ending with the text",
  "title": "Transcriptrefseq.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "transcript_refseq__iendswith"
  },
  "codingHgvs.not.exists": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries without a value",
  "title": "Codinghgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "coding_hgvs__isnull"
  },
  "codingHgvs.exists": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries with a value",
  "title": "Codinghgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "coding_hgvs__isnull"
  },
  "codingHgvs": {
  "description": "Coding DNA change expression (cHGVS) - Filter for full text matches",
  "title": "Codinghgvs",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iexact"
  },
  "codingHgvs.not": {
  "description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches",
  "title": "Codinghgvs.Not",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iexact"
  },
  "codingHgvs.contains": {
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text matches",
  "title": "Codinghgvs.Contains",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__icontains"
  },
  "codingHgvs.not.contains": {
  "description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches",
  "title": "Codinghgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__icontains"
  },
  "codingHgvs.beginsWith": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text",
  "title": "Codinghgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__istartswith"
  },
  "codingHgvs.not.beginsWith": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text",
  "title": "Codinghgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__istartswith"
  },
  "codingHgvs.endsWith": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text",
  "title": "Codinghgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iendswith"
  },
  "codingHgvs.not.endsWith": {
  "description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text",
  "title": "Codinghgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "coding_hgvs__iendswith"
  },
  "proteinHgvs.not.exists": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value",
  "title": "Proteinhgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "protein_hgvs__isnull"
  },
  "proteinHgvs.exists": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value",
  "title": "Proteinhgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "protein_hgvs__isnull"
  },
  "proteinHgvs": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches",
  "title": "Proteinhgvs",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iexact"
  },
  "proteinHgvs.not": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches",
  "title": "Proteinhgvs.Not",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iexact"
  },
  "proteinHgvs.contains": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches",
  "title": "Proteinhgvs.Contains",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__icontains"
  },
  "proteinHgvs.not.contains": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches",
  "title": "Proteinhgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__icontains"
  },
  "proteinHgvs.beginsWith": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text",
  "title": "Proteinhgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__istartswith"
  },
  "proteinHgvs.not.beginsWith": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text",
  "title": "Proteinhgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__istartswith"
  },
  "proteinHgvs.endsWith": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text",
  "title": "Proteinhgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iendswith"
  },
  "proteinHgvs.not.endsWith": {
  "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text",
  "title": "Proteinhgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "protein_hgvs__iendswith"
  },
  "genomicHgvs.not.exists": {
  "description": "Genomic change expression (gHGVS) - Filter for entries without a value",
  "title": "Genomichgvs.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_hgvs__isnull"
  },
  "genomicHgvs.exists": {
  "description": "Genomic change expression (gHGVS) - Filter for entries with a value",
  "title": "Genomichgvs.Exists",
  "type": "boolean",
  "x-orm-lookup": "genomic_hgvs__isnull"
  },
  "genomicHgvs": {
  "description": "Genomic change expression (gHGVS) - Filter for full text matches",
  "title": "Genomichgvs",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iexact"
  },
  "genomicHgvs.not": {
  "description": "Genomic change expression (gHGVS) - Filter for full text mismatches",
  "title": "Genomichgvs.Not",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iexact"
  },
  "genomicHgvs.contains": {
  "description": "Genomic change expression (gHGVS) - Filter for partial text matches",
  "title": "Genomichgvs.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__icontains"
  },
  "genomicHgvs.not.contains": {
  "description": "Genomic change expression (gHGVS) - Filter for partial text mismatches",
  "title": "Genomichgvs.Not.Contains",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__icontains"
  },
  "genomicHgvs.beginsWith": {
  "description": "Genomic change expression (gHGVS) - Filter for entries starting with the text",
  "title": "Genomichgvs.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__istartswith"
  },
  "genomicHgvs.not.beginsWith": {
  "description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text",
  "title": "Genomichgvs.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__istartswith"
  },
  "genomicHgvs.endsWith": {
  "description": "Genomic change expression (gHGVS) - Filter for entries ending with the text",
  "title": "Genomichgvs.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iendswith"
  },
  "genomicHgvs.not.endsWith": {
  "description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text",
  "title": "Genomichgvs.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "genomic_hgvs__iendswith"
  },
  "dnaChangeType.not.exists": {
  "description": "Coding DNA change type - Filter for entries without a value",
  "title": "Dnachangetype.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "dna_change_type__isnull"
  },
  "dnaChangeType.exists": {
  "description": "Coding DNA change type - Filter for entries with a value",
  "title": "Dnachangetype.Exists",
  "type": "boolean",
  "x-orm-lookup": "dna_change_type__isnull"
  },
  "dnaChangeType": {
  "description": "Coding DNA change type - Filter for a matching concept code",
  "title": "Dnachangetype",
  "type": "string",
  "x-orm-lookup": "dna_change_type__code__iexact"
  },
  "dnaChangeType.not": {
  "description": "Coding DNA change type - Filter for a mismatching concept code",
  "title": "Dnachangetype.Not",
  "type": "string",
  "x-orm-lookup": "dna_change_type__code__iexact"
  },
  "dnaChangeType.anyOf": {
  "description": "Coding DNA change type - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dnachangetype.Anyof",
  "type": "array",
  "x-orm-lookup": "dna_change_type__code__in"
  },
  "dnaChangeType.not.anyOf": {
  "description": "Coding DNA change type - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Dnachangetype.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "dna_change_type__code__in"
  },
  "dnaChangeType.descendantsOf": {
  "description": "Coding DNA change type - Filter for all child concepts of a given concepts code",
  "title": "Dnachangetype.Descendantsof",
  "type": "string",
  "x-orm-lookup": "dna_change_type__None"
  },
  "aminoacidChangeType.not.exists": {
  "description": "Aminoacid change type - Filter for entries without a value",
  "title": "Aminoacidchangetype.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "aminoacid_change_type__isnull"
  },
  "aminoacidChangeType.exists": {
  "description": "Aminoacid change type - Filter for entries with a value",
  "title": "Aminoacidchangetype.Exists",
  "type": "boolean",
  "x-orm-lookup": "aminoacid_change_type__isnull"
  },
  "aminoacidChangeType": {
  "description": "Aminoacid change type - Filter for a matching concept code",
  "title": "Aminoacidchangetype",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__code__iexact"
  },
  "aminoacidChangeType.not": {
  "description": "Aminoacid change type - Filter for a mismatching concept code",
  "title": "Aminoacidchangetype.Not",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__code__iexact"
  },
  "aminoacidChangeType.anyOf": {
  "description": "Aminoacid change type - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Aminoacidchangetype.Anyof",
  "type": "array",
  "x-orm-lookup": "aminoacid_change_type__code__in"
  },
  "aminoacidChangeType.not.anyOf": {
  "description": "Aminoacid change type - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Aminoacidchangetype.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "aminoacid_change_type__code__in"
  },
  "aminoacidChangeType.descendantsOf": {
  "description": "Aminoacid change type - Filter for all child concepts of a given concepts code",
  "title": "Aminoacidchangetype.Descendantsof",
  "type": "string",
  "x-orm-lookup": "aminoacid_change_type__None"
  },
  "molecularConsequence.not.exists": {
  "description": "Molecular consequence - Filter for entries without a value",
  "title": "Molecularconsequence.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "molecular_consequence__isnull"
  },
  "molecularConsequence.exists": {
  "description": "Molecular consequence - Filter for entries with a value",
  "title": "Molecularconsequence.Exists",
  "type": "boolean",
  "x-orm-lookup": "molecular_consequence__isnull"
  },
  "molecularConsequence": {
  "description": "Molecular consequence - Filter for a matching concept code",
  "title": "Molecularconsequence",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__code__iexact"
  },
  "molecularConsequence.not": {
  "description": "Molecular consequence - Filter for a mismatching concept code",
  "title": "Molecularconsequence.Not",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__code__iexact"
  },
  "molecularConsequence.anyOf": {
  "description": "Molecular consequence - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Molecularconsequence.Anyof",
  "type": "array",
  "x-orm-lookup": "molecular_consequence__code__in"
  },
  "molecularConsequence.not.anyOf": {
  "description": "Molecular consequence - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Molecularconsequence.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "molecular_consequence__code__in"
  },
  "molecularConsequence.descendantsOf": {
  "description": "Molecular consequence - Filter for all child concepts of a given concepts code",
  "title": "Molecularconsequence.Descendantsof",
  "type": "string",
  "x-orm-lookup": "molecular_consequence__None"
  },
  "copyNumber.not.exists": {
  "description": "Copy number - Filter for entries without a value",
  "title": "Copynumber.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "copy_number__isnull"
  },
  "copyNumber.exists": {
  "description": "Copy number - Filter for entries with a value",
  "title": "Copynumber.Exists",
  "type": "boolean",
  "x-orm-lookup": "copy_number__isnull"
  },
  "copyNumber.lessThan": {
  "description": "Copy number - Filter for entries with values less than the specified value",
  "title": "Copynumber.Lessthan",
  "type": "integer",
  "x-orm-lookup": "copy_number__lt"
  },
  "copyNumber.lessThanOrEqual": {
  "description": "Copy number - Filter for entries with values less than or equal to the specified value",
  "title": "Copynumber.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "copy_number__lte"
  },
  "copyNumber.greaterThan": {
  "description": "Copy number - Filter for entries with values greater than the specified value",
  "title": "Copynumber.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "copy_number__gt"
  },
  "copyNumber.greaterThanOrEqual": {
  "description": "Copy number - Filter for entries with values greater than or equal to the specified value",
  "title": "Copynumber.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "copy_number__gte"
  },
  "copyNumber.equal": {
  "description": "Copy number - Filter for entries with values exactly equal to the specified value",
  "title": "Copynumber.Equal",
  "type": "integer",
  "x-orm-lookup": "copy_number__exact"
  },
  "copyNumber.not.equal": {
  "description": "Copy number - Filter for entries with values not equal to the specified value",
  "title": "Copynumber.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "copy_number__exact"
  },
  "copyNumber.between": {
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Copynumber.Between",
  "type": "array",
  "x-orm-lookup": "copy_number__range"
  },
  "copyNumber.not.between": {
  "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Copynumber.Not.Between",
  "type": "array",
  "x-orm-lookup": "copy_number__range"
  },
  "alleleFrequency.not.exists": {
  "description": "Allele frequency - Filter for entries without a value",
  "title": "Allelefrequency.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_frequency__isnull"
  },
  "alleleFrequency.exists": {
  "description": "Allele frequency - Filter for entries with a value",
  "title": "Allelefrequency.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_frequency__isnull"
  },
  "alleleFrequency.lessThan": {
  "description": "Allele frequency - Filter for entries with values less than the specified value",
  "title": "Allelefrequency.Lessthan",
  "type": "number",
  "x-orm-lookup": "allele_frequency__lt"
  },
  "alleleFrequency.lessThanOrEqual": {
  "description": "Allele frequency - Filter for entries with values less than or equal to the specified value",
  "title": "Allelefrequency.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__lte"
  },
  "alleleFrequency.greaterThan": {
  "description": "Allele frequency - Filter for entries with values greater than the specified value",
  "title": "Allelefrequency.Greaterthan",
  "type": "number",
  "x-orm-lookup": "allele_frequency__gt"
  },
  "alleleFrequency.greaterThanOrEqual": {
  "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value",
  "title": "Allelefrequency.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__gte"
  },
  "alleleFrequency.equal": {
  "description": "Allele frequency - Filter for entries with values exactly equal to the specified value",
  "title": "Allelefrequency.Equal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__exact"
  },
  "alleleFrequency.not.equal": {
  "description": "Allele frequency - Filter for entries with values not equal to the specified value",
  "title": "Allelefrequency.Not.Equal",
  "type": "number",
  "x-orm-lookup": "allele_frequency__exact"
  },
  "alleleFrequency.between": {
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Allelefrequency.Between",
  "type": "array",
  "x-orm-lookup": "allele_frequency__range"
  },
  "alleleFrequency.not.between": {
  "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Allelefrequency.Not.Between",
  "type": "array",
  "x-orm-lookup": "allele_frequency__range"
  },
  "alleleDepth.not.exists": {
  "description": "Allele depth (reads) - Filter for entries without a value",
  "title": "Alleledepth.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_depth__isnull"
  },
  "alleleDepth.exists": {
  "description": "Allele depth (reads) - Filter for entries with a value",
  "title": "Alleledepth.Exists",
  "type": "boolean",
  "x-orm-lookup": "allele_depth__isnull"
  },
  "alleleDepth.lessThan": {
  "description": "Allele depth (reads) - Filter for entries with values less than the specified value",
  "title": "Alleledepth.Lessthan",
  "type": "integer",
  "x-orm-lookup": "allele_depth__lt"
  },
  "alleleDepth.lessThanOrEqual": {
  "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value",
  "title": "Alleledepth.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__lte"
  },
  "alleleDepth.greaterThan": {
  "description": "Allele depth (reads) - Filter for entries with values greater than the specified value",
  "title": "Alleledepth.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "allele_depth__gt"
  },
  "alleleDepth.greaterThanOrEqual": {
  "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value",
  "title": "Alleledepth.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__gte"
  },
  "alleleDepth.equal": {
  "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value",
  "title": "Alleledepth.Equal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__exact"
  },
  "alleleDepth.not.equal": {
  "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value",
  "title": "Alleledepth.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "allele_depth__exact"
  },
  "alleleDepth.between": {
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Alleledepth.Between",
  "type": "array",
  "x-orm-lookup": "allele_depth__range"
  },
  "alleleDepth.not.between": {
  "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Alleledepth.Not.Between",
  "type": "array",
  "x-orm-lookup": "allele_depth__range"
  },
  "zygosity.not.exists": {
  "description": "Zygosity - Filter for entries without a value",
  "title": "Zygosity.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "zygosity__isnull"
  },
  "zygosity.exists": {
  "description": "Zygosity - Filter for entries with a value",
  "title": "Zygosity.Exists",
  "type": "boolean",
  "x-orm-lookup": "zygosity__isnull"
  },
  "zygosity": {
  "description": "Zygosity - Filter for a matching concept code",
  "title": "Zygosity",
  "type": "string",
  "x-orm-lookup": "zygosity__code__iexact"
  },
  "zygosity.not": {
  "description": "Zygosity - Filter for a mismatching concept code",
  "title": "Zygosity.Not",
  "type": "string",
  "x-orm-lookup": "zygosity__code__iexact"
  },
  "zygosity.anyOf": {
  "description": "Zygosity - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Zygosity.Anyof",
  "type": "array",
  "x-orm-lookup": "zygosity__code__in"
  },
  "zygosity.not.anyOf": {
  "description": "Zygosity - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Zygosity.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "zygosity__code__in"
  },
  "zygosity.descendantsOf": {
  "description": "Zygosity - Filter for all child concepts of a given concepts code",
  "title": "Zygosity.Descendantsof",
  "type": "string",
  "x-orm-lookup": "zygosity__None"
  },
  "inheritance.not.exists": {
  "description": "Inheritance - Filter for entries without a value",
  "title": "Inheritance.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "inheritance__isnull"
  },
  "inheritance.exists": {
  "description": "Inheritance - Filter for entries with a value",
  "title": "Inheritance.Exists",
  "type": "boolean",
  "x-orm-lookup": "inheritance__isnull"
  },
  "inheritance": {
  "description": "Inheritance - Filter for a matching concept code",
  "title": "Inheritance",
  "type": "string",
  "x-orm-lookup": "inheritance__code__iexact"
  },
  "inheritance.not": {
  "description": "Inheritance - Filter for a mismatching concept code",
  "title": "Inheritance.Not",
  "type": "string",
  "x-orm-lookup": "inheritance__code__iexact"
  },
  "inheritance.anyOf": {
  "description": "Inheritance - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Inheritance.Anyof",
  "type": "array",
  "x-orm-lookup": "inheritance__code__in"
  },
  "inheritance.not.anyOf": {
  "description": "Inheritance - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Inheritance.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "inheritance__code__in"
  },
  "inheritance.descendantsOf": {
  "description": "Inheritance - Filter for all child concepts of a given concepts code",
  "title": "Inheritance.Descendantsof",
  "type": "string",
  "x-orm-lookup": "inheritance__None"
  },
  "coordinateSystem.not.exists": {
  "description": "Coordinate system - Filter for entries without a value",
  "title": "Coordinatesystem.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "coordinate_system__isnull"
  },
  "coordinateSystem.exists": {
  "description": "Coordinate system - Filter for entries with a value",
  "title": "Coordinatesystem.Exists",
  "type": "boolean",
  "x-orm-lookup": "coordinate_system__isnull"
  },
  "coordinateSystem": {
  "description": "Coordinate system - Filter for a matching concept code",
  "title": "Coordinatesystem",
  "type": "string",
  "x-orm-lookup": "coordinate_system__code__iexact"
  },
  "coordinateSystem.not": {
  "description": "Coordinate system - Filter for a mismatching concept code",
  "title": "Coordinatesystem.Not",
  "type": "string",
  "x-orm-lookup": "coordinate_system__code__iexact"
  },
  "coordinateSystem.anyOf": {
  "description": "Coordinate system - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Coordinatesystem.Anyof",
  "type": "array",
  "x-orm-lookup": "coordinate_system__code__in"
  },
  "coordinateSystem.not.anyOf": {
  "description": "Coordinate system - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Coordinatesystem.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "coordinate_system__code__in"
  },
  "coordinateSystem.descendantsOf": {
  "description": "Coordinate system - Filter for all child concepts of a given concepts code",
  "title": "Coordinatesystem.Descendantsof",
  "type": "string",
  "x-orm-lookup": "coordinate_system__None"
  },
  "exactGenomicCoordinates.not.exists": {
  "description": "Exact genomic coordinates - Filter for entries without a value",
  "title": "Exactgenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "exact_genomic_coordinates__isnull"
  },
  "exactGenomicCoordinates.exists": {
  "description": "Exact genomic coordinates - Filter for entries with a value",
  "title": "Exactgenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "exact_genomic_coordinates__isnull"
  },
  "innerGenomicCoordinates.not.exists": {
  "description": "Inner genomic coordinates - Filter for entries without a value",
  "title": "Innergenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "inner_genomic_coordinates__isnull"
  },
  "innerGenomicCoordinates.exists": {
  "description": "Inner genomic coordinates - Filter for entries with a value",
  "title": "Innergenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "inner_genomic_coordinates__isnull"
  },
  "outerGenomicCoordinates.not.exists": {
  "description": "Outer genomic coordinates - Filter for entries without a value",
  "title": "Outergenomiccoordinates.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "outer_genomic_coordinates__isnull"
  },
  "outerGenomicCoordinates.exists": {
  "description": "Outer genomic coordinates - Filter for entries with a value",
  "title": "Outergenomiccoordinates.Exists",
  "type": "boolean",
  "x-orm-lookup": "outer_genomic_coordinates__isnull"
  },
  "clinvar.not.exists": {
  "description": "ClinVar accession number - Filter for entries without a value",
  "title": "Clinvar.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinvar__isnull"
  },
  "clinvar.exists": {
  "description": "ClinVar accession number - Filter for entries with a value",
  "title": "Clinvar.Exists",
  "type": "boolean",
  "x-orm-lookup": "clinvar__isnull"
  },
  "clinvar": {
  "description": "ClinVar accession number - Filter for full text matches",
  "title": "Clinvar",
  "type": "string",
  "x-orm-lookup": "clinvar__iexact"
  },
  "clinvar.not": {
  "description": "ClinVar accession number - Filter for full text mismatches",
  "title": "Clinvar.Not",
  "type": "string",
  "x-orm-lookup": "clinvar__iexact"
  },
  "clinvar.contains": {
  "description": "ClinVar accession number - Filter for partial text matches",
  "title": "Clinvar.Contains",
  "type": "string",
  "x-orm-lookup": "clinvar__icontains"
  },
  "clinvar.not.contains": {
  "description": "ClinVar accession number - Filter for partial text mismatches",
  "title": "Clinvar.Not.Contains",
  "type": "string",
  "x-orm-lookup": "clinvar__icontains"
  },
  "clinvar.beginsWith": {
  "description": "ClinVar accession number - Filter for entries starting with the text",
  "title": "Clinvar.Beginswith",
  "type": "string",
  "x-orm-lookup": "clinvar__istartswith"
  },
  "clinvar.not.beginsWith": {
  "description": "ClinVar accession number - Filter for entries not starting with the text",
  "title": "Clinvar.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "clinvar__istartswith"
  },
  "clinvar.endsWith": {
  "description": "ClinVar accession number - Filter for entries ending with the text",
  "title": "Clinvar.Endswith",
  "type": "string",
  "x-orm-lookup": "clinvar__iendswith"
  },
  "clinvar.not.endsWith": {
  "description": "ClinVar accession number - Filter for entries not ending with the text",
  "title": "Clinvar.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "clinvar__iendswith"
  },
  "genes.code": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.system": {
  "description": "None - Filter for full text matches",
  "title": "Genes.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.display": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.version": {
  "description": "None - Filter for full text matches",
  "title": "Genes.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Genes.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "genes.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Genes.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Genes.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "genes.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Genes.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Genes.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "genes.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Genes.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Genes.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "genes.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Genes.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "genes.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Genes.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.code": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.system": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.display": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.version": {
  "description": "None - Filter for full text matches",
  "title": "Chromosomes.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Chromosomes.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "chromosomes.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Chromosomes.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Chromosomes.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "chromosomes.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Chromosomes.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Chromosomes.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "chromosomes.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Chromosomes.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Chromosomes.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "chromosomes.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Chromosomes.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "chromosomes.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Chromosomes.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  }
  },
  "title": "GenomicVariantFilters",
  "type": "object"
  },
  "GenomicVariantSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who' genomic variant is described",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the genomic variant was detected and/or reported.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "genePanel": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Commercial or official name of the gene panel tested to identify the variant",
  "examples": [],
  "title": "Gene panel",
  "x-expanded": null
  },
  "assessment": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantAssessmentChoices",
  "maxLength": 15
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.",
  "examples": [],
  "title": "Assessment",
  "x-expanded": null
  },
  "confidence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantConfidenceChoices",
  "maxLength": 15
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.",
  "examples": [],
  "title": "Confidence",
  "x-expanded": null
  },
  "analysisMethod": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Analysis method used to detect the variant",
  "examples": [],
  "title": "Analysis method",
  "x-expanded": null,
  "x-terminology": "StructuralVariantAnalysisMethod"
  },
  "clinicalRelevance": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the clinical relevance or pathogenicity of the variant.",
  "examples": [],
  "title": "Clinical relevance",
  "x-expanded": null
  },
  "cytogeneticLocation": {
  "anyOf": [
  {
  "maxLength": 60,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genetic address of the variant specifying the relevant chromosomal region.",
  "examples": [],
  "title": "Cytogenetic location",
  "x-expanded": null
  },
  "genomeAssemblyVersion": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The reference genome assembly versionused in this analysis.",
  "examples": [],
  "title": "Genome assembly version",
  "x-expanded": null,
  "x-terminology": "ReferenceGenomeBuild"
  },
  "genomicRefseq": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')",
  "examples": [],
  "title": "Genomic RefSeq",
  "x-expanded": null
  },
  "transcriptRefseq": {
  "anyOf": [
  {
  "maxLength": 200,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)",
  "examples": [],
  "title": "Transcript RefSeq",
  "x-expanded": null
  },
  "codingHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T",
  "examples": [],
  "title": "Coding DNA change expression (cHGVS)",
  "x-expanded": null
  },
  "proteinHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)",
  "examples": [],
  "title": "Protein/aminoacid change expression (pHGVS)",
  "x-expanded": null
  },
  "genomicHgvs": {
  "anyOf": [
  {
  "maxLength": 500,
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup",
  "examples": [],
  "title": "Genomic change expression (gHGVS)",
  "x-expanded": null
  },
  "dnaChangeType": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the DNA change type of the variant.",
  "examples": [],
  "title": "Coding DNA change type",
  "x-expanded": null,
  "x-terminology": "DnaChangeType"
  },
  "aminoacidChangeType": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Classification of the amino acid change type",
  "examples": [],
  "title": "Aminoacid change type",
  "x-expanded": null,
  "x-terminology": "AminoAcidChangeType"
  },
  "molecularConsequence": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.",
  "examples": [],
  "title": "Molecular consequence",
  "x-expanded": null,
  "x-terminology": "MolecularConsequence"
  },
  "copyNumber": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.",
  "examples": [],
  "title": "Copy number",
  "x-expanded": null
  },
  "alleleFrequency": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.",
  "examples": [],
  "title": "Allele frequency",
  "x-expanded": null
  },
  "alleleDepth": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.",
  "examples": [],
  "title": "Allele depth (reads)",
  "x-expanded": null
  },
  "zygosity": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The observed level of occurrence of the variant in the set of chromosomes.",
  "examples": [],
  "title": "Zygosity",
  "x-expanded": null,
  "x-terminology": "Zygosity"
  },
  "inheritance": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Variant inheritance origin (if known).",
  "examples": [],
  "title": "Inheritance",
  "x-expanded": null,
  "x-terminology": "VariantInheritance"
  },
  "coordinateSystem": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.",
  "examples": [],
  "title": "Coordinate system",
  "x-expanded": null,
  "x-terminology": "GenomicCoordinateSystem"
  },
  "exactGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The exact integer-based genomic coordinates of the start and end of the variant region. \"High\" can be omitted for single nucleotide variants.",
  "examples": [],
  "title": "Exact genomic coordinates",
  "x-expanded": null
  },
  "innerGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
  "examples": [],
  "title": "Inner genomic coordinates",
  "x-expanded": null
  },
  "outerGenomicCoordinates": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/RangeSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
  "examples": [],
  "title": "Outer genomic coordinates",
  "x-expanded": null
  },
  "clinvar": {
  "anyOf": [
  {
  "type": "string"
  },
  {
  "type": "null"
  }
  ],
  "description": "Accession number in the ClinVar variant database, given for cross-reference.",
  "examples": [],
  "title": "ClinVar accession number",
  "x-expanded": null
  },
  "genes": {
  "default": [],
  "description": "Gene(s) affected by this variant",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Gene(s)",
  "type": "array",
  "x-expanded": null,
  "x-terminology": "Gene"
  },
  "chromosomes": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Chromosome(s) affected by this variant",
  "examples": [],
  "title": "Chromosome(s)",
  "x-expanded": null,
  "x-terminology": "ChromosomeIdentifier"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date"
  ],
  "title": "GenomicVariant",
  "type": "object"
  },
  "Paginated_GenomicVariantSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/GenomicVariantSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[GenomicVariantSchema]",
  "type": "object"
  },
  "AneuploidScoreCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual aneuploid score (AS) value in total altered arms",
  "examples": [],
  "title": "Value",
  "type": "integer",
  "x-expanded": null
  },
  "category": {
  "const": "aneuploid_score",
  "default": "aneuploid_score",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "value"
  ],
  "title": "AneuploidScoreCreate",
  "type": "object"
  },
  "HomologousRecombinationDeficiencyCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Homologous recombination deficiency (HRD) score value",
  "examples": [],
  "title": "Value",
  "x-expanded": null
  },
  "interpretation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Homologous recombination deficiency (HRD) interpretation",
  "examples": [],
  "title": "Interpretation",
  "x-expanded": null
  },
  "category": {
  "const": "homologous_recombination_deficiency",
  "default": "homologous_recombination_deficiency",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "HomologousRecombinationDeficiencyCreate",
  "type": "object"
  },
  "HomologousRecombinationDeficiencyInterpretationChoices": {
  "enum": [
  "positive",
  "negative",
  "indeterminate"
  ],
  "title": "HomologousRecombinationDeficiencyInterpretationChoices",
  "type": "string"
  },
  "LossOfHeterozygosityCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "Loss of heterozygosity (LOH) as a percentage",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "category": {
  "const": "loss_of_heterozygosity",
  "default": "loss_of_heterozygosity",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "value"
  ],
  "title": "LossOfHeterozygosityCreate",
  "type": "object"
  },
  "MicrosatelliteInstabilityCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Microsatellite instability (MSI) classification",
  "examples": [],
  "title": "Value",
  "x-expanded": null,
  "x-terminology": "MicrosatelliteInstabilityState"
  },
  "category": {
  "const": "microsatellite_instability",
  "default": "microsatellite_instability",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "value"
  ],
  "title": "MicrosatelliteInstabilityCreate",
  "type": "object"
  },
  "TumorMutationalBurdenCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual tumor mutational burden (TMB) value in mutations/Mb",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "status": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Cclassification of the tumor mutational burden (TMB) status",
  "examples": [],
  "title": "Status",
  "x-expanded": null
  },
  "category": {
  "const": "tumor_mutational_burden",
  "default": "tumor_mutational_burden",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "value"
  ],
  "title": "TumorMutationalBurdenCreate",
  "type": "object"
  },
  "TumorMutationalBurdenStatusChoices": {
  "enum": [
  "low",
  "high",
  "intermediate",
  "indeterminate"
  ],
  "title": "TumorMutationalBurdenStatusChoices",
  "type": "string"
  },
  "TumorNeoantigenBurdenCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "category": {
  "const": "tumor_neoantigen_burden",
  "default": "tumor_neoantigen_burden",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "caseId",
  "date",
  "value"
  ],
  "title": "TumorNeoantigenBurdenCreate",
  "type": "object"
  },
  "GenomicSignatureFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "category": {
  "allOf": [
  {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "category.not": {
  "allOf": [
  {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  }
  ],
  "description": "None - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "None__exact"
  },
  "category.anyOf": {
  "description": "None - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  },
  "title": "Category.Anyof",
  "type": "array",
  "x-orm-lookup": "None__in"
  }
  },
  "title": "GenomicSignatureFilters",
  "type": "object"
  },
  "GenomicSignatureTypes": {
  "enum": [
  "tumor_mutational_burden",
  "loss_of_heterozygosity",
  "microsatellite_instability",
  "homologous_recombination_deficiency",
  "tumor_neoantigen_burden",
  "aneuploid_score"
  ],
  "title": "GenomicSignatureTypes",
  "type": "string"
  },
  "AneuploidScoreSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual aneuploid score (AS) value in total altered arms",
  "examples": [],
  "title": "Value",
  "type": "integer",
  "x-expanded": null
  },
  "category": {
  "const": "aneuploid_score",
  "default": "aneuploid_score",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "value"
  ],
  "title": "AneuploidScore",
  "type": "object"
  },
  "AnyGenomicSignature": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MicrosatelliteInstabilitySchema"
  },
  {
  "$ref": "#/components/schemas/TumorMutationalBurdenSchema"
  },
  {
  "$ref": "#/components/schemas/LossOfHeterozygositySchema"
  },
  {
  "$ref": "#/components/schemas/HomologousRecombinationDeficiencySchema"
  },
  {
  "$ref": "#/components/schemas/TumorNeoantigenBurdenSchema"
  },
  {
  "$ref": "#/components/schemas/AneuploidScoreSchema"
  }
  ]
  },
  "HomologousRecombinationDeficiencySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Homologous recombination deficiency (HRD) score value",
  "examples": [],
  "title": "Value",
  "x-expanded": null
  },
  "interpretation": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Homologous recombination deficiency (HRD) interpretation",
  "examples": [],
  "title": "Interpretation",
  "x-expanded": null
  },
  "category": {
  "const": "homologous_recombination_deficiency",
  "default": "homologous_recombination_deficiency",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date"
  ],
  "title": "HomologousRecombinationDeficiency",
  "type": "object"
  },
  "LossOfHeterozygositySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "Loss of heterozygosity (LOH) as a percentage",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "category": {
  "const": "loss_of_heterozygosity",
  "default": "loss_of_heterozygosity",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "value"
  ],
  "title": "LossOfHeterozygosity",
  "type": "object"
  },
  "MicrosatelliteInstabilitySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Microsatellite instability (MSI) classification",
  "examples": [],
  "title": "Value",
  "x-expanded": null,
  "x-terminology": "MicrosatelliteInstabilityState"
  },
  "category": {
  "const": "microsatellite_instability",
  "default": "microsatellite_instability",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "value"
  ],
  "title": "MicrosatelliteInstability",
  "type": "object"
  },
  "Paginated_AnyGenomicSignature_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/AnyGenomicSignature"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[AnyGenomicSignature]",
  "type": "object"
  },
  "TumorMutationalBurdenSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual tumor mutational burden (TMB) value in mutations/Mb",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "status": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"
  },
  {
  "type": "null"
  }
  ],
  "description": "Cclassification of the tumor mutational burden (TMB) status",
  "examples": [],
  "title": "Status",
  "x-expanded": null
  },
  "category": {
  "const": "tumor_mutational_burden",
  "default": "tumor_mutational_burden",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "value"
  ],
  "title": "TumorMutationalBurden",
  "type": "object"
  },
  "TumorNeoantigenBurdenSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "value": {
  "description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb",
  "examples": [],
  "title": "Value",
  "type": "number",
  "x-expanded": null
  },
  "category": {
  "const": "tumor_neoantigen_burden",
  "default": "tumor_neoantigen_burden",
  "title": "Category",
  "type": "string"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "value"
  ],
  "title": "TumorNeoantigenBurden",
  "type": "object"
  },
  "LifestyleCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "smokingStatus": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Frequency of alcohol consumption",
  "examples": [],
  "title": "Alcohol consumption",
  "x-expanded": null,
  "x-terminology": "SmokingStatus"
  },
  "smokingPackyears": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Smoking pack-years (if applicable)",
  "examples": [],
  "title": "Smoking packyears",
  "x-expanded": null
  },
  "smokingQuited": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated time since quitting smoking (if applicable)",
  "examples": [],
  "title": "Time since quitted smoking",
  "x-expanded": null
  },
  "alcoholConsumption": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Frequency of alcohol consumption",
  "examples": [],
  "title": "Alcohol consumption",
  "x-expanded": null,
  "x-terminology": "AlcoholConsumptionFrequency"
  },
  "nightSleep": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated average sleep time per night",
  "examples": [],
  "title": "Night sleep",
  "x-expanded": null
  },
  "recreationalDrugs": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Any recreational drug(s) used by the patient",
  "examples": [],
  "title": "Recreational drugs",
  "x-expanded": null,
  "x-terminology": "RecreationalDrug"
  },
  "exposures": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Environmental or occupational exposures to hazards or carcinogenic agents",
  "examples": [],
  "title": "Exposures",
  "x-expanded": null,
  "x-terminology": "ExposureAgent"
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "LifestyleCreate",
  "type": "object"
  },
  "LifestyleFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "smokingStatus.not.exists": {
  "description": "Alcohol consumption - Filter for entries without a value",
  "title": "Smokingstatus.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_status__isnull"
  },
  "smokingStatus.exists": {
  "description": "Alcohol consumption - Filter for entries with a value",
  "title": "Smokingstatus.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_status__isnull"
  },
  "smokingStatus": {
  "description": "Alcohol consumption - Filter for a matching concept code",
  "title": "Smokingstatus",
  "type": "string",
  "x-orm-lookup": "smoking_status__code__iexact"
  },
  "smokingStatus.not": {
  "description": "Alcohol consumption - Filter for a mismatching concept code",
  "title": "Smokingstatus.Not",
  "type": "string",
  "x-orm-lookup": "smoking_status__code__iexact"
  },
  "smokingStatus.anyOf": {
  "description": "Alcohol consumption - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Smokingstatus.Anyof",
  "type": "array",
  "x-orm-lookup": "smoking_status__code__in"
  },
  "smokingStatus.not.anyOf": {
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Smokingstatus.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "smoking_status__code__in"
  },
  "smokingStatus.descendantsOf": {
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
  "title": "Smokingstatus.Descendantsof",
  "type": "string",
  "x-orm-lookup": "smoking_status__None"
  },
  "smokingPackyears.not.exists": {
  "description": "Smoking packyears - Filter for entries without a value",
  "title": "Smokingpackyears.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_packyears__isnull"
  },
  "smokingPackyears.exists": {
  "description": "Smoking packyears - Filter for entries with a value",
  "title": "Smokingpackyears.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_packyears__isnull"
  },
  "smokingPackyears.lessThan": {
  "description": "Smoking packyears - Filter for entries with values less than the specified value",
  "title": "Smokingpackyears.Lessthan",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__lt"
  },
  "smokingPackyears.lessThanOrEqual": {
  "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value",
  "title": "Smokingpackyears.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__lte"
  },
  "smokingPackyears.greaterThan": {
  "description": "Smoking packyears - Filter for entries with values greater than the specified value",
  "title": "Smokingpackyears.Greaterthan",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__gt"
  },
  "smokingPackyears.greaterThanOrEqual": {
  "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value",
  "title": "Smokingpackyears.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__gte"
  },
  "smokingPackyears.equal": {
  "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value",
  "title": "Smokingpackyears.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__exact"
  },
  "smokingPackyears.not.equal": {
  "description": "Smoking packyears - Filter for entries with values not equal to the specified value",
  "title": "Smokingpackyears.Not.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_packyears__exact"
  },
  "smokingPackyears.between": {
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingpackyears.Between",
  "type": "array",
  "x-orm-lookup": "smoking_packyears__range"
  },
  "smokingPackyears.not.between": {
  "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingpackyears.Not.Between",
  "type": "array",
  "x-orm-lookup": "smoking_packyears__range"
  },
  "smokingQuited.not.exists": {
  "description": "Time since quitted smoking - Filter for entries without a value",
  "title": "Smokingquited.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_quited__isnull"
  },
  "smokingQuited.exists": {
  "description": "Time since quitted smoking - Filter for entries with a value",
  "title": "Smokingquited.Exists",
  "type": "boolean",
  "x-orm-lookup": "smoking_quited__isnull"
  },
  "smokingQuited.lessThan": {
  "description": "Time since quitted smoking - Filter for entries with values less than the specified value",
  "title": "Smokingquited.Lessthan",
  "type": "number",
  "x-orm-lookup": "smoking_quited__lt"
  },
  "smokingQuited.lessThanOrEqual": {
  "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value",
  "title": "Smokingquited.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__lte"
  },
  "smokingQuited.greaterThan": {
  "description": "Time since quitted smoking - Filter for entries with values greater than the specified value",
  "title": "Smokingquited.Greaterthan",
  "type": "number",
  "x-orm-lookup": "smoking_quited__gt"
  },
  "smokingQuited.greaterThanOrEqual": {
  "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value",
  "title": "Smokingquited.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__gte"
  },
  "smokingQuited.equal": {
  "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value",
  "title": "Smokingquited.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__exact"
  },
  "smokingQuited.not.equal": {
  "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value",
  "title": "Smokingquited.Not.Equal",
  "type": "number",
  "x-orm-lookup": "smoking_quited__exact"
  },
  "smokingQuited.between": {
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingquited.Between",
  "type": "array",
  "x-orm-lookup": "smoking_quited__range"
  },
  "smokingQuited.not.between": {
  "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Smokingquited.Not.Between",
  "type": "array",
  "x-orm-lookup": "smoking_quited__range"
  },
  "alcoholConsumption.not.exists": {
  "description": "Alcohol consumption - Filter for entries without a value",
  "title": "Alcoholconsumption.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "alcohol_consumption__isnull"
  },
  "alcoholConsumption.exists": {
  "description": "Alcohol consumption - Filter for entries with a value",
  "title": "Alcoholconsumption.Exists",
  "type": "boolean",
  "x-orm-lookup": "alcohol_consumption__isnull"
  },
  "alcoholConsumption": {
  "description": "Alcohol consumption - Filter for a matching concept code",
  "title": "Alcoholconsumption",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__code__iexact"
  },
  "alcoholConsumption.not": {
  "description": "Alcohol consumption - Filter for a mismatching concept code",
  "title": "Alcoholconsumption.Not",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__code__iexact"
  },
  "alcoholConsumption.anyOf": {
  "description": "Alcohol consumption - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Alcoholconsumption.Anyof",
  "type": "array",
  "x-orm-lookup": "alcohol_consumption__code__in"
  },
  "alcoholConsumption.not.anyOf": {
  "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Alcoholconsumption.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "alcohol_consumption__code__in"
  },
  "alcoholConsumption.descendantsOf": {
  "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
  "title": "Alcoholconsumption.Descendantsof",
  "type": "string",
  "x-orm-lookup": "alcohol_consumption__None"
  },
  "nightSleep.not.exists": {
  "description": "Night sleep - Filter for entries without a value",
  "title": "Nightsleep.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "night_sleep__isnull"
  },
  "nightSleep.exists": {
  "description": "Night sleep - Filter for entries with a value",
  "title": "Nightsleep.Exists",
  "type": "boolean",
  "x-orm-lookup": "night_sleep__isnull"
  },
  "nightSleep.lessThan": {
  "description": "Night sleep - Filter for entries with values less than the specified value",
  "title": "Nightsleep.Lessthan",
  "type": "number",
  "x-orm-lookup": "night_sleep__lt"
  },
  "nightSleep.lessThanOrEqual": {
  "description": "Night sleep - Filter for entries with values less than or equal to the specified value",
  "title": "Nightsleep.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "night_sleep__lte"
  },
  "nightSleep.greaterThan": {
  "description": "Night sleep - Filter for entries with values greater than the specified value",
  "title": "Nightsleep.Greaterthan",
  "type": "number",
  "x-orm-lookup": "night_sleep__gt"
  },
  "nightSleep.greaterThanOrEqual": {
  "description": "Night sleep - Filter for entries with values greater than or equal to the specified value",
  "title": "Nightsleep.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "night_sleep__gte"
  },
  "nightSleep.equal": {
  "description": "Night sleep - Filter for entries with values exactly equal to the specified value",
  "title": "Nightsleep.Equal",
  "type": "number",
  "x-orm-lookup": "night_sleep__exact"
  },
  "nightSleep.not.equal": {
  "description": "Night sleep - Filter for entries with values not equal to the specified value",
  "title": "Nightsleep.Not.Equal",
  "type": "number",
  "x-orm-lookup": "night_sleep__exact"
  },
  "nightSleep.between": {
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Nightsleep.Between",
  "type": "array",
  "x-orm-lookup": "night_sleep__range"
  },
  "nightSleep.not.between": {
  "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Nightsleep.Not.Between",
  "type": "array",
  "x-orm-lookup": "night_sleep__range"
  },
  "recreationalDrugs.code": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.system": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.display": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.version": {
  "description": "None - Filter for full text matches",
  "title": "Recreationaldrugs.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Recreationaldrugs.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "recreationalDrugs.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Recreationaldrugs.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Recreationaldrugs.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "recreationalDrugs.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Recreationaldrugs.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Recreationaldrugs.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "recreationalDrugs.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Recreationaldrugs.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Recreationaldrugs.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "recreationalDrugs.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Recreationaldrugs.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "recreationalDrugs.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Recreationaldrugs.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.code": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.system": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.display": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.version": {
  "description": "None - Filter for full text matches",
  "title": "Exposures.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Exposures.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "exposures.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Exposures.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Exposures.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "exposures.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Exposures.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Exposures.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "exposures.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Exposures.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Exposures.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "exposures.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Exposures.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "exposures.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Exposures.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  }
  },
  "title": "LifestyleFilters",
  "type": "object"
  },
  "LifestyleSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's lifestyle is assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "smokingStatus": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Frequency of alcohol consumption",
  "examples": [],
  "title": "Alcohol consumption",
  "x-expanded": null,
  "x-terminology": "SmokingStatus"
  },
  "smokingPackyears": {
  "anyOf": [
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Smoking pack-years (if applicable)",
  "examples": [],
  "title": "Smoking packyears",
  "x-expanded": null
  },
  "smokingQuited": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated time since quitting smoking (if applicable)",
  "examples": [],
  "title": "Time since quitted smoking",
  "x-expanded": null
  },
  "alcoholConsumption": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Frequency of alcohol consumption",
  "examples": [],
  "title": "Alcohol consumption",
  "x-expanded": null,
  "x-terminology": "AlcoholConsumptionFrequency"
  },
  "nightSleep": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated average sleep time per night",
  "examples": [],
  "title": "Night sleep",
  "x-expanded": null
  },
  "recreationalDrugs": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Any recreational drug(s) used by the patient",
  "examples": [],
  "title": "Recreational drugs",
  "x-expanded": null,
  "x-terminology": "RecreationalDrug"
  },
  "exposures": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Environmental or occupational exposures to hazards or carcinogenic agents",
  "examples": [],
  "title": "Exposures",
  "x-expanded": null,
  "x-terminology": "ExposureAgent"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date"
  ],
  "title": "Lifestyle",
  "type": "object"
  },
  "Paginated_LifestyleSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/LifestyleSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[LifestyleSchema]",
  "type": "object"
  },
  "FamilyHistoryCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's family's history is being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's family history was assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "relationship": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Relationship to the patient",
  "examples": [],
  "title": "Relationship",
  "x-expanded": null,
  "x-terminology": "FamilyMemberType"
  },
  "hadCancer": {
  "description": "Whether the family member has a history of cancer",
  "examples": [],
  "title": "Had cancer",
  "type": "boolean",
  "x-expanded": null
  },
  "contributedToDeath": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the cancer contributed to the cause of death of the family member",
  "examples": [],
  "title": "Contributed to death",
  "x-expanded": null
  },
  "onsetAge": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Age at which the family member's cancer manifested",
  "examples": [],
  "title": "Onset age",
  "x-expanded": null
  },
  "topography": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated or actual topography of the family member's cancer",
  "examples": [],
  "title": "Topography",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "morphology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphology of the family member's cancer (if known)",
  "examples": [],
  "title": "Morphology",
  "x-expanded": null,
  "x-terminology": "CancerMorphology"
  }
  },
  "required": [
  "caseId",
  "date",
  "relationship",
  "hadCancer"
  ],
  "title": "FamilyHistoryCreate",
  "type": "object"
  },
  "FamilyHistoryFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "relationship": {
  "description": "Relationship - Filter for a matching concept code",
  "title": "Relationship",
  "type": "string",
  "x-orm-lookup": "relationship__code__iexact"
  },
  "relationship.not": {
  "description": "Relationship - Filter for a mismatching concept code",
  "title": "Relationship.Not",
  "type": "string",
  "x-orm-lookup": "relationship__code__iexact"
  },
  "relationship.anyOf": {
  "description": "Relationship - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Relationship.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__code__in"
  },
  "relationship.not.anyOf": {
  "description": "Relationship - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Relationship.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "relationship__code__in"
  },
  "relationship.descendantsOf": {
  "description": "Relationship - Filter for all child concepts of a given concepts code",
  "title": "Relationship.Descendantsof",
  "type": "string",
  "x-orm-lookup": "relationship__None"
  },
  "hadCancer": {
  "description": "Had cancer - ('Filter for yes/no statement',)",
  "title": "Hadcancer",
  "type": "boolean",
  "x-orm-lookup": "had_cancer__exact"
  },
  "contributedToDeath.not.exists": {
  "description": "Contributed to death - Filter for entries without a value",
  "title": "Contributedtodeath.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__isnull"
  },
  "contributedToDeath.exists": {
  "description": "Contributed to death - Filter for entries with a value",
  "title": "Contributedtodeath.Exists",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__isnull"
  },
  "contributedToDeath": {
  "description": "Contributed to death - ('Filter for yes/no statement',)",
  "title": "Contributedtodeath",
  "type": "boolean",
  "x-orm-lookup": "contributed_to_death__exact"
  },
  "onsetAge.not.exists": {
  "description": "Onset age - Filter for entries without a value",
  "title": "Onsetage.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "onset_age__isnull"
  },
  "onsetAge.exists": {
  "description": "Onset age - Filter for entries with a value",
  "title": "Onsetage.Exists",
  "type": "boolean",
  "x-orm-lookup": "onset_age__isnull"
  },
  "onsetAge.lessThan": {
  "description": "Onset age - Filter for entries with values less than the specified value",
  "title": "Onsetage.Lessthan",
  "type": "integer",
  "x-orm-lookup": "onset_age__lt"
  },
  "onsetAge.lessThanOrEqual": {
  "description": "Onset age - Filter for entries with values less than or equal to the specified value",
  "title": "Onsetage.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "onset_age__lte"
  },
  "onsetAge.greaterThan": {
  "description": "Onset age - Filter for entries with values greater than the specified value",
  "title": "Onsetage.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "onset_age__gt"
  },
  "onsetAge.greaterThanOrEqual": {
  "description": "Onset age - Filter for entries with values greater than or equal to the specified value",
  "title": "Onsetage.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "onset_age__gte"
  },
  "onsetAge.equal": {
  "description": "Onset age - Filter for entries with values exactly equal to the specified value",
  "title": "Onsetage.Equal",
  "type": "integer",
  "x-orm-lookup": "onset_age__exact"
  },
  "onsetAge.not.equal": {
  "description": "Onset age - Filter for entries with values not equal to the specified value",
  "title": "Onsetage.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "onset_age__exact"
  },
  "onsetAge.between": {
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Onsetage.Between",
  "type": "array",
  "x-orm-lookup": "onset_age__range"
  },
  "onsetAge.not.between": {
  "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Onsetage.Not.Between",
  "type": "array",
  "x-orm-lookup": "onset_age__range"
  },
  "topography.not.exists": {
  "description": "Topography - Filter for entries without a value",
  "title": "Topography.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "topography__isnull"
  },
  "topography.exists": {
  "description": "Topography - Filter for entries with a value",
  "title": "Topography.Exists",
  "type": "boolean",
  "x-orm-lookup": "topography__isnull"
  },
  "topography": {
  "description": "Topography - Filter for a matching concept code",
  "title": "Topography",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "topography.not": {
  "description": "Topography - Filter for a mismatching concept code",
  "title": "Topography.Not",
  "type": "string",
  "x-orm-lookup": "topography__code__iexact"
  },
  "topography.anyOf": {
  "description": "Topography - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "topography.not.anyOf": {
  "description": "Topography - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Topography.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "topography__code__in"
  },
  "topography.descendantsOf": {
  "description": "Topography - Filter for all child concepts of a given concepts code",
  "title": "Topography.Descendantsof",
  "type": "string",
  "x-orm-lookup": "topography__None"
  },
  "morphology.not.exists": {
  "description": "Morphology - Filter for entries without a value",
  "title": "Morphology.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "morphology__isnull"
  },
  "morphology.exists": {
  "description": "Morphology - Filter for entries with a value",
  "title": "Morphology.Exists",
  "type": "boolean",
  "x-orm-lookup": "morphology__isnull"
  },
  "morphology": {
  "description": "Morphology - Filter for a matching concept code",
  "title": "Morphology",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "morphology.not": {
  "description": "Morphology - Filter for a mismatching concept code",
  "title": "Morphology.Not",
  "type": "string",
  "x-orm-lookup": "morphology__code__iexact"
  },
  "morphology.anyOf": {
  "description": "Morphology - Filter for a matching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "morphology.not.anyOf": {
  "description": "Morphology - Filter for a mismmatching set of concept codes",
  "items": {
  "type": "string"
  },
  "title": "Morphology.Not.Anyof",
  "type": "array",
  "x-orm-lookup": "morphology__code__in"
  },
  "morphology.descendantsOf": {
  "description": "Morphology - Filter for all child concepts of a given concepts code",
  "title": "Morphology.Descendantsof",
  "type": "string",
  "x-orm-lookup": "morphology__None"
  }
  },
  "title": "FamilyHistoryFilters",
  "type": "object"
  },
  "FamilyHistorySchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's family's history is being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's family history was assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "relationship": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Relationship to the patient",
  "examples": [],
  "title": "Relationship",
  "x-expanded": null,
  "x-terminology": "FamilyMemberType"
  },
  "hadCancer": {
  "description": "Whether the family member has a history of cancer",
  "examples": [],
  "title": "Had cancer",
  "type": "boolean",
  "x-expanded": null
  },
  "contributedToDeath": {
  "anyOf": [
  {
  "type": "boolean"
  },
  {
  "type": "null"
  }
  ],
  "description": "Whether the cancer contributed to the cause of death of the family member",
  "examples": [],
  "title": "Contributed to death",
  "x-expanded": null
  },
  "onsetAge": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "null"
  }
  ],
  "description": "Age at which the family member's cancer manifested",
  "examples": [],
  "title": "Onset age",
  "x-expanded": null
  },
  "topography": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Estimated or actual topography of the family member's cancer",
  "examples": [],
  "title": "Topography",
  "x-expanded": null,
  "x-terminology": "CancerTopography"
  },
  "morphology": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Morphology of the family member's cancer (if known)",
  "examples": [],
  "title": "Morphology",
  "x-expanded": null,
  "x-terminology": "CancerMorphology"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "relationship",
  "hadCancer"
  ],
  "title": "FamilyHistory",
  "type": "object"
  },
  "Paginated_FamilyHistorySchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/FamilyHistorySchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[FamilyHistorySchema]",
  "type": "object"
  },
  "ComorbiditiesAssessmentCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's comorbidities are being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "indexconditionId": {
  "description": "The primary neoplastic entity against which comorbidities are assessed",
  "examples": [],
  "format": "uuid",
  "title": "Index neoplastic entity",
  "type": "string",
  "x-expanded": null
  },
  "panel": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices",
  "maxLength": 30
  },
  {
  "type": "null"
  }
  ],
  "description": "Comorbidities panel",
  "examples": [],
  "title": "Panel",
  "x-expanded": null
  },
  "presentConditions": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Present comorbid conditions",
  "examples": [],
  "title": "Present comorbid conditions",
  "x-expanded": null,
  "x-terminology": "ICD10Condition"
  },
  "absentConditions": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Absent comorbid conditions",
  "examples": [],
  "title": "Absent comorbid conditions",
  "x-expanded": null,
  "x-terminology": "ICD10Condition"
  }
  },
  "required": [
  "caseId",
  "date",
  "indexconditionId"
  ],
  "title": "ComorbiditiesAssessmentCreate",
  "type": "object"
  },
  "ComorbiditiesAssessmentPanelChoices": {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  },
  "ComorbiditiesAssessmentFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "indexconditionId": {
  "description": "Index neoplastic entity - Filter for full text matches",
  "title": "Indexconditionid",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iexact"
  },
  "indexconditionId.not": {
  "description": "Index neoplastic entity - Filter for full text mismatches",
  "title": "Indexconditionid.Not",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iexact"
  },
  "indexconditionId.contains": {
  "description": "Index neoplastic entity - Filter for partial text matches",
  "title": "Indexconditionid.Contains",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__icontains"
  },
  "indexconditionId.not.contains": {
  "description": "Index neoplastic entity - Filter for partial text mismatches",
  "title": "Indexconditionid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__icontains"
  },
  "indexconditionId.beginsWith": {
  "description": "Index neoplastic entity - Filter for entries starting with the text",
  "title": "Indexconditionid.Beginswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__istartswith"
  },
  "indexconditionId.not.beginsWith": {
  "description": "Index neoplastic entity - Filter for entries not starting with the text",
  "title": "Indexconditionid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__istartswith"
  },
  "indexconditionId.endsWith": {
  "description": "Index neoplastic entity - Filter for entries ending with the text",
  "title": "Indexconditionid.Endswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iendswith"
  },
  "indexconditionId.not.endsWith": {
  "description": "Index neoplastic entity - Filter for entries not ending with the text",
  "title": "Indexconditionid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "indexCondition_id__iendswith"
  },
  "panel.not.exists": {
  "description": "Panel - Filter for entries without a value",
  "title": "Panel.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "panel__isnull"
  },
  "panel.exists": {
  "description": "Panel - Filter for entries with a value",
  "title": "Panel.Exists",
  "type": "boolean",
  "x-orm-lookup": "panel__isnull"
  },
  "panel": {
  "allOf": [
  {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  }
  ],
  "description": "Panel - ('Filter for single value choice',)",
  "x-orm-lookup": "panel__exact"
  },
  "panel.not": {
  "allOf": [
  {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  }
  ],
  "description": "Panel - ('Filter for all but a single value choice',)",
  "x-orm-lookup": "panel__exact"
  },
  "panel.anyOf": {
  "description": "Panel - ('Filter for excluding a subset of value choices',)",
  "items": {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesAssessmentPanelChoices",
  "type": "string"
  },
  "title": "Panel.Anyof",
  "type": "array",
  "x-orm-lookup": "panel__in"
  },
  "presentConditions.code": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.system": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.display": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.version": {
  "description": "None - Filter for full text matches",
  "title": "Presentconditions.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Presentconditions.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "presentConditions.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Presentconditions.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Presentconditions.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "presentConditions.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Presentconditions.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Presentconditions.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "presentConditions.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Presentconditions.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Presentconditions.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "presentConditions.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Presentconditions.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "presentConditions.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Presentconditions.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.code": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Code",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.code.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Code.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.code.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Code.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.code.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Code.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.code.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Code.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.code.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Code.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.code.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Code.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.code.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Code.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.system": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.System",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.system.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.System.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.system.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.System.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.system.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.System.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.system.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.System.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.system.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.System.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.system.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.System.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.system.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.System.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.display.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Display.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.display.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Display.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.display": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Display",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.display.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Display.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.display.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Display.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.display.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Display.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.display.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Display.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.display.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Display.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.display.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Display.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.display.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Display.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.version.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Version.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.version.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Version.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.version": {
  "description": "None - Filter for full text matches",
  "title": "Absentconditions.Version",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.version.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Absentconditions.Version.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "absentConditions.version.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Absentconditions.Version.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.version.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Absentconditions.Version.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "absentConditions.version.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Absentconditions.Version.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.version.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Absentconditions.Version.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "absentConditions.version.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Absentconditions.Version.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.version.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Absentconditions.Version.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "absentConditions.synonyms.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Synonyms.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.synonyms.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Synonyms.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.properties.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Absentconditions.Properties.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "absentConditions.properties.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Absentconditions.Properties.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "index.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Index.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "index.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Index.Exists",
  "type": "boolean",
  "x-orm-lookup": "None__isnull"
  },
  "index.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Index.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "index.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Index.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "index.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Index.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "index.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Index.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "index.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Index.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "index.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Index.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "index.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Index.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "index.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Index.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  }
  },
  "title": "ComorbiditiesAssessmentFilters",
  "type": "object"
  },
  "ComorbiditiesAssessmentSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's comorbidities are being recorded",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "indexconditionId": {
  "description": "The primary neoplastic entity against which comorbidities are assessed",
  "examples": [],
  "format": "uuid",
  "title": "Index neoplastic entity",
  "type": "string",
  "x-expanded": null
  },
  "panel": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices",
  "maxLength": 30
  },
  {
  "type": "null"
  }
  ],
  "description": "Comorbidities panel",
  "examples": [],
  "title": "Panel",
  "x-expanded": null
  },
  "presentConditions": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Present comorbid conditions",
  "examples": [],
  "title": "Present comorbid conditions",
  "x-expanded": null,
  "x-terminology": "ICD10Condition"
  },
  "absentConditions": {
  "anyOf": [
  {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "type": "array"
  },
  {
  "type": "null"
  }
  ],
  "default": [],
  "description": "Absent comorbid conditions",
  "examples": [],
  "title": "Absent comorbid conditions",
  "x-expanded": null,
  "x-terminology": "ICD10Condition"
  },
  "index": {
  "anyOf": [
  {
  "type": "integer"
  },
  {
  "type": "number"
  },
  {
  "type": "null"
  }
  ],
  "description": "Comorbidity score",
  "title": "Index"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "indexconditionId"
  ],
  "title": "ComorbiditiesAssessment",
  "type": "object"
  },
  "Paginated_ComorbiditiesAssessmentSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/ComorbiditiesAssessmentSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[ComorbiditiesAssessmentSchema]",
  "type": "object"
  },
  "ComorbiditiesPanelSchema": {
  "properties": {
  "name": {
  "description": "Comorbidity panel name",
  "title": "Name",
  "type": "string"
  },
  "categories": {
  "description": "Comorbidity panel categories",
  "items": {
  "$ref": "#/components/schemas/ComorbidityPanelCategory"
  },
  "title": "Categories",
  "type": "array"
  }
  },
  "required": [
  "name"
  ],
  "title": "ComorbiditiesPanel",
  "type": "object"
  },
  "ComorbidityPanelCategory": {
  "properties": {
  "label": {
  "title": "Label",
  "type": "string"
  },
  "default": {
  "$ref": "#/components/schemas/CodedConceptSchema",
  "description": "Default choice for category"
  },
  "conditions": {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Conditions",
  "type": "array"
  }
  },
  "required": [
  "label",
  "default",
  "conditions"
  ],
  "title": "ComorbidityPanelCategory",
  "type": "object"
  },
  "ComorbiditiesPanel": {
  "enum": [
  "Charlson",
  "Elixhauser",
  "NCI"
  ],
  "title": "ComorbiditiesPanel",
  "type": "string"
  },
  "VitalsCreateSchema": {
  "properties": {
  "caseId": {
  "description": "Indicates the case of the patient who's vitals are assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the vitals were recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "height": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Height of the patient",
  "examples": [],
  "title": "Height",
  "x-expanded": null
  },
  "weight": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Weight of the patient",
  "examples": [],
  "title": "Weight",
  "x-expanded": null
  },
  "bloodPressureSystolic": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systolic blood pressure of the patient",
  "examples": [],
  "title": "Systolic blood pressure",
  "x-expanded": null
  },
  "bloodPressureDiastolic": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Diastolic blood pressure of the patient",
  "examples": [],
  "title": "Diastolic blood pressure",
  "x-expanded": null
  },
  "temperature": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Temperature of the patient",
  "examples": [],
  "title": "Temperature",
  "x-expanded": null
  }
  },
  "required": [
  "caseId",
  "date"
  ],
  "title": "VitalsCreate",
  "type": "object"
  },
  "VitalsFilters": {
  "properties": {
  "id": {
  "description": "Id - Filter for full text matches",
  "title": "Id",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.not": {
  "description": "Id - Filter for full text mismatches",
  "title": "Id.Not",
  "type": "string",
  "x-orm-lookup": "id__iexact"
  },
  "id.contains": {
  "description": "Id - Filter for partial text matches",
  "title": "Id.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.not.contains": {
  "description": "Id - Filter for partial text mismatches",
  "title": "Id.Not.Contains",
  "type": "string",
  "x-orm-lookup": "id__icontains"
  },
  "id.beginsWith": {
  "description": "Id - Filter for entries starting with the text",
  "title": "Id.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.not.beginsWith": {
  "description": "Id - Filter for entries not starting with the text",
  "title": "Id.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "id__istartswith"
  },
  "id.endsWith": {
  "description": "Id - Filter for entries ending with the text",
  "title": "Id.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "id.not.endsWith": {
  "description": "Id - Filter for entries not ending with the text",
  "title": "Id.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "id__iendswith"
  },
  "createdAt.before": {
  "description": "Created At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Createdat.Before",
  "type": "string",
  "x-orm-lookup": "created_at__lt"
  },
  "createdAt.after": {
  "description": "Created At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Createdat.After",
  "type": "string",
  "x-orm-lookup": "created_at__gt"
  },
  "createdAt.onOrBefore": {
  "description": "Created At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Createdat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "created_at__lte"
  },
  "createdAt.onOrAfter": {
  "description": "Created At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Createdat.Onorafter",
  "type": "string",
  "x-orm-lookup": "created_at__gte"
  },
  "createdAt.on": {
  "description": "Created At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Createdat.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.not.on": {
  "description": "Created At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Createdat.Not.On",
  "type": "string",
  "x-orm-lookup": "created_at__exact"
  },
  "createdAt.between": {
  "description": "Created At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "createdAt.not.between": {
  "description": "Created At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Createdat.Not.Between",
  "type": "array",
  "x-orm-lookup": "created_at__range"
  },
  "updatedAt.before": {
  "description": "Updated At - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Updatedat.Before",
  "type": "string",
  "x-orm-lookup": "updated_at__lt"
  },
  "updatedAt.after": {
  "description": "Updated At - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Updatedat.After",
  "type": "string",
  "x-orm-lookup": "updated_at__gt"
  },
  "updatedAt.onOrBefore": {
  "description": "Updated At - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Updatedat.Onorbefore",
  "type": "string",
  "x-orm-lookup": "updated_at__lte"
  },
  "updatedAt.onOrAfter": {
  "description": "Updated At - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Updatedat.Onorafter",
  "type": "string",
  "x-orm-lookup": "updated_at__gte"
  },
  "updatedAt.on": {
  "description": "Updated At - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Updatedat.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.not.on": {
  "description": "Updated At - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Updatedat.Not.On",
  "type": "string",
  "x-orm-lookup": "updated_at__exact"
  },
  "updatedAt.between": {
  "description": "Updated At - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "updatedAt.not.between": {
  "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Updatedat.Not.Between",
  "type": "array",
  "x-orm-lookup": "updated_at__range"
  },
  "createdBy.not.exists": {
  "description": "Created By - Filter for entries without a value",
  "title": "Createdby.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "createdBy.exists": {
  "description": "Created By - Filter for entries with a value",
  "title": "Createdby.Exists",
  "type": "boolean",
  "x-orm-lookup": "created_by__isnull"
  },
  "updatedBys.id.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Updatedbys.Id.Lessthan",
  "type": "integer",
  "x-orm-lookup": "None__lt"
  },
  "updatedBys.id.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Updatedbys.Id.Lessthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__lte"
  },
  "updatedBys.id.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Updatedbys.Id.Greaterthan",
  "type": "integer",
  "x-orm-lookup": "None__gt"
  },
  "updatedBys.id.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Updatedbys.Id.Greaterthanorequal",
  "type": "integer",
  "x-orm-lookup": "None__gte"
  },
  "updatedBys.id.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Updatedbys.Id.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Updatedbys.Id.Not.Equal",
  "type": "integer",
  "x-orm-lookup": "None__exact"
  },
  "updatedBys.id.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.id.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "integer"
  },
  {
  "type": "integer"
  }
  ],
  "title": "Updatedbys.Id.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "updatedBys.username": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Username",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Username.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.username.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Username.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Username.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.username.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Username.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Username.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.username.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Username.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.username.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Username.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Email",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Email.Not",
  "type": "string",
  "x-orm-lookup": "None__iexact"
  },
  "updatedBys.email.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Email.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Email.Not.Contains",
  "type": "string",
  "x-orm-lookup": "None__icontains"
  },
  "updatedBys.email.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Email.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Email.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "None__istartswith"
  },
  "updatedBys.email.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Email.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.email.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Email.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "None__iendswith"
  },
  "updatedBys.firstName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Firstname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Firstname.Exists",
  "type": "boolean",
  "x-orm-lookup": "first_name__isnull"
  },
  "updatedBys.firstName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Firstname",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Firstname.Not",
  "type": "string",
  "x-orm-lookup": "first_name__iexact"
  },
  "updatedBys.firstName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Firstname.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Firstname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "first_name__icontains"
  },
  "updatedBys.firstName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Firstname.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Firstname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "first_name__istartswith"
  },
  "updatedBys.firstName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Firstname.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.firstName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Firstname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "first_name__iendswith"
  },
  "updatedBys.lastName.not.exists": {
  "description": "None - Filter for entries without a value",
  "title": "Updatedbys.Lastname.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName.exists": {
  "description": "None - Filter for entries with a value",
  "title": "Updatedbys.Lastname.Exists",
  "type": "boolean",
  "x-orm-lookup": "last_name__isnull"
  },
  "updatedBys.lastName": {
  "description": "None - Filter for full text matches",
  "title": "Updatedbys.Lastname",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.not": {
  "description": "None - Filter for full text mismatches",
  "title": "Updatedbys.Lastname.Not",
  "type": "string",
  "x-orm-lookup": "last_name__iexact"
  },
  "updatedBys.lastName.contains": {
  "description": "None - Filter for partial text matches",
  "title": "Updatedbys.Lastname.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.not.contains": {
  "description": "None - Filter for partial text mismatches",
  "title": "Updatedbys.Lastname.Not.Contains",
  "type": "string",
  "x-orm-lookup": "last_name__icontains"
  },
  "updatedBys.lastName.beginsWith": {
  "description": "None - Filter for entries starting with the text",
  "title": "Updatedbys.Lastname.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.not.beginsWith": {
  "description": "None - Filter for entries not starting with the text",
  "title": "Updatedbys.Lastname.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "last_name__istartswith"
  },
  "updatedBys.lastName.endsWith": {
  "description": "None - Filter for entries ending with the text",
  "title": "Updatedbys.Lastname.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "updatedBys.lastName.not.endsWith": {
  "description": "None - Filter for entries not ending with the text",
  "title": "Updatedbys.Lastname.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "last_name__iendswith"
  },
  "caseId": {
  "description": "Patient case - Filter for full text matches",
  "title": "Caseid",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.not": {
  "description": "Patient case - Filter for full text mismatches",
  "title": "Caseid.Not",
  "type": "string",
  "x-orm-lookup": "case_id__iexact"
  },
  "caseId.contains": {
  "description": "Patient case - Filter for partial text matches",
  "title": "Caseid.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.not.contains": {
  "description": "Patient case - Filter for partial text mismatches",
  "title": "Caseid.Not.Contains",
  "type": "string",
  "x-orm-lookup": "case_id__icontains"
  },
  "caseId.beginsWith": {
  "description": "Patient case - Filter for entries starting with the text",
  "title": "Caseid.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.not.beginsWith": {
  "description": "Patient case - Filter for entries not starting with the text",
  "title": "Caseid.Not.Beginswith",
  "type": "string",
  "x-orm-lookup": "case_id__istartswith"
  },
  "caseId.endsWith": {
  "description": "Patient case - Filter for entries ending with the text",
  "title": "Caseid.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "caseId.not.endsWith": {
  "description": "Patient case - Filter for entries not ending with the text",
  "title": "Caseid.Not.Endswith",
  "type": "string",
  "x-orm-lookup": "case_id__iendswith"
  },
  "date.before": {
  "description": "Assessment date - Filter for entries with dates before the specified value",
  "format": "date",
  "title": "Date.Before",
  "type": "string",
  "x-orm-lookup": "date__lt"
  },
  "date.after": {
  "description": "Assessment date - Filter for entries with dates after the specified value",
  "format": "date",
  "title": "Date.After",
  "type": "string",
  "x-orm-lookup": "date__gt"
  },
  "date.onOrBefore": {
  "description": "Assessment date - Filter for entries with dates on or before the specified value",
  "format": "date",
  "title": "Date.Onorbefore",
  "type": "string",
  "x-orm-lookup": "date__lte"
  },
  "date.onOrAfter": {
  "description": "Assessment date - Filter for entries with dates on or after the specified value",
  "format": "date",
  "title": "Date.Onorafter",
  "type": "string",
  "x-orm-lookup": "date__gte"
  },
  "date.on": {
  "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
  "format": "date",
  "title": "Date.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.not.on": {
  "description": "Assessment date - Filter for entries with dates not matching the specified value",
  "format": "date",
  "title": "Date.Not.On",
  "type": "string",
  "x-orm-lookup": "date__exact"
  },
  "date.between": {
  "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "date.not.between": {
  "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "format": "date",
  "type": "string"
  },
  {
  "format": "date",
  "type": "string"
  }
  ],
  "title": "Date.Not.Between",
  "type": "array",
  "x-orm-lookup": "date__range"
  },
  "height.not.exists": {
  "description": "Height - Filter for entries without a value",
  "title": "Height.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "height__isnull"
  },
  "height.exists": {
  "description": "Height - Filter for entries with a value",
  "title": "Height.Exists",
  "type": "boolean",
  "x-orm-lookup": "height__isnull"
  },
  "height.lessThan": {
  "description": "Height - Filter for entries with values less than the specified value",
  "title": "Height.Lessthan",
  "type": "number",
  "x-orm-lookup": "height__lt"
  },
  "height.lessThanOrEqual": {
  "description": "Height - Filter for entries with values less than or equal to the specified value",
  "title": "Height.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "height__lte"
  },
  "height.greaterThan": {
  "description": "Height - Filter for entries with values greater than the specified value",
  "title": "Height.Greaterthan",
  "type": "number",
  "x-orm-lookup": "height__gt"
  },
  "height.greaterThanOrEqual": {
  "description": "Height - Filter for entries with values greater than or equal to the specified value",
  "title": "Height.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "height__gte"
  },
  "height.equal": {
  "description": "Height - Filter for entries with values exactly equal to the specified value",
  "title": "Height.Equal",
  "type": "number",
  "x-orm-lookup": "height__exact"
  },
  "height.not.equal": {
  "description": "Height - Filter for entries with values not equal to the specified value",
  "title": "Height.Not.Equal",
  "type": "number",
  "x-orm-lookup": "height__exact"
  },
  "height.between": {
  "description": "Height - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Height.Between",
  "type": "array",
  "x-orm-lookup": "height__range"
  },
  "height.not.between": {
  "description": "Height - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Height.Not.Between",
  "type": "array",
  "x-orm-lookup": "height__range"
  },
  "weight.not.exists": {
  "description": "Weight - Filter for entries without a value",
  "title": "Weight.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "weight__isnull"
  },
  "weight.exists": {
  "description": "Weight - Filter for entries with a value",
  "title": "Weight.Exists",
  "type": "boolean",
  "x-orm-lookup": "weight__isnull"
  },
  "weight.lessThan": {
  "description": "Weight - Filter for entries with values less than the specified value",
  "title": "Weight.Lessthan",
  "type": "number",
  "x-orm-lookup": "weight__lt"
  },
  "weight.lessThanOrEqual": {
  "description": "Weight - Filter for entries with values less than or equal to the specified value",
  "title": "Weight.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "weight__lte"
  },
  "weight.greaterThan": {
  "description": "Weight - Filter for entries with values greater than the specified value",
  "title": "Weight.Greaterthan",
  "type": "number",
  "x-orm-lookup": "weight__gt"
  },
  "weight.greaterThanOrEqual": {
  "description": "Weight - Filter for entries with values greater than or equal to the specified value",
  "title": "Weight.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "weight__gte"
  },
  "weight.equal": {
  "description": "Weight - Filter for entries with values exactly equal to the specified value",
  "title": "Weight.Equal",
  "type": "number",
  "x-orm-lookup": "weight__exact"
  },
  "weight.not.equal": {
  "description": "Weight - Filter for entries with values not equal to the specified value",
  "title": "Weight.Not.Equal",
  "type": "number",
  "x-orm-lookup": "weight__exact"
  },
  "weight.between": {
  "description": "Weight - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Weight.Between",
  "type": "array",
  "x-orm-lookup": "weight__range"
  },
  "weight.not.between": {
  "description": "Weight - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Weight.Not.Between",
  "type": "array",
  "x-orm-lookup": "weight__range"
  },
  "bloodPressureSystolic.not.exists": {
  "description": "Systolic blood pressure - Filter for entries without a value",
  "title": "Bloodpressuresystolic.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_systolic__isnull"
  },
  "bloodPressureSystolic.exists": {
  "description": "Systolic blood pressure - Filter for entries with a value",
  "title": "Bloodpressuresystolic.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_systolic__isnull"
  },
  "bloodPressureSystolic.lessThan": {
  "description": "Systolic blood pressure - Filter for entries with values less than the specified value",
  "title": "Bloodpressuresystolic.Lessthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__lt"
  },
  "bloodPressureSystolic.lessThanOrEqual": {
  "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value",
  "title": "Bloodpressuresystolic.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__lte"
  },
  "bloodPressureSystolic.greaterThan": {
  "description": "Systolic blood pressure - Filter for entries with values greater than the specified value",
  "title": "Bloodpressuresystolic.Greaterthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__gt"
  },
  "bloodPressureSystolic.greaterThanOrEqual": {
  "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value",
  "title": "Bloodpressuresystolic.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__gte"
  },
  "bloodPressureSystolic.equal": {
  "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value",
  "title": "Bloodpressuresystolic.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__exact"
  },
  "bloodPressureSystolic.not.equal": {
  "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value",
  "title": "Bloodpressuresystolic.Not.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_systolic__exact"
  },
  "bloodPressureSystolic.between": {
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressuresystolic.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_systolic__range"
  },
  "bloodPressureSystolic.not.between": {
  "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressuresystolic.Not.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_systolic__range"
  },
  "bloodPressureDiastolic.not.exists": {
  "description": "Diastolic blood pressure - Filter for entries without a value",
  "title": "Bloodpressurediastolic.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_diastolic__isnull"
  },
  "bloodPressureDiastolic.exists": {
  "description": "Diastolic blood pressure - Filter for entries with a value",
  "title": "Bloodpressurediastolic.Exists",
  "type": "boolean",
  "x-orm-lookup": "blood_pressure_diastolic__isnull"
  },
  "bloodPressureDiastolic.lessThan": {
  "description": "Diastolic blood pressure - Filter for entries with values less than the specified value",
  "title": "Bloodpressurediastolic.Lessthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__lt"
  },
  "bloodPressureDiastolic.lessThanOrEqual": {
  "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value",
  "title": "Bloodpressurediastolic.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__lte"
  },
  "bloodPressureDiastolic.greaterThan": {
  "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value",
  "title": "Bloodpressurediastolic.Greaterthan",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__gt"
  },
  "bloodPressureDiastolic.greaterThanOrEqual": {
  "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value",
  "title": "Bloodpressurediastolic.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__gte"
  },
  "bloodPressureDiastolic.equal": {
  "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value",
  "title": "Bloodpressurediastolic.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__exact"
  },
  "bloodPressureDiastolic.not.equal": {
  "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value",
  "title": "Bloodpressurediastolic.Not.Equal",
  "type": "number",
  "x-orm-lookup": "blood_pressure_diastolic__exact"
  },
  "bloodPressureDiastolic.between": {
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressurediastolic.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_diastolic__range"
  },
  "bloodPressureDiastolic.not.between": {
  "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Bloodpressurediastolic.Not.Between",
  "type": "array",
  "x-orm-lookup": "blood_pressure_diastolic__range"
  },
  "temperature.not.exists": {
  "description": "Temperature - Filter for entries without a value",
  "title": "Temperature.Not.Exists",
  "type": "boolean",
  "x-orm-lookup": "temperature__isnull"
  },
  "temperature.exists": {
  "description": "Temperature - Filter for entries with a value",
  "title": "Temperature.Exists",
  "type": "boolean",
  "x-orm-lookup": "temperature__isnull"
  },
  "temperature.lessThan": {
  "description": "Temperature - Filter for entries with values less than the specified value",
  "title": "Temperature.Lessthan",
  "type": "number",
  "x-orm-lookup": "temperature__lt"
  },
  "temperature.lessThanOrEqual": {
  "description": "Temperature - Filter for entries with values less than or equal to the specified value",
  "title": "Temperature.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "temperature__lte"
  },
  "temperature.greaterThan": {
  "description": "Temperature - Filter for entries with values greater than the specified value",
  "title": "Temperature.Greaterthan",
  "type": "number",
  "x-orm-lookup": "temperature__gt"
  },
  "temperature.greaterThanOrEqual": {
  "description": "Temperature - Filter for entries with values greater than or equal to the specified value",
  "title": "Temperature.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "temperature__gte"
  },
  "temperature.equal": {
  "description": "Temperature - Filter for entries with values exactly equal to the specified value",
  "title": "Temperature.Equal",
  "type": "number",
  "x-orm-lookup": "temperature__exact"
  },
  "temperature.not.equal": {
  "description": "Temperature - Filter for entries with values not equal to the specified value",
  "title": "Temperature.Not.Equal",
  "type": "number",
  "x-orm-lookup": "temperature__exact"
  },
  "temperature.between": {
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Temperature.Between",
  "type": "array",
  "x-orm-lookup": "temperature__range"
  },
  "temperature.not.between": {
  "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Temperature.Not.Between",
  "type": "array",
  "x-orm-lookup": "temperature__range"
  },
  "body_mass_index.lessThan": {
  "description": "None - Filter for entries with values less than the specified value",
  "title": "Body Mass Index.Lessthan",
  "type": "number",
  "x-orm-lookup": "None__lt"
  },
  "body_mass_index.lessThanOrEqual": {
  "description": "None - Filter for entries with values less than or equal to the specified value",
  "title": "Body Mass Index.Lessthanorequal",
  "type": "number",
  "x-orm-lookup": "None__lte"
  },
  "body_mass_index.greaterThan": {
  "description": "None - Filter for entries with values greater than the specified value",
  "title": "Body Mass Index.Greaterthan",
  "type": "number",
  "x-orm-lookup": "None__gt"
  },
  "body_mass_index.greaterThanOrEqual": {
  "description": "None - Filter for entries with values greater than or equal to the specified value",
  "title": "Body Mass Index.Greaterthanorequal",
  "type": "number",
  "x-orm-lookup": "None__gte"
  },
  "body_mass_index.equal": {
  "description": "None - Filter for entries with values exactly equal to the specified value",
  "title": "Body Mass Index.Equal",
  "type": "number",
  "x-orm-lookup": "None__exact"
  },
  "body_mass_index.not.equal": {
  "description": "None - Filter for entries with values not equal to the specified value",
  "title": "Body Mass Index.Not.Equal",
  "type": "number",
  "x-orm-lookup": "None__exact"
  },
  "body_mass_index.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Body Mass Index.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  },
  "body_mass_index.not.between": {
  "description": "None - Filter for entries with values between two specified values (inclusive)",
  "maxItems": 2,
  "minItems": 2,
  "prefixItems": [
  {
  "type": "number"
  },
  {
  "type": "number"
  }
  ],
  "title": "Body Mass Index.Not.Between",
  "type": "array",
  "x-orm-lookup": "None__range"
  }
  },
  "title": "VitalsFilters",
  "type": "object"
  },
  "Paginated_VitalsSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/VitalsSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[VitalsSchema]",
  "type": "object"
  },
  "VitalsSchema": {
  "properties": {
  "id": {
  "description": "",
  "examples": [],
  "format": "uuid",
  "title": "Id",
  "type": "string",
  "x-expanded": null
  },
  "createdAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Created At",
  "type": "string",
  "x-expanded": null
  },
  "updatedAt": {
  "description": "",
  "examples": [],
  "format": "date-time",
  "title": "Updated At",
  "type": "string",
  "x-expanded": null
  },
  "createdBy": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/UserSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "The user who created the original data",
  "examples": [],
  "title": "Created By",
  "x-expanded": true
  },
  "updatedBys": {
  "default": [],
  "description": "The user(s) who updated the data since its creation",
  "examples": [],
  "items": {
  "$ref": "#/components/schemas/UserSchema"
  },
  "title": "Updated By",
  "type": "array",
  "x-expanded": true
  },
  "description": {
  "description": "Human-readable description",
  "title": "Description",
  "type": "string"
  },
  "caseId": {
  "description": "Indicates the case of the patient who's vitals are assesed",
  "examples": [],
  "format": "uuid",
  "title": "Patient case",
  "type": "string",
  "x-expanded": null
  },
  "date": {
  "description": "Clinically-relevant date at which the vitals were recorded.",
  "examples": [],
  "format": "date",
  "title": "Assessment date",
  "type": "string",
  "x-expanded": null
  },
  "height": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Height of the patient",
  "examples": [],
  "title": "Height",
  "x-expanded": null
  },
  "weight": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Weight of the patient",
  "examples": [],
  "title": "Weight",
  "x-expanded": null
  },
  "bloodPressureSystolic": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Systolic blood pressure of the patient",
  "examples": [],
  "title": "Systolic blood pressure",
  "x-expanded": null
  },
  "bloodPressureDiastolic": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Diastolic blood pressure of the patient",
  "examples": [],
  "title": "Diastolic blood pressure",
  "x-expanded": null
  },
  "temperature": {
  "anyOf": [
  {
  "$ref": "#/components/schemas/MeasureSchema"
  },
  {
  "type": "null"
  }
  ],
  "description": "Temperature of the patient",
  "examples": [],
  "title": "Temperature",
  "x-expanded": null
  },
  "body_mass_index": {
  "$ref": "#/components/schemas/MeasureSchema",
  "description": "Bodymass index of the patient"
  }
  },
  "required": [
  "id",
  "createdAt",
  "updatedAt",
  "description",
  "caseId",
  "date",
  "body_mass_index"
  ],
  "title": "Vitals",
  "type": "object"
  },
  "MeasureConversionSchema": {
  "description": "Represents a measure value to be converted to another unit.\n\nAttributes:\n\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.\n    new_unit (str): The new unit to convert the measure to.",
  "properties": {
  "value": {
  "title": "Value",
  "type": "number"
  },
  "unit": {
  "title": "Unit",
  "type": "string"
  },
  "new_unit": {
  "title": "New Unit",
  "type": "string"
  }
  },
  "required": [
  "value",
  "unit",
  "new_unit"
  ],
  "title": "MeasureConversion",
  "type": "object"
  },
  "TerminologyFilters": {
  "properties": {
  "query": {
  "title": "Query",
  "type": "string"
  },
  "codes": {
  "items": {
  "type": "string"
  },
  "title": "Codes",
  "type": "array"
  }
  },
  "title": "TerminologyFilters",
  "type": "object"
  },
  "Paginated_CodedConceptSchema_": {
  "properties": {
  "count": {
  "title": "Count",
  "type": "integer"
  },
  "items": {
  "items": {
  "$ref": "#/components/schemas/CodedConceptSchema"
  },
  "title": "Items",
  "type": "array"
  }
  },
  "required": [
  "count",
  "items"
  ],
  "title": "Paginated[CodedConceptSchema]",
  "type": "object"
  }
  },
  "securitySchemes": {
  "JWTAuth": {
  "type": "http",
  "scheme": "bearer"
  }
  }
  },
  "servers": [
  {
  "url": "https://localhost:4443",
  "description": "API Server"
  }
  ]
  }