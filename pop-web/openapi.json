{"openapi": "3.1.0", "info": {"title": "POP API", "version": "1.0.0", "description": "Precision Oncology Platform API for exchange of research cancer data"}, "paths": {"/api/auth/token/pair": {"post": {"operationId": "getTokenPair", "summary": "Obtain Token Pair", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenPairSchema"}}}}}, "tags": ["Auth"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCredentialsSchema"}}}, "required": true}}}, "/api/auth/token/refresh": {"post": {"operationId": "refreshTokenPair", "summary": "Refresh Token Pair", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshedTokenPairSchema"}}}}}, "tags": ["Auth"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenRefreshSchema"}}}, "required": true}}}, "/api/auth/users": {"get": {"operationId": "getUsers", "summary": "Get All Users Matching The Query", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Response", "type": "array"}}}}}, "tags": ["Auth"], "security": [{"JWTAuth": []}]}}, "/api/auth/users/{userId}": {"get": {"operationId": "getUserById", "summary": "Get User By Id", "parameters": [{"in": "path", "name": "userId", "schema": {"title": "Userid", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Auth"], "security": [{"JWTAuth": []}]}}, "/api/patient-cases": {"post": {"operationId": "createPatientCase", "summary": "Create Patient Case", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Patient Cases"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCaseCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getPatientCases", "summary": "Get All Patient Cases Matching The Query", "parameters": [{"in": "query", "name": "age.lessThan", "schema": {"description": "Age - Filter for entries with values less than the specified value", "title": "Age.Lessthan", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values less than the specified value"}, {"in": "query", "name": "age.lessThanOrEqual", "schema": {"description": "Age - Filter for entries with values less than or equal to the specified value", "title": "Age.Lessthanorequal", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "age.greaterThan", "schema": {"description": "Age - Filter for entries with values greater than the specified value", "title": "Age.Greaterthan", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "age.greaterThanOrEqual", "schema": {"description": "Age - Filter for entries with values greater than or equal to the specified value", "title": "Age.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "age.equal", "schema": {"description": "Age - Filter for entries with values exactly equal to the specified value", "title": "Age.Equal", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "age.not.equal", "schema": {"description": "Age - Filter for entries with values not equal to the specified value", "title": "Age.Not.Equal", "type": "integer"}, "required": false, "description": "Age - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "age.between", "schema": {"description": "Age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Age.Between", "type": "array"}, "required": false, "description": "Age - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "age.not.between", "schema": {"description": "Age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Age.Not.Between", "type": "array"}, "required": false, "description": "Age - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "overallSurvival.not.exists", "schema": {"description": "Overall survival - Filter for entries without a value", "title": "Overallsurvival.Not.Exists", "type": "boolean"}, "required": false, "description": "Overall survival - Filter for entries without a value"}, {"in": "query", "name": "overallSurvival.exists", "schema": {"description": "Overall survival - Filter for entries with a value", "title": "Overallsurvival.Exists", "type": "boolean"}, "required": false, "description": "Overall survival - Filter for entries with a value"}, {"in": "query", "name": "overallSurvival.lessThan", "schema": {"description": "Overall survival - Filter for entries with values less than the specified value", "title": "Overallsurvival.Lessthan", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values less than the specified value"}, {"in": "query", "name": "overallSurvival.lessThanOrEqual", "schema": {"description": "Overall survival - Filter for entries with values less than or equal to the specified value", "title": "Overallsurvival.Lessthanorequal", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "overallSurvival.greaterThan", "schema": {"description": "Overall survival - Filter for entries with values greater than the specified value", "title": "Overallsurvival.Greaterthan", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "overallSurvival.greaterThanOrEqual", "schema": {"description": "Overall survival - Filter for entries with values greater than or equal to the specified value", "title": "Overallsurvival.Greaterthanorequal", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "overallSurvival.equal", "schema": {"description": "Overall survival - Filter for entries with values exactly equal to the specified value", "title": "Overallsurvival.Equal", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "overallSurvival.not.equal", "schema": {"description": "Overall survival - Filter for entries with values not equal to the specified value", "title": "Overallsurvival.Not.Equal", "type": "number"}, "required": false, "description": "Overall survival - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "overallSurvival.between", "schema": {"description": "Overall survival - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Overallsurvival.Between", "type": "array"}, "required": false, "description": "Overall survival - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "overallSurvival.not.between", "schema": {"description": "Overall survival - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Overallsurvival.Not.Between", "type": "array"}, "required": false, "description": "Overall survival - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dataCompletionRate.lessThan", "schema": {"description": "Data completion rate - Filter for entries with values less than the specified value", "title": "Datacompletionrate.Lessthan", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values less than the specified value"}, {"in": "query", "name": "dataCompletionRate.lessThanOrEqual", "schema": {"description": "Data completion rate - Filter for entries with values less than or equal to the specified value", "title": "Datacompletionrate.Lessthanorequal", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "dataCompletionRate.greaterThan", "schema": {"description": "Data completion rate - Filter for entries with values greater than the specified value", "title": "Datacompletionrate.Greaterthan", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "dataCompletionRate.greaterThanOrEqual", "schema": {"description": "Data completion rate - Filter for entries with values greater than or equal to the specified value", "title": "Datacompletionrate.Greaterthanorequal", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "dataCompletionRate.equal", "schema": {"description": "Data completion rate - Filter for entries with values exactly equal to the specified value", "title": "Datacompletionrate.Equal", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "dataCompletionRate.not.equal", "schema": {"description": "Data completion rate - Filter for entries with values not equal to the specified value", "title": "Datacompletionrate.Not.Equal", "type": "number"}, "required": false, "description": "Data completion rate - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "dataCompletionRate.between", "schema": {"description": "Data completion rate - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Datacompletionrate.Between", "type": "array"}, "required": false, "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dataCompletionRate.not.between", "schema": {"description": "Data completion rate - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Datacompletionrate.Not.Between", "type": "array"}, "required": false, "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "pseudoidentifier", "schema": {"description": "Pseudoidentifier - Filter for full text matches", "title": "Pseudoidentifier", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for full text matches"}, {"in": "query", "name": "pseudoidentifier.not", "schema": {"description": "Pseudoidentifier - Filter for full text mismatches", "title": "Pseudoidentifier.Not", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for full text mismatches"}, {"in": "query", "name": "pseudoidentifier.contains", "schema": {"description": "Pseudoidentifier - Filter for partial text matches", "title": "Pseudoidentifier.Contains", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for partial text matches"}, {"in": "query", "name": "pseudoidentifier.not.contains", "schema": {"description": "Pseudoidentifier - Filter for partial text mismatches", "title": "Pseudoidentifier.Not.Contains", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for partial text mismatches"}, {"in": "query", "name": "pseudoidentifier.beginsWith", "schema": {"description": "Pseudoidentifier - Filter for entries starting with the text", "title": "Pseudoidentifier.Beginswith", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for entries starting with the text"}, {"in": "query", "name": "pseudoidentifier.not.beginsWith", "schema": {"description": "Pseudoidentifier - Filter for entries not starting with the text", "title": "Pseudoidentifier.Not.Beginswith", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for entries not starting with the text"}, {"in": "query", "name": "pseudoidentifier.endsWith", "schema": {"description": "Pseudoidentifier - Filter for entries ending with the text", "title": "Pseudoidentifier.Endswith", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for entries ending with the text"}, {"in": "query", "name": "pseudoidentifier.not.endsWith", "schema": {"description": "Pseudoidentifier - Filter for entries not ending with the text", "title": "Pseudoidentifier.Not.Endswith", "type": "string"}, "required": false, "description": "Pseudoidentifier - Filter for entries not ending with the text"}, {"in": "query", "name": "clinicalCenter", "schema": {"description": "Medical center - Filter for full text matches", "title": "Clinicalcenter", "type": "string"}, "required": false, "description": "Medical center - Filter for full text matches"}, {"in": "query", "name": "clinicalCenter.not", "schema": {"description": "Medical center - Filter for full text mismatches", "title": "Clinicalcenter.Not", "type": "string"}, "required": false, "description": "Medical center - Filter for full text mismatches"}, {"in": "query", "name": "clinicalCenter.contains", "schema": {"description": "Medical center - Filter for partial text matches", "title": "Clinicalcenter.Contains", "type": "string"}, "required": false, "description": "Medical center - Filter for partial text matches"}, {"in": "query", "name": "clinicalCenter.not.contains", "schema": {"description": "Medical center - Filter for partial text mismatches", "title": "Clinicalcenter.Not.Contains", "type": "string"}, "required": false, "description": "Medical center - Filter for partial text mismatches"}, {"in": "query", "name": "clinicalCenter.beginsWith", "schema": {"description": "Medical center - Filter for entries starting with the text", "title": "Clinicalcenter.Beginswith", "type": "string"}, "required": false, "description": "Medical center - Filter for entries starting with the text"}, {"in": "query", "name": "clinicalCenter.not.beginsWith", "schema": {"description": "Medical center - Filter for entries not starting with the text", "title": "Clinicalcenter.Not.Beginswith", "type": "string"}, "required": false, "description": "Medical center - Filter for entries not starting with the text"}, {"in": "query", "name": "clinicalCenter.endsWith", "schema": {"description": "Medical center - Filter for entries ending with the text", "title": "Clinicalcenter.Endswith", "type": "string"}, "required": false, "description": "Medical center - Filter for entries ending with the text"}, {"in": "query", "name": "clinicalCenter.not.endsWith", "schema": {"description": "Medical center - Filter for entries not ending with the text", "title": "Clinicalcenter.Not.Endswith", "type": "string"}, "required": false, "description": "Medical center - Filter for entries not ending with the text"}, {"in": "query", "name": "clinicalIdentifier", "schema": {"description": "Clinical identifier - Filter for full text matches", "title": "Clinicalidentifier", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for full text matches"}, {"in": "query", "name": "clinicalIdentifier.not", "schema": {"description": "Clinical identifier - Filter for full text mismatches", "title": "Clinicalidentifier.Not", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for full text mismatches"}, {"in": "query", "name": "clinicalIdentifier.contains", "schema": {"description": "Clinical identifier - Filter for partial text matches", "title": "Clinicalidentifier.Contains", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for partial text matches"}, {"in": "query", "name": "clinicalIdentifier.not.contains", "schema": {"description": "Clinical identifier - Filter for partial text mismatches", "title": "Clinicalidentifier.Not.Contains", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for partial text mismatches"}, {"in": "query", "name": "clinicalIdentifier.beginsWith", "schema": {"description": "Clinical identifier - Filter for entries starting with the text", "title": "Clinicalidentifier.Beginswith", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for entries starting with the text"}, {"in": "query", "name": "clinicalIdentifier.not.beginsWith", "schema": {"description": "Clinical identifier - Filter for entries not starting with the text", "title": "Clinicalidentifier.Not.Beginswith", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for entries not starting with the text"}, {"in": "query", "name": "clinicalIdentifier.endsWith", "schema": {"description": "Clinical identifier - Filter for entries ending with the text", "title": "Clinicalidentifier.Endswith", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for entries ending with the text"}, {"in": "query", "name": "clinicalIdentifier.not.endsWith", "schema": {"description": "Clinical identifier - Filter for entries not ending with the text", "title": "Clinicalidentifier.Not.Endswith", "type": "string"}, "required": false, "description": "Clinical identifier - Filter for entries not ending with the text"}, {"in": "query", "name": "consentStatus", "schema": {"allOf": [{"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}], "description": "Consent status - ('Filter for single value choice',)"}, "required": false, "description": "Consent status - ('Filter for single value choice',)"}, {"in": "query", "name": "consentStatus.not", "schema": {"allOf": [{"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}], "description": "Consent status - ('Filter for all but a single value choice',)"}, "required": false, "description": "Consent status - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "consentStatus.anyOf", "schema": {"description": "Consent status - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}, "title": "Consentstatus.Anyof", "type": "array"}, "required": false, "description": "Consent status - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "gender", "schema": {"description": "Gender - Filter for a matching concept code", "title": "Gender", "type": "string"}, "required": false, "description": "Gender - Filter for a matching concept code"}, {"in": "query", "name": "gender.not", "schema": {"description": "Gender - Filter for a mismatching concept code", "title": "Gender.Not", "type": "string"}, "required": false, "description": "Gender - Filter for a mismatching concept code"}, {"in": "query", "name": "gender.anyOf", "schema": {"description": "Gender - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Gender.Anyof", "type": "array"}, "required": false, "description": "Gender - Filter for a matching set of concept codes"}, {"in": "query", "name": "gender.not.anyOf", "schema": {"description": "Gender - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Gender.Not.Anyof", "type": "array"}, "required": false, "description": "Gender - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "gender.descendantsOf", "schema": {"description": "Gender - Filter for all child concepts of a given concepts code", "title": "Gender.Descendantsof", "type": "string"}, "required": false, "description": "Gender - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "race.not.exists", "schema": {"description": "Race - Filter for entries without a value", "title": "Race.Not.Exists", "type": "boolean"}, "required": false, "description": "Race - Filter for entries without a value"}, {"in": "query", "name": "race.exists", "schema": {"description": "Race - Filter for entries with a value", "title": "Race.Exists", "type": "boolean"}, "required": false, "description": "Race - Filter for entries with a value"}, {"in": "query", "name": "race", "schema": {"description": "Race - Filter for a matching concept code", "title": "Race", "type": "string"}, "required": false, "description": "Race - Filter for a matching concept code"}, {"in": "query", "name": "race.not", "schema": {"description": "Race - Filter for a mismatching concept code", "title": "Race.Not", "type": "string"}, "required": false, "description": "Race - Filter for a mismatching concept code"}, {"in": "query", "name": "race.anyOf", "schema": {"description": "Race - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Race.Anyof", "type": "array"}, "required": false, "description": "Race - Filter for a matching set of concept codes"}, {"in": "query", "name": "race.not.anyOf", "schema": {"description": "Race - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Race.Not.Anyof", "type": "array"}, "required": false, "description": "Race - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "race.descendantsOf", "schema": {"description": "Race - Filter for all child concepts of a given concepts code", "title": "Race.Descendantsof", "type": "string"}, "required": false, "description": "Race - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "sexAtBirth.not.exists", "schema": {"description": "Birth sex - Filter for entries without a value", "title": "Sexatbirth.Not.Exists", "type": "boolean"}, "required": false, "description": "Birth sex - Filter for entries without a value"}, {"in": "query", "name": "sexAtBirth.exists", "schema": {"description": "Birth sex - Filter for entries with a value", "title": "Sexatbirth.Exists", "type": "boolean"}, "required": false, "description": "Birth sex - Filter for entries with a value"}, {"in": "query", "name": "sexAtBirth", "schema": {"description": "Birth sex - Filter for a matching concept code", "title": "Sexatbirth", "type": "string"}, "required": false, "description": "Birth sex - Filter for a matching concept code"}, {"in": "query", "name": "sexAtBirth.not", "schema": {"description": "Birth sex - Filter for a mismatching concept code", "title": "Sexatbirth.Not", "type": "string"}, "required": false, "description": "Birth sex - Filter for a mismatching concept code"}, {"in": "query", "name": "sexAtBirth.anyOf", "schema": {"description": "Birth sex - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Sexatbirth.Anyof", "type": "array"}, "required": false, "description": "Birth sex - Filter for a matching set of concept codes"}, {"in": "query", "name": "sexAtBirth.not.anyOf", "schema": {"description": "Birth sex - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Sexatbirth.Not.Anyof", "type": "array"}, "required": false, "description": "Birth sex - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "sexAtBirth.descendantsOf", "schema": {"description": "Birth sex - Filter for all child concepts of a given concepts code", "title": "Sexatbirth.Descendantsof", "type": "string"}, "required": false, "description": "Birth sex - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "genderIdentity.not.exists", "schema": {"description": "Gender identity - Filter for entries without a value", "title": "Genderidentity.Not.Exists", "type": "boolean"}, "required": false, "description": "Gender identity - Filter for entries without a value"}, {"in": "query", "name": "genderIdentity.exists", "schema": {"description": "Gender identity - Filter for entries with a value", "title": "Genderidentity.Exists", "type": "boolean"}, "required": false, "description": "Gender identity - Filter for entries with a value"}, {"in": "query", "name": "genderIdentity", "schema": {"description": "Gender identity - Filter for a matching concept code", "title": "Genderidentity", "type": "string"}, "required": false, "description": "Gender identity - Filter for a matching concept code"}, {"in": "query", "name": "genderIdentity.not", "schema": {"description": "Gender identity - Filter for a mismatching concept code", "title": "Genderidentity.Not", "type": "string"}, "required": false, "description": "Gender identity - Filter for a mismatching concept code"}, {"in": "query", "name": "genderIdentity.anyOf", "schema": {"description": "Gender identity - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Genderidentity.Anyof", "type": "array"}, "required": false, "description": "Gender identity - Filter for a matching set of concept codes"}, {"in": "query", "name": "genderIdentity.not.anyOf", "schema": {"description": "Gender identity - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Genderidentity.Not.Anyof", "type": "array"}, "required": false, "description": "Gender identity - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "genderIdentity.descendantsOf", "schema": {"description": "Gender identity - Filter for all child concepts of a given concepts code", "title": "Genderidentity.Descendantsof", "type": "string"}, "required": false, "description": "Gender identity - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "dateOfBirth.before", "schema": {"description": "Date of birth - Filter for entries with dates before the specified value", "format": "date", "title": "Dateofbirth.Before", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates before the specified value"}, {"in": "query", "name": "dateOfBirth.after", "schema": {"description": "Date of birth - Filter for entries with dates after the specified value", "format": "date", "title": "Dateofbirth.After", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates after the specified value"}, {"in": "query", "name": "dateOfBirth.onOrBefore", "schema": {"description": "Date of birth - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateofbirth.Onorbefore", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "dateOfBirth.onOrAfter", "schema": {"description": "Date of birth - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateofbirth.Onorafter", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "dateOfBirth.on", "schema": {"description": "Date of birth - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateofbirth.On", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "dateOfBirth.not.on", "schema": {"description": "Date of birth - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateofbirth.Not.On", "type": "string"}, "required": false, "description": "Date of birth - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "dateOfBirth.between", "schema": {"description": "Date of birth - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofbirth.Between", "type": "array"}, "required": false, "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "dateOfBirth.not.between", "schema": {"description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofbirth.Not.Between", "type": "array"}, "required": false, "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "isDeceased", "schema": {"description": "Is deceased - ('Filter for yes/no statement',)", "title": "Isdeceased", "type": "boolean"}, "required": false, "description": "Is deceased - ('Filter for yes/no statement',)"}, {"in": "query", "name": "dateOfDeath.not.exists", "schema": {"description": "Date of death - Filter for entries without a value", "title": "Dateofdeath.Not.Exists", "type": "boolean"}, "required": false, "description": "Date of death - Filter for entries without a value"}, {"in": "query", "name": "dateOfDeath.exists", "schema": {"description": "Date of death - Filter for entries with a value", "title": "Dateofdeath.Exists", "type": "boolean"}, "required": false, "description": "Date of death - Filter for entries with a value"}, {"in": "query", "name": "dateOfDeath.before", "schema": {"description": "Date of death - Filter for entries with dates before the specified value", "format": "date", "title": "Dateofdeath.Before", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates before the specified value"}, {"in": "query", "name": "dateOfDeath.after", "schema": {"description": "Date of death - Filter for entries with dates after the specified value", "format": "date", "title": "Dateofdeath.After", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates after the specified value"}, {"in": "query", "name": "dateOfDeath.onOrBefore", "schema": {"description": "Date of death - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateofdeath.Onorbefore", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "dateOfDeath.onOrAfter", "schema": {"description": "Date of death - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateofdeath.Onorafter", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "dateOfDeath.on", "schema": {"description": "Date of death - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateofdeath.On", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "dateOfDeath.not.on", "schema": {"description": "Date of death - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateofdeath.Not.On", "type": "string"}, "required": false, "description": "Date of death - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "dateOfDeath.between", "schema": {"description": "Date of death - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofdeath.Between", "type": "array"}, "required": false, "description": "Date of death - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "dateOfDeath.not.between", "schema": {"description": "Date of death - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofdeath.Not.Between", "type": "array"}, "required": false, "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "causeOfDeath.not.exists", "schema": {"description": "Cause of death - Filter for entries without a value", "title": "Causeofdeath.Not.Exists", "type": "boolean"}, "required": false, "description": "Cause of death - Filter for entries without a value"}, {"in": "query", "name": "causeOfDeath.exists", "schema": {"description": "Cause of death - Filter for entries with a value", "title": "Causeofdeath.Exists", "type": "boolean"}, "required": false, "description": "Cause of death - Filter for entries with a value"}, {"in": "query", "name": "causeOfDeath", "schema": {"description": "Cause of death - Filter for a matching concept code", "title": "Causeofdeath", "type": "string"}, "required": false, "description": "Cause of death - Filter for a matching concept code"}, {"in": "query", "name": "causeOfDeath.not", "schema": {"description": "Cause of death - Filter for a mismatching concept code", "title": "Causeofdeath.Not", "type": "string"}, "required": false, "description": "Cause of death - Filter for a mismatching concept code"}, {"in": "query", "name": "causeOfDeath.anyOf", "schema": {"description": "Cause of death - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Causeofdeath.Anyof", "type": "array"}, "required": false, "description": "Cause of death - Filter for a matching set of concept codes"}, {"in": "query", "name": "causeOfDeath.not.anyOf", "schema": {"description": "Cause of death - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Causeofdeath.Not.Anyof", "type": "array"}, "required": false, "description": "Cause of death - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "causeOfDeath.descendantsOf", "schema": {"description": "Cause of death - Filter for all child concepts of a given concepts code", "title": "Causeofdeath.Descendantsof", "type": "string"}, "required": false, "description": "Cause of death - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "manager", "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Filter for a particular case manager by its username", "title": "Manager"}, "required": false, "description": "Filter for a particular case manager by its username"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_PatientCase_"}}}}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}}, "/api/patient-cases/bundle": {"post": {"operationId": "createPatientCaseBundleById", "summary": "Create Patient Case Bundle", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Patient Cases"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCaseBundleCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/patient-cases/{caseId}/data-completion/{category}": {"post": {"operationId": "createPatientCaseDataCompletion", "summary": "Create Patient Case Data Completion", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}, {"in": "path", "name": "category", "schema": {"enum": ["comorbidities-assessments", "family-histories", "genomic-signatures", "genomic-variants", "lifestyles", "comorbidities", "neoplastic-entities", "performance-status", "radiotherapies", "risk-assessments", "stagings", "surgeries", "systemic-therapies", "tumor-markers", "vitals", "tumor-board-reviews", "adverse-events", "therapy-responses"], "title": "PatientCaseDataCategories", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}, "delete": {"operationId": "deletePatientCaseDataCompletion", "summary": "Delete Patient Case Data Completion", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}, {"in": "path", "name": "category", "schema": {"enum": ["comorbidities-assessments", "family-histories", "genomic-signatures", "genomic-variants", "lifestyles", "comorbidities", "neoplastic-entities", "performance-status", "radiotherapies", "risk-assessments", "stagings", "surgeries", "systemic-therapies", "tumor-markers", "vitals", "tumor-board-reviews", "adverse-events", "therapy-responses"], "title": "PatientCaseDataCategories", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getPatientCaseDataCompletionStatus", "summary": "Get Patient Case Data Completion Status", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}, {"in": "path", "name": "category", "schema": {"enum": ["comorbidities-assessments", "family-histories", "genomic-signatures", "genomic-variants", "lifestyles", "comorbidities", "neoplastic-entities", "performance-status", "radiotherapies", "risk-assessments", "stagings", "surgeries", "systemic-therapies", "tumor-markers", "vitals", "tumor-board-reviews", "adverse-events", "therapy-responses"], "title": "PatientCaseDataCategories", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCaseDataCompletionStatusSchema"}}}}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}}, "/api/patient-cases/{caseId}": {"delete": {"operationId": "deletePatientCaseById", "summary": "Delete Patient Case", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getPatientCaseById", "summary": "Get Patient Case By Id", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCase"}}}}, "404": {"description": "Not Found"}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updatePatientCaseById", "summary": "Update Patient Case", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Patient Cases"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCaseCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/patient-cases/bundle/{caseId}": {"get": {"operationId": "getPatientCaseBundleById", "summary": "Get Patient Case Bundle By Id", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCaseBundle"}}}}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}}, "/api/patient-cases/pseudo/{pseudoidentifier}": {"get": {"operationId": "getPatientCaseByPseudoidentifier", "summary": "Get Patient Case By Pseudoidentifier", "parameters": [{"in": "path", "name": "pseudoidentifier", "schema": {"title": "Pseudoidentifier", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatientCase"}}}}, "404": {"description": "Not Found"}}, "tags": ["Patient Cases"], "security": [{"JWTAuth": []}]}}, "/api/neoplastic-entities": {"post": {"operationId": "createNeoplasticEntity", "summary": "Create Neoplastic Entity", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Neoplastic Entities"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NeoplasticEntityCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getNeoplasticEntities", "summary": "Get All Neoplastic Entities Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "relationship", "schema": {"allOf": [{"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}], "description": "Neoplastic relationship - ('Filter for single value choice',)"}, "required": false, "description": "Neoplastic relationship - ('Filter for single value choice',)"}, {"in": "query", "name": "relationship.not", "schema": {"allOf": [{"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}], "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"}, "required": false, "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "relationship.anyOf", "schema": {"description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}, "title": "Relationship.Anyof", "type": "array"}, "required": false, "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "relatedPrimaryId.not.exists", "schema": {"description": "Related primary neoplasm - Filter for entries without a value", "title": "Relatedprimaryid.Not.Exists", "type": "boolean"}, "required": false, "description": "Related primary neoplasm - Filter for entries without a value"}, {"in": "query", "name": "relatedPrimaryId.exists", "schema": {"description": "Related primary neoplasm - Filter for entries with a value", "title": "Relatedprimaryid.Exists", "type": "boolean"}, "required": false, "description": "Related primary neoplasm - Filter for entries with a value"}, {"in": "query", "name": "relatedPrimaryId", "schema": {"description": "Related primary neoplasm - Filter for reference matches", "title": "Relatedprimaryid", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for reference matches"}, {"in": "query", "name": "relatedPrimaryId.not", "schema": {"description": "Related primary neoplasm - Filter for reference mismatches", "title": "Relatedprimaryid.Not", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for reference mismatches"}, {"in": "query", "name": "relatedPrimaryId.contains", "schema": {"description": "Related primary neoplasm - Filter for partial text matches", "title": "Relatedprimaryid.Contains", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for partial text matches"}, {"in": "query", "name": "relatedPrimaryId.not.contains", "schema": {"description": "Related primary neoplasm - Filter for partial text mismatches", "title": "Relatedprimaryid.Not.Contains", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for partial text mismatches"}, {"in": "query", "name": "relatedPrimaryId.beginsWith", "schema": {"description": "Related primary neoplasm - Filter for entries starting with the text", "title": "Relatedprimaryid.Beginswith", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for entries starting with the text"}, {"in": "query", "name": "relatedPrimaryId.not.beginsWith", "schema": {"description": "Related primary neoplasm - Filter for entries not starting with the text", "title": "Relatedprimaryid.Not.Beginswith", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for entries not starting with the text"}, {"in": "query", "name": "relatedPrimaryId.endsWith", "schema": {"description": "Related primary neoplasm - Filter for entries ending with the text", "title": "Relatedprimaryid.Endswith", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for entries ending with the text"}, {"in": "query", "name": "relatedPrimaryId.not.endsWith", "schema": {"description": "Related primary neoplasm - Filter for entries not ending with the text", "title": "Relatedprimaryid.Not.Endswith", "type": "string"}, "required": false, "description": "Related primary neoplasm - Filter for entries not ending with the text"}, {"in": "query", "name": "assertionDate.before", "schema": {"description": "Assertion date - Filter for entries with dates before the specified value", "format": "date", "title": "Assertiondate.Before", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "assertionDate.after", "schema": {"description": "Assertion date - Filter for entries with dates after the specified value", "format": "date", "title": "Assertiondate.After", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "assertionDate.onOrBefore", "schema": {"description": "Assertion date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Assertiondate.Onorbefore", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "assertionDate.onOrAfter", "schema": {"description": "Assertion date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Assertiondate.Onorafter", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "assertionDate.on", "schema": {"description": "Assertion date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Assertiondate.On", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "assertionDate.not.on", "schema": {"description": "Assertion date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Assertiondate.Not.On", "type": "string"}, "required": false, "description": "Assertion date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "assertionDate.between", "schema": {"description": "Assertion date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Assertiondate.Between", "type": "array"}, "required": false, "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "assertionDate.not.between", "schema": {"description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Assertiondate.Not.Between", "type": "array"}, "required": false, "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "topography", "schema": {"description": "Topography - Filter for a matching concept code", "title": "Topography", "type": "string"}, "required": false, "description": "Topography - Filter for a matching concept code"}, {"in": "query", "name": "topography.not", "schema": {"description": "Topography - Filter for a mismatching concept code", "title": "Topography.Not", "type": "string"}, "required": false, "description": "Topography - Filter for a mismatching concept code"}, {"in": "query", "name": "topography.anyOf", "schema": {"description": "Topography - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Topography.Anyof", "type": "array"}, "required": false, "description": "Topography - Filter for a matching set of concept codes"}, {"in": "query", "name": "topography.not.anyOf", "schema": {"description": "Topography - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Topography.Not.Anyof", "type": "array"}, "required": false, "description": "Topography - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "topography.descendantsOf", "schema": {"description": "Topography - Filter for all child concepts of a given concepts code", "title": "Topography.Descendantsof", "type": "string"}, "required": false, "description": "Topography - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "morphology", "schema": {"description": "Morphology - Filter for a matching concept code", "title": "Morphology", "type": "string"}, "required": false, "description": "Morphology - Filter for a matching concept code"}, {"in": "query", "name": "morphology.not", "schema": {"description": "Morphology - Filter for a mismatching concept code", "title": "Morphology.Not", "type": "string"}, "required": false, "description": "Morphology - Filter for a mismatching concept code"}, {"in": "query", "name": "morphology.anyOf", "schema": {"description": "Morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Anyof", "type": "array"}, "required": false, "description": "Morphology - Filter for a matching set of concept codes"}, {"in": "query", "name": "morphology.not.anyOf", "schema": {"description": "Morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Not.Anyof", "type": "array"}, "required": false, "description": "Morphology - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "morphology.descendantsOf", "schema": {"description": "Morphology - Filter for all child concepts of a given concepts code", "title": "Morphology.Descendantsof", "type": "string"}, "required": false, "description": "Morphology - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "differentitation.not.exists", "schema": {"description": "Differentiation - Filter for entries without a value", "title": "Differentitation.Not.Exists", "type": "boolean"}, "required": false, "description": "Differentiation - Filter for entries without a value"}, {"in": "query", "name": "differentitation.exists", "schema": {"description": "Differentiation - Filter for entries with a value", "title": "Differentitation.Exists", "type": "boolean"}, "required": false, "description": "Differentiation - Filter for entries with a value"}, {"in": "query", "name": "differentitation", "schema": {"description": "Differentiation - Filter for a matching concept code", "title": "Differentitation", "type": "string"}, "required": false, "description": "Differentiation - Filter for a matching concept code"}, {"in": "query", "name": "differentitation.not", "schema": {"description": "Differentiation - Filter for a mismatching concept code", "title": "Differentitation.Not", "type": "string"}, "required": false, "description": "Differentiation - Filter for a mismatching concept code"}, {"in": "query", "name": "differentitation.anyOf", "schema": {"description": "Differentiation - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Differentitation.Anyof", "type": "array"}, "required": false, "description": "Differentiation - Filter for a matching set of concept codes"}, {"in": "query", "name": "differentitation.not.anyOf", "schema": {"description": "Differentiation - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Differentitation.Not.Anyof", "type": "array"}, "required": false, "description": "Differentiation - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "differentitation.descendantsOf", "schema": {"description": "Differentiation - Filter for all child concepts of a given concepts code", "title": "Differentitation.Descendantsof", "type": "string"}, "required": false, "description": "Differentiation - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "laterality.not.exists", "schema": {"description": "Laterality - Filter for entries without a value", "title": "Laterality.Not.Exists", "type": "boolean"}, "required": false, "description": "Laterality - Filter for entries without a value"}, {"in": "query", "name": "laterality.exists", "schema": {"description": "Laterality - Filter for entries with a value", "title": "Laterality.Exists", "type": "boolean"}, "required": false, "description": "Laterality - Filter for entries with a value"}, {"in": "query", "name": "laterality", "schema": {"description": "Laterality - Filter for a matching concept code", "title": "Laterality", "type": "string"}, "required": false, "description": "Laterality - Filter for a matching concept code"}, {"in": "query", "name": "laterality.not", "schema": {"description": "Laterality - Filter for a mismatching concept code", "title": "Laterality.Not", "type": "string"}, "required": false, "description": "Laterality - Filter for a mismatching concept code"}, {"in": "query", "name": "laterality.anyOf", "schema": {"description": "Laterality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Laterality.Anyof", "type": "array"}, "required": false, "description": "Laterality - Filter for a matching set of concept codes"}, {"in": "query", "name": "laterality.not.anyOf", "schema": {"description": "Laterality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Laterality.Not.Anyof", "type": "array"}, "required": false, "description": "Laterality - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "laterality.descendantsOf", "schema": {"description": "Laterality - Filter for all child concepts of a given concepts code", "title": "Laterality.Descendantsof", "type": "string"}, "required": false, "description": "Laterality - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_NeoplasticEntity_"}}}}}, "tags": ["Neoplastic Entities"], "security": [{"JWTAuth": []}]}}, "/api/neoplastic-entities/{entityId}": {"delete": {"operationId": "deleteNeoplasticEntityById", "summary": "Delete Neoplastic Entity", "parameters": [{"in": "path", "name": "entityId", "schema": {"title": "Entityid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Neoplastic Entities"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getNeoplasticEntityById", "summary": "Get Neoplastic Entity By Id", "parameters": [{"in": "path", "name": "entityId", "schema": {"title": "Entityid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NeoplasticEntity"}}}}, "404": {"description": "Not Found"}}, "tags": ["Neoplastic Entities"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateNeoplasticEntityById", "summary": "Update Neoplastic Entity", "parameters": [{"in": "path", "name": "entityId", "schema": {"title": "Entityid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Neoplastic Entities"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NeoplasticEntityCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/stagings": {"post": {"operationId": "createStaging", "summary": "Create Staging", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Stagings"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/TNMStagingCreate"}, {"$ref": "#/components/schemas/FIGOStagingCreate"}, {"$ref": "#/components/schemas/BinetStagingCreate"}, {"$ref": "#/components/schemas/RaiStagingCreate"}, {"$ref": "#/components/schemas/BreslowDepthCreate"}, {"$ref": "#/components/schemas/ClarkStagingCreate"}, {"$ref": "#/components/schemas/ISSStagingCreate"}, {"$ref": "#/components/schemas/RISSStagingCreate"}, {"$ref": "#/components/schemas/GleasonGradeCreate"}, {"$ref": "#/components/schemas/INSSStageCreate"}, {"$ref": "#/components/schemas/INRGSSStageCreate"}, {"$ref": "#/components/schemas/WilmsStageCreate"}, {"$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"}, {"$ref": "#/components/schemas/LymphomaStagingCreate"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getStagings", "summary": "Get All Stagings Matching The Query", "parameters": [{"in": "query", "name": "stagingDomain", "schema": {"allOf": [{"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}], "description": "None - ('Filter for single value choice',)"}, "required": false, "description": "None - ('Filter for single value choice',)"}, {"in": "query", "name": "stagingDomain.not", "schema": {"allOf": [{"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}], "description": "None - ('Filter for all but a single value choice',)"}, "required": false, "description": "None - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "stagingDomain.anyOf", "schema": {"description": "None - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}, "title": "Stagingdomain.Anyof", "type": "array"}, "required": false, "description": "None - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "stage", "schema": {"description": "None - Filter for a matching concept code", "title": "Stage", "type": "string"}, "required": false, "description": "None - Filter for a matching concept code"}, {"in": "query", "name": "stage.not", "schema": {"description": "None - Filter for a mismatching concept code", "title": "Stage.Not", "type": "string"}, "required": false, "description": "None - Filter for a mismatching concept code"}, {"in": "query", "name": "stage.anyOf", "schema": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Stage.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a matching set of concept codes"}, {"in": "query", "name": "stage.not.anyOf", "schema": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Stage.Not.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "stage.descendantsOf", "schema": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Stage.Descendantsof", "type": "string"}, "required": false, "description": "None - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Staging date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Staging date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Staging date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Staging date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Staging date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Staging date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Staging date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Staging date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Staging date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Staging date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "stagedEntitiesIds", "schema": {"description": "Staged neoplastic entities - Filter for reference matches", "title": "Stagedentitiesids", "type": "string"}, "required": false, "description": "Staged neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "stagedEntitiesIds.not", "schema": {"description": "Staged neoplastic entities - Filter for reference mismatches", "title": "Stagedentitiesids.Not", "type": "string"}, "required": false, "description": "Staged neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_AnyStaging_"}}}}}, "tags": ["Stagings"], "security": [{"JWTAuth": []}]}}, "/api/stagings/{stagingId}": {"delete": {"operationId": "deleteStagingById", "summary": "Delete Staging", "parameters": [{"in": "path", "name": "stagingId", "schema": {"title": "Stagingid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Stagings"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getStagingById", "summary": "Get Staging By Id", "parameters": [{"in": "path", "name": "stagingId", "schema": {"title": "Stagingid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnyStaging"}}}}, "404": {"description": "Not Found"}}, "tags": ["Stagings"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateStagingById", "summary": "Update Staging", "parameters": [{"in": "path", "name": "stagingId", "schema": {"title": "Stagingid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Stagings"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/TNMStagingCreate"}, {"$ref": "#/components/schemas/FIGOStagingCreate"}, {"$ref": "#/components/schemas/BinetStagingCreate"}, {"$ref": "#/components/schemas/RaiStagingCreate"}, {"$ref": "#/components/schemas/BreslowDepthCreate"}, {"$ref": "#/components/schemas/ClarkStagingCreate"}, {"$ref": "#/components/schemas/ISSStagingCreate"}, {"$ref": "#/components/schemas/RISSStagingCreate"}, {"$ref": "#/components/schemas/GleasonGradeCreate"}, {"$ref": "#/components/schemas/INSSStageCreate"}, {"$ref": "#/components/schemas/INRGSSStageCreate"}, {"$ref": "#/components/schemas/WilmsStageCreate"}, {"$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"}, {"$ref": "#/components/schemas/LymphomaStagingCreate"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/risk-assessments": {"post": {"operationId": "createRiskAssessment", "summary": "Create Risk Assessment", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Risk Assessments"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RiskAssessmentCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRiskAssessments", "summary": "Get All Risk Assessments Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "methodology", "schema": {"description": "Assessment methodology - Filter for a matching concept code", "title": "Methodology", "type": "string"}, "required": false, "description": "Assessment methodology - Filter for a matching concept code"}, {"in": "query", "name": "methodology.not", "schema": {"description": "Assessment methodology - Filter for a mismatching concept code", "title": "Methodology.Not", "type": "string"}, "required": false, "description": "Assessment methodology - Filter for a mismatching concept code"}, {"in": "query", "name": "methodology.anyOf", "schema": {"description": "Assessment methodology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Anyof", "type": "array"}, "required": false, "description": "Assessment methodology - Filter for a matching set of concept codes"}, {"in": "query", "name": "methodology.not.anyOf", "schema": {"description": "Assessment methodology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Not.Anyof", "type": "array"}, "required": false, "description": "Assessment methodology - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "methodology.descendantsOf", "schema": {"description": "Assessment methodology - Filter for all child concepts of a given concepts code", "title": "Methodology.Descendantsof", "type": "string"}, "required": false, "description": "Assessment methodology - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "risk", "schema": {"description": "Risk - Filter for a matching concept code", "title": "Risk", "type": "string"}, "required": false, "description": "Risk - Filter for a matching concept code"}, {"in": "query", "name": "risk.not", "schema": {"description": "Risk - Filter for a mismatching concept code", "title": "Risk.Not", "type": "string"}, "required": false, "description": "Risk - Filter for a mismatching concept code"}, {"in": "query", "name": "risk.anyOf", "schema": {"description": "Risk - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Risk.Anyof", "type": "array"}, "required": false, "description": "Risk - Filter for a matching set of concept codes"}, {"in": "query", "name": "risk.not.anyOf", "schema": {"description": "Risk - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Risk.Not.Anyof", "type": "array"}, "required": false, "description": "Risk - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "risk.descendantsOf", "schema": {"description": "Risk - Filter for all child concepts of a given concepts code", "title": "Risk.Descendantsof", "type": "string"}, "required": false, "description": "Risk - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "score.not.exists", "schema": {"description": "Score - Filter for entries without a value", "title": "Score.Not.Exists", "type": "boolean"}, "required": false, "description": "Score - Filter for entries without a value"}, {"in": "query", "name": "score.exists", "schema": {"description": "Score - Filter for entries with a value", "title": "Score.Exists", "type": "boolean"}, "required": false, "description": "Score - Filter for entries with a value"}, {"in": "query", "name": "score.lessThan", "schema": {"description": "Score - Filter for entries with values less than the specified value", "title": "Score.Lessthan", "type": "number"}, "required": false, "description": "Score - Filter for entries with values less than the specified value"}, {"in": "query", "name": "score.lessThanOrEqual", "schema": {"description": "Score - Filter for entries with values less than or equal to the specified value", "title": "Score.Lessthanorequal", "type": "number"}, "required": false, "description": "Score - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "score.greaterThan", "schema": {"description": "Score - Filter for entries with values greater than the specified value", "title": "Score.Greaterthan", "type": "number"}, "required": false, "description": "Score - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "score.greaterThanOrEqual", "schema": {"description": "Score - Filter for entries with values greater than or equal to the specified value", "title": "Score.Greaterthanorequal", "type": "number"}, "required": false, "description": "Score - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "score.equal", "schema": {"description": "Score - Filter for entries with values exactly equal to the specified value", "title": "Score.Equal", "type": "number"}, "required": false, "description": "Score - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "score.not.equal", "schema": {"description": "Score - Filter for entries with values not equal to the specified value", "title": "Score.Not.Equal", "type": "number"}, "required": false, "description": "Score - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "score.between", "schema": {"description": "Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Score.Between", "type": "array"}, "required": false, "description": "Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "score.not.between", "schema": {"description": "Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Score.Not.Between", "type": "array"}, "required": false, "description": "Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "assessedEntitiesIds", "schema": {"description": "Assessed neoplastic entities - Filter for reference matches", "title": "Assessedentitiesids", "type": "string"}, "required": false, "description": "Assessed neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "assessedEntitiesIds.not", "schema": {"description": "Assessed neoplastic entities - Filter for reference mismatches", "title": "Assessedentitiesids.Not", "type": "string"}, "required": false, "description": "Assessed neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_RiskAssessment_"}}}}}, "tags": ["Risk Assessments"], "security": [{"JWTAuth": []}]}}, "/api/risk-assessments/{riskAssessmentId}": {"delete": {"operationId": "deleteRiskAssessmentById", "summary": "Delete Risk Assessment", "parameters": [{"in": "path", "name": "riskAssessmentId", "schema": {"title": "Riskassessmentid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Risk Assessments"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRiskAssessmentById", "summary": "Get Risk Assessment By Id", "parameters": [{"in": "path", "name": "riskAssessmentId", "schema": {"title": "Riskassessmentid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RiskAssessment"}}}}, "404": {"description": "Not Found"}}, "tags": ["Risk Assessments"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateRiskAssessmentById", "summary": "Update Risk Assessment", "parameters": [{"in": "path", "name": "riskAssessmentId", "schema": {"title": "Riskassessmentid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Risk Assessments"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RiskAssessmentCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/tumor-markers": {"post": {"operationId": "createTumorMarker", "summary": "Create Tumor Marker", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Tumor Markers"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TumorMarkerCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTumorMarkers", "summary": "Get All Tumor Markers Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "analyte", "schema": {"description": "Analyte - Filter for a matching concept code", "title": "Analyte", "type": "string"}, "required": false, "description": "Analyte - Filter for a matching concept code"}, {"in": "query", "name": "analyte.not", "schema": {"description": "Analyte - Filter for a mismatching concept code", "title": "Analyte.Not", "type": "string"}, "required": false, "description": "Analyte - Filter for a mismatching concept code"}, {"in": "query", "name": "analyte.anyOf", "schema": {"description": "Analyte - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Analyte.Anyof", "type": "array"}, "required": false, "description": "Analyte - Filter for a matching set of concept codes"}, {"in": "query", "name": "analyte.not.anyOf", "schema": {"description": "Analyte - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Analyte.Not.Anyof", "type": "array"}, "required": false, "description": "Analyte - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "analyte.descendantsOf", "schema": {"description": "Analyte - Filter for all child concepts of a given concepts code", "title": "Analyte.Descendantsof", "type": "string"}, "required": false, "description": "Analyte - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "massConcentration.not.exists", "schema": {"description": "Mass concentration - Filter for entries without a value", "title": "Massconcentration.Not.Exists", "type": "boolean"}, "required": false, "description": "Mass concentration - Filter for entries without a value"}, {"in": "query", "name": "massConcentration.exists", "schema": {"description": "Mass concentration - Filter for entries with a value", "title": "Massconcentration.Exists", "type": "boolean"}, "required": false, "description": "Mass concentration - Filter for entries with a value"}, {"in": "query", "name": "massConcentration.lessThan", "schema": {"description": "Mass concentration - Filter for entries with values less than the specified value", "title": "Massconcentration.Lessthan", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values less than the specified value"}, {"in": "query", "name": "massConcentration.lessThanOrEqual", "schema": {"description": "Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Massconcentration.Lessthanorequal", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "massConcentration.greaterThan", "schema": {"description": "Mass concentration - Filter for entries with values greater than the specified value", "title": "Massconcentration.Greaterthan", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "massConcentration.greaterThanOrEqual", "schema": {"description": "Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Massconcentration.Greaterthanorequal", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "massConcentration.equal", "schema": {"description": "Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Massconcentration.Equal", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "massConcentration.not.equal", "schema": {"description": "Mass concentration - Filter for entries with values not equal to the specified value", "title": "Massconcentration.Not.Equal", "type": "number"}, "required": false, "description": "Mass concentration - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "massConcentration.between", "schema": {"description": "Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Massconcentration.Between", "type": "array"}, "required": false, "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "massConcentration.not.between", "schema": {"description": "Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Massconcentration.Not.Between", "type": "array"}, "required": false, "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "arbitraryConcentration.not.exists", "schema": {"description": "Arbitrary concentration - Filter for entries without a value", "title": "Arbitraryconcentration.Not.Exists", "type": "boolean"}, "required": false, "description": "Arbitrary concentration - Filter for entries without a value"}, {"in": "query", "name": "arbitraryConcentration.exists", "schema": {"description": "Arbitrary concentration - Filter for entries with a value", "title": "Arbitraryconcentration.Exists", "type": "boolean"}, "required": false, "description": "Arbitrary concentration - Filter for entries with a value"}, {"in": "query", "name": "arbitraryConcentration.lessThan", "schema": {"description": "Arbitrary concentration - Filter for entries with values less than the specified value", "title": "Arbitraryconcentration.Lessthan", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values less than the specified value"}, {"in": "query", "name": "arbitraryConcentration.lessThanOrEqual", "schema": {"description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value", "title": "Arbitraryconcentration.Lessthanorequal", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "arbitraryConcentration.greaterThan", "schema": {"description": "Arbitrary concentration - Filter for entries with values greater than the specified value", "title": "Arbitraryconcentration.Greaterthan", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "arbitraryConcentration.greaterThanOrEqual", "schema": {"description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value", "title": "Arbitraryconcentration.Greaterthanorequal", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "arbitraryConcentration.equal", "schema": {"description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value", "title": "Arbitraryconcentration.Equal", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "arbitraryConcentration.not.equal", "schema": {"description": "Arbitrary concentration - Filter for entries with values not equal to the specified value", "title": "Arbitraryconcentration.Not.Equal", "type": "number"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "arbitraryConcentration.between", "schema": {"description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Arbitraryconcentration.Between", "type": "array"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "arbitraryConcentration.not.between", "schema": {"description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Arbitraryconcentration.Not.Between", "type": "array"}, "required": false, "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "substanceConcentration.not.exists", "schema": {"description": "Substance concentration - Filter for entries without a value", "title": "Substanceconcentration.Not.Exists", "type": "boolean"}, "required": false, "description": "Substance concentration - Filter for entries without a value"}, {"in": "query", "name": "substanceConcentration.exists", "schema": {"description": "Substance concentration - Filter for entries with a value", "title": "Substanceconcentration.Exists", "type": "boolean"}, "required": false, "description": "Substance concentration - Filter for entries with a value"}, {"in": "query", "name": "substanceConcentration.lessThan", "schema": {"description": "Substance concentration - Filter for entries with values less than the specified value", "title": "Substanceconcentration.Lessthan", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values less than the specified value"}, {"in": "query", "name": "substanceConcentration.lessThanOrEqual", "schema": {"description": "Substance concentration - Filter for entries with values less than or equal to the specified value", "title": "Substanceconcentration.Lessthanorequal", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "substanceConcentration.greaterThan", "schema": {"description": "Substance concentration - Filter for entries with values greater than the specified value", "title": "Substanceconcentration.Greaterthan", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "substanceConcentration.greaterThanOrEqual", "schema": {"description": "Substance concentration - Filter for entries with values greater than or equal to the specified value", "title": "Substanceconcentration.Greaterthanorequal", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "substanceConcentration.equal", "schema": {"description": "Substance concentration - Filter for entries with values exactly equal to the specified value", "title": "Substanceconcentration.Equal", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "substanceConcentration.not.equal", "schema": {"description": "Substance concentration - Filter for entries with values not equal to the specified value", "title": "Substanceconcentration.Not.Equal", "type": "number"}, "required": false, "description": "Substance concentration - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "substanceConcentration.between", "schema": {"description": "Substance concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Substanceconcentration.Between", "type": "array"}, "required": false, "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "substanceConcentration.not.between", "schema": {"description": "Substance concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Substanceconcentration.Not.Between", "type": "array"}, "required": false, "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "fraction.not.exists", "schema": {"description": "Fraction - Filter for entries without a value", "title": "Fraction.Not.Exists", "type": "boolean"}, "required": false, "description": "Fraction - Filter for entries without a value"}, {"in": "query", "name": "fraction.exists", "schema": {"description": "Fraction - Filter for entries with a value", "title": "Fraction.Exists", "type": "boolean"}, "required": false, "description": "Fraction - Filter for entries with a value"}, {"in": "query", "name": "fraction.lessThan", "schema": {"description": "Fraction - Filter for entries with values less than the specified value", "title": "Fraction.Lessthan", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values less than the specified value"}, {"in": "query", "name": "fraction.lessThanOrEqual", "schema": {"description": "Fraction - Filter for entries with values less than or equal to the specified value", "title": "Fraction.Lessthanorequal", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "fraction.greaterThan", "schema": {"description": "Fraction - Filter for entries with values greater than the specified value", "title": "Fraction.Greaterthan", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "fraction.greaterThanOrEqual", "schema": {"description": "Fraction - Filter for entries with values greater than or equal to the specified value", "title": "Fraction.Greaterthanorequal", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "fraction.equal", "schema": {"description": "Fraction - Filter for entries with values exactly equal to the specified value", "title": "Fraction.Equal", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "fraction.not.equal", "schema": {"description": "Fraction - Filter for entries with values not equal to the specified value", "title": "Fraction.Not.Equal", "type": "number"}, "required": false, "description": "Fraction - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "fraction.between", "schema": {"description": "Fraction - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Fraction.Between", "type": "array"}, "required": false, "description": "Fraction - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "fraction.not.between", "schema": {"description": "Fraction - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Fraction.Not.Between", "type": "array"}, "required": false, "description": "Fraction - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "multipleOfMedian.not.exists", "schema": {"description": "Multiples of the median - Filter for entries without a value", "title": "Multipleofmedian.Not.Exists", "type": "boolean"}, "required": false, "description": "Multiples of the median - Filter for entries without a value"}, {"in": "query", "name": "multipleOfMedian.exists", "schema": {"description": "Multiples of the median - Filter for entries with a value", "title": "Multipleofmedian.Exists", "type": "boolean"}, "required": false, "description": "Multiples of the median - Filter for entries with a value"}, {"in": "query", "name": "multipleOfMedian.lessThan", "schema": {"description": "Multiples of the median - Filter for entries with values less than the specified value", "title": "Multipleofmedian.Lessthan", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values less than the specified value"}, {"in": "query", "name": "multipleOfMedian.lessThanOrEqual", "schema": {"description": "Multiples of the median - Filter for entries with values less than or equal to the specified value", "title": "Multipleofmedian.Lessthanorequal", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "multipleOfMedian.greaterThan", "schema": {"description": "Multiples of the median - Filter for entries with values greater than the specified value", "title": "Multipleofmedian.Greaterthan", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "multipleOfMedian.greaterThanOrEqual", "schema": {"description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value", "title": "Multipleofmedian.Greaterthanorequal", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "multipleOfMedian.equal", "schema": {"description": "Multiples of the median - Filter for entries with values exactly equal to the specified value", "title": "Multipleofmedian.Equal", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "multipleOfMedian.not.equal", "schema": {"description": "Multiples of the median - Filter for entries with values not equal to the specified value", "title": "Multipleofmedian.Not.Equal", "type": "number"}, "required": false, "description": "Multiples of the median - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "multipleOfMedian.between", "schema": {"description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Multipleofmedian.Between", "type": "array"}, "required": false, "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "multipleOfMedian.not.between", "schema": {"description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Multipleofmedian.Not.Between", "type": "array"}, "required": false, "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "tumorProportionScore.not.exists", "schema": {"description": "Immune Cells Score (ICS) - Filter for entries without a value", "title": "Tumorproportionscore.Not.Exists", "type": "boolean"}, "required": false, "description": "Immune Cells Score (ICS) - Filter for entries without a value"}, {"in": "query", "name": "tumorProportionScore.exists", "schema": {"description": "Immune Cells Score (ICS) - Filter for entries with a value", "title": "Tumorproportionscore.Exists", "type": "boolean"}, "required": false, "description": "Immune Cells Score (ICS) - Filter for entries with a value"}, {"in": "query", "name": "tumorProportionScore", "schema": {"allOf": [{"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, {"in": "query", "name": "tumorProportionScore.not", "schema": {"allOf": [{"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "tumorProportionScore.anyOf", "schema": {"description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}, "title": "Tumorproportionscore.Anyof", "type": "array"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "immuneCellScore.not.exists", "schema": {"description": "Immune Cells Score (ICS) - Filter for entries without a value", "title": "Immunecellscore.Not.Exists", "type": "boolean"}, "required": false, "description": "Immune Cells Score (ICS) - Filter for entries without a value"}, {"in": "query", "name": "immuneCellScore.exists", "schema": {"description": "Immune Cells Score (ICS) - Filter for entries with a value", "title": "Immunecellscore.Exists", "type": "boolean"}, "required": false, "description": "Immune Cells Score (ICS) - Filter for entries with a value"}, {"in": "query", "name": "immuneCellScore", "schema": {"allOf": [{"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, {"in": "query", "name": "immuneCellScore.not", "schema": {"allOf": [{"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "immuneCellScore.anyOf", "schema": {"description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}, "title": "Immunecellscore.Anyof", "type": "array"}, "required": false, "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "combinedPositiveScore.not.exists", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries without a value", "title": "Combinedpositivescore.Not.Exists", "type": "boolean"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries without a value"}, {"in": "query", "name": "combinedPositiveScore.exists", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with a value", "title": "Combinedpositivescore.Exists", "type": "boolean"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with a value"}, {"in": "query", "name": "combinedPositiveScore.lessThan", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value", "title": "Combinedpositivescore.Lessthan", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value"}, {"in": "query", "name": "combinedPositiveScore.lessThanOrEqual", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value", "title": "Combinedpositivescore.Lessthanorequal", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "combinedPositiveScore.greaterThan", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value", "title": "Combinedpositivescore.Greaterthan", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "combinedPositiveScore.greaterThanOrEqual", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value", "title": "Combinedpositivescore.Greaterthanorequal", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "combinedPositiveScore.equal", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value", "title": "Combinedpositivescore.Equal", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "combinedPositiveScore.not.equal", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value", "title": "Combinedpositivescore.Not.Equal", "type": "number"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "combinedPositiveScore.between", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Combinedpositivescore.Between", "type": "array"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "combinedPositiveScore.not.between", "schema": {"description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Combinedpositivescore.Not.Between", "type": "array"}, "required": false, "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "immunohistochemicalScore.not.exists", "schema": {"description": "Immunohistochemical Score - Filter for entries without a value", "title": "Immunohistochemicalscore.Not.Exists", "type": "boolean"}, "required": false, "description": "Immunohistochemical Score - Filter for entries without a value"}, {"in": "query", "name": "immunohistochemicalScore.exists", "schema": {"description": "Immunohistochemical Score - Filter for entries with a value", "title": "Immunohistochemicalscore.Exists", "type": "boolean"}, "required": false, "description": "Immunohistochemical Score - Filter for entries with a value"}, {"in": "query", "name": "immunohistochemicalScore", "schema": {"allOf": [{"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}], "description": "Immunohistochemical Score - ('Filter for single value choice',)"}, "required": false, "description": "Immunohistochemical Score - ('Filter for single value choice',)"}, {"in": "query", "name": "immunohistochemicalScore.not", "schema": {"allOf": [{"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}], "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"}, "required": false, "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "immunohistochemicalScore.anyOf", "schema": {"description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}, "title": "Immunohistochemicalscore.Anyof", "type": "array"}, "required": false, "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "presence.not.exists", "schema": {"description": "Presence - Filter for entries without a value", "title": "Presence.Not.Exists", "type": "boolean"}, "required": false, "description": "Presence - Filter for entries without a value"}, {"in": "query", "name": "presence.exists", "schema": {"description": "Presence - Filter for entries with a value", "title": "Presence.Exists", "type": "boolean"}, "required": false, "description": "Presence - Filter for entries with a value"}, {"in": "query", "name": "presence", "schema": {"allOf": [{"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}], "description": "Presence - ('Filter for single value choice',)"}, "required": false, "description": "Presence - ('Filter for single value choice',)"}, {"in": "query", "name": "presence.not", "schema": {"allOf": [{"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}], "description": "Presence - ('Filter for all but a single value choice',)"}, "required": false, "description": "Presence - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "presence.anyOf", "schema": {"description": "Presence - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}, "title": "Presence.Anyof", "type": "array"}, "required": false, "description": "Presence - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "nuclearExpressionStatus.not.exists", "schema": {"description": "Nuclear expression status - Filter for entries without a value", "title": "Nuclearexpressionstatus.Not.Exists", "type": "boolean"}, "required": false, "description": "Nuclear expression status - Filter for entries without a value"}, {"in": "query", "name": "nuclearExpressionStatus.exists", "schema": {"description": "Nuclear expression status - Filter for entries with a value", "title": "Nuclearexpressionstatus.Exists", "type": "boolean"}, "required": false, "description": "Nuclear expression status - Filter for entries with a value"}, {"in": "query", "name": "nuclearExpressionStatus", "schema": {"allOf": [{"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}], "description": "Nuclear expression status - ('Filter for single value choice',)"}, "required": false, "description": "Nuclear expression status - ('Filter for single value choice',)"}, {"in": "query", "name": "nuclearExpressionStatus.not", "schema": {"allOf": [{"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}], "description": "Nuclear expression status - ('Filter for all but a single value choice',)"}, "required": false, "description": "Nuclear expression status - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "nuclearExpressionStatus.anyOf", "schema": {"description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}, "title": "Nuclearexpressionstatus.Anyof", "type": "array"}, "required": false, "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "relatedEntitiesIds", "schema": {"description": "Related neoplastic entities - Filter for reference matches", "title": "Relatedentitiesids", "type": "string"}, "required": false, "description": "Related neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "relatedEntitiesIds.not", "schema": {"description": "Related neoplastic entities - Filter for reference mismatches", "title": "Relatedentitiesids.Not", "type": "string"}, "required": false, "description": "Related neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_TumorMarker_"}}}}}, "tags": ["Tumor Markers"], "security": [{"JWTAuth": []}]}}, "/api/tumor-markers/{tumorMarkerId}": {"delete": {"operationId": "deleteTumorMarkerById", "summary": "Delete Tumor Marker", "parameters": [{"in": "path", "name": "tumorMarkerId", "schema": {"title": "Tumormarkerid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Tumor Markers"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTumorMarkerById", "summary": "Get Tumor Marker By Id", "parameters": [{"in": "path", "name": "tumorMarkerId", "schema": {"title": "Tumormarkerid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TumorMarker"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Markers"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateTumorMarkerById", "summary": "Update Neoplastic Entity", "parameters": [{"in": "path", "name": "tumorMarkerId", "schema": {"title": "Tumormarkerid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Markers"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TumorMarkerCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/tumor-markers/analytes/{analyteCode}/details": {"get": {"operationId": "getTumorMarkerAnalyteDetailsByCode", "summary": "Get Tumor Marker Analyte Details By Code", "parameters": [{"in": "path", "name": "analyteCode", "schema": {"title": "Analytecode", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyteDetails"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Markers"], "security": [{"JWTAuth": []}]}}, "/api/systemic-therapies": {"post": {"operationId": "createSystemicTherapy", "summary": "Create Systemic Therapy", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Systemic Therapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapyCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSystemicTherapies", "summary": "Get All Systemic Therapies Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "period.overlaps", "schema": {"description": "Treatment period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries overlapping with the time period"}, {"in": "query", "name": "period.not.overlaps", "schema": {"description": "Treatment period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries not overlapping with the time period"}, {"in": "query", "name": "period.contains", "schema": {"description": "Treatment period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries containing the time period"}, {"in": "query", "name": "period.not.contains", "schema": {"description": "Treatment period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries not containing the time period"}, {"in": "query", "name": "period.containedBy", "schema": {"description": "Treatment period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries whose period are contined by the time period"}, {"in": "query", "name": "period.not.containedBy", "schema": {"description": "Treatment period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries whose period are not contined by the time period"}, {"in": "query", "name": "cycles.lessThan", "schema": {"description": "Cycles - Filter for entries with values less than the specified value", "title": "Cycles.Lessthan", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values less than the specified value"}, {"in": "query", "name": "cycles.lessThanOrEqual", "schema": {"description": "Cycles - Filter for entries with values less than or equal to the specified value", "title": "Cycles.Lessthanorequal", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "cycles.greaterThan", "schema": {"description": "Cycles - Filter for entries with values greater than the specified value", "title": "Cycles.Greaterthan", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "cycles.greaterThanOrEqual", "schema": {"description": "Cycles - Filter for entries with values greater than or equal to the specified value", "title": "Cycles.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "cycles.equal", "schema": {"description": "Cycles - Filter for entries with values exactly equal to the specified value", "title": "Cycles.Equal", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "cycles.not.equal", "schema": {"description": "Cycles - Filter for entries with values not equal to the specified value", "title": "Cycles.Not.Equal", "type": "integer"}, "required": false, "description": "Cycles - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "cycles.between", "schema": {"description": "Cycles - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Cycles.Between", "type": "array"}, "required": false, "description": "Cycles - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "cycles.not.between", "schema": {"description": "Cycles - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Cycles.Not.Between", "type": "array"}, "required": false, "description": "Cycles - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "intent", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "required": false, "description": "Intent - ('Filter for single value choice',)"}, {"in": "query", "name": "intent.not", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "required": false, "description": "Intent - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "intent.anyOf", "schema": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "required": false, "description": "Intent - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "role.not.exists", "schema": {"description": "Treatment Role - Filter for entries without a value", "title": "Role.Not.Exists", "type": "boolean"}, "required": false, "description": "Treatment Role - Filter for entries without a value"}, {"in": "query", "name": "role.exists", "schema": {"description": "Treatment Role - Filter for entries with a value", "title": "Role.Exists", "type": "boolean"}, "required": false, "description": "Treatment Role - Filter for entries with a value"}, {"in": "query", "name": "role", "schema": {"description": "Treatment Role - Filter for a matching concept code", "title": "Role", "type": "string"}, "required": false, "description": "Treatment Role - Filter for a matching concept code"}, {"in": "query", "name": "role.not", "schema": {"description": "Treatment Role - Filter for a mismatching concept code", "title": "Role.Not", "type": "string"}, "required": false, "description": "Treatment Role - Filter for a mismatching concept code"}, {"in": "query", "name": "role.anyOf", "schema": {"description": "Treatment Role - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Role.Anyof", "type": "array"}, "required": false, "description": "Treatment Role - Filter for a matching set of concept codes"}, {"in": "query", "name": "role.not.anyOf", "schema": {"description": "Treatment Role - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Role.Not.Anyof", "type": "array"}, "required": false, "description": "Treatment Role - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "role.descendantsOf", "schema": {"description": "Treatment Role - Filter for all child concepts of a given concepts code", "title": "Role.Descendantsof", "type": "string"}, "required": false, "description": "Treatment Role - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "terminationReason.not.exists", "schema": {"description": "Termination reason - Filter for entries without a value", "title": "Terminationreason.Not.Exists", "type": "boolean"}, "required": false, "description": "Termination reason - Filter for entries without a value"}, {"in": "query", "name": "terminationReason.exists", "schema": {"description": "Termination reason - Filter for entries with a value", "title": "Terminationreason.Exists", "type": "boolean"}, "required": false, "description": "Termination reason - Filter for entries with a value"}, {"in": "query", "name": "terminationReason", "schema": {"description": "Termination reason - Filter for a matching concept code", "title": "Terminationreason", "type": "string"}, "required": false, "description": "Termination reason - Filter for a matching concept code"}, {"in": "query", "name": "terminationReason.not", "schema": {"description": "Termination reason - Filter for a mismatching concept code", "title": "Terminationreason.Not", "type": "string"}, "required": false, "description": "Termination reason - Filter for a mismatching concept code"}, {"in": "query", "name": "terminationReason.anyOf", "schema": {"description": "Termination reason - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Anyof", "type": "array"}, "required": false, "description": "Termination reason - Filter for a matching set of concept codes"}, {"in": "query", "name": "terminationReason.not.anyOf", "schema": {"description": "Termination reason - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Not.Anyof", "type": "array"}, "required": false, "description": "Termination reason - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "terminationReason.descendantsOf", "schema": {"description": "Termination reason - Filter for all child concepts of a given concepts code", "title": "Terminationreason.Descendantsof", "type": "string"}, "required": false, "description": "Termination reason - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "therapyLineId.not.exists", "schema": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries without a value"}, {"in": "query", "name": "therapyLineId.exists", "schema": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries with a value"}, {"in": "query", "name": "therapyLineId", "schema": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference matches"}, {"in": "query", "name": "therapyLineId.not", "schema": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference mismatches"}, {"in": "query", "name": "therapyLineId.contains", "schema": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text matches"}, {"in": "query", "name": "therapyLineId.not.contains", "schema": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text mismatches"}, {"in": "query", "name": "therapyLineId.beginsWith", "schema": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries starting with the text"}, {"in": "query", "name": "therapyLineId.not.beginsWith", "schema": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not starting with the text"}, {"in": "query", "name": "therapyLineId.endsWith", "schema": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries ending with the text"}, {"in": "query", "name": "therapyLineId.not.endsWith", "schema": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not ending with the text"}, {"in": "query", "name": "targetedEntitiesIds", "schema": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "targetedEntitiesIds.not", "schema": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "medications.id", "schema": {"description": "Id - Filter for full text matches", "title": "Medications.Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "medications.id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Medications.Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "medications.id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Medications.Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "medications.id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Medications.Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "medications.id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Medications.Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "medications.id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Medications.Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Medications.Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "medications.id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Medications.Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.createdAt.before", "schema": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Medications.Createdat.Before", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "medications.createdAt.after", "schema": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Medications.Createdat.After", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "medications.createdAt.onOrBefore", "schema": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Medications.Createdat.Onorbefore", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "medications.createdAt.onOrAfter", "schema": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Medications.Createdat.Onorafter", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "medications.createdAt.on", "schema": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Medications.Createdat.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "medications.createdAt.not.on", "schema": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Medications.Createdat.Not.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "medications.createdAt.between", "schema": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Createdat.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "medications.createdAt.not.between", "schema": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Createdat.Not.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "medications.updatedAt.before", "schema": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Medications.Updatedat.Before", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "medications.updatedAt.after", "schema": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Medications.Updatedat.After", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "medications.updatedAt.onOrBefore", "schema": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Medications.Updatedat.Onorbefore", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "medications.updatedAt.onOrAfter", "schema": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Medications.Updatedat.Onorafter", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "medications.updatedAt.on", "schema": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Medications.Updatedat.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "medications.updatedAt.not.on", "schema": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Medications.Updatedat.Not.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "medications.updatedAt.between", "schema": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Updatedat.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "medications.updatedAt.not.between", "schema": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Updatedat.Not.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "medications.createdBy.not.exists", "schema": {"description": "Created By - Filter for entries without a value", "title": "Medications.Createdby.Not.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries without a value"}, {"in": "query", "name": "medications.createdBy.exists", "schema": {"description": "Created By - Filter for entries with a value", "title": "Medications.Createdby.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries with a value"}, {"in": "query", "name": "medications.updatedBy.id.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Medications.Updatedby.Id.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.updatedBy.id.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Medications.Updatedby.Id.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.updatedBy.id.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Medications.Updatedby.Id.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.updatedBy.id.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.updatedBy.id.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Medications.Updatedby.Id.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.updatedBy.id.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Medications.Updatedby.Id.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.updatedBy.id.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Medications.Updatedby.Id.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.updatedBy.id.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Medications.Updatedby.Id.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.updatedBy.username", "schema": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Username", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "medications.updatedBy.username.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Username.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "medications.updatedBy.username.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Username.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "medications.updatedBy.username.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Username.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "medications.updatedBy.username.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Username.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "medications.updatedBy.username.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Username.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.updatedBy.username.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Username.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "medications.updatedBy.username.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Username.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.updatedBy.email", "schema": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Email", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "medications.updatedBy.email.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Email.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "medications.updatedBy.email.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Email.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "medications.updatedBy.email.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Email.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "medications.updatedBy.email.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Email.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "medications.updatedBy.email.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Email.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.updatedBy.email.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Email.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "medications.updatedBy.email.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Email.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.updatedBy.firstName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Medications.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "medications.updatedBy.firstName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Medications.Updatedby.Firstname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "medications.updatedBy.firstName", "schema": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Firstname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "medications.updatedBy.firstName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Firstname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "medications.updatedBy.firstName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Firstname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "medications.updatedBy.firstName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Firstname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "medications.updatedBy.firstName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Firstname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "medications.updatedBy.firstName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.updatedBy.firstName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Firstname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "medications.updatedBy.firstName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Firstname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.updatedBy.lastName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Medications.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "medications.updatedBy.lastName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Medications.Updatedby.Lastname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "medications.updatedBy.lastName", "schema": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Lastname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "medications.updatedBy.lastName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Lastname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "medications.updatedBy.lastName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Lastname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "medications.updatedBy.lastName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Lastname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "medications.updatedBy.lastName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Lastname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "medications.updatedBy.lastName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.updatedBy.lastName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Lastname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "medications.updatedBy.lastName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Lastname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.description", "schema": {"description": "None - Filter for full text matches", "title": "Medications.Description", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "medications.description.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Medications.Description.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "medications.description.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Medications.Description.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "medications.description.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Medications.Description.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "medications.description.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Medications.Description.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "medications.description.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Description.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.description.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Medications.Description.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "medications.description.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Description.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.externalSource.not.exists", "schema": {"description": "External data source - Filter for entries without a value", "title": "Medications.Externalsource.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries without a value"}, {"in": "query", "name": "medications.externalSource.exists", "schema": {"description": "External data source - Filter for entries with a value", "title": "Medications.Externalsource.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries with a value"}, {"in": "query", "name": "medications.externalSource", "schema": {"description": "External data source - Filter for full text matches", "title": "Medications.Externalsource", "type": "string"}, "required": false, "description": "External data source - Filter for full text matches"}, {"in": "query", "name": "medications.externalSource.not", "schema": {"description": "External data source - Filter for full text mismatches", "title": "Medications.Externalsource.Not", "type": "string"}, "required": false, "description": "External data source - Filter for full text mismatches"}, {"in": "query", "name": "medications.externalSource.contains", "schema": {"description": "External data source - Filter for partial text matches", "title": "Medications.Externalsource.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text matches"}, {"in": "query", "name": "medications.externalSource.not.contains", "schema": {"description": "External data source - Filter for partial text mismatches", "title": "Medications.Externalsource.Not.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text mismatches"}, {"in": "query", "name": "medications.externalSource.beginsWith", "schema": {"description": "External data source - Filter for entries starting with the text", "title": "Medications.Externalsource.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries starting with the text"}, {"in": "query", "name": "medications.externalSource.not.beginsWith", "schema": {"description": "External data source - Filter for entries not starting with the text", "title": "Medications.Externalsource.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.externalSource.endsWith", "schema": {"description": "External data source - Filter for entries ending with the text", "title": "Medications.Externalsource.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries ending with the text"}, {"in": "query", "name": "medications.externalSource.not.endsWith", "schema": {"description": "External data source - Filter for entries not ending with the text", "title": "Medications.Externalsource.Not.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.externalSourceId.not.exists", "schema": {"description": "External data source Id - Filter for entries without a value", "title": "Medications.Externalsourceid.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries without a value"}, {"in": "query", "name": "medications.externalSourceId.exists", "schema": {"description": "External data source Id - Filter for entries with a value", "title": "Medications.Externalsourceid.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries with a value"}, {"in": "query", "name": "medications.externalSourceId", "schema": {"description": "External data source Id - Filter for reference matches", "title": "Medications.Externalsourceid", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference matches"}, {"in": "query", "name": "medications.externalSourceId.not", "schema": {"description": "External data source Id - Filter for reference mismatches", "title": "Medications.Externalsourceid.Not", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference mismatches"}, {"in": "query", "name": "medications.externalSourceId.contains", "schema": {"description": "External data source Id - Filter for partial text matches", "title": "Medications.Externalsourceid.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text matches"}, {"in": "query", "name": "medications.externalSourceId.not.contains", "schema": {"description": "External data source Id - Filter for partial text mismatches", "title": "Medications.Externalsourceid.Not.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text mismatches"}, {"in": "query", "name": "medications.externalSourceId.beginsWith", "schema": {"description": "External data source Id - Filter for entries starting with the text", "title": "Medications.Externalsourceid.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries starting with the text"}, {"in": "query", "name": "medications.externalSourceId.not.beginsWith", "schema": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Medications.Externalsourceid.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not starting with the text"}, {"in": "query", "name": "medications.externalSourceId.endsWith", "schema": {"description": "External data source Id - Filter for entries ending with the text", "title": "Medications.Externalsourceid.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries ending with the text"}, {"in": "query", "name": "medications.externalSourceId.not.endsWith", "schema": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Medications.Externalsourceid.Not.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not ending with the text"}, {"in": "query", "name": "medications.drug", "schema": {"description": "Antineoplastic Drug - Filter for a matching concept code", "title": "Medications.Drug", "type": "string"}, "required": false, "description": "Antineoplastic Drug - Filter for a matching concept code"}, {"in": "query", "name": "medications.drug.not", "schema": {"description": "Antineoplastic Drug - Filter for a mismatching concept code", "title": "Medications.Drug.Not", "type": "string"}, "required": false, "description": "Antineoplastic Drug - Filter for a mismatching concept code"}, {"in": "query", "name": "medications.drug.anyOf", "schema": {"description": "Antineoplastic Drug - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Medications.Drug.Anyof", "type": "array"}, "required": false, "description": "Antineoplastic Drug - Filter for a matching set of concept codes"}, {"in": "query", "name": "medications.drug.not.anyOf", "schema": {"description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Medications.Drug.Not.Anyof", "type": "array"}, "required": false, "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "medications.drug.descendantsOf", "schema": {"description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code", "title": "Medications.Drug.Descendantsof", "type": "string"}, "required": false, "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "medications.route.not.exists", "schema": {"description": "Route - Filter for entries without a value", "title": "Medications.Route.Not.Exists", "type": "boolean"}, "required": false, "description": "Route - Filter for entries without a value"}, {"in": "query", "name": "medications.route.exists", "schema": {"description": "Route - Filter for entries with a value", "title": "Medications.Route.Exists", "type": "boolean"}, "required": false, "description": "Route - Filter for entries with a value"}, {"in": "query", "name": "medications.route", "schema": {"description": "Route - Filter for a matching concept code", "title": "Medications.Route", "type": "string"}, "required": false, "description": "Route - Filter for a matching concept code"}, {"in": "query", "name": "medications.route.not", "schema": {"description": "Route - Filter for a mismatching concept code", "title": "Medications.Route.Not", "type": "string"}, "required": false, "description": "Route - Filter for a mismatching concept code"}, {"in": "query", "name": "medications.route.anyOf", "schema": {"description": "Route - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Medications.Route.Anyof", "type": "array"}, "required": false, "description": "Route - Filter for a matching set of concept codes"}, {"in": "query", "name": "medications.route.not.anyOf", "schema": {"description": "Route - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Medications.Route.Not.Anyof", "type": "array"}, "required": false, "description": "Route - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "medications.route.descendantsOf", "schema": {"description": "Route - Filter for all child concepts of a given concepts code", "title": "Medications.Route.Descendantsof", "type": "string"}, "required": false, "description": "Route - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "medications.usedOfflabel.not.exists", "schema": {"description": "Off-label use - Filter for entries without a value", "title": "Medications.Usedofflabel.Not.Exists", "type": "boolean"}, "required": false, "description": "Off-label use - Filter for entries without a value"}, {"in": "query", "name": "medications.usedOfflabel.exists", "schema": {"description": "Off-label use - Filter for entries with a value", "title": "Medications.Usedofflabel.Exists", "type": "boolean"}, "required": false, "description": "Off-label use - Filter for entries with a value"}, {"in": "query", "name": "medications.usedOfflabel", "schema": {"description": "Off-label use - ('Filter for yes/no statement',)", "title": "Medications.Usedofflabel", "type": "boolean"}, "required": false, "description": "Off-label use - ('Filter for yes/no statement',)"}, {"in": "query", "name": "medications.withinSoc.not.exists", "schema": {"description": "Within SOC - Filter for entries without a value", "title": "Medications.Withinsoc.Not.Exists", "type": "boolean"}, "required": false, "description": "Within SOC - Filter for entries without a value"}, {"in": "query", "name": "medications.withinSoc.exists", "schema": {"description": "Within SOC - Filter for entries with a value", "title": "Medications.Withinsoc.Exists", "type": "boolean"}, "required": false, "description": "Within SOC - Filter for entries with a value"}, {"in": "query", "name": "medications.withinSoc", "schema": {"description": "Within SOC - ('Filter for yes/no statement',)", "title": "Medications.Withinsoc", "type": "boolean"}, "required": false, "description": "Within SOC - ('Filter for yes/no statement',)"}, {"in": "query", "name": "medications.dosageMassConcentration.not.exists", "schema": {"description": "Dosage - Mass concentration - Filter for entries without a value", "title": "Medications.Dosagemassconcentration.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageMassConcentration.exists", "schema": {"description": "Dosage - Mass concentration - Filter for entries with a value", "title": "Medications.Dosagemassconcentration.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageMassConcentration.lessThan", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values less than the specified value", "title": "Medications.Dosagemassconcentration.Lessthan", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.lessThanOrEqual", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemassconcentration.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.greaterThan", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemassconcentration.Greaterthan", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.greaterThanOrEqual", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemassconcentration.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.equal", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemassconcentration.Equal", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.not.equal", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemassconcentration.Not.Equal", "type": "number"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageMassConcentration.between", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemassconcentration.Between", "type": "array"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageMassConcentration.not.between", "schema": {"description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemassconcentration.Not.Between", "type": "array"}, "required": false, "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageMass.not.exists", "schema": {"description": "Dosage - Fixed Mass - Filter for entries without a value", "title": "Medications.Dosagemass.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageMass.exists", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with a value", "title": "Medications.Dosagemass.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageMass.lessThan", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value", "title": "Medications.Dosagemass.Lessthan", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageMass.lessThanOrEqual", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemass.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMass.greaterThan", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemass.Greaterthan", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageMass.greaterThanOrEqual", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemass.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMass.equal", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemass.Equal", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageMass.not.equal", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemass.Not.Equal", "type": "number"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageMass.between", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemass.Between", "type": "array"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageMass.not.between", "schema": {"description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemass.Not.Between", "type": "array"}, "required": false, "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageVolume.not.exists", "schema": {"description": "Dosage - Volume - Filter for entries without a value", "title": "Medications.Dosagevolume.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Volume - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageVolume.exists", "schema": {"description": "Dosage - Volume - Filter for entries with a value", "title": "Medications.Dosagevolume.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Volume - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageVolume.lessThan", "schema": {"description": "Dosage - Volume - Filter for entries with values less than the specified value", "title": "Medications.Dosagevolume.Lessthan", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageVolume.lessThanOrEqual", "schema": {"description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagevolume.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageVolume.greaterThan", "schema": {"description": "Dosage - Volume - Filter for entries with values greater than the specified value", "title": "Medications.Dosagevolume.Greaterthan", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageVolume.greaterThanOrEqual", "schema": {"description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagevolume.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageVolume.equal", "schema": {"description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagevolume.Equal", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageVolume.not.equal", "schema": {"description": "Dosage - Volume - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagevolume.Not.Equal", "type": "number"}, "required": false, "description": "Dosage - Volume - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageVolume.between", "schema": {"description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagevolume.Between", "type": "array"}, "required": false, "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageVolume.not.between", "schema": {"description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagevolume.Not.Between", "type": "array"}, "required": false, "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageMassSurface.not.exists", "schema": {"description": "Dosage - Mass per body surface - Filter for entries without a value", "title": "Medications.Dosagemasssurface.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageMassSurface.exists", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with a value", "title": "Medications.Dosagemasssurface.Exists", "type": "boolean"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageMassSurface.lessThan", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value", "title": "Medications.Dosagemasssurface.Lessthan", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.lessThanOrEqual", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemasssurface.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.greaterThan", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemasssurface.Greaterthan", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.greaterThanOrEqual", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemasssurface.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.equal", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemasssurface.Equal", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.not.equal", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemasssurface.Not.Equal", "type": "number"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageMassSurface.between", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemasssurface.Between", "type": "array"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageMassSurface.not.between", "schema": {"description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemasssurface.Not.Between", "type": "array"}, "required": false, "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMassConcentration.not.exists", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries without a value", "title": "Medications.Dosageratemassconcentration.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.exists", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with a value", "title": "Medications.Dosageratemassconcentration.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.lessThan", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemassconcentration.Lessthan", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.lessThanOrEqual", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemassconcentration.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.greaterThan", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemassconcentration.Greaterthan", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.greaterThanOrEqual", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemassconcentration.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.equal", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemassconcentration.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.not.equal", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemassconcentration.Not.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassConcentration.between", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemassconcentration.Between", "type": "array"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMassConcentration.not.between", "schema": {"description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemassconcentration.Not.Between", "type": "array"}, "required": false, "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMass.not.exists", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries without a value", "title": "Medications.Dosageratemass.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageRateMass.exists", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with a value", "title": "Medications.Dosageratemass.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageRateMass.lessThan", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemass.Lessthan", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageRateMass.lessThanOrEqual", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemass.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMass.greaterThan", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemass.Greaterthan", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageRateMass.greaterThanOrEqual", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemass.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMass.equal", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemass.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMass.not.equal", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemass.Not.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMass.between", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemass.Between", "type": "array"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMass.not.between", "schema": {"description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemass.Not.Between", "type": "array"}, "required": false, "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateVolume.not.exists", "schema": {"description": "Dosage rate - Volume - Filter for entries without a value", "title": "Medications.Dosageratevolume.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Volume - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageRateVolume.exists", "schema": {"description": "Dosage rate - Volume - Filter for entries with a value", "title": "Medications.Dosageratevolume.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageRateVolume.lessThan", "schema": {"description": "Dosage rate - Volume - Filter for entries with values less than the specified value", "title": "Medications.Dosageratevolume.Lessthan", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.lessThanOrEqual", "schema": {"description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratevolume.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.greaterThan", "schema": {"description": "Dosage rate - Volume - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratevolume.Greaterthan", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.greaterThanOrEqual", "schema": {"description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratevolume.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.equal", "schema": {"description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratevolume.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.not.equal", "schema": {"description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratevolume.Not.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageRateVolume.between", "schema": {"description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratevolume.Between", "type": "array"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateVolume.not.between", "schema": {"description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratevolume.Not.Between", "type": "array"}, "required": false, "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMassSurface.not.exists", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries without a value", "title": "Medications.Dosageratemasssurface.Not.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries without a value"}, {"in": "query", "name": "medications.dosageRateMassSurface.exists", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with a value", "title": "Medications.Dosageratemasssurface.Exists", "type": "boolean"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with a value"}, {"in": "query", "name": "medications.dosageRateMassSurface.lessThan", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemasssurface.Lessthan", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.lessThanOrEqual", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemasssurface.Lessthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.greaterThan", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemasssurface.Greaterthan", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.greaterThanOrEqual", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemasssurface.Greaterthanorequal", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.equal", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemasssurface.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.not.equal", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemasssurface.Not.Equal", "type": "number"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "medications.dosageRateMassSurface.between", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemasssurface.Between", "type": "array"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "medications.dosageRateMassSurface.not.between", "schema": {"description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemasssurface.Not.Between", "type": "array"}, "required": false, "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_SystemicTherapySchema_"}}}}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}}, "/api/systemic-therapies/{systemicTherapyId}/medications": {"post": {"operationId": "createSystemicTherapyMedication", "summary": "Create Systemic Therapy Medication", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Systemic Therapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapyMedicationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSystemicTherapyMedications", "summary": "Get Systemic Therapy Medications Matching The Query", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/SystemicTherapyMedicationSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}}, "/api/systemic-therapies/{systemicTherapyId}": {"delete": {"operationId": "deleteSystemicTherapyById", "summary": "Delete Systemic Therapy", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSystemicTherapyById", "summary": "Get Systemic Therapy By Id", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapySchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateSystemicTherapy", "summary": "Update Systemic Therapy", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapyCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}": {"delete": {"operationId": "deleteSystemicTherapyMedication", "summary": "Delete Systemic Therapy Medication", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "medicationId", "schema": {"title": "Medicationid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSystemicTherapyMedicationById", "summary": "Get Systemic Therapy Medication By Id", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "medicationId", "schema": {"title": "Medicationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapyMedicationSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateSystemicTherapyMedication", "summary": "Update Systemic Therapy Medication", "parameters": [{"in": "path", "name": "systemicTherapyId", "schema": {"title": "Systemictherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "medicationId", "schema": {"title": "Medicationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Systemic Therapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemicTherapyMedicationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/surgeries": {"post": {"operationId": "createSurgery", "summary": "Create Surgery", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Surgeries"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SurgeryCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSurgeries", "summary": "Get All Surgeries Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "procedure", "schema": {"description": "Surgical procedure - Filter for a matching concept code", "title": "Procedure", "type": "string"}, "required": false, "description": "Surgical procedure - Filter for a matching concept code"}, {"in": "query", "name": "procedure.not", "schema": {"description": "Surgical procedure - Filter for a mismatching concept code", "title": "Procedure.Not", "type": "string"}, "required": false, "description": "Surgical procedure - Filter for a mismatching concept code"}, {"in": "query", "name": "procedure.anyOf", "schema": {"description": "Surgical procedure - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Procedure.Anyof", "type": "array"}, "required": false, "description": "Surgical procedure - Filter for a matching set of concept codes"}, {"in": "query", "name": "procedure.not.anyOf", "schema": {"description": "Surgical procedure - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Procedure.Not.Anyof", "type": "array"}, "required": false, "description": "Surgical procedure - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "procedure.descendantsOf", "schema": {"description": "Surgical procedure - Filter for all child concepts of a given concepts code", "title": "Procedure.Descendantsof", "type": "string"}, "required": false, "description": "Surgical procedure - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "intent", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "required": false, "description": "Intent - ('Filter for single value choice',)"}, {"in": "query", "name": "intent.not", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "required": false, "description": "Intent - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "intent.anyOf", "schema": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "required": false, "description": "Intent - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "bodysite.not.exists", "schema": {"description": "Anatomical location - Filter for entries without a value", "title": "Bodysite.Not.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location - Filter for entries without a value"}, {"in": "query", "name": "bodysite.exists", "schema": {"description": "Anatomical location - Filter for entries with a value", "title": "Bodysite.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location - Filter for entries with a value"}, {"in": "query", "name": "bodysite", "schema": {"description": "Anatomical location - Filter for a matching concept code", "title": "Bodysite", "type": "string"}, "required": false, "description": "Anatomical location - Filter for a matching concept code"}, {"in": "query", "name": "bodysite.not", "schema": {"description": "Anatomical location - Filter for a mismatching concept code", "title": "Bodysite.Not", "type": "string"}, "required": false, "description": "Anatomical location - Filter for a mismatching concept code"}, {"in": "query", "name": "bodysite.anyOf", "schema": {"description": "Anatomical location - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysite.Anyof", "type": "array"}, "required": false, "description": "Anatomical location - Filter for a matching set of concept codes"}, {"in": "query", "name": "bodysite.not.anyOf", "schema": {"description": "Anatomical location - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysite.Not.Anyof", "type": "array"}, "required": false, "description": "Anatomical location - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "bodysite.descendantsOf", "schema": {"description": "Anatomical location - Filter for all child concepts of a given concepts code", "title": "Bodysite.Descendantsof", "type": "string"}, "required": false, "description": "Anatomical location - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "bodysiteQualifier.not.exists", "schema": {"description": "Anatomical location qualifier - Filter for entries without a value", "title": "Bodysitequalifier.Not.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location qualifier - Filter for entries without a value"}, {"in": "query", "name": "bodysiteQualifier.exists", "schema": {"description": "Anatomical location qualifier - Filter for entries with a value", "title": "Bodysitequalifier.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location qualifier - Filter for entries with a value"}, {"in": "query", "name": "bodysiteQualifier", "schema": {"description": "Anatomical location qualifier - Filter for a matching concept code", "title": "Bodysitequalifier", "type": "string"}, "required": false, "description": "Anatomical location qualifier - Filter for a matching concept code"}, {"in": "query", "name": "bodysiteQualifier.not", "schema": {"description": "Anatomical location qualifier - Filter for a mismatching concept code", "title": "Bodysitequalifier.Not", "type": "string"}, "required": false, "description": "Anatomical location qualifier - Filter for a mismatching concept code"}, {"in": "query", "name": "bodysiteQualifier.anyOf", "schema": {"description": "Anatomical location qualifier - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysitequalifier.Anyof", "type": "array"}, "required": false, "description": "Anatomical location qualifier - Filter for a matching set of concept codes"}, {"in": "query", "name": "bodysiteQualifier.not.anyOf", "schema": {"description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysitequalifier.Not.Anyof", "type": "array"}, "required": false, "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "bodysiteQualifier.descendantsOf", "schema": {"description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code", "title": "Bodysitequalifier.Descendantsof", "type": "string"}, "required": false, "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "bodysiteLaterality.not.exists", "schema": {"description": "Anatomical location laterality - Filter for entries without a value", "title": "Bodysitelaterality.Not.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location laterality - Filter for entries without a value"}, {"in": "query", "name": "bodysiteLaterality.exists", "schema": {"description": "Anatomical location laterality - Filter for entries with a value", "title": "Bodysitelaterality.Exists", "type": "boolean"}, "required": false, "description": "Anatomical location laterality - Filter for entries with a value"}, {"in": "query", "name": "bodysiteLaterality", "schema": {"description": "Anatomical location laterality - Filter for a matching concept code", "title": "Bodysitelaterality", "type": "string"}, "required": false, "description": "Anatomical location laterality - Filter for a matching concept code"}, {"in": "query", "name": "bodysiteLaterality.not", "schema": {"description": "Anatomical location laterality - Filter for a mismatching concept code", "title": "Bodysitelaterality.Not", "type": "string"}, "required": false, "description": "Anatomical location laterality - Filter for a mismatching concept code"}, {"in": "query", "name": "bodysiteLaterality.anyOf", "schema": {"description": "Anatomical location laterality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysitelaterality.Anyof", "type": "array"}, "required": false, "description": "Anatomical location laterality - Filter for a matching set of concept codes"}, {"in": "query", "name": "bodysiteLaterality.not.anyOf", "schema": {"description": "Anatomical location laterality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysitelaterality.Not.Anyof", "type": "array"}, "required": false, "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "bodysiteLaterality.descendantsOf", "schema": {"description": "Anatomical location laterality - Filter for all child concepts of a given concepts code", "title": "Bodysitelaterality.Descendantsof", "type": "string"}, "required": false, "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "outcome.not.exists", "schema": {"description": "Outcome - Filter for entries without a value", "title": "Outcome.Not.Exists", "type": "boolean"}, "required": false, "description": "Outcome - Filter for entries without a value"}, {"in": "query", "name": "outcome.exists", "schema": {"description": "Outcome - Filter for entries with a value", "title": "Outcome.Exists", "type": "boolean"}, "required": false, "description": "Outcome - Filter for entries with a value"}, {"in": "query", "name": "outcome", "schema": {"description": "Outcome - Filter for a matching concept code", "title": "Outcome", "type": "string"}, "required": false, "description": "Outcome - Filter for a matching concept code"}, {"in": "query", "name": "outcome.not", "schema": {"description": "Outcome - Filter for a mismatching concept code", "title": "Outcome.Not", "type": "string"}, "required": false, "description": "Outcome - Filter for a mismatching concept code"}, {"in": "query", "name": "outcome.anyOf", "schema": {"description": "Outcome - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Outcome.Anyof", "type": "array"}, "required": false, "description": "Outcome - Filter for a matching set of concept codes"}, {"in": "query", "name": "outcome.not.anyOf", "schema": {"description": "Outcome - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Outcome.Not.Anyof", "type": "array"}, "required": false, "description": "Outcome - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "outcome.descendantsOf", "schema": {"description": "Outcome - Filter for all child concepts of a given concepts code", "title": "Outcome.Descendantsof", "type": "string"}, "required": false, "description": "Outcome - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "therapyLineId.not.exists", "schema": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries without a value"}, {"in": "query", "name": "therapyLineId.exists", "schema": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries with a value"}, {"in": "query", "name": "therapyLineId", "schema": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference matches"}, {"in": "query", "name": "therapyLineId.not", "schema": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference mismatches"}, {"in": "query", "name": "therapyLineId.contains", "schema": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text matches"}, {"in": "query", "name": "therapyLineId.not.contains", "schema": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text mismatches"}, {"in": "query", "name": "therapyLineId.beginsWith", "schema": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries starting with the text"}, {"in": "query", "name": "therapyLineId.not.beginsWith", "schema": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not starting with the text"}, {"in": "query", "name": "therapyLineId.endsWith", "schema": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries ending with the text"}, {"in": "query", "name": "therapyLineId.not.endsWith", "schema": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not ending with the text"}, {"in": "query", "name": "targetedEntitiesIds", "schema": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "targetedEntitiesIds.not", "schema": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_Surgery_"}}}}}, "tags": ["Surgeries"], "security": [{"JWTAuth": []}]}}, "/api/surgeries/{surgeryId}": {"delete": {"operationId": "deleteSurgeryById", "summary": "Delete Surgery", "parameters": [{"in": "path", "name": "surgeryId", "schema": {"title": "Surgeryid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Surgeries"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getSurgeryById", "summary": "Get Surgery By Id", "parameters": [{"in": "path", "name": "surgeryId", "schema": {"title": "Surgeryid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Surgery"}}}}, "404": {"description": "Not Found"}}, "tags": ["Surgeries"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateSurgeryById", "summary": "Update Surgery", "parameters": [{"in": "path", "name": "surgeryId", "schema": {"title": "Surgeryid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Surgeries"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SurgeryCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/radiotherapies": {"post": {"operationId": "createRadiotherapy", "summary": "Create Radiotherapy", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapyCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapies", "summary": "Get All Radiotherapies Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "period.overlaps", "schema": {"description": "Treatment period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries overlapping with the time period"}, {"in": "query", "name": "period.not.overlaps", "schema": {"description": "Treatment period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries not overlapping with the time period"}, {"in": "query", "name": "period.contains", "schema": {"description": "Treatment period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries containing the time period"}, {"in": "query", "name": "period.not.contains", "schema": {"description": "Treatment period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries not containing the time period"}, {"in": "query", "name": "period.containedBy", "schema": {"description": "Treatment period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries whose period are contined by the time period"}, {"in": "query", "name": "period.not.containedBy", "schema": {"description": "Treatment period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "required": false, "description": "Treatment period - Filter for entries whose period are not contined by the time period"}, {"in": "query", "name": "sessions.lessThan", "schema": {"description": "Total sessions - Filter for entries with values less than the specified value", "title": "Sessions.Lessthan", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values less than the specified value"}, {"in": "query", "name": "sessions.lessThanOrEqual", "schema": {"description": "Total sessions - Filter for entries with values less than or equal to the specified value", "title": "Sessions.Lessthanorequal", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "sessions.greaterThan", "schema": {"description": "Total sessions - Filter for entries with values greater than the specified value", "title": "Sessions.Greaterthan", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "sessions.greaterThanOrEqual", "schema": {"description": "Total sessions - Filter for entries with values greater than or equal to the specified value", "title": "Sessions.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "sessions.equal", "schema": {"description": "Total sessions - Filter for entries with values exactly equal to the specified value", "title": "Sessions.Equal", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "sessions.not.equal", "schema": {"description": "Total sessions - Filter for entries with values not equal to the specified value", "title": "Sessions.Not.Equal", "type": "integer"}, "required": false, "description": "Total sessions - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "sessions.between", "schema": {"description": "Total sessions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Sessions.Between", "type": "array"}, "required": false, "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "sessions.not.between", "schema": {"description": "Total sessions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Sessions.Not.Between", "type": "array"}, "required": false, "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "intent", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "required": false, "description": "Intent - ('Filter for single value choice',)"}, {"in": "query", "name": "intent.not", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "required": false, "description": "Intent - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "intent.anyOf", "schema": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "required": false, "description": "Intent - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "terminationReason.not.exists", "schema": {"description": "Termination reason - Filter for entries without a value", "title": "Terminationreason.Not.Exists", "type": "boolean"}, "required": false, "description": "Termination reason - Filter for entries without a value"}, {"in": "query", "name": "terminationReason.exists", "schema": {"description": "Termination reason - Filter for entries with a value", "title": "Terminationreason.Exists", "type": "boolean"}, "required": false, "description": "Termination reason - Filter for entries with a value"}, {"in": "query", "name": "terminationReason", "schema": {"description": "Termination reason - Filter for a matching concept code", "title": "Terminationreason", "type": "string"}, "required": false, "description": "Termination reason - Filter for a matching concept code"}, {"in": "query", "name": "terminationReason.not", "schema": {"description": "Termination reason - Filter for a mismatching concept code", "title": "Terminationreason.Not", "type": "string"}, "required": false, "description": "Termination reason - Filter for a mismatching concept code"}, {"in": "query", "name": "terminationReason.anyOf", "schema": {"description": "Termination reason - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Anyof", "type": "array"}, "required": false, "description": "Termination reason - Filter for a matching set of concept codes"}, {"in": "query", "name": "terminationReason.not.anyOf", "schema": {"description": "Termination reason - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Not.Anyof", "type": "array"}, "required": false, "description": "Termination reason - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "terminationReason.descendantsOf", "schema": {"description": "Termination reason - Filter for all child concepts of a given concepts code", "title": "Terminationreason.Descendantsof", "type": "string"}, "required": false, "description": "Termination reason - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "therapyLineId.not.exists", "schema": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries without a value"}, {"in": "query", "name": "therapyLineId.exists", "schema": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "required": false, "description": "Therapy line - Filter for entries with a value"}, {"in": "query", "name": "therapyLineId", "schema": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference matches"}, {"in": "query", "name": "therapyLineId.not", "schema": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "required": false, "description": "Therapy line - Filter for reference mismatches"}, {"in": "query", "name": "therapyLineId.contains", "schema": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text matches"}, {"in": "query", "name": "therapyLineId.not.contains", "schema": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "required": false, "description": "Therapy line - Filter for partial text mismatches"}, {"in": "query", "name": "therapyLineId.beginsWith", "schema": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries starting with the text"}, {"in": "query", "name": "therapyLineId.not.beginsWith", "schema": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not starting with the text"}, {"in": "query", "name": "therapyLineId.endsWith", "schema": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries ending with the text"}, {"in": "query", "name": "therapyLineId.not.endsWith", "schema": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "required": false, "description": "Therapy line - Filter for entries not ending with the text"}, {"in": "query", "name": "targetedEntitiesIds", "schema": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "targetedEntitiesIds.not", "schema": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}, "required": false, "description": "Targeted neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "dosages.id", "schema": {"description": "Id - Filter for full text matches", "title": "Dosages.Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "dosages.id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Dosages.Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "dosages.id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Dosages.Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "dosages.id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Dosages.Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Dosages.Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Dosages.Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Dosages.Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Dosages.Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.createdAt.before", "schema": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Dosages.Createdat.Before", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "dosages.createdAt.after", "schema": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Dosages.Createdat.After", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "dosages.createdAt.onOrBefore", "schema": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dosages.Createdat.Onorbefore", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "dosages.createdAt.onOrAfter", "schema": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dosages.Createdat.Onorafter", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "dosages.createdAt.on", "schema": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dosages.Createdat.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "dosages.createdAt.not.on", "schema": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dosages.Createdat.Not.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "dosages.createdAt.between", "schema": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Createdat.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "dosages.createdAt.not.between", "schema": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Createdat.Not.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "dosages.updatedAt.before", "schema": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Dosages.Updatedat.Before", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "dosages.updatedAt.after", "schema": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Dosages.Updatedat.After", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "dosages.updatedAt.onOrBefore", "schema": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dosages.Updatedat.Onorbefore", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "dosages.updatedAt.onOrAfter", "schema": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dosages.Updatedat.Onorafter", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "dosages.updatedAt.on", "schema": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dosages.Updatedat.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "dosages.updatedAt.not.on", "schema": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dosages.Updatedat.Not.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "dosages.updatedAt.between", "schema": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Updatedat.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "dosages.updatedAt.not.between", "schema": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Updatedat.Not.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "dosages.createdBy.not.exists", "schema": {"description": "Created By - Filter for entries without a value", "title": "Dosages.Createdby.Not.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries without a value"}, {"in": "query", "name": "dosages.createdBy.exists", "schema": {"description": "Created By - Filter for entries with a value", "title": "Dosages.Createdby.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries with a value"}, {"in": "query", "name": "dosages.updatedBy.id.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Dosages.Updatedby.Id.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Updatedby.Id.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Dosages.Updatedby.Id.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Updatedby.Id.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Dosages.Updatedby.Id.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "dosages.updatedBy.id.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Updatedby.Id.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.updatedBy.id.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Updatedby.Id.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.updatedBy.username", "schema": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Username", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "dosages.updatedBy.username.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Username.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "dosages.updatedBy.username.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Username.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "dosages.updatedBy.username.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Username.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.updatedBy.username.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Username.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.updatedBy.username.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Username.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.updatedBy.username.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Username.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.updatedBy.username.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Username.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.updatedBy.email", "schema": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Email", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "dosages.updatedBy.email.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Email.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "dosages.updatedBy.email.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Email.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "dosages.updatedBy.email.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Email.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.updatedBy.email.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Email.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.updatedBy.email.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Email.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.updatedBy.email.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Email.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.updatedBy.email.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Email.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.updatedBy.firstName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Dosages.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "dosages.updatedBy.firstName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Dosages.Updatedby.Firstname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "dosages.updatedBy.firstName", "schema": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Firstname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "dosages.updatedBy.firstName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Firstname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "dosages.updatedBy.firstName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Firstname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "dosages.updatedBy.firstName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Firstname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.updatedBy.firstName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Firstname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.updatedBy.firstName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.updatedBy.firstName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Firstname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.updatedBy.firstName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Firstname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.updatedBy.lastName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Dosages.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "dosages.updatedBy.lastName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Dosages.Updatedby.Lastname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "dosages.updatedBy.lastName", "schema": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Lastname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "dosages.updatedBy.lastName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Lastname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "dosages.updatedBy.lastName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Lastname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "dosages.updatedBy.lastName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Lastname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.updatedBy.lastName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Lastname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.updatedBy.lastName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.updatedBy.lastName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Lastname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.updatedBy.lastName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Lastname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.description", "schema": {"description": "None - Filter for full text matches", "title": "Dosages.Description", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "dosages.description.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Dosages.Description.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "dosages.description.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Dosages.Description.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "dosages.description.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Description.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.description.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Description.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.description.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Description.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.description.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Description.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.description.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Description.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.externalSource.not.exists", "schema": {"description": "External data source - Filter for entries without a value", "title": "Dosages.Externalsource.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries without a value"}, {"in": "query", "name": "dosages.externalSource.exists", "schema": {"description": "External data source - Filter for entries with a value", "title": "Dosages.Externalsource.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries with a value"}, {"in": "query", "name": "dosages.externalSource", "schema": {"description": "External data source - Filter for full text matches", "title": "Dosages.Externalsource", "type": "string"}, "required": false, "description": "External data source - Filter for full text matches"}, {"in": "query", "name": "dosages.externalSource.not", "schema": {"description": "External data source - Filter for full text mismatches", "title": "Dosages.Externalsource.Not", "type": "string"}, "required": false, "description": "External data source - Filter for full text mismatches"}, {"in": "query", "name": "dosages.externalSource.contains", "schema": {"description": "External data source - Filter for partial text matches", "title": "Dosages.Externalsource.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text matches"}, {"in": "query", "name": "dosages.externalSource.not.contains", "schema": {"description": "External data source - Filter for partial text mismatches", "title": "Dosages.Externalsource.Not.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.externalSource.beginsWith", "schema": {"description": "External data source - Filter for entries starting with the text", "title": "Dosages.Externalsource.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.externalSource.not.beginsWith", "schema": {"description": "External data source - Filter for entries not starting with the text", "title": "Dosages.Externalsource.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.externalSource.endsWith", "schema": {"description": "External data source - Filter for entries ending with the text", "title": "Dosages.Externalsource.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.externalSource.not.endsWith", "schema": {"description": "External data source - Filter for entries not ending with the text", "title": "Dosages.Externalsource.Not.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.externalSourceId.not.exists", "schema": {"description": "External data source Id - Filter for entries without a value", "title": "Dosages.Externalsourceid.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries without a value"}, {"in": "query", "name": "dosages.externalSourceId.exists", "schema": {"description": "External data source Id - Filter for entries with a value", "title": "Dosages.Externalsourceid.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries with a value"}, {"in": "query", "name": "dosages.externalSourceId", "schema": {"description": "External data source Id - Filter for reference matches", "title": "Dosages.Externalsourceid", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference matches"}, {"in": "query", "name": "dosages.externalSourceId.not", "schema": {"description": "External data source Id - Filter for reference mismatches", "title": "Dosages.Externalsourceid.Not", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference mismatches"}, {"in": "query", "name": "dosages.externalSourceId.contains", "schema": {"description": "External data source Id - Filter for partial text matches", "title": "Dosages.Externalsourceid.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text matches"}, {"in": "query", "name": "dosages.externalSourceId.not.contains", "schema": {"description": "External data source Id - Filter for partial text mismatches", "title": "Dosages.Externalsourceid.Not.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text mismatches"}, {"in": "query", "name": "dosages.externalSourceId.beginsWith", "schema": {"description": "External data source Id - Filter for entries starting with the text", "title": "Dosages.Externalsourceid.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries starting with the text"}, {"in": "query", "name": "dosages.externalSourceId.not.beginsWith", "schema": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Dosages.Externalsourceid.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not starting with the text"}, {"in": "query", "name": "dosages.externalSourceId.endsWith", "schema": {"description": "External data source Id - Filter for entries ending with the text", "title": "Dosages.Externalsourceid.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries ending with the text"}, {"in": "query", "name": "dosages.externalSourceId.not.endsWith", "schema": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Dosages.Externalsourceid.Not.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not ending with the text"}, {"in": "query", "name": "dosages.fractions.not.exists", "schema": {"description": "Total fractions - Filter for entries without a value", "title": "Dosages.Fractions.Not.Exists", "type": "boolean"}, "required": false, "description": "Total fractions - Filter for entries without a value"}, {"in": "query", "name": "dosages.fractions.exists", "schema": {"description": "Total fractions - Filter for entries with a value", "title": "Dosages.Fractions.Exists", "type": "boolean"}, "required": false, "description": "Total fractions - Filter for entries with a value"}, {"in": "query", "name": "dosages.fractions.lessThan", "schema": {"description": "Total fractions - Filter for entries with values less than the specified value", "title": "Dosages.Fractions.Lessthan", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values less than the specified value"}, {"in": "query", "name": "dosages.fractions.lessThanOrEqual", "schema": {"description": "Total fractions - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Fractions.Lessthanorequal", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "dosages.fractions.greaterThan", "schema": {"description": "Total fractions - Filter for entries with values greater than the specified value", "title": "Dosages.Fractions.Greaterthan", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "dosages.fractions.greaterThanOrEqual", "schema": {"description": "Total fractions - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Fractions.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "dosages.fractions.equal", "schema": {"description": "Total fractions - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Fractions.Equal", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "dosages.fractions.not.equal", "schema": {"description": "Total fractions - Filter for entries with values not equal to the specified value", "title": "Dosages.Fractions.Not.Equal", "type": "integer"}, "required": false, "description": "Total fractions - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "dosages.fractions.between", "schema": {"description": "Total fractions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Fractions.Between", "type": "array"}, "required": false, "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.fractions.not.between", "schema": {"description": "Total fractions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Fractions.Not.Between", "type": "array"}, "required": false, "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.dose.not.exists", "schema": {"description": "Total radiation dose - Filter for entries without a value", "title": "Dosages.Dose.Not.Exists", "type": "boolean"}, "required": false, "description": "Total radiation dose - Filter for entries without a value"}, {"in": "query", "name": "dosages.dose.exists", "schema": {"description": "Total radiation dose - Filter for entries with a value", "title": "Dosages.Dose.Exists", "type": "boolean"}, "required": false, "description": "Total radiation dose - Filter for entries with a value"}, {"in": "query", "name": "dosages.dose.lessThan", "schema": {"description": "Total radiation dose - Filter for entries with values less than the specified value", "title": "Dosages.Dose.Lessthan", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values less than the specified value"}, {"in": "query", "name": "dosages.dose.lessThanOrEqual", "schema": {"description": "Total radiation dose - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Dose.Lessthanorequal", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "dosages.dose.greaterThan", "schema": {"description": "Total radiation dose - Filter for entries with values greater than the specified value", "title": "Dosages.Dose.Greaterthan", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "dosages.dose.greaterThanOrEqual", "schema": {"description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Dose.Greaterthanorequal", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "dosages.dose.equal", "schema": {"description": "Total radiation dose - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Dose.Equal", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "dosages.dose.not.equal", "schema": {"description": "Total radiation dose - Filter for entries with values not equal to the specified value", "title": "Dosages.Dose.Not.Equal", "type": "number"}, "required": false, "description": "Total radiation dose - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "dosages.dose.between", "schema": {"description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Dosages.Dose.Between", "type": "array"}, "required": false, "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.dose.not.between", "schema": {"description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Dosages.Dose.Not.Between", "type": "array"}, "required": false, "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "dosages.irradiatedVolume", "schema": {"description": "Irradiated volume - Filter for a matching concept code", "title": "Dosages.Irradiatedvolume", "type": "string"}, "required": false, "description": "Irradiated volume - Filter for a matching concept code"}, {"in": "query", "name": "dosages.irradiatedVolume.not", "schema": {"description": "Irradiated volume - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolume.Not", "type": "string"}, "required": false, "description": "Irradiated volume - Filter for a mismatching concept code"}, {"in": "query", "name": "dosages.irradiatedVolume.anyOf", "schema": {"description": "Irradiated volume - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolume.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume - Filter for a matching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolume.not.anyOf", "schema": {"description": "Irradiated volume - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolume.Not.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolume.descendantsOf", "schema": {"description": "Irradiated volume - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolume.Descendantsof", "type": "string"}, "required": false, "description": "Irradiated volume - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.not.exists", "schema": {"description": "Irradiated volume morphology - Filter for entries without a value", "title": "Dosages.Irradiatedvolumemorphology.Not.Exists", "type": "boolean"}, "required": false, "description": "Irradiated volume morphology - Filter for entries without a value"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.exists", "schema": {"description": "Irradiated volume morphology - Filter for entries with a value", "title": "Dosages.Irradiatedvolumemorphology.Exists", "type": "boolean"}, "required": false, "description": "Irradiated volume morphology - Filter for entries with a value"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology", "schema": {"description": "Irradiated volume morphology - Filter for a matching concept code", "title": "Dosages.Irradiatedvolumemorphology", "type": "string"}, "required": false, "description": "Irradiated volume morphology - Filter for a matching concept code"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.not", "schema": {"description": "Irradiated volume morphology - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolumemorphology.Not", "type": "string"}, "required": false, "description": "Irradiated volume morphology - Filter for a mismatching concept code"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.anyOf", "schema": {"description": "Irradiated volume morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumemorphology.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume morphology - Filter for a matching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.not.anyOf", "schema": {"description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolumeMorphology.descendantsOf", "schema": {"description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolumemorphology.Descendantsof", "type": "string"}, "required": false, "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.not.exists", "schema": {"description": "Irradiated volume qualifier - Filter for entries without a value", "title": "Dosages.Irradiatedvolumequalifier.Not.Exists", "type": "boolean"}, "required": false, "description": "Irradiated volume qualifier - Filter for entries without a value"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.exists", "schema": {"description": "Irradiated volume qualifier - Filter for entries with a value", "title": "Dosages.Irradiatedvolumequalifier.Exists", "type": "boolean"}, "required": false, "description": "Irradiated volume qualifier - Filter for entries with a value"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier", "schema": {"description": "Irradiated volume qualifier - Filter for a matching concept code", "title": "Dosages.Irradiatedvolumequalifier", "type": "string"}, "required": false, "description": "Irradiated volume qualifier - Filter for a matching concept code"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.not", "schema": {"description": "Irradiated volume qualifier - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolumequalifier.Not", "type": "string"}, "required": false, "description": "Irradiated volume qualifier - Filter for a mismatching concept code"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.anyOf", "schema": {"description": "Irradiated volume qualifier - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumequalifier.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume qualifier - Filter for a matching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.not.anyOf", "schema": {"description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof", "type": "array"}, "required": false, "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "dosages.irradiatedVolumeQualifier.descendantsOf", "schema": {"description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolumequalifier.Descendantsof", "type": "string"}, "required": false, "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "settings.id", "schema": {"description": "Id - Filter for full text matches", "title": "Settings.Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "settings.id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Settings.Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "settings.id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Settings.Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "settings.id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Settings.Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "settings.id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Settings.Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "settings.id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Settings.Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Settings.Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "settings.id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Settings.Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.createdAt.before", "schema": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Settings.Createdat.Before", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "settings.createdAt.after", "schema": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Settings.Createdat.After", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "settings.createdAt.onOrBefore", "schema": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Settings.Createdat.Onorbefore", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "settings.createdAt.onOrAfter", "schema": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Settings.Createdat.Onorafter", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "settings.createdAt.on", "schema": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Settings.Createdat.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "settings.createdAt.not.on", "schema": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Settings.Createdat.Not.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "settings.createdAt.between", "schema": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Createdat.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "settings.createdAt.not.between", "schema": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Createdat.Not.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "settings.updatedAt.before", "schema": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Settings.Updatedat.Before", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "settings.updatedAt.after", "schema": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Settings.Updatedat.After", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "settings.updatedAt.onOrBefore", "schema": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Settings.Updatedat.Onorbefore", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "settings.updatedAt.onOrAfter", "schema": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Settings.Updatedat.Onorafter", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "settings.updatedAt.on", "schema": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Settings.Updatedat.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "settings.updatedAt.not.on", "schema": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Settings.Updatedat.Not.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "settings.updatedAt.between", "schema": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Updatedat.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "settings.updatedAt.not.between", "schema": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Updatedat.Not.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "settings.createdBy.not.exists", "schema": {"description": "Created By - Filter for entries without a value", "title": "Settings.Createdby.Not.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries without a value"}, {"in": "query", "name": "settings.createdBy.exists", "schema": {"description": "Created By - Filter for entries with a value", "title": "Settings.Createdby.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries with a value"}, {"in": "query", "name": "settings.updatedBy.id.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Settings.Updatedby.Id.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "settings.updatedBy.id.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Settings.Updatedby.Id.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "settings.updatedBy.id.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Settings.Updatedby.Id.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "settings.updatedBy.id.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Settings.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "settings.updatedBy.id.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Settings.Updatedby.Id.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "settings.updatedBy.id.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Settings.Updatedby.Id.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "settings.updatedBy.id.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Settings.Updatedby.Id.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "settings.updatedBy.id.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Settings.Updatedby.Id.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "settings.updatedBy.username", "schema": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Username", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "settings.updatedBy.username.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Username.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "settings.updatedBy.username.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Username.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "settings.updatedBy.username.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Username.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "settings.updatedBy.username.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Username.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "settings.updatedBy.username.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Username.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.updatedBy.username.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Username.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "settings.updatedBy.username.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Username.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.updatedBy.email", "schema": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Email", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "settings.updatedBy.email.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Email.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "settings.updatedBy.email.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Email.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "settings.updatedBy.email.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Email.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "settings.updatedBy.email.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Email.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "settings.updatedBy.email.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Email.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.updatedBy.email.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Email.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "settings.updatedBy.email.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Email.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.updatedBy.firstName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Settings.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "settings.updatedBy.firstName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Settings.Updatedby.Firstname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "settings.updatedBy.firstName", "schema": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Firstname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "settings.updatedBy.firstName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Firstname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "settings.updatedBy.firstName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Firstname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "settings.updatedBy.firstName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Firstname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "settings.updatedBy.firstName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Firstname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "settings.updatedBy.firstName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.updatedBy.firstName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Firstname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "settings.updatedBy.firstName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Firstname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.updatedBy.lastName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Settings.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "settings.updatedBy.lastName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Settings.Updatedby.Lastname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "settings.updatedBy.lastName", "schema": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Lastname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "settings.updatedBy.lastName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Lastname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "settings.updatedBy.lastName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Lastname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "settings.updatedBy.lastName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Lastname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "settings.updatedBy.lastName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Lastname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "settings.updatedBy.lastName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.updatedBy.lastName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Lastname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "settings.updatedBy.lastName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Lastname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.description", "schema": {"description": "None - Filter for full text matches", "title": "Settings.Description", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "settings.description.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Settings.Description.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "settings.description.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Settings.Description.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "settings.description.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Settings.Description.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "settings.description.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Settings.Description.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "settings.description.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Description.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.description.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Settings.Description.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "settings.description.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Description.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.externalSource.not.exists", "schema": {"description": "External data source - Filter for entries without a value", "title": "Settings.Externalsource.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries without a value"}, {"in": "query", "name": "settings.externalSource.exists", "schema": {"description": "External data source - Filter for entries with a value", "title": "Settings.Externalsource.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries with a value"}, {"in": "query", "name": "settings.externalSource", "schema": {"description": "External data source - Filter for full text matches", "title": "Settings.Externalsource", "type": "string"}, "required": false, "description": "External data source - Filter for full text matches"}, {"in": "query", "name": "settings.externalSource.not", "schema": {"description": "External data source - Filter for full text mismatches", "title": "Settings.Externalsource.Not", "type": "string"}, "required": false, "description": "External data source - Filter for full text mismatches"}, {"in": "query", "name": "settings.externalSource.contains", "schema": {"description": "External data source - Filter for partial text matches", "title": "Settings.Externalsource.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text matches"}, {"in": "query", "name": "settings.externalSource.not.contains", "schema": {"description": "External data source - Filter for partial text mismatches", "title": "Settings.Externalsource.Not.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text mismatches"}, {"in": "query", "name": "settings.externalSource.beginsWith", "schema": {"description": "External data source - Filter for entries starting with the text", "title": "Settings.Externalsource.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries starting with the text"}, {"in": "query", "name": "settings.externalSource.not.beginsWith", "schema": {"description": "External data source - Filter for entries not starting with the text", "title": "Settings.Externalsource.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.externalSource.endsWith", "schema": {"description": "External data source - Filter for entries ending with the text", "title": "Settings.Externalsource.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries ending with the text"}, {"in": "query", "name": "settings.externalSource.not.endsWith", "schema": {"description": "External data source - Filter for entries not ending with the text", "title": "Settings.Externalsource.Not.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.externalSourceId.not.exists", "schema": {"description": "External data source Id - Filter for entries without a value", "title": "Settings.Externalsourceid.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries without a value"}, {"in": "query", "name": "settings.externalSourceId.exists", "schema": {"description": "External data source Id - Filter for entries with a value", "title": "Settings.Externalsourceid.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries with a value"}, {"in": "query", "name": "settings.externalSourceId", "schema": {"description": "External data source Id - Filter for reference matches", "title": "Settings.Externalsourceid", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference matches"}, {"in": "query", "name": "settings.externalSourceId.not", "schema": {"description": "External data source Id - Filter for reference mismatches", "title": "Settings.Externalsourceid.Not", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference mismatches"}, {"in": "query", "name": "settings.externalSourceId.contains", "schema": {"description": "External data source Id - Filter for partial text matches", "title": "Settings.Externalsourceid.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text matches"}, {"in": "query", "name": "settings.externalSourceId.not.contains", "schema": {"description": "External data source Id - Filter for partial text mismatches", "title": "Settings.Externalsourceid.Not.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text mismatches"}, {"in": "query", "name": "settings.externalSourceId.beginsWith", "schema": {"description": "External data source Id - Filter for entries starting with the text", "title": "Settings.Externalsourceid.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries starting with the text"}, {"in": "query", "name": "settings.externalSourceId.not.beginsWith", "schema": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Settings.Externalsourceid.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not starting with the text"}, {"in": "query", "name": "settings.externalSourceId.endsWith", "schema": {"description": "External data source Id - Filter for entries ending with the text", "title": "Settings.Externalsourceid.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries ending with the text"}, {"in": "query", "name": "settings.externalSourceId.not.endsWith", "schema": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Settings.Externalsourceid.Not.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not ending with the text"}, {"in": "query", "name": "settings.modality", "schema": {"description": "Modality - Filter for a matching concept code", "title": "Settings.Modality", "type": "string"}, "required": false, "description": "Modality - Filter for a matching concept code"}, {"in": "query", "name": "settings.modality.not", "schema": {"description": "Modality - Filter for a mismatching concept code", "title": "Settings.Modality.Not", "type": "string"}, "required": false, "description": "Modality - Filter for a mismatching concept code"}, {"in": "query", "name": "settings.modality.anyOf", "schema": {"description": "Modality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Settings.Modality.Anyof", "type": "array"}, "required": false, "description": "Modality - Filter for a matching set of concept codes"}, {"in": "query", "name": "settings.modality.not.anyOf", "schema": {"description": "Modality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Settings.Modality.Not.Anyof", "type": "array"}, "required": false, "description": "Modality - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "settings.modality.descendantsOf", "schema": {"description": "Modality - Filter for all child concepts of a given concepts code", "title": "Settings.Modality.Descendantsof", "type": "string"}, "required": false, "description": "Modality - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "settings.technique", "schema": {"description": "Technique - Filter for a matching concept code", "title": "Settings.Technique", "type": "string"}, "required": false, "description": "Technique - Filter for a matching concept code"}, {"in": "query", "name": "settings.technique.not", "schema": {"description": "Technique - Filter for a mismatching concept code", "title": "Settings.Technique.Not", "type": "string"}, "required": false, "description": "Technique - Filter for a mismatching concept code"}, {"in": "query", "name": "settings.technique.anyOf", "schema": {"description": "Technique - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Settings.Technique.Anyof", "type": "array"}, "required": false, "description": "Technique - Filter for a matching set of concept codes"}, {"in": "query", "name": "settings.technique.not.anyOf", "schema": {"description": "Technique - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Settings.Technique.Not.Anyof", "type": "array"}, "required": false, "description": "Technique - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "settings.technique.descendantsOf", "schema": {"description": "Technique - Filter for all child concepts of a given concepts code", "title": "Settings.Technique.Descendantsof", "type": "string"}, "required": false, "description": "Technique - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_RadiotherapySchema_"}}}}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}}, "/api/radiotherapies/{radiotherapyId}/dosages": {"post": {"operationId": "createRadiotherapyDosage", "summary": "Create Radiotherapy Dosage", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapyDosageCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapyDosages", "summary": "Get Radiotherapy Dosages Matching The Query", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RadiotherapyDosageSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}}, "/api/radiotherapies/{radiotherapyId}/settings": {"post": {"operationId": "createRadiotherapySetting", "summary": "Create Radiotherapy Setting", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapySettingCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapySettings", "summary": "Get Radiotherapy Settings Matching The Query", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RadiotherapySettingSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}}, "/api/radiotherapies/{radiotherapyId}": {"delete": {"operationId": "deleteRadiotherapyById", "summary": "Delete Radiotherapy", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapyById", "summary": "Get Radiotherapy By Id", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapySchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateRadiotherapy", "summary": "Update Radiotherapy", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapyCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}": {"delete": {"operationId": "deleteRadiotherapyDosage", "summary": "Delete Radiotherapy Dosage", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "dosageId", "schema": {"title": "Dosageid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapyDosageById", "summary": "Get Radiotherapy Dosage By Id", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "dosageId", "schema": {"title": "Dosageid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapyDosageSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateRadiotherapyDosage", "summary": "Update Radiotherapy Dosage", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "dosageId", "schema": {"title": "Dosageid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapyDosageCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/radiotherapies/{radiotherapyId}/settings/{settingId}": {"delete": {"operationId": "deleteRadiotherapySetting", "summary": "Delete Radiotherapy Setting", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "settingId", "schema": {"title": "Settingid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getRadiotherapySettingById", "summary": "Get Radiotherapy Setting By Id", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "settingId", "schema": {"title": "Settingid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapySettingSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateRadiotherapySetting", "summary": "Update Radiotherapy Setting", "parameters": [{"in": "path", "name": "radiotherapyId", "schema": {"title": "Radiotherapyid", "type": "string"}, "required": true}, {"in": "path", "name": "settingId", "schema": {"title": "Settingid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Radiotherapies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadiotherapySettingCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/therapy-lines": {"post": {"operationId": "createTherapyLine", "summary": "Create Therapy Line", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Therapy Lines"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TherapyLineCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTherapyLines", "summary": "Get All Therapy Lines Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "ordinal.lessThan", "schema": {"description": "Line ordinal number - Filter for entries with values less than the specified value", "title": "Ordinal.Lessthan", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values less than the specified value"}, {"in": "query", "name": "ordinal.lessThanOrEqual", "schema": {"description": "Line ordinal number - Filter for entries with values less than or equal to the specified value", "title": "Ordinal.Lessthanorequal", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "ordinal.greaterThan", "schema": {"description": "Line ordinal number - Filter for entries with values greater than the specified value", "title": "Ordinal.Greaterthan", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "ordinal.greaterThanOrEqual", "schema": {"description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value", "title": "Ordinal.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "ordinal.equal", "schema": {"description": "Line ordinal number - Filter for entries with values exactly equal to the specified value", "title": "Ordinal.Equal", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "ordinal.not.equal", "schema": {"description": "Line ordinal number - Filter for entries with values not equal to the specified value", "title": "Ordinal.Not.Equal", "type": "integer"}, "required": false, "description": "Line ordinal number - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "ordinal.between", "schema": {"description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ordinal.Between", "type": "array"}, "required": false, "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "ordinal.not.between", "schema": {"description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ordinal.Not.Between", "type": "array"}, "required": false, "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "intent", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "required": false, "description": "Intent - ('Filter for single value choice',)"}, {"in": "query", "name": "intent.not", "schema": {"allOf": [{"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "required": false, "description": "Intent - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "intent.anyOf", "schema": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "required": false, "description": "Intent - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "progressionDate.not.exists", "schema": {"description": "Begin of progression - Filter for entries without a value", "title": "Progressiondate.Not.Exists", "type": "boolean"}, "required": false, "description": "Begin of progression - Filter for entries without a value"}, {"in": "query", "name": "progressionDate.exists", "schema": {"description": "Begin of progression - Filter for entries with a value", "title": "Progressiondate.Exists", "type": "boolean"}, "required": false, "description": "Begin of progression - Filter for entries with a value"}, {"in": "query", "name": "progressionDate.before", "schema": {"description": "Begin of progression - Filter for entries with dates before the specified value", "format": "date", "title": "Progressiondate.Before", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates before the specified value"}, {"in": "query", "name": "progressionDate.after", "schema": {"description": "Begin of progression - Filter for entries with dates after the specified value", "format": "date", "title": "Progressiondate.After", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates after the specified value"}, {"in": "query", "name": "progressionDate.onOrBefore", "schema": {"description": "Begin of progression - Filter for entries with dates on or before the specified value", "format": "date", "title": "Progressiondate.Onorbefore", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "progressionDate.onOrAfter", "schema": {"description": "Begin of progression - Filter for entries with dates on or after the specified value", "format": "date", "title": "Progressiondate.Onorafter", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "progressionDate.on", "schema": {"description": "Begin of progression - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Progressiondate.On", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "progressionDate.not.on", "schema": {"description": "Begin of progression - Filter for entries with dates not matching the specified value", "format": "date", "title": "Progressiondate.Not.On", "type": "string"}, "required": false, "description": "Begin of progression - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "progressionDate.between", "schema": {"description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Progressiondate.Between", "type": "array"}, "required": false, "description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "progressionDate.not.between", "schema": {"description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Progressiondate.Not.Between", "type": "array"}, "required": false, "description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "period.not.exists", "schema": {"description": "Period - Filter for entries without a value", "title": "Period.Not.Exists", "type": "boolean"}, "required": false, "description": "Period - Filter for entries without a value"}, {"in": "query", "name": "period.exists", "schema": {"description": "Period - Filter for entries with a value", "title": "Period.Exists", "type": "boolean"}, "required": false, "description": "Period - Filter for entries with a value"}, {"in": "query", "name": "period.overlaps", "schema": {"description": "Period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "required": false, "description": "Period - Filter for entries overlapping with the time period"}, {"in": "query", "name": "period.not.overlaps", "schema": {"description": "Period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "required": false, "description": "Period - Filter for entries not overlapping with the time period"}, {"in": "query", "name": "period.contains", "schema": {"description": "Period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "required": false, "description": "Period - Filter for entries containing the time period"}, {"in": "query", "name": "period.not.contains", "schema": {"description": "Period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "required": false, "description": "Period - Filter for entries not containing the time period"}, {"in": "query", "name": "period.containedBy", "schema": {"description": "Period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "required": false, "description": "Period - Filter for entries whose period are contined by the time period"}, {"in": "query", "name": "period.not.containedBy", "schema": {"description": "Period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "required": false, "description": "Period - Filter for entries whose period are not contined by the time period"}, {"in": "query", "name": "label", "schema": {"description": "Label - Filter for full text matches", "title": "Label", "type": "string"}, "required": false, "description": "Label - Filter for full text matches"}, {"in": "query", "name": "label.not", "schema": {"description": "Label - Filter for full text mismatches", "title": "Label.Not", "type": "string"}, "required": false, "description": "Label - Filter for full text mismatches"}, {"in": "query", "name": "label.contains", "schema": {"description": "Label - Filter for partial text matches", "title": "Label.Contains", "type": "string"}, "required": false, "description": "Label - Filter for partial text matches"}, {"in": "query", "name": "label.not.contains", "schema": {"description": "Label - Filter for partial text mismatches", "title": "Label.Not.Contains", "type": "string"}, "required": false, "description": "Label - Filter for partial text mismatches"}, {"in": "query", "name": "label.beginsWith", "schema": {"description": "Label - Filter for entries starting with the text", "title": "Label.Beginswith", "type": "string"}, "required": false, "description": "Label - Filter for entries starting with the text"}, {"in": "query", "name": "label.not.beginsWith", "schema": {"description": "Label - Filter for entries not starting with the text", "title": "Label.Not.Beginswith", "type": "string"}, "required": false, "description": "Label - Filter for entries not starting with the text"}, {"in": "query", "name": "label.endsWith", "schema": {"description": "Label - Filter for entries ending with the text", "title": "Label.Endswith", "type": "string"}, "required": false, "description": "Label - Filter for entries ending with the text"}, {"in": "query", "name": "label.not.endsWith", "schema": {"description": "Label - Filter for entries not ending with the text", "title": "Label.Not.Endswith", "type": "string"}, "required": false, "description": "Label - Filter for entries not ending with the text"}, {"in": "query", "name": "progressionFreeSurvival.not.exists", "schema": {"description": "Progression-free survival in months - Filter for entries without a value", "title": "Progressionfreesurvival.Not.Exists", "type": "boolean"}, "required": false, "description": "Progression-free survival in months - Filter for entries without a value"}, {"in": "query", "name": "progressionFreeSurvival.exists", "schema": {"description": "Progression-free survival in months - Filter for entries with a value", "title": "Progressionfreesurvival.Exists", "type": "boolean"}, "required": false, "description": "Progression-free survival in months - Filter for entries with a value"}, {"in": "query", "name": "progressionFreeSurvival.lessThan", "schema": {"description": "Progression-free survival in months - Filter for entries with values less than the specified value", "title": "Progressionfreesurvival.Lessthan", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values less than the specified value"}, {"in": "query", "name": "progressionFreeSurvival.lessThanOrEqual", "schema": {"description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value", "title": "Progressionfreesurvival.Lessthanorequal", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "progressionFreeSurvival.greaterThan", "schema": {"description": "Progression-free survival in months - Filter for entries with values greater than the specified value", "title": "Progressionfreesurvival.Greaterthan", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "progressionFreeSurvival.greaterThanOrEqual", "schema": {"description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value", "title": "Progressionfreesurvival.Greaterthanorequal", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "progressionFreeSurvival.equal", "schema": {"description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value", "title": "Progressionfreesurvival.Equal", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "progressionFreeSurvival.not.equal", "schema": {"description": "Progression-free survival in months - Filter for entries with values not equal to the specified value", "title": "Progressionfreesurvival.Not.Equal", "type": "number"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "progressionFreeSurvival.between", "schema": {"description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Progressionfreesurvival.Between", "type": "array"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "progressionFreeSurvival.not.between", "schema": {"description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Progressionfreesurvival.Not.Between", "type": "array"}, "required": false, "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_TherapyLineSchema_"}}}}}, "tags": ["Therapy Lines"], "security": [{"JWTAuth": []}]}}, "/api/therapy-lines/{therapyLineId}": {"delete": {"operationId": "deleteTherapyLine", "summary": "Delete Therapy Line", "parameters": [{"in": "path", "name": "therapyLineId", "schema": {"title": "Therapylineid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Therapy Lines"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTherapyLineById", "summary": "Get Therapy Line By Id", "parameters": [{"in": "path", "name": "therapyLineId", "schema": {"title": "Therapylineid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TherapyLineSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Therapy Lines"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateTherapyLine", "summary": "Update Therapy Line", "parameters": [{"in": "path", "name": "therapyLineId", "schema": {"title": "Therapylineid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Therapy Lines"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TherapyLineCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/therapy-lines/{caseId}/re-assignments": {"get": {"operationId": "getReassignedPatientCaseTherapyLines", "summary": "Get Reassigned Patient Case Therapy Lines", "parameters": [{"in": "path", "name": "caseId", "schema": {"title": "Caseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/TherapyLineSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Therapy Lines"], "security": [{"JWTAuth": []}]}}, "/api/adverse-events": {"post": {"operationId": "createAdverseEvent", "summary": "Create Adverse Event", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEvents", "summary": "Get All Adverse Events Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Event date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Event date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Event date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Event date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Event date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Event date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Event date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Event date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Event date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Event date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Event date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "event", "schema": {"description": "Adverse event - Filter for a matching concept code", "title": "Event", "type": "string"}, "required": false, "description": "Adverse event - Filter for a matching concept code"}, {"in": "query", "name": "event.not", "schema": {"description": "Adverse event - Filter for a mismatching concept code", "title": "Event.Not", "type": "string"}, "required": false, "description": "Adverse event - Filter for a mismatching concept code"}, {"in": "query", "name": "event.anyOf", "schema": {"description": "Adverse event - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Event.Anyof", "type": "array"}, "required": false, "description": "Adverse event - Filter for a matching set of concept codes"}, {"in": "query", "name": "event.not.anyOf", "schema": {"description": "Adverse event - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Event.Not.Anyof", "type": "array"}, "required": false, "description": "Adverse event - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "event.descendantsOf", "schema": {"description": "Adverse event - Filter for all child concepts of a given concepts code", "title": "Event.Descendantsof", "type": "string"}, "required": false, "description": "Adverse event - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "grade.lessThan", "schema": {"description": "Grade - Filter for entries with values less than the specified value", "title": "Grade.Lessthan", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values less than the specified value"}, {"in": "query", "name": "grade.lessThanOrEqual", "schema": {"description": "Grade - Filter for entries with values less than or equal to the specified value", "title": "Grade.Lessthanorequal", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "grade.greaterThan", "schema": {"description": "Grade - Filter for entries with values greater than the specified value", "title": "Grade.Greaterthan", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "grade.greaterThanOrEqual", "schema": {"description": "Grade - Filter for entries with values greater than or equal to the specified value", "title": "Grade.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "grade.equal", "schema": {"description": "Grade - Filter for entries with values exactly equal to the specified value", "title": "Grade.Equal", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "grade.not.equal", "schema": {"description": "Grade - Filter for entries with values not equal to the specified value", "title": "Grade.Not.Equal", "type": "integer"}, "required": false, "description": "Grade - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "grade.between", "schema": {"description": "Grade - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Grade.Between", "type": "array"}, "required": false, "description": "Grade - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "grade.not.between", "schema": {"description": "Grade - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Grade.Not.Between", "type": "array"}, "required": false, "description": "Grade - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "outcome", "schema": {"allOf": [{"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}], "description": "Date resolved - ('Filter for single value choice',)"}, "required": false, "description": "Date resolved - ('Filter for single value choice',)"}, {"in": "query", "name": "outcome.not", "schema": {"allOf": [{"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}], "description": "Date resolved - ('Filter for all but a single value choice',)"}, "required": false, "description": "Date resolved - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "outcome.anyOf", "schema": {"description": "Date resolved - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}, "title": "Outcome.Anyof", "type": "array"}, "required": false, "description": "Date resolved - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "dateResolved.not.exists", "schema": {"description": "Date resolved - Filter for entries without a value", "title": "Dateresolved.Not.Exists", "type": "boolean"}, "required": false, "description": "Date resolved - Filter for entries without a value"}, {"in": "query", "name": "dateResolved.exists", "schema": {"description": "Date resolved - Filter for entries with a value", "title": "Dateresolved.Exists", "type": "boolean"}, "required": false, "description": "Date resolved - Filter for entries with a value"}, {"in": "query", "name": "dateResolved.before", "schema": {"description": "Date resolved - Filter for entries with dates before the specified value", "format": "date", "title": "Dateresolved.Before", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates before the specified value"}, {"in": "query", "name": "dateResolved.after", "schema": {"description": "Date resolved - Filter for entries with dates after the specified value", "format": "date", "title": "Dateresolved.After", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates after the specified value"}, {"in": "query", "name": "dateResolved.onOrBefore", "schema": {"description": "Date resolved - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateresolved.Onorbefore", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "dateResolved.onOrAfter", "schema": {"description": "Date resolved - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateresolved.Onorafter", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "dateResolved.on", "schema": {"description": "Date resolved - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateresolved.On", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "dateResolved.not.on", "schema": {"description": "Date resolved - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateresolved.Not.On", "type": "string"}, "required": false, "description": "Date resolved - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "dateResolved.between", "schema": {"description": "Date resolved - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateresolved.Between", "type": "array"}, "required": false, "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "dateResolved.not.between", "schema": {"description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateresolved.Not.Between", "type": "array"}, "required": false, "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.id", "schema": {"description": "Id - Filter for full text matches", "title": "Suspectedcauses.Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Suspectedcauses.Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Suspectedcauses.Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Suspectedcauses.Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Suspectedcauses.Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Suspectedcauses.Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Suspectedcauses.Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Suspectedcauses.Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.createdAt.before", "schema": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Before", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.after", "schema": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Suspectedcauses.Createdat.After", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.onOrBefore", "schema": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Onorbefore", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.onOrAfter", "schema": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Onorafter", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.on", "schema": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Suspectedcauses.Createdat.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.not.on", "schema": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Not.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "suspectedCauses.createdAt.between", "schema": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Createdat.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.createdAt.not.between", "schema": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Createdat.Not.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.updatedAt.before", "schema": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Before", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.after", "schema": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.After", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.onOrBefore", "schema": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Onorbefore", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.onOrAfter", "schema": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Onorafter", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.on", "schema": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.not.on", "schema": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Not.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "suspectedCauses.updatedAt.between", "schema": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Updatedat.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.updatedAt.not.between", "schema": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Updatedat.Not.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.createdBy.not.exists", "schema": {"description": "Created By - Filter for entries without a value", "title": "Suspectedcauses.Createdby.Not.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.createdBy.exists", "schema": {"description": "Created By - Filter for entries with a value", "title": "Suspectedcauses.Createdby.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Suspectedcauses.Updatedby.Id.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Suspectedcauses.Updatedby.Id.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Suspectedcauses.Updatedby.Id.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.updatedBy.id.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Suspectedcauses.Updatedby.Id.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "suspectedCauses.updatedBy.username", "schema": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Username", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Username.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Username.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Username.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Username.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Username.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Username.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.username.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Username.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.email", "schema": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Email", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Email.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Email.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Email.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Email.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Email.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Email.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.email.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Email.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Suspectedcauses.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Suspectedcauses.Updatedby.Firstname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName", "schema": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Firstname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Firstname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Firstname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Firstname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Firstname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Firstname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.firstName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Firstname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Suspectedcauses.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Suspectedcauses.Updatedby.Lastname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName", "schema": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Lastname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Lastname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Lastname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Lastname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Lastname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Lastname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.updatedBy.lastName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Lastname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.description", "schema": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Description", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.description.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Description.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.description.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Description.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.description.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Description.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.description.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Description.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.description.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Description.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.description.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Description.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.description.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Description.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.externalSource.not.exists", "schema": {"description": "External data source - Filter for entries without a value", "title": "Suspectedcauses.Externalsource.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.externalSource.exists", "schema": {"description": "External data source - Filter for entries with a value", "title": "Suspectedcauses.Externalsource.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.externalSource", "schema": {"description": "External data source - Filter for full text matches", "title": "Suspectedcauses.Externalsource", "type": "string"}, "required": false, "description": "External data source - Filter for full text matches"}, {"in": "query", "name": "suspectedCauses.externalSource.not", "schema": {"description": "External data source - Filter for full text mismatches", "title": "Suspectedcauses.Externalsource.Not", "type": "string"}, "required": false, "description": "External data source - Filter for full text mismatches"}, {"in": "query", "name": "suspectedCauses.externalSource.contains", "schema": {"description": "External data source - Filter for partial text matches", "title": "Suspectedcauses.Externalsource.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.externalSource.not.contains", "schema": {"description": "External data source - Filter for partial text mismatches", "title": "Suspectedcauses.Externalsource.Not.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.externalSource.beginsWith", "schema": {"description": "External data source - Filter for entries starting with the text", "title": "Suspectedcauses.Externalsource.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.externalSource.not.beginsWith", "schema": {"description": "External data source - Filter for entries not starting with the text", "title": "Suspectedcauses.Externalsource.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.externalSource.endsWith", "schema": {"description": "External data source - Filter for entries ending with the text", "title": "Suspectedcauses.Externalsource.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.externalSource.not.endsWith", "schema": {"description": "External data source - Filter for entries not ending with the text", "title": "Suspectedcauses.Externalsource.Not.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.externalSourceId.not.exists", "schema": {"description": "External data source Id - Filter for entries without a value", "title": "Suspectedcauses.Externalsourceid.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.externalSourceId.exists", "schema": {"description": "External data source Id - Filter for entries with a value", "title": "Suspectedcauses.Externalsourceid.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.externalSourceId", "schema": {"description": "External data source Id - Filter for reference matches", "title": "Suspectedcauses.Externalsourceid", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference matches"}, {"in": "query", "name": "suspectedCauses.externalSourceId.not", "schema": {"description": "External data source Id - Filter for reference mismatches", "title": "Suspectedcauses.Externalsourceid.Not", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference mismatches"}, {"in": "query", "name": "suspectedCauses.externalSourceId.contains", "schema": {"description": "External data source Id - Filter for partial text matches", "title": "Suspectedcauses.Externalsourceid.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.externalSourceId.not.contains", "schema": {"description": "External data source Id - Filter for partial text mismatches", "title": "Suspectedcauses.Externalsourceid.Not.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.externalSourceId.beginsWith", "schema": {"description": "External data source Id - Filter for entries starting with the text", "title": "Suspectedcauses.Externalsourceid.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.externalSourceId.not.beginsWith", "schema": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Suspectedcauses.Externalsourceid.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.externalSourceId.endsWith", "schema": {"description": "External data source Id - Filter for entries ending with the text", "title": "Suspectedcauses.Externalsourceid.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.externalSourceId.not.endsWith", "schema": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Suspectedcauses.Externalsourceid.Not.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.not.exists", "schema": {"description": "Suspected systemic therapy - Filter for entries without a value", "title": "Suspectedcauses.Systemictherapyid.Not.Exists", "type": "boolean"}, "required": false, "description": "Suspected systemic therapy - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.exists", "schema": {"description": "Suspected systemic therapy - Filter for entries with a value", "title": "Suspectedcauses.Systemictherapyid.Exists", "type": "boolean"}, "required": false, "description": "Suspected systemic therapy - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId", "schema": {"description": "Suspected systemic therapy - Filter for reference matches", "title": "Suspectedcauses.Systemictherapyid", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for reference matches"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.not", "schema": {"description": "Suspected systemic therapy - Filter for reference mismatches", "title": "Suspectedcauses.Systemictherapyid.Not", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for reference mismatches"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.contains", "schema": {"description": "Suspected systemic therapy - Filter for partial text matches", "title": "Suspectedcauses.Systemictherapyid.Contains", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.not.contains", "schema": {"description": "Suspected systemic therapy - Filter for partial text mismatches", "title": "Suspectedcauses.Systemictherapyid.Not.Contains", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.beginsWith", "schema": {"description": "Suspected systemic therapy - Filter for entries starting with the text", "title": "Suspectedcauses.Systemictherapyid.Beginswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.not.beginsWith", "schema": {"description": "Suspected systemic therapy - Filter for entries not starting with the text", "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.endsWith", "schema": {"description": "Suspected systemic therapy - Filter for entries ending with the text", "title": "Suspectedcauses.Systemictherapyid.Endswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.systemicTherapyId.not.endsWith", "schema": {"description": "Suspected systemic therapy - Filter for entries not ending with the text", "title": "Suspectedcauses.Systemictherapyid.Not.Endswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.medicationId.not.exists", "schema": {"description": "Suspected systemic therapy medication - Filter for entries without a value", "title": "Suspectedcauses.Medicationid.Not.Exists", "type": "boolean"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.medicationId.exists", "schema": {"description": "Suspected systemic therapy medication - Filter for entries with a value", "title": "Suspectedcauses.Medicationid.Exists", "type": "boolean"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.medicationId", "schema": {"description": "Suspected systemic therapy medication - Filter for reference matches", "title": "Suspectedcauses.Medicationid", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for reference matches"}, {"in": "query", "name": "suspectedCauses.medicationId.not", "schema": {"description": "Suspected systemic therapy medication - Filter for reference mismatches", "title": "Suspectedcauses.Medicationid.Not", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for reference mismatches"}, {"in": "query", "name": "suspectedCauses.medicationId.contains", "schema": {"description": "Suspected systemic therapy medication - Filter for partial text matches", "title": "Suspectedcauses.Medicationid.Contains", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.medicationId.not.contains", "schema": {"description": "Suspected systemic therapy medication - Filter for partial text mismatches", "title": "Suspectedcauses.Medicationid.Not.Contains", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.medicationId.beginsWith", "schema": {"description": "Suspected systemic therapy medication - Filter for entries starting with the text", "title": "Suspectedcauses.Medicationid.Beginswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.medicationId.not.beginsWith", "schema": {"description": "Suspected systemic therapy medication - Filter for entries not starting with the text", "title": "Suspectedcauses.Medicationid.Not.Beginswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.medicationId.endsWith", "schema": {"description": "Suspected systemic therapy medication - Filter for entries ending with the text", "title": "Suspectedcauses.Medicationid.Endswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.medicationId.not.endsWith", "schema": {"description": "Suspected systemic therapy medication - Filter for entries not ending with the text", "title": "Suspectedcauses.Medicationid.Not.Endswith", "type": "string"}, "required": false, "description": "Suspected systemic therapy medication - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.not.exists", "schema": {"description": "Suspected radiotherapy - Filter for entries without a value", "title": "Suspectedcauses.Radiotherapyid.Not.Exists", "type": "boolean"}, "required": false, "description": "Suspected radiotherapy - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.exists", "schema": {"description": "Suspected radiotherapy - Filter for entries with a value", "title": "Suspectedcauses.Radiotherapyid.Exists", "type": "boolean"}, "required": false, "description": "Suspected radiotherapy - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.radiotherapyId", "schema": {"description": "Suspected radiotherapy - Filter for reference matches", "title": "Suspectedcauses.Radiotherapyid", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for reference matches"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.not", "schema": {"description": "Suspected radiotherapy - Filter for reference mismatches", "title": "Suspectedcauses.Radiotherapyid.Not", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for reference mismatches"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.contains", "schema": {"description": "Suspected radiotherapy - Filter for partial text matches", "title": "Suspectedcauses.Radiotherapyid.Contains", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.not.contains", "schema": {"description": "Suspected radiotherapy - Filter for partial text mismatches", "title": "Suspectedcauses.Radiotherapyid.Not.Contains", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.beginsWith", "schema": {"description": "Suspected radiotherapy - Filter for entries starting with the text", "title": "Suspectedcauses.Radiotherapyid.Beginswith", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.not.beginsWith", "schema": {"description": "Suspected radiotherapy - Filter for entries not starting with the text", "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.endsWith", "schema": {"description": "Suspected radiotherapy - Filter for entries ending with the text", "title": "Suspectedcauses.Radiotherapyid.Endswith", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.radiotherapyId.not.endsWith", "schema": {"description": "Suspected radiotherapy - Filter for entries not ending with the text", "title": "Suspectedcauses.Radiotherapyid.Not.Endswith", "type": "string"}, "required": false, "description": "Suspected radiotherapy - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.surgeryId.not.exists", "schema": {"description": "Suspected surgery - Filter for entries without a value", "title": "Suspectedcauses.Surgeryid.Not.Exists", "type": "boolean"}, "required": false, "description": "Suspected surgery - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.surgeryId.exists", "schema": {"description": "Suspected surgery - Filter for entries with a value", "title": "Suspectedcauses.Surgeryid.Exists", "type": "boolean"}, "required": false, "description": "Suspected surgery - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.surgeryId", "schema": {"description": "Suspected surgery - Filter for reference matches", "title": "Suspectedcauses.Surgeryid", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for reference matches"}, {"in": "query", "name": "suspectedCauses.surgeryId.not", "schema": {"description": "Suspected surgery - Filter for reference mismatches", "title": "Suspectedcauses.Surgeryid.Not", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for reference mismatches"}, {"in": "query", "name": "suspectedCauses.surgeryId.contains", "schema": {"description": "Suspected surgery - Filter for partial text matches", "title": "Suspectedcauses.Surgeryid.Contains", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for partial text matches"}, {"in": "query", "name": "suspectedCauses.surgeryId.not.contains", "schema": {"description": "Suspected surgery - Filter for partial text mismatches", "title": "Suspectedcauses.Surgeryid.Not.Contains", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for partial text mismatches"}, {"in": "query", "name": "suspectedCauses.surgeryId.beginsWith", "schema": {"description": "Suspected surgery - Filter for entries starting with the text", "title": "Suspectedcauses.Surgeryid.Beginswith", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for entries starting with the text"}, {"in": "query", "name": "suspectedCauses.surgeryId.not.beginsWith", "schema": {"description": "Suspected surgery - Filter for entries not starting with the text", "title": "Suspectedcauses.Surgeryid.Not.Beginswith", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for entries not starting with the text"}, {"in": "query", "name": "suspectedCauses.surgeryId.endsWith", "schema": {"description": "Suspected surgery - Filter for entries ending with the text", "title": "Suspectedcauses.Surgeryid.Endswith", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for entries ending with the text"}, {"in": "query", "name": "suspectedCauses.surgeryId.not.endsWith", "schema": {"description": "Suspected surgery - Filter for entries not ending with the text", "title": "Suspectedcauses.Surgeryid.Not.Endswith", "type": "string"}, "required": false, "description": "Suspected surgery - Filter for entries not ending with the text"}, {"in": "query", "name": "suspectedCauses.causality.not.exists", "schema": {"description": "Causality - Filter for entries without a value", "title": "Suspectedcauses.Causality.Not.Exists", "type": "boolean"}, "required": false, "description": "Causality - Filter for entries without a value"}, {"in": "query", "name": "suspectedCauses.causality.exists", "schema": {"description": "Causality - Filter for entries with a value", "title": "Suspectedcauses.Causality.Exists", "type": "boolean"}, "required": false, "description": "Causality - Filter for entries with a value"}, {"in": "query", "name": "suspectedCauses.causality", "schema": {"allOf": [{"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}], "description": "Causality - ('Filter for single value choice',)"}, "required": false, "description": "Causality - ('Filter for single value choice',)"}, {"in": "query", "name": "suspectedCauses.causality.not", "schema": {"allOf": [{"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}], "description": "Causality - ('Filter for all but a single value choice',)"}, "required": false, "description": "Causality - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "suspectedCauses.causality.anyOf", "schema": {"description": "Causality - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}, "title": "Suspectedcauses.Causality.Anyof", "type": "array"}, "required": false, "description": "Causality - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "mitigations.id", "schema": {"description": "Id - Filter for full text matches", "title": "Mitigations.Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "mitigations.id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Mitigations.Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Mitigations.Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "mitigations.id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Mitigations.Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Mitigations.Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Mitigations.Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Mitigations.Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Mitigations.Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.createdAt.before", "schema": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Mitigations.Createdat.Before", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "mitigations.createdAt.after", "schema": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Mitigations.Createdat.After", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "mitigations.createdAt.onOrBefore", "schema": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Mitigations.Createdat.Onorbefore", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "mitigations.createdAt.onOrAfter", "schema": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Mitigations.Createdat.Onorafter", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "mitigations.createdAt.on", "schema": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Mitigations.Createdat.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "mitigations.createdAt.not.on", "schema": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Mitigations.Createdat.Not.On", "type": "string"}, "required": false, "description": "Created At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "mitigations.createdAt.between", "schema": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Createdat.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.createdAt.not.between", "schema": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Createdat.Not.Between", "type": "array"}, "required": false, "description": "Created At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.updatedAt.before", "schema": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Mitigations.Updatedat.Before", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates before the specified value"}, {"in": "query", "name": "mitigations.updatedAt.after", "schema": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Mitigations.Updatedat.After", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates after the specified value"}, {"in": "query", "name": "mitigations.updatedAt.onOrBefore", "schema": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Mitigations.Updatedat.Onorbefore", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "mitigations.updatedAt.onOrAfter", "schema": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Mitigations.Updatedat.Onorafter", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "mitigations.updatedAt.on", "schema": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Mitigations.Updatedat.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "mitigations.updatedAt.not.on", "schema": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Mitigations.Updatedat.Not.On", "type": "string"}, "required": false, "description": "Updated At - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "mitigations.updatedAt.between", "schema": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Updatedat.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.updatedAt.not.between", "schema": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Updatedat.Not.Between", "type": "array"}, "required": false, "description": "Updated At - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.createdBy.not.exists", "schema": {"description": "Created By - Filter for entries without a value", "title": "Mitigations.Createdby.Not.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries without a value"}, {"in": "query", "name": "mitigations.createdBy.exists", "schema": {"description": "Created By - Filter for entries with a value", "title": "Mitigations.Createdby.Exists", "type": "boolean"}, "required": false, "description": "Created By - Filter for entries with a value"}, {"in": "query", "name": "mitigations.updatedBy.id.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Mitigations.Updatedby.Id.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Mitigations.Updatedby.Id.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Mitigations.Updatedby.Id.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Mitigations.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Mitigations.Updatedby.Id.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Mitigations.Updatedby.Id.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "mitigations.updatedBy.id.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Mitigations.Updatedby.Id.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.updatedBy.id.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Mitigations.Updatedby.Id.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "mitigations.updatedBy.username", "schema": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Username", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "mitigations.updatedBy.username.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Username.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.username.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Username.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "mitigations.updatedBy.username.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Username.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.username.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Username.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.username.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Username.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.username.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Username.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.username.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Username.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.email", "schema": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Email", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "mitigations.updatedBy.email.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Email.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.email.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Email.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "mitigations.updatedBy.email.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Email.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.email.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Email.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.email.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Email.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.email.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Email.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.email.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Email.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.firstName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Mitigations.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "mitigations.updatedBy.firstName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Mitigations.Updatedby.Firstname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "mitigations.updatedBy.firstName", "schema": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Firstname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "mitigations.updatedBy.firstName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Firstname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.firstName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Firstname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "mitigations.updatedBy.firstName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Firstname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.firstName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Firstname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.firstName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.firstName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Firstname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.firstName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Firstname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.lastName.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Mitigations.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "mitigations.updatedBy.lastName.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Mitigations.Updatedby.Lastname.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "mitigations.updatedBy.lastName", "schema": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Lastname", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "mitigations.updatedBy.lastName.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Lastname.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.lastName.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Lastname.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "mitigations.updatedBy.lastName.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Lastname.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.updatedBy.lastName.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Lastname.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.lastName.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.updatedBy.lastName.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Lastname.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.updatedBy.lastName.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Lastname.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.description", "schema": {"description": "None - Filter for full text matches", "title": "Mitigations.Description", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "mitigations.description.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Description.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.description.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Mitigations.Description.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "mitigations.description.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Description.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.description.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Description.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.description.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Description.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.description.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Description.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.description.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Description.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.externalSource.not.exists", "schema": {"description": "External data source - Filter for entries without a value", "title": "Mitigations.Externalsource.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries without a value"}, {"in": "query", "name": "mitigations.externalSource.exists", "schema": {"description": "External data source - Filter for entries with a value", "title": "Mitigations.Externalsource.Exists", "type": "boolean"}, "required": false, "description": "External data source - Filter for entries with a value"}, {"in": "query", "name": "mitigations.externalSource", "schema": {"description": "External data source - Filter for full text matches", "title": "Mitigations.Externalsource", "type": "string"}, "required": false, "description": "External data source - Filter for full text matches"}, {"in": "query", "name": "mitigations.externalSource.not", "schema": {"description": "External data source - Filter for full text mismatches", "title": "Mitigations.Externalsource.Not", "type": "string"}, "required": false, "description": "External data source - Filter for full text mismatches"}, {"in": "query", "name": "mitigations.externalSource.contains", "schema": {"description": "External data source - Filter for partial text matches", "title": "Mitigations.Externalsource.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text matches"}, {"in": "query", "name": "mitigations.externalSource.not.contains", "schema": {"description": "External data source - Filter for partial text mismatches", "title": "Mitigations.Externalsource.Not.Contains", "type": "string"}, "required": false, "description": "External data source - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.externalSource.beginsWith", "schema": {"description": "External data source - Filter for entries starting with the text", "title": "Mitigations.Externalsource.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.externalSource.not.beginsWith", "schema": {"description": "External data source - Filter for entries not starting with the text", "title": "Mitigations.Externalsource.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.externalSource.endsWith", "schema": {"description": "External data source - Filter for entries ending with the text", "title": "Mitigations.Externalsource.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.externalSource.not.endsWith", "schema": {"description": "External data source - Filter for entries not ending with the text", "title": "Mitigations.Externalsource.Not.Endswith", "type": "string"}, "required": false, "description": "External data source - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.externalSourceId.not.exists", "schema": {"description": "External data source Id - Filter for entries without a value", "title": "Mitigations.Externalsourceid.Not.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries without a value"}, {"in": "query", "name": "mitigations.externalSourceId.exists", "schema": {"description": "External data source Id - Filter for entries with a value", "title": "Mitigations.Externalsourceid.Exists", "type": "boolean"}, "required": false, "description": "External data source Id - Filter for entries with a value"}, {"in": "query", "name": "mitigations.externalSourceId", "schema": {"description": "External data source Id - Filter for reference matches", "title": "Mitigations.Externalsourceid", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference matches"}, {"in": "query", "name": "mitigations.externalSourceId.not", "schema": {"description": "External data source Id - Filter for reference mismatches", "title": "Mitigations.Externalsourceid.Not", "type": "string"}, "required": false, "description": "External data source Id - Filter for reference mismatches"}, {"in": "query", "name": "mitigations.externalSourceId.contains", "schema": {"description": "External data source Id - Filter for partial text matches", "title": "Mitigations.Externalsourceid.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text matches"}, {"in": "query", "name": "mitigations.externalSourceId.not.contains", "schema": {"description": "External data source Id - Filter for partial text mismatches", "title": "Mitigations.Externalsourceid.Not.Contains", "type": "string"}, "required": false, "description": "External data source Id - Filter for partial text mismatches"}, {"in": "query", "name": "mitigations.externalSourceId.beginsWith", "schema": {"description": "External data source Id - Filter for entries starting with the text", "title": "Mitigations.Externalsourceid.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries starting with the text"}, {"in": "query", "name": "mitigations.externalSourceId.not.beginsWith", "schema": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Mitigations.Externalsourceid.Not.Beginswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not starting with the text"}, {"in": "query", "name": "mitigations.externalSourceId.endsWith", "schema": {"description": "External data source Id - Filter for entries ending with the text", "title": "Mitigations.Externalsourceid.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries ending with the text"}, {"in": "query", "name": "mitigations.externalSourceId.not.endsWith", "schema": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Mitigations.Externalsourceid.Not.Endswith", "type": "string"}, "required": false, "description": "External data source Id - Filter for entries not ending with the text"}, {"in": "query", "name": "mitigations.category", "schema": {"allOf": [{"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}], "description": "Mitigation category - ('Filter for single value choice',)"}, "required": false, "description": "Mitigation category - ('Filter for single value choice',)"}, {"in": "query", "name": "mitigations.category.not", "schema": {"allOf": [{"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}], "description": "Mitigation category - ('Filter for all but a single value choice',)"}, "required": false, "description": "Mitigation category - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "mitigations.category.anyOf", "schema": {"description": "Mitigation category - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}, "title": "Mitigations.Category.Anyof", "type": "array"}, "required": false, "description": "Mitigation category - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "mitigations.adjustment.not.exists", "schema": {"description": "Treatment Adjustment - Filter for entries without a value", "title": "Mitigations.Adjustment.Not.Exists", "type": "boolean"}, "required": false, "description": "Treatment Adjustment - Filter for entries without a value"}, {"in": "query", "name": "mitigations.adjustment.exists", "schema": {"description": "Treatment Adjustment - Filter for entries with a value", "title": "Mitigations.Adjustment.Exists", "type": "boolean"}, "required": false, "description": "Treatment Adjustment - Filter for entries with a value"}, {"in": "query", "name": "mitigations.adjustment", "schema": {"description": "Treatment Adjustment - Filter for a matching concept code", "title": "Mitigations.Adjustment", "type": "string"}, "required": false, "description": "Treatment Adjustment - Filter for a matching concept code"}, {"in": "query", "name": "mitigations.adjustment.not", "schema": {"description": "Treatment Adjustment - Filter for a mismatching concept code", "title": "Mitigations.Adjustment.Not", "type": "string"}, "required": false, "description": "Treatment Adjustment - Filter for a mismatching concept code"}, {"in": "query", "name": "mitigations.adjustment.anyOf", "schema": {"description": "Treatment Adjustment - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Adjustment.Anyof", "type": "array"}, "required": false, "description": "Treatment Adjustment - Filter for a matching set of concept codes"}, {"in": "query", "name": "mitigations.adjustment.not.anyOf", "schema": {"description": "Treatment Adjustment - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Adjustment.Not.Anyof", "type": "array"}, "required": false, "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "mitigations.adjustment.descendantsOf", "schema": {"description": "Treatment Adjustment - Filter for all child concepts of a given concepts code", "title": "Mitigations.Adjustment.Descendantsof", "type": "string"}, "required": false, "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "mitigations.drug.not.exists", "schema": {"description": "Pharmacological drug - Filter for entries without a value", "title": "Mitigations.Drug.Not.Exists", "type": "boolean"}, "required": false, "description": "Pharmacological drug - Filter for entries without a value"}, {"in": "query", "name": "mitigations.drug.exists", "schema": {"description": "Pharmacological drug - Filter for entries with a value", "title": "Mitigations.Drug.Exists", "type": "boolean"}, "required": false, "description": "Pharmacological drug - Filter for entries with a value"}, {"in": "query", "name": "mitigations.drug", "schema": {"description": "Pharmacological drug - Filter for a matching concept code", "title": "Mitigations.Drug", "type": "string"}, "required": false, "description": "Pharmacological drug - Filter for a matching concept code"}, {"in": "query", "name": "mitigations.drug.not", "schema": {"description": "Pharmacological drug - Filter for a mismatching concept code", "title": "Mitigations.Drug.Not", "type": "string"}, "required": false, "description": "Pharmacological drug - Filter for a mismatching concept code"}, {"in": "query", "name": "mitigations.drug.anyOf", "schema": {"description": "Pharmacological drug - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Drug.Anyof", "type": "array"}, "required": false, "description": "Pharmacological drug - Filter for a matching set of concept codes"}, {"in": "query", "name": "mitigations.drug.not.anyOf", "schema": {"description": "Pharmacological drug - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Drug.Not.Anyof", "type": "array"}, "required": false, "description": "Pharmacological drug - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "mitigations.drug.descendantsOf", "schema": {"description": "Pharmacological drug - Filter for all child concepts of a given concepts code", "title": "Mitigations.Drug.Descendantsof", "type": "string"}, "required": false, "description": "Pharmacological drug - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "mitigations.procedure.not.exists", "schema": {"description": "Procedure - Filter for entries without a value", "title": "Mitigations.Procedure.Not.Exists", "type": "boolean"}, "required": false, "description": "Procedure - Filter for entries without a value"}, {"in": "query", "name": "mitigations.procedure.exists", "schema": {"description": "Procedure - Filter for entries with a value", "title": "Mitigations.Procedure.Exists", "type": "boolean"}, "required": false, "description": "Procedure - Filter for entries with a value"}, {"in": "query", "name": "mitigations.procedure", "schema": {"description": "Procedure - Filter for a matching concept code", "title": "Mitigations.Procedure", "type": "string"}, "required": false, "description": "Procedure - Filter for a matching concept code"}, {"in": "query", "name": "mitigations.procedure.not", "schema": {"description": "Procedure - Filter for a mismatching concept code", "title": "Mitigations.Procedure.Not", "type": "string"}, "required": false, "description": "Procedure - Filter for a mismatching concept code"}, {"in": "query", "name": "mitigations.procedure.anyOf", "schema": {"description": "Procedure - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Procedure.Anyof", "type": "array"}, "required": false, "description": "Procedure - Filter for a matching set of concept codes"}, {"in": "query", "name": "mitigations.procedure.not.anyOf", "schema": {"description": "Procedure - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Procedure.Not.Anyof", "type": "array"}, "required": false, "description": "Procedure - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "mitigations.procedure.descendantsOf", "schema": {"description": "Procedure - Filter for all child concepts of a given concepts code", "title": "Mitigations.Procedure.Descendantsof", "type": "string"}, "required": false, "description": "Procedure - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "mitigations.management.not.exists", "schema": {"description": "Management - Filter for entries without a value", "title": "Mitigations.Management.Not.Exists", "type": "boolean"}, "required": false, "description": "Management - Filter for entries without a value"}, {"in": "query", "name": "mitigations.management.exists", "schema": {"description": "Management - Filter for entries with a value", "title": "Mitigations.Management.Exists", "type": "boolean"}, "required": false, "description": "Management - Filter for entries with a value"}, {"in": "query", "name": "mitigations.management", "schema": {"description": "Management - Filter for a matching concept code", "title": "Mitigations.Management", "type": "string"}, "required": false, "description": "Management - Filter for a matching concept code"}, {"in": "query", "name": "mitigations.management.not", "schema": {"description": "Management - Filter for a mismatching concept code", "title": "Mitigations.Management.Not", "type": "string"}, "required": false, "description": "Management - Filter for a mismatching concept code"}, {"in": "query", "name": "mitigations.management.anyOf", "schema": {"description": "Management - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Management.Anyof", "type": "array"}, "required": false, "description": "Management - Filter for a matching set of concept codes"}, {"in": "query", "name": "mitigations.management.not.anyOf", "schema": {"description": "Management - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Management.Not.Anyof", "type": "array"}, "required": false, "description": "Management - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "mitigations.management.descendantsOf", "schema": {"description": "Management - Filter for all child concepts of a given concepts code", "title": "Mitigations.Management.Descendantsof", "type": "string"}, "required": false, "description": "Management - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_AdverseEventSchema_"}}}}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}}, "/api/adverse-events/{adverseEventId}/mitigations": {"post": {"operationId": "createAdverseEventMitigation", "summary": "Create Adverse Event Mitigation", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventMitigationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEventMitigations", "summary": "Get Adverse Event Mitigations Matching The Query", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/AdverseEventMitigationSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}}, "/api/adverse-events/{adverseEventId}/suspected-causes": {"post": {"operationId": "createAdverseEventSuspectedCause", "summary": "Create Adverse Event Suspected Cause", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventSuspectedCauseCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEventSuspectedCauses", "summary": "Get Adverse Event Suspected Causes Matching The Query", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}}, "/api/adverse-events/{adverseEventId}": {"delete": {"operationId": "deleteAdverseEventById", "summary": "Delete Adverse Event", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEventById", "summary": "Get Adverse Event By Id", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateAdverseEvent", "summary": "Update Adverse Event", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}": {"delete": {"operationId": "deleteAdverseEventMitigation", "summary": "Delete Adverse Event Mitigation", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "mitigationId", "schema": {"title": "Mitigationid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEventMitigationById", "summary": "Get Adverse Event Mitigation By Id", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "mitigationId", "schema": {"title": "Mitigationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventMitigationSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateAdverseEventMitigation", "summary": "Update Adverse Event Mitigation", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "mitigationId", "schema": {"title": "Mitigationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventMitigationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}": {"delete": {"operationId": "deleteAdverseEventSuspectedCause", "summary": "Delete Adverse Event Suspected Cause", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "causeId", "schema": {"title": "Causeid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getAdverseEventSuspectedCauseById", "summary": "Get Adverse Event Suspected Cause By Id", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "causeId", "schema": {"title": "Causeid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateAdverseEventSuspectedCause", "summary": "Update Adverse Event Suspected Cause", "parameters": [{"in": "path", "name": "adverseEventId", "schema": {"title": "Adverseeventid", "type": "string"}, "required": true}, {"in": "path", "name": "causeId", "schema": {"title": "Causeid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Adverse Events"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdverseEventSuspectedCauseCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/treatment-responses": {"post": {"operationId": "createTreatmentResponse", "summary": "Create Treatment Response", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Treatment Responses"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TreatmentResponseCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTreatmentResponses", "summary": "Get All Treatment Responses Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "recist", "schema": {"description": "RECIST - Filter for a matching concept code", "title": "Recist", "type": "string"}, "required": false, "description": "RECIST - Filter for a matching concept code"}, {"in": "query", "name": "recist.not", "schema": {"description": "RECIST - Filter for a mismatching concept code", "title": "Recist.Not", "type": "string"}, "required": false, "description": "RECIST - Filter for a mismatching concept code"}, {"in": "query", "name": "recist.anyOf", "schema": {"description": "RECIST - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Recist.Anyof", "type": "array"}, "required": false, "description": "RECIST - Filter for a matching set of concept codes"}, {"in": "query", "name": "recist.not.anyOf", "schema": {"description": "RECIST - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Recist.Not.Anyof", "type": "array"}, "required": false, "description": "RECIST - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "recist.descendantsOf", "schema": {"description": "RECIST - Filter for all child concepts of a given concepts code", "title": "Recist.Descendantsof", "type": "string"}, "required": false, "description": "RECIST - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "recistInterpreted.not.exists", "schema": {"description": "RECIST Interpreted? - Filter for entries without a value", "title": "Recistinterpreted.Not.Exists", "type": "boolean"}, "required": false, "description": "RECIST Interpreted? - Filter for entries without a value"}, {"in": "query", "name": "recistInterpreted.exists", "schema": {"description": "RECIST Interpreted? - Filter for entries with a value", "title": "Recistinterpreted.Exists", "type": "boolean"}, "required": false, "description": "RECIST Interpreted? - Filter for entries with a value"}, {"in": "query", "name": "recistInterpreted", "schema": {"description": "RECIST Interpreted? - ('Filter for yes/no statement',)", "title": "Recistinterpreted", "type": "boolean"}, "required": false, "description": "RECIST Interpreted? - ('Filter for yes/no statement',)"}, {"in": "query", "name": "methodology", "schema": {"description": "Assessment method - Filter for a matching concept code", "title": "Methodology", "type": "string"}, "required": false, "description": "Assessment method - Filter for a matching concept code"}, {"in": "query", "name": "methodology.not", "schema": {"description": "Assessment method - Filter for a mismatching concept code", "title": "Methodology.Not", "type": "string"}, "required": false, "description": "Assessment method - Filter for a mismatching concept code"}, {"in": "query", "name": "methodology.anyOf", "schema": {"description": "Assessment method - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Anyof", "type": "array"}, "required": false, "description": "Assessment method - Filter for a matching set of concept codes"}, {"in": "query", "name": "methodology.not.anyOf", "schema": {"description": "Assessment method - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Not.Anyof", "type": "array"}, "required": false, "description": "Assessment method - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "methodology.descendantsOf", "schema": {"description": "Assessment method - Filter for all child concepts of a given concepts code", "title": "Methodology.Descendantsof", "type": "string"}, "required": false, "description": "Assessment method - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "assessedEntitiesIds", "schema": {"description": "Assessed neoplastic entities - Filter for reference matches", "title": "Assessedentitiesids", "type": "string"}, "required": false, "description": "Assessed neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "assessedEntitiesIds.not", "schema": {"description": "Assessed neoplastic entities - Filter for reference mismatches", "title": "Assessedentitiesids.Not", "type": "string"}, "required": false, "description": "Assessed neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "assessedBodysites.code", "schema": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "assessedBodysites.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "assessedBodysites.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "assessedBodysites.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "assessedBodysites.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "assessedBodysites.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "assessedBodysites.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "assessedBodysites.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "assessedBodysites.system", "schema": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "assessedBodysites.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "assessedBodysites.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "assessedBodysites.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "assessedBodysites.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "assessedBodysites.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "assessedBodysites.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "assessedBodysites.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "assessedBodysites.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "assessedBodysites.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "assessedBodysites.display", "schema": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "assessedBodysites.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "assessedBodysites.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "assessedBodysites.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "assessedBodysites.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "assessedBodysites.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "assessedBodysites.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "assessedBodysites.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "assessedBodysites.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "assessedBodysites.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "assessedBodysites.version", "schema": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "assessedBodysites.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "assessedBodysites.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "assessedBodysites.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "assessedBodysites.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "assessedBodysites.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "assessedBodysites.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "assessedBodysites.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "assessedBodysites.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "assessedBodysites.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "assessedBodysites.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "assessedBodysites.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_TreatmentResponseSchema_"}}}}}, "tags": ["Treatment Responses"], "security": [{"JWTAuth": []}]}}, "/api/treatment-responses/{treatmentRresponseId}": {"delete": {"operationId": "deleteTreatmentResponse", "summary": "Delete Treatment Response", "parameters": [{"in": "path", "name": "treatmentRresponseId", "schema": {"title": "Treatmentrresponseid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Treatment Responses"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTreatmentResponseById", "summary": "Get Treatment Response By Id", "parameters": [{"in": "path", "name": "treatmentRresponseId", "schema": {"title": "Treatmentrresponseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TreatmentResponseSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Treatment Responses"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateTreatmentResponse", "summary": "Update Treatment Response", "parameters": [{"in": "path", "name": "treatmentRresponseId", "schema": {"title": "Treatmentrresponseid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Treatment Responses"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TreatmentResponseCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/tumor-boards": {"post": {"operationId": "createTumorBoard", "summary": "Create Tumor Board", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Tumor Boards"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/UnspecifiedTumorBoardCreateSchema"}, {"$ref": "#/components/schemas/MolecularTumorBoardCreateSchema"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTumorBoards", "summary": "Get All Tumor Boards Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "relatedEntitiesIds", "schema": {"description": "Related neoplastic entities - Filter for reference matches", "title": "Relatedentitiesids", "type": "string"}, "required": false, "description": "Related neoplastic entities - Filter for reference matches"}, {"in": "query", "name": "relatedEntitiesIds.not", "schema": {"description": "Related neoplastic entities - Filter for reference mismatches", "title": "Relatedentitiesids.Not", "type": "string"}, "required": false, "description": "Related neoplastic entities - Filter for reference mismatches"}, {"in": "query", "name": "recommendations.code", "schema": {"description": "None - Filter for full text matches", "title": "Recommendations.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recommendations.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recommendations.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recommendations.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recommendations.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recommendations.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recommendations.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recommendations.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recommendations.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recommendations.system", "schema": {"description": "None - Filter for full text matches", "title": "Recommendations.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recommendations.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recommendations.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recommendations.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recommendations.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recommendations.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recommendations.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recommendations.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recommendations.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recommendations.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recommendations.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recommendations.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recommendations.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recommendations.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recommendations.display", "schema": {"description": "None - Filter for full text matches", "title": "Recommendations.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recommendations.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recommendations.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recommendations.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recommendations.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recommendations.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recommendations.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recommendations.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recommendations.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recommendations.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recommendations.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recommendations.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recommendations.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recommendations.version", "schema": {"description": "None - Filter for full text matches", "title": "Recommendations.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recommendations.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recommendations.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recommendations.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recommendations.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recommendations.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recommendations.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recommendations.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recommendations.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recommendations.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recommendations.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recommendations.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recommendations.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recommendations.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recommendations.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recommendations.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recommendations.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_AnyTumorBoard_"}}}}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}}, "/api/tumor-boards/{tumorBoardId}": {"delete": {"operationId": "deleteTumorBoardById", "summary": "Delete Tumor Board", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getTumorBoardById", "summary": "Get Tumor Board By Id", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnyTumorBoard"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateTumorBoardById", "summary": "Update Tumor Board", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/UnspecifiedTumorBoardCreateSchema"}, {"$ref": "#/components/schemas/MolecularTumorBoardCreateSchema"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations": {"post": {"operationId": "createMolecularTherapeuticRecommendation", "summary": "Create Molecular Tumor Board Therapeutic Recommendation", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Tumor Boards"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getMolecularTherapeuticRecommendations", "summary": "Get Molecular Tumor Board Therapeutic Recommendations Matching The Query", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}}, "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}": {"delete": {"operationId": "deleteMolecularTherapeuticRecommendation", "summary": "Delete Molecular Tumor Board Therapeutic Recommendation", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}, {"in": "path", "name": "recommendationId", "schema": {"title": "Recommendationid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getMOlecularTherapeuticRecommendationById", "summary": "Get Molecular Tumor Board Therapeutic Recommendation By Id", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}, {"in": "path", "name": "recommendationId", "schema": {"title": "Recommendationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateMolecularTherapeuticRecommendation", "summary": "Update Molecular Tumor Board Therapeutic Recommendation", "parameters": [{"in": "path", "name": "tumorBoardId", "schema": {"title": "Tumorboardid", "type": "string"}, "required": true}, {"in": "path", "name": "recommendationId", "schema": {"title": "Recommendationid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Tumor Boards"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/performance-status": {"post": {"operationId": "createPerformanceStatus", "summary": "Create Performance Status", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Performance Status"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PerformanceStatusCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getPerformanceStatus", "summary": "Get All Performance Status Matching The Query", "parameters": [{"in": "query", "name": "ecogInterpretation.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Ecoginterpretation.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "ecogInterpretation.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Ecoginterpretation.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "ecogInterpretation", "schema": {"description": "None - Filter for a matching concept code", "title": "Ecoginterpretation", "type": "string"}, "required": false, "description": "None - Filter for a matching concept code"}, {"in": "query", "name": "ecogInterpretation.not", "schema": {"description": "None - Filter for a mismatching concept code", "title": "Ecoginterpretation.Not", "type": "string"}, "required": false, "description": "None - Filter for a mismatching concept code"}, {"in": "query", "name": "ecogInterpretation.anyOf", "schema": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Ecoginterpretation.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a matching set of concept codes"}, {"in": "query", "name": "ecogInterpretation.not.anyOf", "schema": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Ecoginterpretation.Not.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "ecogInterpretation.descendantsOf", "schema": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Ecoginterpretation.Descendantsof", "type": "string"}, "required": false, "description": "None - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "karnofskyInterpretation.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Karnofskyinterpretation.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "karnofskyInterpretation.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Karnofskyinterpretation.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "karnofskyInterpretation", "schema": {"description": "None - Filter for a matching concept code", "title": "Karnofskyinterpretation", "type": "string"}, "required": false, "description": "None - Filter for a matching concept code"}, {"in": "query", "name": "karnofskyInterpretation.not", "schema": {"description": "None - Filter for a mismatching concept code", "title": "Karnofskyinterpretation.Not", "type": "string"}, "required": false, "description": "None - Filter for a mismatching concept code"}, {"in": "query", "name": "karnofskyInterpretation.anyOf", "schema": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Karnofskyinterpretation.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a matching set of concept codes"}, {"in": "query", "name": "karnofskyInterpretation.not.anyOf", "schema": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Karnofskyinterpretation.Not.Anyof", "type": "array"}, "required": false, "description": "None - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "karnofskyInterpretation.descendantsOf", "schema": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Karnofskyinterpretation.Descendantsof", "type": "string"}, "required": false, "description": "None - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "ecogScore.not.exists", "schema": {"description": "ECOG Score - Filter for entries without a value", "title": "Ecogscore.Not.Exists", "type": "boolean"}, "required": false, "description": "ECOG Score - Filter for entries without a value"}, {"in": "query", "name": "ecogScore.exists", "schema": {"description": "ECOG Score - Filter for entries with a value", "title": "Ecogscore.Exists", "type": "boolean"}, "required": false, "description": "ECOG Score - Filter for entries with a value"}, {"in": "query", "name": "ecogScore.lessThan", "schema": {"description": "ECOG Score - Filter for entries with values less than the specified value", "title": "Ecogscore.Lessthan", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values less than the specified value"}, {"in": "query", "name": "ecogScore.lessThanOrEqual", "schema": {"description": "ECOG Score - Filter for entries with values less than or equal to the specified value", "title": "Ecogscore.Lessthanorequal", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "ecogScore.greaterThan", "schema": {"description": "ECOG Score - Filter for entries with values greater than the specified value", "title": "Ecogscore.Greaterthan", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "ecogScore.greaterThanOrEqual", "schema": {"description": "ECOG Score - Filter for entries with values greater than or equal to the specified value", "title": "Ecogscore.Greaterthanorequal", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "ecogScore.equal", "schema": {"description": "ECOG Score - Filter for entries with values exactly equal to the specified value", "title": "Ecogscore.Equal", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "ecogScore.not.equal", "schema": {"description": "ECOG Score - Filter for entries with values not equal to the specified value", "title": "Ecogscore.Not.Equal", "type": "integer"}, "required": false, "description": "ECOG Score - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "ecogScore.between", "schema": {"description": "ECOG Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ecogscore.Between", "type": "array"}, "required": false, "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "ecogScore.not.between", "schema": {"description": "ECOG Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ecogscore.Not.Between", "type": "array"}, "required": false, "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "karnofskyScore.not.exists", "schema": {"description": "Karnofsky Score - Filter for entries without a value", "title": "Karnofskyscore.Not.Exists", "type": "boolean"}, "required": false, "description": "Karnofsky Score - Filter for entries without a value"}, {"in": "query", "name": "karnofskyScore.exists", "schema": {"description": "Karnofsky Score - Filter for entries with a value", "title": "Karnofskyscore.Exists", "type": "boolean"}, "required": false, "description": "Karnofsky Score - Filter for entries with a value"}, {"in": "query", "name": "karnofskyScore.lessThan", "schema": {"description": "Karnofsky Score - Filter for entries with values less than the specified value", "title": "Karnofskyscore.Lessthan", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values less than the specified value"}, {"in": "query", "name": "karnofskyScore.lessThanOrEqual", "schema": {"description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value", "title": "Karnofskyscore.Lessthanorequal", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "karnofskyScore.greaterThan", "schema": {"description": "Karnofsky Score - Filter for entries with values greater than the specified value", "title": "Karnofskyscore.Greaterthan", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "karnofskyScore.greaterThanOrEqual", "schema": {"description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value", "title": "Karnofskyscore.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "karnofskyScore.equal", "schema": {"description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value", "title": "Karnofskyscore.Equal", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "karnofskyScore.not.equal", "schema": {"description": "Karnofsky Score - Filter for entries with values not equal to the specified value", "title": "Karnofskyscore.Not.Equal", "type": "integer"}, "required": false, "description": "Karnofsky Score - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "karnofskyScore.between", "schema": {"description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Karnofskyscore.Between", "type": "array"}, "required": false, "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "karnofskyScore.not.between", "schema": {"description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Karnofskyscore.Not.Between", "type": "array"}, "required": false, "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_PerformanceStatus_"}}}}}, "tags": ["Performance Status"], "security": [{"JWTAuth": []}]}}, "/api/performance-status/{performanceStatusId}": {"delete": {"operationId": "deletePerformanceStatus", "summary": "Delete Performance Status", "parameters": [{"in": "path", "name": "performanceStatusId", "schema": {"title": "Performancestatusid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Performance Status"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getPerformanceStatusById", "summary": "Get Performance Status By Id", "parameters": [{"in": "path", "name": "performanceStatusId", "schema": {"title": "Performancestatusid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PerformanceStatus"}}}}, "404": {"description": "Not Found"}}, "tags": ["Performance Status"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updatePerformanceStatusById", "summary": "Update Performance Status", "parameters": [{"in": "path", "name": "performanceStatusId", "schema": {"title": "Performancestatusid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Performance Status"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PerformanceStatusCreate"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/genomic-variants": {"post": {"operationId": "createGenomicVariant", "summary": "Create Genomic Variant", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Genomic Variants"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenomicVariantCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getGenomicVariants", "summary": "Get All Genomic Variants Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "genePanel.not.exists", "schema": {"description": "Gene panel - Filter for entries without a value", "title": "Genepanel.Not.Exists", "type": "boolean"}, "required": false, "description": "Gene panel - Filter for entries without a value"}, {"in": "query", "name": "genePanel.exists", "schema": {"description": "Gene panel - Filter for entries with a value", "title": "Genepanel.Exists", "type": "boolean"}, "required": false, "description": "Gene panel - Filter for entries with a value"}, {"in": "query", "name": "genePanel", "schema": {"description": "Gene panel - Filter for full text matches", "title": "Genepanel", "type": "string"}, "required": false, "description": "Gene panel - Filter for full text matches"}, {"in": "query", "name": "genePanel.not", "schema": {"description": "Gene panel - Filter for full text mismatches", "title": "Genepanel.Not", "type": "string"}, "required": false, "description": "Gene panel - Filter for full text mismatches"}, {"in": "query", "name": "genePanel.contains", "schema": {"description": "Gene panel - Filter for partial text matches", "title": "Genepanel.Contains", "type": "string"}, "required": false, "description": "Gene panel - Filter for partial text matches"}, {"in": "query", "name": "genePanel.not.contains", "schema": {"description": "Gene panel - Filter for partial text mismatches", "title": "Genepanel.Not.Contains", "type": "string"}, "required": false, "description": "Gene panel - Filter for partial text mismatches"}, {"in": "query", "name": "genePanel.beginsWith", "schema": {"description": "Gene panel - Filter for entries starting with the text", "title": "Genepanel.Beginswith", "type": "string"}, "required": false, "description": "Gene panel - Filter for entries starting with the text"}, {"in": "query", "name": "genePanel.not.beginsWith", "schema": {"description": "Gene panel - Filter for entries not starting with the text", "title": "Genepanel.Not.Beginswith", "type": "string"}, "required": false, "description": "Gene panel - Filter for entries not starting with the text"}, {"in": "query", "name": "genePanel.endsWith", "schema": {"description": "Gene panel - Filter for entries ending with the text", "title": "Genepanel.Endswith", "type": "string"}, "required": false, "description": "Gene panel - Filter for entries ending with the text"}, {"in": "query", "name": "genePanel.not.endsWith", "schema": {"description": "Gene panel - Filter for entries not ending with the text", "title": "Genepanel.Not.Endswith", "type": "string"}, "required": false, "description": "Gene panel - Filter for entries not ending with the text"}, {"in": "query", "name": "assessment.not.exists", "schema": {"description": "Assessment - Filter for entries without a value", "title": "Assessment.Not.Exists", "type": "boolean"}, "required": false, "description": "Assessment - Filter for entries without a value"}, {"in": "query", "name": "assessment.exists", "schema": {"description": "Assessment - Filter for entries with a value", "title": "Assessment.Exists", "type": "boolean"}, "required": false, "description": "Assessment - Filter for entries with a value"}, {"in": "query", "name": "assessment", "schema": {"allOf": [{"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}], "description": "Assessment - ('Filter for single value choice',)"}, "required": false, "description": "Assessment - ('Filter for single value choice',)"}, {"in": "query", "name": "assessment.not", "schema": {"allOf": [{"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}], "description": "Assessment - ('Filter for all but a single value choice',)"}, "required": false, "description": "Assessment - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "assessment.anyOf", "schema": {"description": "Assessment - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}, "title": "Assessment.Anyof", "type": "array"}, "required": false, "description": "Assessment - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "confidence.not.exists", "schema": {"description": "Confidence - Filter for entries without a value", "title": "Confidence.Not.Exists", "type": "boolean"}, "required": false, "description": "Confidence - Filter for entries without a value"}, {"in": "query", "name": "confidence.exists", "schema": {"description": "Confidence - Filter for entries with a value", "title": "Confidence.Exists", "type": "boolean"}, "required": false, "description": "Confidence - Filter for entries with a value"}, {"in": "query", "name": "confidence", "schema": {"allOf": [{"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}], "description": "Confidence - ('Filter for single value choice',)"}, "required": false, "description": "Confidence - ('Filter for single value choice',)"}, {"in": "query", "name": "confidence.not", "schema": {"allOf": [{"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}], "description": "Confidence - ('Filter for all but a single value choice',)"}, "required": false, "description": "Confidence - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "confidence.anyOf", "schema": {"description": "Confidence - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}, "title": "Confidence.Anyof", "type": "array"}, "required": false, "description": "Confidence - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "analysisMethod.not.exists", "schema": {"description": "Analysis method - Filter for entries without a value", "title": "Analysismethod.Not.Exists", "type": "boolean"}, "required": false, "description": "Analysis method - Filter for entries without a value"}, {"in": "query", "name": "analysisMethod.exists", "schema": {"description": "Analysis method - Filter for entries with a value", "title": "Analysismethod.Exists", "type": "boolean"}, "required": false, "description": "Analysis method - Filter for entries with a value"}, {"in": "query", "name": "analysisMethod", "schema": {"description": "Analysis method - Filter for a matching concept code", "title": "Analysismethod", "type": "string"}, "required": false, "description": "Analysis method - Filter for a matching concept code"}, {"in": "query", "name": "analysisMethod.not", "schema": {"description": "Analysis method - Filter for a mismatching concept code", "title": "Analysismethod.Not", "type": "string"}, "required": false, "description": "Analysis method - Filter for a mismatching concept code"}, {"in": "query", "name": "analysisMethod.anyOf", "schema": {"description": "Analysis method - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Analysismethod.Anyof", "type": "array"}, "required": false, "description": "Analysis method - Filter for a matching set of concept codes"}, {"in": "query", "name": "analysisMethod.not.anyOf", "schema": {"description": "Analysis method - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Analysismethod.Not.Anyof", "type": "array"}, "required": false, "description": "Analysis method - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "analysisMethod.descendantsOf", "schema": {"description": "Analysis method - Filter for all child concepts of a given concepts code", "title": "Analysismethod.Descendantsof", "type": "string"}, "required": false, "description": "Analysis method - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "clinicalRelevance.not.exists", "schema": {"description": "Clinical relevance - Filter for entries without a value", "title": "Clinicalrelevance.Not.Exists", "type": "boolean"}, "required": false, "description": "Clinical relevance - Filter for entries without a value"}, {"in": "query", "name": "clinicalRelevance.exists", "schema": {"description": "Clinical relevance - Filter for entries with a value", "title": "Clinicalrelevance.Exists", "type": "boolean"}, "required": false, "description": "Clinical relevance - Filter for entries with a value"}, {"in": "query", "name": "clinicalRelevance", "schema": {"allOf": [{"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}], "description": "Clinical relevance - ('Filter for single value choice',)"}, "required": false, "description": "Clinical relevance - ('Filter for single value choice',)"}, {"in": "query", "name": "clinicalRelevance.not", "schema": {"allOf": [{"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}], "description": "Clinical relevance - ('Filter for all but a single value choice',)"}, "required": false, "description": "Clinical relevance - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "clinicalRelevance.anyOf", "schema": {"description": "Clinical relevance - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}, "title": "Clinicalrelevance.Anyof", "type": "array"}, "required": false, "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "cytogeneticLocation.not.exists", "schema": {"description": "Cytogenetic location - Filter for entries without a value", "title": "Cytogeneticlocation.Not.Exists", "type": "boolean"}, "required": false, "description": "Cytogenetic location - Filter for entries without a value"}, {"in": "query", "name": "cytogeneticLocation.exists", "schema": {"description": "Cytogenetic location - Filter for entries with a value", "title": "Cytogeneticlocation.Exists", "type": "boolean"}, "required": false, "description": "Cytogenetic location - Filter for entries with a value"}, {"in": "query", "name": "cytogeneticLocation", "schema": {"description": "Cytogenetic location - Filter for full text matches", "title": "Cytogeneticlocation", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for full text matches"}, {"in": "query", "name": "cytogeneticLocation.not", "schema": {"description": "Cytogenetic location - Filter for full text mismatches", "title": "Cytogeneticlocation.Not", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for full text mismatches"}, {"in": "query", "name": "cytogeneticLocation.contains", "schema": {"description": "Cytogenetic location - Filter for partial text matches", "title": "Cytogeneticlocation.Contains", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for partial text matches"}, {"in": "query", "name": "cytogeneticLocation.not.contains", "schema": {"description": "Cytogenetic location - Filter for partial text mismatches", "title": "Cytogeneticlocation.Not.Contains", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for partial text mismatches"}, {"in": "query", "name": "cytogeneticLocation.beginsWith", "schema": {"description": "Cytogenetic location - Filter for entries starting with the text", "title": "Cytogeneticlocation.Beginswith", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for entries starting with the text"}, {"in": "query", "name": "cytogeneticLocation.not.beginsWith", "schema": {"description": "Cytogenetic location - Filter for entries not starting with the text", "title": "Cytogeneticlocation.Not.Beginswith", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for entries not starting with the text"}, {"in": "query", "name": "cytogeneticLocation.endsWith", "schema": {"description": "Cytogenetic location - Filter for entries ending with the text", "title": "Cytogeneticlocation.Endswith", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for entries ending with the text"}, {"in": "query", "name": "cytogeneticLocation.not.endsWith", "schema": {"description": "Cytogenetic location - Filter for entries not ending with the text", "title": "Cytogeneticlocation.Not.Endswith", "type": "string"}, "required": false, "description": "Cytogenetic location - Filter for entries not ending with the text"}, {"in": "query", "name": "genomeAssemblyVersion.not.exists", "schema": {"description": "Genome assembly version - Filter for entries without a value", "title": "Genomeassemblyversion.Not.Exists", "type": "boolean"}, "required": false, "description": "Genome assembly version - Filter for entries without a value"}, {"in": "query", "name": "genomeAssemblyVersion.exists", "schema": {"description": "Genome assembly version - Filter for entries with a value", "title": "Genomeassemblyversion.Exists", "type": "boolean"}, "required": false, "description": "Genome assembly version - Filter for entries with a value"}, {"in": "query", "name": "genomeAssemblyVersion", "schema": {"description": "Genome assembly version - Filter for a matching concept code", "title": "Genomeassemblyversion", "type": "string"}, "required": false, "description": "Genome assembly version - Filter for a matching concept code"}, {"in": "query", "name": "genomeAssemblyVersion.not", "schema": {"description": "Genome assembly version - Filter for a mismatching concept code", "title": "Genomeassemblyversion.Not", "type": "string"}, "required": false, "description": "Genome assembly version - Filter for a mismatching concept code"}, {"in": "query", "name": "genomeAssemblyVersion.anyOf", "schema": {"description": "Genome assembly version - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Genomeassemblyversion.Anyof", "type": "array"}, "required": false, "description": "Genome assembly version - Filter for a matching set of concept codes"}, {"in": "query", "name": "genomeAssemblyVersion.not.anyOf", "schema": {"description": "Genome assembly version - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Genomeassemblyversion.Not.Anyof", "type": "array"}, "required": false, "description": "Genome assembly version - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "genomeAssemblyVersion.descendantsOf", "schema": {"description": "Genome assembly version - Filter for all child concepts of a given concepts code", "title": "Genomeassemblyversion.Descendantsof", "type": "string"}, "required": false, "description": "Genome assembly version - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "genomicRefseq.not.exists", "schema": {"description": "Genomic RefSeq - Filter for entries without a value", "title": "Genomicrefseq.Not.Exists", "type": "boolean"}, "required": false, "description": "Genomic RefSeq - Filter for entries without a value"}, {"in": "query", "name": "genomicRefseq.exists", "schema": {"description": "Genomic RefSeq - Filter for entries with a value", "title": "Genomicrefseq.Exists", "type": "boolean"}, "required": false, "description": "Genomic RefSeq - Filter for entries with a value"}, {"in": "query", "name": "genomicRefseq", "schema": {"description": "Genomic RefSeq - Filter for full text matches", "title": "Genomicrefseq", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for full text matches"}, {"in": "query", "name": "genomicRefseq.not", "schema": {"description": "Genomic RefSeq - Filter for full text mismatches", "title": "Genomicrefseq.Not", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for full text mismatches"}, {"in": "query", "name": "genomicRefseq.contains", "schema": {"description": "Genomic RefSeq - Filter for partial text matches", "title": "Genomicrefseq.Contains", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for partial text matches"}, {"in": "query", "name": "genomicRefseq.not.contains", "schema": {"description": "Genomic RefSeq - Filter for partial text mismatches", "title": "Genomicrefseq.Not.Contains", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for partial text mismatches"}, {"in": "query", "name": "genomicRefseq.beginsWith", "schema": {"description": "Genomic RefSeq - Filter for entries starting with the text", "title": "Genomicrefseq.Beginswith", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for entries starting with the text"}, {"in": "query", "name": "genomicRefseq.not.beginsWith", "schema": {"description": "Genomic RefSeq - Filter for entries not starting with the text", "title": "Genomicrefseq.Not.Beginswith", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for entries not starting with the text"}, {"in": "query", "name": "genomicRefseq.endsWith", "schema": {"description": "Genomic RefSeq - Filter for entries ending with the text", "title": "Genomicrefseq.Endswith", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for entries ending with the text"}, {"in": "query", "name": "genomicRefseq.not.endsWith", "schema": {"description": "Genomic RefSeq - Filter for entries not ending with the text", "title": "Genomicrefseq.Not.Endswith", "type": "string"}, "required": false, "description": "Genomic RefSeq - Filter for entries not ending with the text"}, {"in": "query", "name": "transcriptRefseq.not.exists", "schema": {"description": "Transcript RefSeq - Filter for entries without a value", "title": "Transcriptrefseq.Not.Exists", "type": "boolean"}, "required": false, "description": "Transcript RefSeq - Filter for entries without a value"}, {"in": "query", "name": "transcriptRefseq.exists", "schema": {"description": "Transcript RefSeq - Filter for entries with a value", "title": "Transcriptrefseq.Exists", "type": "boolean"}, "required": false, "description": "Transcript RefSeq - Filter for entries with a value"}, {"in": "query", "name": "transcriptRefseq", "schema": {"description": "Transcript RefSeq - Filter for full text matches", "title": "Transcriptrefseq", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for full text matches"}, {"in": "query", "name": "transcriptRefseq.not", "schema": {"description": "Transcript RefSeq - Filter for full text mismatches", "title": "Transcriptrefseq.Not", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for full text mismatches"}, {"in": "query", "name": "transcriptRefseq.contains", "schema": {"description": "Transcript RefSeq - Filter for partial text matches", "title": "Transcriptrefseq.Contains", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for partial text matches"}, {"in": "query", "name": "transcriptRefseq.not.contains", "schema": {"description": "Transcript RefSeq - Filter for partial text mismatches", "title": "Transcriptrefseq.Not.Contains", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for partial text mismatches"}, {"in": "query", "name": "transcriptRefseq.beginsWith", "schema": {"description": "Transcript RefSeq - Filter for entries starting with the text", "title": "Transcriptrefseq.Beginswith", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for entries starting with the text"}, {"in": "query", "name": "transcriptRefseq.not.beginsWith", "schema": {"description": "Transcript RefSeq - Filter for entries not starting with the text", "title": "Transcriptrefseq.Not.Beginswith", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for entries not starting with the text"}, {"in": "query", "name": "transcriptRefseq.endsWith", "schema": {"description": "Transcript RefSeq - Filter for entries ending with the text", "title": "Transcriptrefseq.Endswith", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for entries ending with the text"}, {"in": "query", "name": "transcriptRefseq.not.endsWith", "schema": {"description": "Transcript RefSeq - Filter for entries not ending with the text", "title": "Transcriptrefseq.Not.Endswith", "type": "string"}, "required": false, "description": "Transcript RefSeq - Filter for entries not ending with the text"}, {"in": "query", "name": "codingHgvs.not.exists", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries without a value", "title": "Codinghgvs.Not.Exists", "type": "boolean"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries without a value"}, {"in": "query", "name": "codingHgvs.exists", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries with a value", "title": "Codinghgvs.Exists", "type": "boolean"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries with a value"}, {"in": "query", "name": "codingHgvs", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for full text matches", "title": "Codinghgvs", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for full text matches"}, {"in": "query", "name": "codingHgvs.not", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches", "title": "Codinghgvs.Not", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches"}, {"in": "query", "name": "codingHgvs.contains", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for partial text matches", "title": "Codinghgvs.Contains", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for partial text matches"}, {"in": "query", "name": "codingHgvs.not.contains", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches", "title": "Codinghgvs.Not.Contains", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches"}, {"in": "query", "name": "codingHgvs.beginsWith", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text", "title": "Codinghgvs.Beginswith", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text"}, {"in": "query", "name": "codingHgvs.not.beginsWith", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text", "title": "Codinghgvs.Not.Beginswith", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text"}, {"in": "query", "name": "codingHgvs.endsWith", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text", "title": "Codinghgvs.Endswith", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text"}, {"in": "query", "name": "codingHgvs.not.endsWith", "schema": {"description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text", "title": "Codinghgvs.Not.Endswith", "type": "string"}, "required": false, "description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text"}, {"in": "query", "name": "proteinHgvs.not.exists", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value", "title": "Proteinhgvs.Not.Exists", "type": "boolean"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value"}, {"in": "query", "name": "proteinHgvs.exists", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value", "title": "Proteinhgvs.Exists", "type": "boolean"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value"}, {"in": "query", "name": "proteinHgvs", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches", "title": "Proteinhgvs", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches"}, {"in": "query", "name": "proteinHgvs.not", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches", "title": "Proteinhgvs.Not", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches"}, {"in": "query", "name": "proteinHgvs.contains", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches", "title": "Proteinhgvs.Contains", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches"}, {"in": "query", "name": "proteinHgvs.not.contains", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches", "title": "Proteinhgvs.Not.Contains", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches"}, {"in": "query", "name": "proteinHgvs.beginsWith", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text", "title": "Proteinhgvs.Beginswith", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text"}, {"in": "query", "name": "proteinHgvs.not.beginsWith", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text", "title": "Proteinhgvs.Not.Beginswith", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text"}, {"in": "query", "name": "proteinHgvs.endsWith", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text", "title": "Proteinhgvs.Endswith", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text"}, {"in": "query", "name": "proteinHgvs.not.endsWith", "schema": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text", "title": "Proteinhgvs.Not.Endswith", "type": "string"}, "required": false, "description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text"}, {"in": "query", "name": "genomicHgvs.not.exists", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries without a value", "title": "Genomichgvs.Not.Exists", "type": "boolean"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries without a value"}, {"in": "query", "name": "genomicHgvs.exists", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries with a value", "title": "Genomichgvs.Exists", "type": "boolean"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries with a value"}, {"in": "query", "name": "genomicHgvs", "schema": {"description": "Genomic change expression (gHGVS) - Filter for full text matches", "title": "Genomichgvs", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for full text matches"}, {"in": "query", "name": "genomicHgvs.not", "schema": {"description": "Genomic change expression (gHGVS) - Filter for full text mismatches", "title": "Genomichgvs.Not", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for full text mismatches"}, {"in": "query", "name": "genomicHgvs.contains", "schema": {"description": "Genomic change expression (gHGVS) - Filter for partial text matches", "title": "Genomichgvs.Contains", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for partial text matches"}, {"in": "query", "name": "genomicHgvs.not.contains", "schema": {"description": "Genomic change expression (gHGVS) - Filter for partial text mismatches", "title": "Genomichgvs.Not.Contains", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for partial text mismatches"}, {"in": "query", "name": "genomicHgvs.beginsWith", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries starting with the text", "title": "Genomichgvs.Beginswith", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries starting with the text"}, {"in": "query", "name": "genomicHgvs.not.beginsWith", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text", "title": "Genomichgvs.Not.Beginswith", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text"}, {"in": "query", "name": "genomicHgvs.endsWith", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries ending with the text", "title": "Genomichgvs.Endswith", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries ending with the text"}, {"in": "query", "name": "genomicHgvs.not.endsWith", "schema": {"description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text", "title": "Genomichgvs.Not.Endswith", "type": "string"}, "required": false, "description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text"}, {"in": "query", "name": "dnaChangeType.not.exists", "schema": {"description": "Coding DNA change type - Filter for entries without a value", "title": "Dnachangetype.Not.Exists", "type": "boolean"}, "required": false, "description": "Coding DNA change type - Filter for entries without a value"}, {"in": "query", "name": "dnaChangeType.exists", "schema": {"description": "Coding DNA change type - Filter for entries with a value", "title": "Dnachangetype.Exists", "type": "boolean"}, "required": false, "description": "Coding DNA change type - Filter for entries with a value"}, {"in": "query", "name": "dnaChangeType", "schema": {"description": "Coding DNA change type - Filter for a matching concept code", "title": "Dnachangetype", "type": "string"}, "required": false, "description": "Coding DNA change type - Filter for a matching concept code"}, {"in": "query", "name": "dnaChangeType.not", "schema": {"description": "Coding DNA change type - Filter for a mismatching concept code", "title": "Dnachangetype.Not", "type": "string"}, "required": false, "description": "Coding DNA change type - Filter for a mismatching concept code"}, {"in": "query", "name": "dnaChangeType.anyOf", "schema": {"description": "Coding DNA change type - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dnachangetype.Anyof", "type": "array"}, "required": false, "description": "Coding DNA change type - Filter for a matching set of concept codes"}, {"in": "query", "name": "dnaChangeType.not.anyOf", "schema": {"description": "Coding DNA change type - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dnachangetype.Not.Anyof", "type": "array"}, "required": false, "description": "Coding DNA change type - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "dnaChangeType.descendantsOf", "schema": {"description": "Coding DNA change type - Filter for all child concepts of a given concepts code", "title": "Dnachangetype.Descendantsof", "type": "string"}, "required": false, "description": "Coding DNA change type - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "aminoacidChangeType.not.exists", "schema": {"description": "Aminoacid change type - Filter for entries without a value", "title": "Aminoacidchangetype.Not.Exists", "type": "boolean"}, "required": false, "description": "Aminoacid change type - Filter for entries without a value"}, {"in": "query", "name": "aminoacidChangeType.exists", "schema": {"description": "Aminoacid change type - Filter for entries with a value", "title": "Aminoacidchangetype.Exists", "type": "boolean"}, "required": false, "description": "Aminoacid change type - Filter for entries with a value"}, {"in": "query", "name": "aminoacidChangeType", "schema": {"description": "Aminoacid change type - Filter for a matching concept code", "title": "Aminoacidchangetype", "type": "string"}, "required": false, "description": "Aminoacid change type - Filter for a matching concept code"}, {"in": "query", "name": "aminoacidChangeType.not", "schema": {"description": "Aminoacid change type - Filter for a mismatching concept code", "title": "Aminoacidchangetype.Not", "type": "string"}, "required": false, "description": "Aminoacid change type - Filter for a mismatching concept code"}, {"in": "query", "name": "aminoacidChangeType.anyOf", "schema": {"description": "Aminoacid change type - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Aminoacidchangetype.Anyof", "type": "array"}, "required": false, "description": "Aminoacid change type - Filter for a matching set of concept codes"}, {"in": "query", "name": "aminoacidChangeType.not.anyOf", "schema": {"description": "Aminoacid change type - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Aminoacidchangetype.Not.Anyof", "type": "array"}, "required": false, "description": "Aminoacid change type - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "aminoacidChangeType.descendantsOf", "schema": {"description": "Aminoacid change type - Filter for all child concepts of a given concepts code", "title": "Aminoacidchangetype.Descendantsof", "type": "string"}, "required": false, "description": "Aminoacid change type - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "molecularConsequence.not.exists", "schema": {"description": "Molecular consequence - Filter for entries without a value", "title": "Molecularconsequence.Not.Exists", "type": "boolean"}, "required": false, "description": "Molecular consequence - Filter for entries without a value"}, {"in": "query", "name": "molecularConsequence.exists", "schema": {"description": "Molecular consequence - Filter for entries with a value", "title": "Molecularconsequence.Exists", "type": "boolean"}, "required": false, "description": "Molecular consequence - Filter for entries with a value"}, {"in": "query", "name": "molecularConsequence", "schema": {"description": "Molecular consequence - Filter for a matching concept code", "title": "Molecularconsequence", "type": "string"}, "required": false, "description": "Molecular consequence - Filter for a matching concept code"}, {"in": "query", "name": "molecularConsequence.not", "schema": {"description": "Molecular consequence - Filter for a mismatching concept code", "title": "Molecularconsequence.Not", "type": "string"}, "required": false, "description": "Molecular consequence - Filter for a mismatching concept code"}, {"in": "query", "name": "molecularConsequence.anyOf", "schema": {"description": "Molecular consequence - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Molecularconsequence.Anyof", "type": "array"}, "required": false, "description": "Molecular consequence - Filter for a matching set of concept codes"}, {"in": "query", "name": "molecularConsequence.not.anyOf", "schema": {"description": "Molecular consequence - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Molecularconsequence.Not.Anyof", "type": "array"}, "required": false, "description": "Molecular consequence - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "molecularConsequence.descendantsOf", "schema": {"description": "Molecular consequence - Filter for all child concepts of a given concepts code", "title": "Molecularconsequence.Descendantsof", "type": "string"}, "required": false, "description": "Molecular consequence - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "copyNumber.not.exists", "schema": {"description": "Copy number - Filter for entries without a value", "title": "Copynumber.Not.Exists", "type": "boolean"}, "required": false, "description": "Copy number - Filter for entries without a value"}, {"in": "query", "name": "copyNumber.exists", "schema": {"description": "Copy number - Filter for entries with a value", "title": "Copynumber.Exists", "type": "boolean"}, "required": false, "description": "Copy number - Filter for entries with a value"}, {"in": "query", "name": "copyNumber.lessThan", "schema": {"description": "Copy number - Filter for entries with values less than the specified value", "title": "Copynumber.Lessthan", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values less than the specified value"}, {"in": "query", "name": "copyNumber.lessThanOrEqual", "schema": {"description": "Copy number - Filter for entries with values less than or equal to the specified value", "title": "Copynumber.Lessthanorequal", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "copyNumber.greaterThan", "schema": {"description": "Copy number - Filter for entries with values greater than the specified value", "title": "Copynumber.Greaterthan", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "copyNumber.greaterThanOrEqual", "schema": {"description": "Copy number - Filter for entries with values greater than or equal to the specified value", "title": "Copynumber.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "copyNumber.equal", "schema": {"description": "Copy number - Filter for entries with values exactly equal to the specified value", "title": "Copynumber.Equal", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "copyNumber.not.equal", "schema": {"description": "Copy number - Filter for entries with values not equal to the specified value", "title": "Copynumber.Not.Equal", "type": "integer"}, "required": false, "description": "Copy number - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "copyNumber.between", "schema": {"description": "Copy number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Copynumber.Between", "type": "array"}, "required": false, "description": "Copy number - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "copyNumber.not.between", "schema": {"description": "Copy number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Copynumber.Not.Between", "type": "array"}, "required": false, "description": "Copy number - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "alleleFrequency.not.exists", "schema": {"description": "Allele frequency - Filter for entries without a value", "title": "Allelefrequency.Not.Exists", "type": "boolean"}, "required": false, "description": "Allele frequency - Filter for entries without a value"}, {"in": "query", "name": "alleleFrequency.exists", "schema": {"description": "Allele frequency - Filter for entries with a value", "title": "Allelefrequency.Exists", "type": "boolean"}, "required": false, "description": "Allele frequency - Filter for entries with a value"}, {"in": "query", "name": "alleleFrequency.lessThan", "schema": {"description": "Allele frequency - Filter for entries with values less than the specified value", "title": "Allelefrequency.Lessthan", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values less than the specified value"}, {"in": "query", "name": "alleleFrequency.lessThanOrEqual", "schema": {"description": "Allele frequency - Filter for entries with values less than or equal to the specified value", "title": "Allelefrequency.Lessthanorequal", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "alleleFrequency.greaterThan", "schema": {"description": "Allele frequency - Filter for entries with values greater than the specified value", "title": "Allelefrequency.Greaterthan", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "alleleFrequency.greaterThanOrEqual", "schema": {"description": "Allele frequency - Filter for entries with values greater than or equal to the specified value", "title": "Allelefrequency.Greaterthanorequal", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "alleleFrequency.equal", "schema": {"description": "Allele frequency - Filter for entries with values exactly equal to the specified value", "title": "Allelefrequency.Equal", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "alleleFrequency.not.equal", "schema": {"description": "Allele frequency - Filter for entries with values not equal to the specified value", "title": "Allelefrequency.Not.Equal", "type": "number"}, "required": false, "description": "Allele frequency - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "alleleFrequency.between", "schema": {"description": "Allele frequency - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Allelefrequency.Between", "type": "array"}, "required": false, "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "alleleFrequency.not.between", "schema": {"description": "Allele frequency - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Allelefrequency.Not.Between", "type": "array"}, "required": false, "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "alleleDepth.not.exists", "schema": {"description": "Allele depth (reads) - Filter for entries without a value", "title": "Alleledepth.Not.Exists", "type": "boolean"}, "required": false, "description": "Allele depth (reads) - Filter for entries without a value"}, {"in": "query", "name": "alleleDepth.exists", "schema": {"description": "Allele depth (reads) - Filter for entries with a value", "title": "Alleledepth.Exists", "type": "boolean"}, "required": false, "description": "Allele depth (reads) - Filter for entries with a value"}, {"in": "query", "name": "alleleDepth.lessThan", "schema": {"description": "Allele depth (reads) - Filter for entries with values less than the specified value", "title": "Alleledepth.Lessthan", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values less than the specified value"}, {"in": "query", "name": "alleleDepth.lessThanOrEqual", "schema": {"description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value", "title": "Alleledepth.Lessthanorequal", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "alleleDepth.greaterThan", "schema": {"description": "Allele depth (reads) - Filter for entries with values greater than the specified value", "title": "Alleledepth.Greaterthan", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "alleleDepth.greaterThanOrEqual", "schema": {"description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value", "title": "Alleledepth.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "alleleDepth.equal", "schema": {"description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value", "title": "Alleledepth.Equal", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "alleleDepth.not.equal", "schema": {"description": "Allele depth (reads) - Filter for entries with values not equal to the specified value", "title": "Alleledepth.Not.Equal", "type": "integer"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "alleleDepth.between", "schema": {"description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Alleledepth.Between", "type": "array"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "alleleDepth.not.between", "schema": {"description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Alleledepth.Not.Between", "type": "array"}, "required": false, "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "zygosity.not.exists", "schema": {"description": "Zygosity - Filter for entries without a value", "title": "Zygosity.Not.Exists", "type": "boolean"}, "required": false, "description": "Zygosity - Filter for entries without a value"}, {"in": "query", "name": "zygosity.exists", "schema": {"description": "Zygosity - Filter for entries with a value", "title": "Zygosity.Exists", "type": "boolean"}, "required": false, "description": "Zygosity - Filter for entries with a value"}, {"in": "query", "name": "zygosity", "schema": {"description": "Zygosity - Filter for a matching concept code", "title": "Zygosity", "type": "string"}, "required": false, "description": "Zygosity - Filter for a matching concept code"}, {"in": "query", "name": "zygosity.not", "schema": {"description": "Zygosity - Filter for a mismatching concept code", "title": "Zygosity.Not", "type": "string"}, "required": false, "description": "Zygosity - Filter for a mismatching concept code"}, {"in": "query", "name": "zygosity.anyOf", "schema": {"description": "Zygosity - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Zygosity.Anyof", "type": "array"}, "required": false, "description": "Zygosity - Filter for a matching set of concept codes"}, {"in": "query", "name": "zygosity.not.anyOf", "schema": {"description": "Zygosity - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Zygosity.Not.Anyof", "type": "array"}, "required": false, "description": "Zygosity - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "zygosity.descendantsOf", "schema": {"description": "Zygosity - Filter for all child concepts of a given concepts code", "title": "Zygosity.Descendantsof", "type": "string"}, "required": false, "description": "Zygosity - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "inheritance.not.exists", "schema": {"description": "Inheritance - Filter for entries without a value", "title": "Inheritance.Not.Exists", "type": "boolean"}, "required": false, "description": "Inheritance - Filter for entries without a value"}, {"in": "query", "name": "inheritance.exists", "schema": {"description": "Inheritance - Filter for entries with a value", "title": "Inheritance.Exists", "type": "boolean"}, "required": false, "description": "Inheritance - Filter for entries with a value"}, {"in": "query", "name": "inheritance", "schema": {"description": "Inheritance - Filter for a matching concept code", "title": "Inheritance", "type": "string"}, "required": false, "description": "Inheritance - Filter for a matching concept code"}, {"in": "query", "name": "inheritance.not", "schema": {"description": "Inheritance - Filter for a mismatching concept code", "title": "Inheritance.Not", "type": "string"}, "required": false, "description": "Inheritance - Filter for a mismatching concept code"}, {"in": "query", "name": "inheritance.anyOf", "schema": {"description": "Inheritance - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Inheritance.Anyof", "type": "array"}, "required": false, "description": "Inheritance - Filter for a matching set of concept codes"}, {"in": "query", "name": "inheritance.not.anyOf", "schema": {"description": "Inheritance - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Inheritance.Not.Anyof", "type": "array"}, "required": false, "description": "Inheritance - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "inheritance.descendantsOf", "schema": {"description": "Inheritance - Filter for all child concepts of a given concepts code", "title": "Inheritance.Descendantsof", "type": "string"}, "required": false, "description": "Inheritance - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "coordinateSystem.not.exists", "schema": {"description": "Coordinate system - Filter for entries without a value", "title": "Coordinatesystem.Not.Exists", "type": "boolean"}, "required": false, "description": "Coordinate system - Filter for entries without a value"}, {"in": "query", "name": "coordinateSystem.exists", "schema": {"description": "Coordinate system - Filter for entries with a value", "title": "Coordinatesystem.Exists", "type": "boolean"}, "required": false, "description": "Coordinate system - Filter for entries with a value"}, {"in": "query", "name": "coordinateSystem", "schema": {"description": "Coordinate system - Filter for a matching concept code", "title": "Coordinatesystem", "type": "string"}, "required": false, "description": "Coordinate system - Filter for a matching concept code"}, {"in": "query", "name": "coordinateSystem.not", "schema": {"description": "Coordinate system - Filter for a mismatching concept code", "title": "Coordinatesystem.Not", "type": "string"}, "required": false, "description": "Coordinate system - Filter for a mismatching concept code"}, {"in": "query", "name": "coordinateSystem.anyOf", "schema": {"description": "Coordinate system - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Coordinatesystem.Anyof", "type": "array"}, "required": false, "description": "Coordinate system - Filter for a matching set of concept codes"}, {"in": "query", "name": "coordinateSystem.not.anyOf", "schema": {"description": "Coordinate system - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Coordinatesystem.Not.Anyof", "type": "array"}, "required": false, "description": "Coordinate system - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "coordinateSystem.descendantsOf", "schema": {"description": "Coordinate system - Filter for all child concepts of a given concepts code", "title": "Coordinatesystem.Descendantsof", "type": "string"}, "required": false, "description": "Coordinate system - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "exactGenomicCoordinates.not.exists", "schema": {"description": "Exact genomic coordinates - Filter for entries without a value", "title": "Exactgenomiccoordinates.Not.Exists", "type": "boolean"}, "required": false, "description": "Exact genomic coordinates - Filter for entries without a value"}, {"in": "query", "name": "exactGenomicCoordinates.exists", "schema": {"description": "Exact genomic coordinates - Filter for entries with a value", "title": "Exactgenomiccoordinates.Exists", "type": "boolean"}, "required": false, "description": "Exact genomic coordinates - Filter for entries with a value"}, {"in": "query", "name": "innerGenomicCoordinates.not.exists", "schema": {"description": "Inner genomic coordinates - Filter for entries without a value", "title": "Innergenomiccoordinates.Not.Exists", "type": "boolean"}, "required": false, "description": "Inner genomic coordinates - Filter for entries without a value"}, {"in": "query", "name": "innerGenomicCoordinates.exists", "schema": {"description": "Inner genomic coordinates - Filter for entries with a value", "title": "Innergenomiccoordinates.Exists", "type": "boolean"}, "required": false, "description": "Inner genomic coordinates - Filter for entries with a value"}, {"in": "query", "name": "outerGenomicCoordinates.not.exists", "schema": {"description": "Outer genomic coordinates - Filter for entries without a value", "title": "Outergenomiccoordinates.Not.Exists", "type": "boolean"}, "required": false, "description": "Outer genomic coordinates - Filter for entries without a value"}, {"in": "query", "name": "outerGenomicCoordinates.exists", "schema": {"description": "Outer genomic coordinates - Filter for entries with a value", "title": "Outergenomiccoordinates.Exists", "type": "boolean"}, "required": false, "description": "Outer genomic coordinates - Filter for entries with a value"}, {"in": "query", "name": "clinvar.not.exists", "schema": {"description": "ClinVar accession number - Filter for entries without a value", "title": "Clinvar.Not.Exists", "type": "boolean"}, "required": false, "description": "ClinVar accession number - Filter for entries without a value"}, {"in": "query", "name": "clinvar.exists", "schema": {"description": "ClinVar accession number - Filter for entries with a value", "title": "Clinvar.Exists", "type": "boolean"}, "required": false, "description": "ClinVar accession number - Filter for entries with a value"}, {"in": "query", "name": "clinvar", "schema": {"description": "ClinVar accession number - Filter for full text matches", "title": "Clinvar", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for full text matches"}, {"in": "query", "name": "clinvar.not", "schema": {"description": "ClinVar accession number - Filter for full text mismatches", "title": "Clinvar.Not", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for full text mismatches"}, {"in": "query", "name": "clinvar.contains", "schema": {"description": "ClinVar accession number - Filter for partial text matches", "title": "Clinvar.Contains", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for partial text matches"}, {"in": "query", "name": "clinvar.not.contains", "schema": {"description": "ClinVar accession number - Filter for partial text mismatches", "title": "Clinvar.Not.Contains", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for partial text mismatches"}, {"in": "query", "name": "clinvar.beginsWith", "schema": {"description": "ClinVar accession number - Filter for entries starting with the text", "title": "Clinvar.Beginswith", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for entries starting with the text"}, {"in": "query", "name": "clinvar.not.beginsWith", "schema": {"description": "ClinVar accession number - Filter for entries not starting with the text", "title": "Clinvar.Not.Beginswith", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for entries not starting with the text"}, {"in": "query", "name": "clinvar.endsWith", "schema": {"description": "ClinVar accession number - Filter for entries ending with the text", "title": "Clinvar.Endswith", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for entries ending with the text"}, {"in": "query", "name": "clinvar.not.endsWith", "schema": {"description": "ClinVar accession number - Filter for entries not ending with the text", "title": "Clinvar.Not.Endswith", "type": "string"}, "required": false, "description": "ClinVar accession number - Filter for entries not ending with the text"}, {"in": "query", "name": "genes.code", "schema": {"description": "None - Filter for full text matches", "title": "Genes.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "genes.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Genes.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "genes.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Genes.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "genes.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Genes.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "genes.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Genes.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "genes.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "genes.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Genes.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "genes.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "genes.system", "schema": {"description": "None - Filter for full text matches", "title": "Genes.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "genes.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Genes.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "genes.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Genes.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "genes.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Genes.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "genes.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Genes.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "genes.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Genes.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "genes.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Genes.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "genes.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Genes.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "genes.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Genes.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "genes.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Genes.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "genes.display", "schema": {"description": "None - Filter for full text matches", "title": "Genes.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "genes.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Genes.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "genes.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Genes.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "genes.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Genes.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "genes.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Genes.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "genes.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "genes.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Genes.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "genes.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "genes.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Genes.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "genes.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Genes.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "genes.version", "schema": {"description": "None - Filter for full text matches", "title": "Genes.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "genes.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Genes.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "genes.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Genes.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "genes.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Genes.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "genes.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Genes.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "genes.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "genes.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Genes.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "genes.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "genes.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Genes.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "genes.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Genes.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "genes.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Genes.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "genes.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Genes.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "chromosomes.code", "schema": {"description": "None - Filter for full text matches", "title": "Chromosomes.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "chromosomes.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "chromosomes.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "chromosomes.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "chromosomes.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "chromosomes.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "chromosomes.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "chromosomes.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "chromosomes.system", "schema": {"description": "None - Filter for full text matches", "title": "Chromosomes.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "chromosomes.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "chromosomes.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Chromosomes.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "chromosomes.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "chromosomes.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "chromosomes.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "chromosomes.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "chromosomes.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "chromosomes.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "chromosomes.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "chromosomes.display", "schema": {"description": "None - Filter for full text matches", "title": "Chromosomes.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "chromosomes.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "chromosomes.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "chromosomes.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "chromosomes.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "chromosomes.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "chromosomes.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "chromosomes.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "chromosomes.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "chromosomes.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "chromosomes.version", "schema": {"description": "None - Filter for full text matches", "title": "Chromosomes.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "chromosomes.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "chromosomes.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "chromosomes.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "chromosomes.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "chromosomes.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "chromosomes.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "chromosomes.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "chromosomes.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "chromosomes.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "chromosomes.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "chromosomes.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_GenomicVariantSchema_"}}}}}, "tags": ["Genomic Variants"], "security": [{"JWTAuth": []}]}}, "/api/genomic-variants/{genomicVariantId}": {"delete": {"operationId": "deleteGenomicVariant", "summary": "Delete Genomic Variant", "parameters": [{"in": "path", "name": "genomicVariantId", "schema": {"title": "Genomicvariantid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Genomic Variants"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getGenomicVariantById", "summary": "Get Genomic Variant By Id", "parameters": [{"in": "path", "name": "genomicVariantId", "schema": {"title": "Genomicvariantid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenomicVariantSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Genomic Variants"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateGenomicVariant", "summary": "Update Genomic Variant", "parameters": [{"in": "path", "name": "genomicVariantId", "schema": {"title": "Genomicvariantid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Genomic Variants"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenomicVariantCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/genomic-signatures": {"post": {"operationId": "createGenomicSignature", "summary": "Create Genomic Signature", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Genomic Signatures"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/TumorMutationalBurdenCreateSchema"}, {"$ref": "#/components/schemas/MicrosatelliteInstabilityCreateSchema"}, {"$ref": "#/components/schemas/LossOfHeterozygosityCreateSchema"}, {"$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreateSchema"}, {"$ref": "#/components/schemas/TumorNeoantigenBurdenCreateSchema"}, {"$ref": "#/components/schemas/AneuploidScoreCreateSchema"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getGenomicSignatures", "summary": "Get All Genomic Signatures Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "category", "schema": {"allOf": [{"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}], "description": "None - ('Filter for single value choice',)"}, "required": false, "description": "None - ('Filter for single value choice',)"}, {"in": "query", "name": "category.not", "schema": {"allOf": [{"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}], "description": "None - ('Filter for all but a single value choice',)"}, "required": false, "description": "None - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "category.anyOf", "schema": {"description": "None - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}, "title": "Category.Anyof", "type": "array"}, "required": false, "description": "None - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_AnyGenomicSignature_"}}}}}, "tags": ["Genomic Signatures"], "security": [{"JWTAuth": []}]}}, "/api/genomic-signatures/{genomicSignatureId}": {"delete": {"operationId": "deleteGenomicSignatureById", "summary": "Delete Genomic Signature", "parameters": [{"in": "path", "name": "genomicSignatureId", "schema": {"title": "Genomicsignatureid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Genomic Signatures"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getGenomicSignatureById", "summary": "Get Genomic Signature By Id", "parameters": [{"in": "path", "name": "genomicSignatureId", "schema": {"title": "Genomicsignatureid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnyGenomicSignature"}}}}, "404": {"description": "Not Found"}}, "tags": ["Genomic Signatures"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateGenomicSignatureById", "summary": "Update Genomic Signature", "parameters": [{"in": "path", "name": "genomicSignatureId", "schema": {"title": "Genomicsignatureid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Genomic Signatures"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/TumorMutationalBurdenCreateSchema"}, {"$ref": "#/components/schemas/MicrosatelliteInstabilityCreateSchema"}, {"$ref": "#/components/schemas/LossOfHeterozygosityCreateSchema"}, {"$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreateSchema"}, {"$ref": "#/components/schemas/TumorNeoantigenBurdenCreateSchema"}, {"$ref": "#/components/schemas/AneuploidScoreCreateSchema"}], "title": "Payload"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/lifestyles": {"post": {"operationId": "createLifestyle", "summary": "Create Lifestyle", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Lifestyles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LifestyleCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getLifestyles", "summary": "Get All Lifestyles Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "smokingStatus.not.exists", "schema": {"description": "Alcohol consumption - Filter for entries without a value", "title": "Smokingstatus.Not.Exists", "type": "boolean"}, "required": false, "description": "Alcohol consumption - Filter for entries without a value"}, {"in": "query", "name": "smokingStatus.exists", "schema": {"description": "Alcohol consumption - Filter for entries with a value", "title": "Smokingstatus.Exists", "type": "boolean"}, "required": false, "description": "Alcohol consumption - Filter for entries with a value"}, {"in": "query", "name": "smokingStatus", "schema": {"description": "Alcohol consumption - Filter for a matching concept code", "title": "Smokingstatus", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for a matching concept code"}, {"in": "query", "name": "smokingStatus.not", "schema": {"description": "Alcohol consumption - Filter for a mismatching concept code", "title": "Smokingstatus.Not", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for a mismatching concept code"}, {"in": "query", "name": "smokingStatus.anyOf", "schema": {"description": "Alcohol consumption - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Smokingstatus.Anyof", "type": "array"}, "required": false, "description": "Alcohol consumption - Filter for a matching set of concept codes"}, {"in": "query", "name": "smokingStatus.not.anyOf", "schema": {"description": "Alcohol consumption - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Smokingstatus.Not.Anyof", "type": "array"}, "required": false, "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "smokingStatus.descendantsOf", "schema": {"description": "Alcohol consumption - Filter for all child concepts of a given concepts code", "title": "Smokingstatus.Descendantsof", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "smokingPackyears.not.exists", "schema": {"description": "Smoking packyears - Filter for entries without a value", "title": "Smokingpackyears.Not.Exists", "type": "boolean"}, "required": false, "description": "Smoking packyears - Filter for entries without a value"}, {"in": "query", "name": "smokingPackyears.exists", "schema": {"description": "Smoking packyears - Filter for entries with a value", "title": "Smokingpackyears.Exists", "type": "boolean"}, "required": false, "description": "Smoking packyears - Filter for entries with a value"}, {"in": "query", "name": "smokingPackyears.lessThan", "schema": {"description": "Smoking packyears - Filter for entries with values less than the specified value", "title": "Smokingpackyears.Lessthan", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values less than the specified value"}, {"in": "query", "name": "smokingPackyears.lessThanOrEqual", "schema": {"description": "Smoking packyears - Filter for entries with values less than or equal to the specified value", "title": "Smokingpackyears.Lessthanorequal", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "smokingPackyears.greaterThan", "schema": {"description": "Smoking packyears - Filter for entries with values greater than the specified value", "title": "Smokingpackyears.Greaterthan", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "smokingPackyears.greaterThanOrEqual", "schema": {"description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value", "title": "Smokingpackyears.Greaterthanorequal", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "smokingPackyears.equal", "schema": {"description": "Smoking packyears - Filter for entries with values exactly equal to the specified value", "title": "Smokingpackyears.Equal", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "smokingPackyears.not.equal", "schema": {"description": "Smoking packyears - Filter for entries with values not equal to the specified value", "title": "Smokingpackyears.Not.Equal", "type": "number"}, "required": false, "description": "Smoking packyears - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "smokingPackyears.between", "schema": {"description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingpackyears.Between", "type": "array"}, "required": false, "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "smokingPackyears.not.between", "schema": {"description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingpackyears.Not.Between", "type": "array"}, "required": false, "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "smokingQuited.not.exists", "schema": {"description": "Time since quitted smoking - Filter for entries without a value", "title": "Smokingquited.Not.Exists", "type": "boolean"}, "required": false, "description": "Time since quitted smoking - Filter for entries without a value"}, {"in": "query", "name": "smokingQuited.exists", "schema": {"description": "Time since quitted smoking - Filter for entries with a value", "title": "Smokingquited.Exists", "type": "boolean"}, "required": false, "description": "Time since quitted smoking - Filter for entries with a value"}, {"in": "query", "name": "smokingQuited.lessThan", "schema": {"description": "Time since quitted smoking - Filter for entries with values less than the specified value", "title": "Smokingquited.Lessthan", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values less than the specified value"}, {"in": "query", "name": "smokingQuited.lessThanOrEqual", "schema": {"description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value", "title": "Smokingquited.Lessthanorequal", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "smokingQuited.greaterThan", "schema": {"description": "Time since quitted smoking - Filter for entries with values greater than the specified value", "title": "Smokingquited.Greaterthan", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "smokingQuited.greaterThanOrEqual", "schema": {"description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value", "title": "Smokingquited.Greaterthanorequal", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "smokingQuited.equal", "schema": {"description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value", "title": "Smokingquited.Equal", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "smokingQuited.not.equal", "schema": {"description": "Time since quitted smoking - Filter for entries with values not equal to the specified value", "title": "Smokingquited.Not.Equal", "type": "number"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "smokingQuited.between", "schema": {"description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingquited.Between", "type": "array"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "smokingQuited.not.between", "schema": {"description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingquited.Not.Between", "type": "array"}, "required": false, "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "alcoholConsumption.not.exists", "schema": {"description": "Alcohol consumption - Filter for entries without a value", "title": "Alcoholconsumption.Not.Exists", "type": "boolean"}, "required": false, "description": "Alcohol consumption - Filter for entries without a value"}, {"in": "query", "name": "alcoholConsumption.exists", "schema": {"description": "Alcohol consumption - Filter for entries with a value", "title": "Alcoholconsumption.Exists", "type": "boolean"}, "required": false, "description": "Alcohol consumption - Filter for entries with a value"}, {"in": "query", "name": "alcoholConsumption", "schema": {"description": "Alcohol consumption - Filter for a matching concept code", "title": "Alcoholconsumption", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for a matching concept code"}, {"in": "query", "name": "alcoholConsumption.not", "schema": {"description": "Alcohol consumption - Filter for a mismatching concept code", "title": "Alcoholconsumption.Not", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for a mismatching concept code"}, {"in": "query", "name": "alcoholConsumption.anyOf", "schema": {"description": "Alcohol consumption - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Alcoholconsumption.Anyof", "type": "array"}, "required": false, "description": "Alcohol consumption - Filter for a matching set of concept codes"}, {"in": "query", "name": "alcoholConsumption.not.anyOf", "schema": {"description": "Alcohol consumption - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Alcoholconsumption.Not.Anyof", "type": "array"}, "required": false, "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "alcoholConsumption.descendantsOf", "schema": {"description": "Alcohol consumption - Filter for all child concepts of a given concepts code", "title": "Alcoholconsumption.Descendantsof", "type": "string"}, "required": false, "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "nightSleep.not.exists", "schema": {"description": "Night sleep - Filter for entries without a value", "title": "Nightsleep.Not.Exists", "type": "boolean"}, "required": false, "description": "Night sleep - Filter for entries without a value"}, {"in": "query", "name": "nightSleep.exists", "schema": {"description": "Night sleep - Filter for entries with a value", "title": "Nightsleep.Exists", "type": "boolean"}, "required": false, "description": "Night sleep - Filter for entries with a value"}, {"in": "query", "name": "nightSleep.lessThan", "schema": {"description": "Night sleep - Filter for entries with values less than the specified value", "title": "Nightsleep.Lessthan", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values less than the specified value"}, {"in": "query", "name": "nightSleep.lessThanOrEqual", "schema": {"description": "Night sleep - Filter for entries with values less than or equal to the specified value", "title": "Nightsleep.Lessthanorequal", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "nightSleep.greaterThan", "schema": {"description": "Night sleep - Filter for entries with values greater than the specified value", "title": "Nightsleep.Greaterthan", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "nightSleep.greaterThanOrEqual", "schema": {"description": "Night sleep - Filter for entries with values greater than or equal to the specified value", "title": "Nightsleep.Greaterthanorequal", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "nightSleep.equal", "schema": {"description": "Night sleep - Filter for entries with values exactly equal to the specified value", "title": "Nightsleep.Equal", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "nightSleep.not.equal", "schema": {"description": "Night sleep - Filter for entries with values not equal to the specified value", "title": "Nightsleep.Not.Equal", "type": "number"}, "required": false, "description": "Night sleep - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "nightSleep.between", "schema": {"description": "Night sleep - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Nightsleep.Between", "type": "array"}, "required": false, "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "nightSleep.not.between", "schema": {"description": "Night sleep - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Nightsleep.Not.Between", "type": "array"}, "required": false, "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "recreationalDrugs.code", "schema": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recreationalDrugs.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recreationalDrugs.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recreationalDrugs.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recreationalDrugs.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recreationalDrugs.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recreationalDrugs.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recreationalDrugs.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recreationalDrugs.system", "schema": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recreationalDrugs.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recreationalDrugs.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recreationalDrugs.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recreationalDrugs.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recreationalDrugs.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recreationalDrugs.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recreationalDrugs.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recreationalDrugs.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recreationalDrugs.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recreationalDrugs.display", "schema": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recreationalDrugs.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recreationalDrugs.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recreationalDrugs.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recreationalDrugs.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recreationalDrugs.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recreationalDrugs.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recreationalDrugs.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recreationalDrugs.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recreationalDrugs.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recreationalDrugs.version", "schema": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "recreationalDrugs.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "recreationalDrugs.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "recreationalDrugs.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "recreationalDrugs.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "recreationalDrugs.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "recreationalDrugs.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "recreationalDrugs.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "recreationalDrugs.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recreationalDrugs.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "recreationalDrugs.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "recreationalDrugs.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "exposures.code", "schema": {"description": "None - Filter for full text matches", "title": "Exposures.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "exposures.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Exposures.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "exposures.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Exposures.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "exposures.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "exposures.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "exposures.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "exposures.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "exposures.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "exposures.system", "schema": {"description": "None - Filter for full text matches", "title": "Exposures.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "exposures.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Exposures.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "exposures.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Exposures.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "exposures.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Exposures.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "exposures.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Exposures.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "exposures.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "exposures.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Exposures.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "exposures.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "exposures.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Exposures.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "exposures.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Exposures.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "exposures.display", "schema": {"description": "None - Filter for full text matches", "title": "Exposures.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "exposures.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Exposures.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "exposures.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Exposures.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "exposures.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "exposures.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "exposures.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "exposures.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "exposures.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "exposures.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Exposures.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "exposures.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Exposures.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "exposures.version", "schema": {"description": "None - Filter for full text matches", "title": "Exposures.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "exposures.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Exposures.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "exposures.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Exposures.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "exposures.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "exposures.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "exposures.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "exposures.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "exposures.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "exposures.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Exposures.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "exposures.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Exposures.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "exposures.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Exposures.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "exposures.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Exposures.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_LifestyleSchema_"}}}}}, "tags": ["Lifestyles"], "security": [{"JWTAuth": []}]}}, "/api/lifestyles/{lifestyleId}": {"delete": {"operationId": "deleteLifestyleById", "summary": "Delete Lifestyle", "parameters": [{"in": "path", "name": "lifestyleId", "schema": {"title": "Lifestyleid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Lifestyles"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getLifestyleById", "summary": "Get Lifestyle By Id", "parameters": [{"in": "path", "name": "lifestyleId", "schema": {"title": "Lifestyleid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LifestyleSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Lifestyles"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateLifestyleById", "summary": "Update Lifestyle", "parameters": [{"in": "path", "name": "lifestyleId", "schema": {"title": "Lifestyleid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Lifestyles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LifestyleCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/family-histories": {"post": {"operationId": "createFamilyHistory", "summary": "Create Family History", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Family Histories"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FamilyHistoryCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getFamilyHistories", "summary": "Get All Family Member Histories Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "relationship", "schema": {"description": "Relationship - Filter for a matching concept code", "title": "Relationship", "type": "string"}, "required": false, "description": "Relationship - Filter for a matching concept code"}, {"in": "query", "name": "relationship.not", "schema": {"description": "Relationship - Filter for a mismatching concept code", "title": "Relationship.Not", "type": "string"}, "required": false, "description": "Relationship - Filter for a mismatching concept code"}, {"in": "query", "name": "relationship.anyOf", "schema": {"description": "Relationship - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Relationship.Anyof", "type": "array"}, "required": false, "description": "Relationship - Filter for a matching set of concept codes"}, {"in": "query", "name": "relationship.not.anyOf", "schema": {"description": "Relationship - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Relationship.Not.Anyof", "type": "array"}, "required": false, "description": "Relationship - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "relationship.descendantsOf", "schema": {"description": "Relationship - Filter for all child concepts of a given concepts code", "title": "Relationship.Descendantsof", "type": "string"}, "required": false, "description": "Relationship - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "hadCancer", "schema": {"description": "Had cancer - ('Filter for yes/no statement',)", "title": "Hadcancer", "type": "boolean"}, "required": false, "description": "Had cancer - ('Filter for yes/no statement',)"}, {"in": "query", "name": "contributedToDeath.not.exists", "schema": {"description": "Contributed to death - Filter for entries without a value", "title": "Contributedtodeath.Not.Exists", "type": "boolean"}, "required": false, "description": "Contributed to death - Filter for entries without a value"}, {"in": "query", "name": "contributedToDeath.exists", "schema": {"description": "Contributed to death - Filter for entries with a value", "title": "Contributedtodeath.Exists", "type": "boolean"}, "required": false, "description": "Contributed to death - Filter for entries with a value"}, {"in": "query", "name": "contributedToDeath", "schema": {"description": "Contributed to death - ('Filter for yes/no statement',)", "title": "Contributedtodeath", "type": "boolean"}, "required": false, "description": "Contributed to death - ('Filter for yes/no statement',)"}, {"in": "query", "name": "onsetAge.not.exists", "schema": {"description": "Onset age - Filter for entries without a value", "title": "Onsetage.Not.Exists", "type": "boolean"}, "required": false, "description": "Onset age - Filter for entries without a value"}, {"in": "query", "name": "onsetAge.exists", "schema": {"description": "Onset age - Filter for entries with a value", "title": "Onsetage.Exists", "type": "boolean"}, "required": false, "description": "Onset age - Filter for entries with a value"}, {"in": "query", "name": "onsetAge.lessThan", "schema": {"description": "Onset age - Filter for entries with values less than the specified value", "title": "Onsetage.Lessthan", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values less than the specified value"}, {"in": "query", "name": "onsetAge.lessThanOrEqual", "schema": {"description": "Onset age - Filter for entries with values less than or equal to the specified value", "title": "Onsetage.Lessthanorequal", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "onsetAge.greaterThan", "schema": {"description": "Onset age - Filter for entries with values greater than the specified value", "title": "Onsetage.Greaterthan", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "onsetAge.greaterThanOrEqual", "schema": {"description": "Onset age - Filter for entries with values greater than or equal to the specified value", "title": "Onsetage.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "onsetAge.equal", "schema": {"description": "Onset age - Filter for entries with values exactly equal to the specified value", "title": "Onsetage.Equal", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "onsetAge.not.equal", "schema": {"description": "Onset age - Filter for entries with values not equal to the specified value", "title": "Onsetage.Not.Equal", "type": "integer"}, "required": false, "description": "Onset age - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "onsetAge.between", "schema": {"description": "Onset age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Onsetage.Between", "type": "array"}, "required": false, "description": "Onset age - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "onsetAge.not.between", "schema": {"description": "Onset age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Onsetage.Not.Between", "type": "array"}, "required": false, "description": "Onset age - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "topography.not.exists", "schema": {"description": "Topography - Filter for entries without a value", "title": "Topography.Not.Exists", "type": "boolean"}, "required": false, "description": "Topography - Filter for entries without a value"}, {"in": "query", "name": "topography.exists", "schema": {"description": "Topography - Filter for entries with a value", "title": "Topography.Exists", "type": "boolean"}, "required": false, "description": "Topography - Filter for entries with a value"}, {"in": "query", "name": "topography", "schema": {"description": "Topography - Filter for a matching concept code", "title": "Topography", "type": "string"}, "required": false, "description": "Topography - Filter for a matching concept code"}, {"in": "query", "name": "topography.not", "schema": {"description": "Topography - Filter for a mismatching concept code", "title": "Topography.Not", "type": "string"}, "required": false, "description": "Topography - Filter for a mismatching concept code"}, {"in": "query", "name": "topography.anyOf", "schema": {"description": "Topography - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Topography.Anyof", "type": "array"}, "required": false, "description": "Topography - Filter for a matching set of concept codes"}, {"in": "query", "name": "topography.not.anyOf", "schema": {"description": "Topography - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Topography.Not.Anyof", "type": "array"}, "required": false, "description": "Topography - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "topography.descendantsOf", "schema": {"description": "Topography - Filter for all child concepts of a given concepts code", "title": "Topography.Descendantsof", "type": "string"}, "required": false, "description": "Topography - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "morphology.not.exists", "schema": {"description": "Morphology - Filter for entries without a value", "title": "Morphology.Not.Exists", "type": "boolean"}, "required": false, "description": "Morphology - Filter for entries without a value"}, {"in": "query", "name": "morphology.exists", "schema": {"description": "Morphology - Filter for entries with a value", "title": "Morphology.Exists", "type": "boolean"}, "required": false, "description": "Morphology - Filter for entries with a value"}, {"in": "query", "name": "morphology", "schema": {"description": "Morphology - Filter for a matching concept code", "title": "Morphology", "type": "string"}, "required": false, "description": "Morphology - Filter for a matching concept code"}, {"in": "query", "name": "morphology.not", "schema": {"description": "Morphology - Filter for a mismatching concept code", "title": "Morphology.Not", "type": "string"}, "required": false, "description": "Morphology - Filter for a mismatching concept code"}, {"in": "query", "name": "morphology.anyOf", "schema": {"description": "Morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Anyof", "type": "array"}, "required": false, "description": "Morphology - Filter for a matching set of concept codes"}, {"in": "query", "name": "morphology.not.anyOf", "schema": {"description": "Morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Not.Anyof", "type": "array"}, "required": false, "description": "Morphology - Filter for a mismmatching set of concept codes"}, {"in": "query", "name": "morphology.descendantsOf", "schema": {"description": "Morphology - Filter for all child concepts of a given concepts code", "title": "Morphology.Descendantsof", "type": "string"}, "required": false, "description": "Morphology - Filter for all child concepts of a given concepts code"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_FamilyHistorySchema_"}}}}}, "tags": ["Family Histories"], "security": [{"JWTAuth": []}]}}, "/api/family-histories/{familyHistoryId}": {"delete": {"operationId": "deleteFamilyHistoryById", "summary": "Delete Family History", "parameters": [{"in": "path", "name": "familyHistoryId", "schema": {"title": "Familyhistoryid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Family Histories"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getFamilyHistoryById", "summary": "Get Family History By Id", "parameters": [{"in": "path", "name": "familyHistoryId", "schema": {"title": "Familyhistoryid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FamilyHistorySchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Family Histories"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateFamilyHistory", "summary": "Update Family History", "parameters": [{"in": "path", "name": "familyHistoryId", "schema": {"title": "Familyhistoryid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Family Histories"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FamilyHistoryCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/comorbidities-assessments": {"post": {"operationId": "createComorbiditiesAssessment", "summary": "Create Comorbidities Assessment", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Comorbidities Assessments"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ComorbiditiesAssessmentCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getComorbiditiesAssessments", "summary": "Get All Comorbidities Assessments Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "indexconditionId", "schema": {"description": "Index neoplastic entity - Filter for reference matches", "title": "Indexconditionid", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for reference matches"}, {"in": "query", "name": "indexconditionId.not", "schema": {"description": "Index neoplastic entity - Filter for reference mismatches", "title": "Indexconditionid.Not", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for reference mismatches"}, {"in": "query", "name": "indexconditionId.contains", "schema": {"description": "Index neoplastic entity - Filter for partial text matches", "title": "Indexconditionid.Contains", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for partial text matches"}, {"in": "query", "name": "indexconditionId.not.contains", "schema": {"description": "Index neoplastic entity - Filter for partial text mismatches", "title": "Indexconditionid.Not.Contains", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for partial text mismatches"}, {"in": "query", "name": "indexconditionId.beginsWith", "schema": {"description": "Index neoplastic entity - Filter for entries starting with the text", "title": "Indexconditionid.Beginswith", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for entries starting with the text"}, {"in": "query", "name": "indexconditionId.not.beginsWith", "schema": {"description": "Index neoplastic entity - Filter for entries not starting with the text", "title": "Indexconditionid.Not.Beginswith", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for entries not starting with the text"}, {"in": "query", "name": "indexconditionId.endsWith", "schema": {"description": "Index neoplastic entity - Filter for entries ending with the text", "title": "Indexconditionid.Endswith", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for entries ending with the text"}, {"in": "query", "name": "indexconditionId.not.endsWith", "schema": {"description": "Index neoplastic entity - Filter for entries not ending with the text", "title": "Indexconditionid.Not.Endswith", "type": "string"}, "required": false, "description": "Index neoplastic entity - Filter for entries not ending with the text"}, {"in": "query", "name": "panel.not.exists", "schema": {"description": "Panel - Filter for entries without a value", "title": "Panel.Not.Exists", "type": "boolean"}, "required": false, "description": "Panel - Filter for entries without a value"}, {"in": "query", "name": "panel.exists", "schema": {"description": "Panel - Filter for entries with a value", "title": "Panel.Exists", "type": "boolean"}, "required": false, "description": "Panel - Filter for entries with a value"}, {"in": "query", "name": "panel", "schema": {"allOf": [{"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}], "description": "Panel - ('Filter for single value choice',)"}, "required": false, "description": "Panel - ('Filter for single value choice',)"}, {"in": "query", "name": "panel.not", "schema": {"allOf": [{"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}], "description": "Panel - ('Filter for all but a single value choice',)"}, "required": false, "description": "Panel - ('Filter for all but a single value choice',)"}, {"in": "query", "name": "panel.anyOf", "schema": {"description": "Panel - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}, "title": "Panel.Anyof", "type": "array"}, "required": false, "description": "Panel - ('Filter for excluding a subset of value choices',)"}, {"in": "query", "name": "presentConditions.code", "schema": {"description": "None - Filter for full text matches", "title": "Presentconditions.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "presentConditions.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "presentConditions.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "presentConditions.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "presentConditions.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "presentConditions.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "presentConditions.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "presentConditions.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "presentConditions.system", "schema": {"description": "None - Filter for full text matches", "title": "Presentconditions.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "presentConditions.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "presentConditions.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Presentconditions.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "presentConditions.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "presentConditions.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "presentConditions.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "presentConditions.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "presentConditions.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "presentConditions.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "presentConditions.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "presentConditions.display", "schema": {"description": "None - Filter for full text matches", "title": "Presentconditions.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "presentConditions.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "presentConditions.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "presentConditions.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "presentConditions.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "presentConditions.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "presentConditions.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "presentConditions.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "presentConditions.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "presentConditions.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "presentConditions.version", "schema": {"description": "None - Filter for full text matches", "title": "Presentconditions.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "presentConditions.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "presentConditions.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "presentConditions.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "presentConditions.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "presentConditions.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "presentConditions.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "presentConditions.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "presentConditions.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "presentConditions.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "presentConditions.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "presentConditions.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "absentConditions.code", "schema": {"description": "None - Filter for full text matches", "title": "Absentconditions.Code", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "absentConditions.code.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Code.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "absentConditions.code.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Code.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "absentConditions.code.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Code.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "absentConditions.code.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Code.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "absentConditions.code.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Code.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "absentConditions.code.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Code.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "absentConditions.code.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Code.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "absentConditions.system", "schema": {"description": "None - Filter for full text matches", "title": "Absentconditions.System", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "absentConditions.system.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.System.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "absentConditions.system.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Absentconditions.System.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "absentConditions.system.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.System.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "absentConditions.system.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.System.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "absentConditions.system.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.System.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "absentConditions.system.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.System.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "absentConditions.system.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.System.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "absentConditions.display.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Display.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "absentConditions.display.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Display.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "absentConditions.display", "schema": {"description": "None - Filter for full text matches", "title": "Absentconditions.Display", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "absentConditions.display.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Display.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "absentConditions.display.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Display.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "absentConditions.display.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Display.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "absentConditions.display.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Display.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "absentConditions.display.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Display.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "absentConditions.display.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Display.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "absentConditions.display.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Display.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "absentConditions.version.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Version.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "absentConditions.version.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Version.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "absentConditions.version", "schema": {"description": "None - Filter for full text matches", "title": "Absentconditions.Version", "type": "string"}, "required": false, "description": "None - Filter for full text matches"}, {"in": "query", "name": "absentConditions.version.not", "schema": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Version.Not", "type": "string"}, "required": false, "description": "None - Filter for full text mismatches"}, {"in": "query", "name": "absentConditions.version.contains", "schema": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Version.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text matches"}, {"in": "query", "name": "absentConditions.version.not.contains", "schema": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Version.Not.Contains", "type": "string"}, "required": false, "description": "None - Filter for partial text mismatches"}, {"in": "query", "name": "absentConditions.version.beginsWith", "schema": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Version.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries starting with the text"}, {"in": "query", "name": "absentConditions.version.not.beginsWith", "schema": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Version.Not.Beginswith", "type": "string"}, "required": false, "description": "None - Filter for entries not starting with the text"}, {"in": "query", "name": "absentConditions.version.endsWith", "schema": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Version.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries ending with the text"}, {"in": "query", "name": "absentConditions.version.not.endsWith", "schema": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Version.Not.Endswith", "type": "string"}, "required": false, "description": "None - Filter for entries not ending with the text"}, {"in": "query", "name": "absentConditions.synonyms.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Synonyms.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "absentConditions.synonyms.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Synonyms.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "absentConditions.properties.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Properties.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "absentConditions.properties.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Properties.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "index.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Index.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "index.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Index.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "index.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Index.Lessthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "index.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Index.Lessthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "index.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Index.Greaterthan", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "index.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Index.Greaterthanorequal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "index.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Index.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "index.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Index.Not.Equal", "type": "integer"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "index.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Index.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "index.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Index.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_ComorbiditiesAssessmentSchema_"}}}}}, "tags": ["Comorbidities Assessments"], "security": [{"JWTAuth": []}]}}, "/api/comorbidities-assessments/{comorbiditiesAssessmentId}": {"delete": {"operationId": "deleteComorbiditiesAssessment", "summary": "Delete Comorbidities Assessment", "parameters": [{"in": "path", "name": "comorbiditiesAssessmentId", "schema": {"title": "Comorbiditiesassessmentid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Comorbidities Assessments"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getComorbiditiesAssessmentById", "summary": "Get Comorbidities Assessment By Id", "parameters": [{"in": "path", "name": "comorbiditiesAssessmentId", "schema": {"title": "Comorbiditiesassessmentid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ComorbiditiesAssessmentSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Comorbidities Assessments"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateComorbiditiesAssessment", "summary": "Update Comorbidities Assessment", "parameters": [{"in": "path", "name": "comorbiditiesAssessmentId", "schema": {"title": "Comorbiditiesassessmentid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Comorbidities Assessments"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ComorbiditiesAssessmentCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/comorbidities-panels": {"get": {"operationId": "getComorbiditiesPanels", "summary": "Get All Comorbidities Panels", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ComorbiditiesPanelSchema"}, "title": "Response", "type": "array"}}}}}, "tags": ["Comorbidities Assessments"], "security": [{"JWTAuth": []}]}}, "/api/comorbidities-panels/{panel}": {"get": {"operationId": "getComorbiditiesPanelsByName", "summary": "Get Comorbidities Panel By Name", "parameters": [{"in": "path", "name": "panel", "schema": {"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesPanel", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ComorbiditiesPanelSchema"}}}}}, "tags": ["Comorbidities Assessments"], "security": [{"JWTAuth": []}]}}, "/api/vitals": {"post": {"operationId": "createVitals", "summary": "Create Vitals", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Vitals"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VitalsCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getVitals", "summary": "Get All Vitals Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "caseId", "schema": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "required": false, "description": "Patient case - Filter for reference matches"}, {"in": "query", "name": "caseId.not", "schema": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "required": false, "description": "Patient case - Filter for reference mismatches"}, {"in": "query", "name": "caseId.contains", "schema": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text matches"}, {"in": "query", "name": "caseId.not.contains", "schema": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "required": false, "description": "Patient case - Filter for partial text mismatches"}, {"in": "query", "name": "caseId.beginsWith", "schema": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries starting with the text"}, {"in": "query", "name": "caseId.not.beginsWith", "schema": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not starting with the text"}, {"in": "query", "name": "caseId.endsWith", "schema": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries ending with the text"}, {"in": "query", "name": "caseId.not.endsWith", "schema": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "required": false, "description": "Patient case - Filter for entries not ending with the text"}, {"in": "query", "name": "date.before", "schema": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates before the specified value"}, {"in": "query", "name": "date.after", "schema": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates after the specified value"}, {"in": "query", "name": "date.onOrBefore", "schema": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or before the specified value"}, {"in": "query", "name": "date.onOrAfter", "schema": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates on or after the specified value"}, {"in": "query", "name": "date.on", "schema": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates exactly matching the specified value"}, {"in": "query", "name": "date.not.on", "schema": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "required": false, "description": "Assessment date - Filter for entries with dates not matching the specified value"}, {"in": "query", "name": "date.between", "schema": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"}, {"in": "query", "name": "date.not.between", "schema": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "required": false, "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"}, {"in": "query", "name": "height.not.exists", "schema": {"description": "Height - Filter for entries without a value", "title": "Height.Not.Exists", "type": "boolean"}, "required": false, "description": "Height - Filter for entries without a value"}, {"in": "query", "name": "height.exists", "schema": {"description": "Height - Filter for entries with a value", "title": "Height.Exists", "type": "boolean"}, "required": false, "description": "Height - Filter for entries with a value"}, {"in": "query", "name": "height.lessThan", "schema": {"description": "Height - Filter for entries with values less than the specified value", "title": "Height.Lessthan", "type": "number"}, "required": false, "description": "Height - Filter for entries with values less than the specified value"}, {"in": "query", "name": "height.lessThanOrEqual", "schema": {"description": "Height - Filter for entries with values less than or equal to the specified value", "title": "Height.Lessthanorequal", "type": "number"}, "required": false, "description": "Height - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "height.greaterThan", "schema": {"description": "Height - Filter for entries with values greater than the specified value", "title": "Height.Greaterthan", "type": "number"}, "required": false, "description": "Height - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "height.greaterThanOrEqual", "schema": {"description": "Height - Filter for entries with values greater than or equal to the specified value", "title": "Height.Greaterthanorequal", "type": "number"}, "required": false, "description": "Height - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "height.equal", "schema": {"description": "Height - Filter for entries with values exactly equal to the specified value", "title": "Height.Equal", "type": "number"}, "required": false, "description": "Height - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "height.not.equal", "schema": {"description": "Height - Filter for entries with values not equal to the specified value", "title": "Height.Not.Equal", "type": "number"}, "required": false, "description": "Height - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "height.between", "schema": {"description": "Height - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Height.Between", "type": "array"}, "required": false, "description": "Height - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "height.not.between", "schema": {"description": "Height - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Height.Not.Between", "type": "array"}, "required": false, "description": "Height - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "weight.not.exists", "schema": {"description": "Weight - Filter for entries without a value", "title": "Weight.Not.Exists", "type": "boolean"}, "required": false, "description": "Weight - Filter for entries without a value"}, {"in": "query", "name": "weight.exists", "schema": {"description": "Weight - Filter for entries with a value", "title": "Weight.Exists", "type": "boolean"}, "required": false, "description": "Weight - Filter for entries with a value"}, {"in": "query", "name": "weight.lessThan", "schema": {"description": "Weight - Filter for entries with values less than the specified value", "title": "Weight.Lessthan", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values less than the specified value"}, {"in": "query", "name": "weight.lessThanOrEqual", "schema": {"description": "Weight - Filter for entries with values less than or equal to the specified value", "title": "Weight.Lessthanorequal", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "weight.greaterThan", "schema": {"description": "Weight - Filter for entries with values greater than the specified value", "title": "Weight.Greaterthan", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "weight.greaterThanOrEqual", "schema": {"description": "Weight - Filter for entries with values greater than or equal to the specified value", "title": "Weight.Greaterthanorequal", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "weight.equal", "schema": {"description": "Weight - Filter for entries with values exactly equal to the specified value", "title": "Weight.Equal", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "weight.not.equal", "schema": {"description": "Weight - Filter for entries with values not equal to the specified value", "title": "Weight.Not.Equal", "type": "number"}, "required": false, "description": "Weight - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "weight.between", "schema": {"description": "Weight - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Weight.Between", "type": "array"}, "required": false, "description": "Weight - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "weight.not.between", "schema": {"description": "Weight - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Weight.Not.Between", "type": "array"}, "required": false, "description": "Weight - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "bloodPressureSystolic.not.exists", "schema": {"description": "Systolic blood pressure - Filter for entries without a value", "title": "Bloodpressuresystolic.Not.Exists", "type": "boolean"}, "required": false, "description": "Systolic blood pressure - Filter for entries without a value"}, {"in": "query", "name": "bloodPressureSystolic.exists", "schema": {"description": "Systolic blood pressure - Filter for entries with a value", "title": "Bloodpressuresystolic.Exists", "type": "boolean"}, "required": false, "description": "Systolic blood pressure - Filter for entries with a value"}, {"in": "query", "name": "bloodPressureSystolic.lessThan", "schema": {"description": "Systolic blood pressure - Filter for entries with values less than the specified value", "title": "Bloodpressuresystolic.Lessthan", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values less than the specified value"}, {"in": "query", "name": "bloodPressureSystolic.lessThanOrEqual", "schema": {"description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value", "title": "Bloodpressuresystolic.Lessthanorequal", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "bloodPressureSystolic.greaterThan", "schema": {"description": "Systolic blood pressure - Filter for entries with values greater than the specified value", "title": "Bloodpressuresystolic.Greaterthan", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "bloodPressureSystolic.greaterThanOrEqual", "schema": {"description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value", "title": "Bloodpressuresystolic.Greaterthanorequal", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "bloodPressureSystolic.equal", "schema": {"description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value", "title": "Bloodpressuresystolic.Equal", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "bloodPressureSystolic.not.equal", "schema": {"description": "Systolic blood pressure - Filter for entries with values not equal to the specified value", "title": "Bloodpressuresystolic.Not.Equal", "type": "number"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "bloodPressureSystolic.between", "schema": {"description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressuresystolic.Between", "type": "array"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "bloodPressureSystolic.not.between", "schema": {"description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressuresystolic.Not.Between", "type": "array"}, "required": false, "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "bloodPressureDiastolic.not.exists", "schema": {"description": "Diastolic blood pressure - Filter for entries without a value", "title": "Bloodpressurediastolic.Not.Exists", "type": "boolean"}, "required": false, "description": "Diastolic blood pressure - Filter for entries without a value"}, {"in": "query", "name": "bloodPressureDiastolic.exists", "schema": {"description": "Diastolic blood pressure - Filter for entries with a value", "title": "Bloodpressurediastolic.Exists", "type": "boolean"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with a value"}, {"in": "query", "name": "bloodPressureDiastolic.lessThan", "schema": {"description": "Diastolic blood pressure - Filter for entries with values less than the specified value", "title": "Bloodpressurediastolic.Lessthan", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values less than the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.lessThanOrEqual", "schema": {"description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value", "title": "Bloodpressurediastolic.Lessthanorequal", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.greaterThan", "schema": {"description": "Diastolic blood pressure - Filter for entries with values greater than the specified value", "title": "Bloodpressurediastolic.Greaterthan", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.greaterThanOrEqual", "schema": {"description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value", "title": "Bloodpressurediastolic.Greaterthanorequal", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.equal", "schema": {"description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value", "title": "Bloodpressurediastolic.Equal", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.not.equal", "schema": {"description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value", "title": "Bloodpressurediastolic.Not.Equal", "type": "number"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "bloodPressureDiastolic.between", "schema": {"description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressurediastolic.Between", "type": "array"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "bloodPressureDiastolic.not.between", "schema": {"description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressurediastolic.Not.Between", "type": "array"}, "required": false, "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "temperature.not.exists", "schema": {"description": "Temperature - Filter for entries without a value", "title": "Temperature.Not.Exists", "type": "boolean"}, "required": false, "description": "Temperature - Filter for entries without a value"}, {"in": "query", "name": "temperature.exists", "schema": {"description": "Temperature - Filter for entries with a value", "title": "Temperature.Exists", "type": "boolean"}, "required": false, "description": "Temperature - Filter for entries with a value"}, {"in": "query", "name": "temperature.lessThan", "schema": {"description": "Temperature - Filter for entries with values less than the specified value", "title": "Temperature.Lessthan", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values less than the specified value"}, {"in": "query", "name": "temperature.lessThanOrEqual", "schema": {"description": "Temperature - Filter for entries with values less than or equal to the specified value", "title": "Temperature.Lessthanorequal", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "temperature.greaterThan", "schema": {"description": "Temperature - Filter for entries with values greater than the specified value", "title": "Temperature.Greaterthan", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "temperature.greaterThanOrEqual", "schema": {"description": "Temperature - Filter for entries with values greater than or equal to the specified value", "title": "Temperature.Greaterthanorequal", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "temperature.equal", "schema": {"description": "Temperature - Filter for entries with values exactly equal to the specified value", "title": "Temperature.Equal", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "temperature.not.equal", "schema": {"description": "Temperature - Filter for entries with values not equal to the specified value", "title": "Temperature.Not.Equal", "type": "number"}, "required": false, "description": "Temperature - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "temperature.between", "schema": {"description": "Temperature - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Temperature.Between", "type": "array"}, "required": false, "description": "Temperature - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "temperature.not.between", "schema": {"description": "Temperature - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Temperature.Not.Between", "type": "array"}, "required": false, "description": "Temperature - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "body_mass_index.not.exists", "schema": {"description": "None - Filter for entries without a value", "title": "Body Mass Index.Not.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries without a value"}, {"in": "query", "name": "body_mass_index.exists", "schema": {"description": "None - Filter for entries with a value", "title": "Body Mass Index.Exists", "type": "boolean"}, "required": false, "description": "None - Filter for entries with a value"}, {"in": "query", "name": "body_mass_index.lessThan", "schema": {"description": "None - Filter for entries with values less than the specified value", "title": "Body Mass Index.Lessthan", "type": "number"}, "required": false, "description": "None - Filter for entries with values less than the specified value"}, {"in": "query", "name": "body_mass_index.lessThanOrEqual", "schema": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Body Mass Index.Lessthanorequal", "type": "number"}, "required": false, "description": "None - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "body_mass_index.greaterThan", "schema": {"description": "None - Filter for entries with values greater than the specified value", "title": "Body Mass Index.Greaterthan", "type": "number"}, "required": false, "description": "None - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "body_mass_index.greaterThanOrEqual", "schema": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Body Mass Index.Greaterthanorequal", "type": "number"}, "required": false, "description": "None - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "body_mass_index.equal", "schema": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Body Mass Index.Equal", "type": "number"}, "required": false, "description": "None - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "body_mass_index.not.equal", "schema": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Body Mass Index.Not.Equal", "type": "number"}, "required": false, "description": "None - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "body_mass_index.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Body Mass Index.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "body_mass_index.not.between", "schema": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Body Mass Index.Not.Between", "type": "array"}, "required": false, "description": "None - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_VitalsSchema_"}}}}}, "tags": ["Vitals"], "security": [{"JWTAuth": []}]}}, "/api/vitals/{vitalsId}": {"delete": {"operationId": "deleteVitalsById", "summary": "Delete Vitals", "parameters": [{"in": "path", "name": "vitalsId", "schema": {"title": "Vitalsid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Vitals"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getVitalsById", "summary": "Get Vitals By Id", "parameters": [{"in": "path", "name": "vitalsId", "schema": {"title": "Vitalsid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VitalsSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Vitals"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateVitalsById", "summary": "Update Vitals", "parameters": [{"in": "path", "name": "vitalsId", "schema": {"title": "Vitalsid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Vitals"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VitalsCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/measures/{measureName}/units/conversion": {"post": {"operationId": "convertUnits", "summary": "Convert Units", "parameters": [{"in": "path", "name": "measureName", "schema": {"title": "Measurename", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MeasureSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Measures"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MeasureConversionSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/measures/{measureName}/units/default": {"get": {"operationId": "getMeasureDefaultUnits", "summary": "Get Measure Default Units", "parameters": [{"in": "path", "name": "measureName", "schema": {"title": "Measurename", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"title": "Response", "type": "string"}}}}, "404": {"description": "Not Found"}}, "tags": ["Measures"], "security": [{"JWTAuth": []}]}}, "/api/measures/{measureName}/units": {"get": {"operationId": "getMeasureUnits", "summary": "Get Measure Units", "parameters": [{"in": "path", "name": "measureName", "schema": {"title": "Measurename", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"type": "string"}, "title": "Response", "type": "array"}}}}, "404": {"description": "Not Found"}}, "tags": ["Measures"], "security": [{"JWTAuth": []}]}}, "/api/terminologies/{terminologyName}/concepts": {"get": {"operationId": "getTerminologyConcepts", "summary": "Get Terminology Concepts", "parameters": [{"in": "path", "name": "terminologyName", "schema": {"title": "Terminologyname", "type": "string"}, "required": true}, {"in": "query", "name": "query", "schema": {"title": "Query", "type": "string"}, "required": false}, {"in": "query", "name": "codes", "schema": {"items": {"type": "string"}, "title": "Codes", "type": "array"}, "required": false}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_CodedConceptSchema_"}}}}}, "tags": ["Terminology"]}}, "/api/cohorts": {"post": {"operationId": "createCohort", "summary": "Create Cohort", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}}, "tags": ["Cohorts"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CohortCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "get": {"operationId": "getCohorts", "summary": "Get All Cohorts Matching The Query", "parameters": [{"in": "query", "name": "id", "schema": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "required": false, "description": "Id - Filter for full text matches"}, {"in": "query", "name": "id.not", "schema": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "required": false, "description": "Id - Filter for full text mismatches"}, {"in": "query", "name": "id.contains", "schema": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text matches"}, {"in": "query", "name": "id.not.contains", "schema": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "required": false, "description": "Id - Filter for partial text mismatches"}, {"in": "query", "name": "id.beginsWith", "schema": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries starting with the text"}, {"in": "query", "name": "id.not.beginsWith", "schema": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not starting with the text"}, {"in": "query", "name": "id.endsWith", "schema": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries ending with the text"}, {"in": "query", "name": "id.not.endsWith", "schema": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "required": false, "description": "Id - Filter for entries not ending with the text"}, {"in": "query", "name": "name", "schema": {"description": "Cohort name - Filter for full text matches", "title": "Name", "type": "string"}, "required": false, "description": "Cohort name - Filter for full text matches"}, {"in": "query", "name": "name.not", "schema": {"description": "Cohort name - Filter for full text mismatches", "title": "Name.Not", "type": "string"}, "required": false, "description": "Cohort name - Filter for full text mismatches"}, {"in": "query", "name": "name.contains", "schema": {"description": "Cohort name - Filter for partial text matches", "title": "Name.Contains", "type": "string"}, "required": false, "description": "Cohort name - Filter for partial text matches"}, {"in": "query", "name": "name.not.contains", "schema": {"description": "Cohort name - Filter for partial text mismatches", "title": "Name.Not.Contains", "type": "string"}, "required": false, "description": "Cohort name - Filter for partial text mismatches"}, {"in": "query", "name": "name.beginsWith", "schema": {"description": "Cohort name - Filter for entries starting with the text", "title": "Name.Beginswith", "type": "string"}, "required": false, "description": "Cohort name - Filter for entries starting with the text"}, {"in": "query", "name": "name.not.beginsWith", "schema": {"description": "Cohort name - Filter for entries not starting with the text", "title": "Name.Not.Beginswith", "type": "string"}, "required": false, "description": "Cohort name - Filter for entries not starting with the text"}, {"in": "query", "name": "name.endsWith", "schema": {"description": "Cohort name - Filter for entries ending with the text", "title": "Name.Endswith", "type": "string"}, "required": false, "description": "Cohort name - Filter for entries ending with the text"}, {"in": "query", "name": "name.not.endsWith", "schema": {"description": "Cohort name - Filter for entries not ending with the text", "title": "Name.Not.Endswith", "type": "string"}, "required": false, "description": "Cohort name - Filter for entries not ending with the text"}, {"in": "query", "name": "includeCriteria.not.exists", "schema": {"description": "Inclusion criteria - Filter for entries without a value", "title": "Includecriteria.Not.Exists", "type": "boolean"}, "required": false, "description": "Inclusion criteria - Filter for entries without a value"}, {"in": "query", "name": "includeCriteria.exists", "schema": {"description": "Inclusion criteria - Filter for entries with a value", "title": "Includecriteria.Exists", "type": "boolean"}, "required": false, "description": "Inclusion criteria - Filter for entries with a value"}, {"in": "query", "name": "excludeCriteria.not.exists", "schema": {"description": "Exclusion criteria - Filter for entries without a value", "title": "Excludecriteria.Not.Exists", "type": "boolean"}, "required": false, "description": "Exclusion criteria - Filter for entries without a value"}, {"in": "query", "name": "excludeCriteria.exists", "schema": {"description": "Exclusion criteria - Filter for entries with a value", "title": "Excludecriteria.Exists", "type": "boolean"}, "required": false, "description": "Exclusion criteria - Filter for entries with a value"}, {"in": "query", "name": "isPublic", "schema": {"description": "Is public? - ('Filter for yes/no statement',)", "title": "Ispublic", "type": "boolean"}, "required": false, "description": "Is public? - ('Filter for yes/no statement',)"}, {"in": "query", "name": "casesIds", "schema": {"description": "Cases - Filter for reference matches", "title": "Casesids", "type": "string"}, "required": false, "description": "Cases - Filter for reference matches"}, {"in": "query", "name": "casesIds.not", "schema": {"description": "Cases - Filter for reference mismatches", "title": "Casesids.Not", "type": "string"}, "required": false, "description": "Cases - Filter for reference mismatches"}, {"in": "query", "name": "manualChoicesIds", "schema": {"description": "Manually added cases - Filter for reference matches", "title": "Manualchoicesids", "type": "string"}, "required": false, "description": "Manually added cases - Filter for reference matches"}, {"in": "query", "name": "manualChoicesIds.not", "schema": {"description": "Manually added cases - Filter for reference mismatches", "title": "Manualchoicesids.Not", "type": "string"}, "required": false, "description": "Manually added cases - Filter for reference mismatches"}, {"in": "query", "name": "frozenSetIds", "schema": {"description": "Frozen cases - Filter for reference matches", "title": "Frozensetids", "type": "string"}, "required": false, "description": "Frozen cases - Filter for reference matches"}, {"in": "query", "name": "frozenSetIds.not", "schema": {"description": "Frozen cases - Filter for reference mismatches", "title": "Frozensetids.Not", "type": "string"}, "required": false, "description": "Frozen cases - Filter for reference mismatches"}, {"in": "query", "name": "population.lessThan", "schema": {"description": "Population - Filter for entries with values less than the specified value", "title": "Population.Lessthan", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values less than the specified value"}, {"in": "query", "name": "population.lessThanOrEqual", "schema": {"description": "Population - Filter for entries with values less than or equal to the specified value", "title": "Population.Lessthanorequal", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values less than or equal to the specified value"}, {"in": "query", "name": "population.greaterThan", "schema": {"description": "Population - Filter for entries with values greater than the specified value", "title": "Population.Greaterthan", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values greater than the specified value"}, {"in": "query", "name": "population.greaterThanOrEqual", "schema": {"description": "Population - Filter for entries with values greater than or equal to the specified value", "title": "Population.Greaterthanorequal", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values greater than or equal to the specified value"}, {"in": "query", "name": "population.equal", "schema": {"description": "Population - Filter for entries with values exactly equal to the specified value", "title": "Population.Equal", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values exactly equal to the specified value"}, {"in": "query", "name": "population.not.equal", "schema": {"description": "Population - Filter for entries with values not equal to the specified value", "title": "Population.Not.Equal", "type": "integer"}, "required": false, "description": "Population - Filter for entries with values not equal to the specified value"}, {"in": "query", "name": "population.between", "schema": {"description": "Population - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Population.Between", "type": "array"}, "required": false, "description": "Population - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "population.not.between", "schema": {"description": "Population - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Population.Not.Between", "type": "array"}, "required": false, "description": "Population - Filter for entries with values between two specified values (inclusive)"}, {"in": "query", "name": "createdBy", "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Filter for a particular cohort creator by its username", "title": "Createdby"}, "required": false, "description": "Filter for a particular cohort creator by its username"}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_CohortSchema_"}}}}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}}, "/api/cohorts/{cohortId}": {"delete": {"operationId": "deleteCohortById", "summary": "Delete Cohort", "parameters": [{"in": "path", "name": "cohortId", "schema": {"title": "Cohortid", "type": "string"}, "required": true}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found"}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}, "get": {"operationId": "getCohortById", "summary": "Get Cohort By Id", "parameters": [{"in": "path", "name": "cohortId", "schema": {"title": "Cohortid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CohortSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}, "put": {"operationId": "updateCohort", "summary": "Update Cohort", "parameters": [{"in": "path", "name": "cohortId", "schema": {"title": "Cohortid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifiedResourceSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Cohorts"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CohortCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/cohorts/{cohortId}/cases": {"get": {"operationId": "getCohortCases", "summary": "Get Cohort Cases", "parameters": [{"in": "path", "name": "cohortId", "schema": {"title": "Cohortid", "type": "string"}, "required": true}, {"in": "query", "name": "limit", "schema": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paginated_PatientCase_"}}}}, "404": {"description": "Not Found"}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}}, "/api/cohorts/{cohortId}/statistics": {"get": {"operationId": "getCohortStatistics", "summary": "Get Cohort Statistics", "parameters": [{"in": "path", "name": "cohortId", "schema": {"title": "Cohortid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CohortStatisticsSchema"}}}}, "404": {"description": "Not Found"}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}}, "/api/cohort-builder/config": {"get": {"operationId": "getCohortBuilderConfig", "summary": "Get Cohort Builder Configuration", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CohortBuilderConfig"}}}}}, "tags": ["Cohorts"], "security": [{"JWTAuth": []}]}}, "/api/dashboard/cases-over-time": {"get": {"operationId": "getCasesOverTime", "summary": "Get Cases Over Time", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/CasesPerMonthSchema"}, "title": "Response", "type": "array"}}}}}, "tags": ["Dashboard"]}}, "/api/dashboard/stats": {"get": {"operationId": "getFullCohortStatistics", "summary": "Get Full Cohort Statistics", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DataPlatformStatisticsSchema"}}}}}, "tags": ["Dashboard"]}}, "/api/dashboard/primary-site-stats": {"get": {"operationId": "getPrimarySiteStatistics", "summary": "Get Primary Site Statistics", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/EntityStatisticsSchema"}, "title": "Response", "type": "array"}}}}}, "tags": ["Dashboard"]}}}, "components": {"schemas": {"TokenPairSchema": {"properties": {"username": {"description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", "maxLength": 150, "title": "Username", "type": "string"}, "refresh": {"title": "Refresh", "type": "string"}, "access": {"title": "Access", "type": "string"}}, "required": ["username", "refresh", "access"], "title": "TokenPair", "type": "object"}, "UserCredentialsSchema": {"properties": {"password": {"format": "password", "title": "Password", "type": "string", "writeOnly": true}, "username": {"title": "Username", "type": "string"}}, "required": ["password", "username"], "title": "UserCredentials", "type": "object"}, "RefreshedTokenPairSchema": {"properties": {"refresh": {"title": "Refresh", "type": "string"}, "access": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Access"}}, "required": ["refresh", "access"], "title": "RefreshedTokenPair", "type": "object"}, "TokenRefreshSchema": {"properties": {"refresh": {"title": "Refresh", "type": "string"}}, "required": ["refresh"], "title": "TokenRefresh", "type": "object"}, "UserSchema": {"properties": {"id": {"title": "Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string"}, "firstName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Firstname"}, "lastName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lastname"}}, "required": ["id", "username", "email"], "title": "User", "type": "object"}, "ModifiedResourceSchema": {"properties": {"id": {"format": "uuid", "title": "Id", "type": "string"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}}, "required": ["id"], "title": "ModifiedResource", "type": "object"}, "CodedConceptSchema": {"properties": {"code": {"title": "Code", "type": "string"}, "system": {"title": "System", "type": "string"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "version": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Version"}, "synonyms": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Synonyms"}, "properties": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Properties"}}, "required": ["code", "system"], "title": "CodedConcept", "type": "object"}, "PatientCaseConsentStatusChoices": {"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}, "PatientCaseCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "clinicalCenter": {"description": "Medical center where the patient data originally resides", "examples": [], "maxLength": 200, "title": "Medical center", "type": "string", "x-expanded": null}, "clinicalIdentifier": {"description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient", "examples": [], "maxLength": 100, "title": "Clinical identifier", "type": "string", "x-expanded": null}, "consentStatus": {"allOf": [{"$ref": "#/components/schemas/PatientCaseConsentStatusChoices", "maxLength": 20}], "default": "unknown", "description": "Status of the general consent by the patient for the use of their data for research purposes", "examples": [], "title": "Consent status", "x-expanded": null}, "gender": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Gender for administrative purposes", "examples": [], "title": "Gender", "x-expanded": null, "x-terminology": "AdministrativeGender"}, "race": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Race of the patient", "examples": [], "title": "Race", "x-expanded": null, "x-terminology": "RaceCategory"}, "sexAtBirth": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Sex assigned at birth", "examples": [], "title": "Birth sex", "x-expanded": null, "x-terminology": "BirthSex"}, "genderIdentity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "", "examples": [], "title": "Gender identity", "x-expanded": null, "x-terminology": "GenderIdentity"}, "dateOfBirth": {"description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.", "examples": [], "format": "date", "title": "Date of birth", "type": "string", "x-expanded": null}, "dateOfDeath": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.", "examples": [], "title": "Date of death", "x-expanded": null}, "causeOfDeath": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the cause of death.", "examples": [], "title": "Cause of death", "x-expanded": null, "x-terminology": "CauseOfDeath"}}, "required": ["clinicalCenter", "clinicalIdentifier", "gender", "dateOfBirth"], "title": "PatientCaseCreate", "type": "object"}, "Input": {"properties": {"limit": {"default": 100, "minimum": 1, "title": "Limit", "type": "integer"}, "offset": {"default": 0, "minimum": 0, "title": "Offset", "type": "integer"}}, "title": "Input", "type": "object"}, "PatientCaseFilters": {"properties": {"age.lessThan": {"description": "Age - Filter for entries with values less than the specified value", "title": "Age.Lessthan", "type": "integer"}, "age.lessThanOrEqual": {"description": "Age - Filter for entries with values less than or equal to the specified value", "title": "Age.Lessthanorequal", "type": "integer"}, "age.greaterThan": {"description": "Age - Filter for entries with values greater than the specified value", "title": "Age.Greaterthan", "type": "integer"}, "age.greaterThanOrEqual": {"description": "Age - Filter for entries with values greater than or equal to the specified value", "title": "Age.Greaterthanorequal", "type": "integer"}, "age.equal": {"description": "Age - Filter for entries with values exactly equal to the specified value", "title": "Age.Equal", "type": "integer"}, "age.not.equal": {"description": "Age - Filter for entries with values not equal to the specified value", "title": "Age.Not.Equal", "type": "integer"}, "age.between": {"description": "Age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Age.Between", "type": "array"}, "age.not.between": {"description": "Age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Age.Not.Between", "type": "array"}, "overallSurvival.not.exists": {"description": "Overall survival - Filter for entries without a value", "title": "Overallsurvival.Not.Exists", "type": "boolean"}, "overallSurvival.exists": {"description": "Overall survival - Filter for entries with a value", "title": "Overallsurvival.Exists", "type": "boolean"}, "overallSurvival.lessThan": {"description": "Overall survival - Filter for entries with values less than the specified value", "title": "Overallsurvival.Lessthan", "type": "number"}, "overallSurvival.lessThanOrEqual": {"description": "Overall survival - Filter for entries with values less than or equal to the specified value", "title": "Overallsurvival.Lessthanorequal", "type": "number"}, "overallSurvival.greaterThan": {"description": "Overall survival - Filter for entries with values greater than the specified value", "title": "Overallsurvival.Greaterthan", "type": "number"}, "overallSurvival.greaterThanOrEqual": {"description": "Overall survival - Filter for entries with values greater than or equal to the specified value", "title": "Overallsurvival.Greaterthanorequal", "type": "number"}, "overallSurvival.equal": {"description": "Overall survival - Filter for entries with values exactly equal to the specified value", "title": "Overallsurvival.Equal", "type": "number"}, "overallSurvival.not.equal": {"description": "Overall survival - Filter for entries with values not equal to the specified value", "title": "Overallsurvival.Not.Equal", "type": "number"}, "overallSurvival.between": {"description": "Overall survival - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Overallsurvival.Between", "type": "array"}, "overallSurvival.not.between": {"description": "Overall survival - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Overallsurvival.Not.Between", "type": "array"}, "dataCompletionRate.lessThan": {"description": "Data completion rate - Filter for entries with values less than the specified value", "title": "Datacompletionrate.Lessthan", "type": "number"}, "dataCompletionRate.lessThanOrEqual": {"description": "Data completion rate - Filter for entries with values less than or equal to the specified value", "title": "Datacompletionrate.Lessthanorequal", "type": "number"}, "dataCompletionRate.greaterThan": {"description": "Data completion rate - Filter for entries with values greater than the specified value", "title": "Datacompletionrate.Greaterthan", "type": "number"}, "dataCompletionRate.greaterThanOrEqual": {"description": "Data completion rate - Filter for entries with values greater than or equal to the specified value", "title": "Datacompletionrate.Greaterthanorequal", "type": "number"}, "dataCompletionRate.equal": {"description": "Data completion rate - Filter for entries with values exactly equal to the specified value", "title": "Datacompletionrate.Equal", "type": "number"}, "dataCompletionRate.not.equal": {"description": "Data completion rate - Filter for entries with values not equal to the specified value", "title": "Datacompletionrate.Not.Equal", "type": "number"}, "dataCompletionRate.between": {"description": "Data completion rate - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Datacompletionrate.Between", "type": "array"}, "dataCompletionRate.not.between": {"description": "Data completion rate - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Datacompletionrate.Not.Between", "type": "array"}, "id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "pseudoidentifier": {"description": "Pseudoidentifier - Filter for full text matches", "title": "Pseudoidentifier", "type": "string"}, "pseudoidentifier.not": {"description": "Pseudoidentifier - Filter for full text mismatches", "title": "Pseudoidentifier.Not", "type": "string"}, "pseudoidentifier.contains": {"description": "Pseudoidentifier - Filter for partial text matches", "title": "Pseudoidentifier.Contains", "type": "string"}, "pseudoidentifier.not.contains": {"description": "Pseudoidentifier - Filter for partial text mismatches", "title": "Pseudoidentifier.Not.Contains", "type": "string"}, "pseudoidentifier.beginsWith": {"description": "Pseudoidentifier - Filter for entries starting with the text", "title": "Pseudoidentifier.Beginswith", "type": "string"}, "pseudoidentifier.not.beginsWith": {"description": "Pseudoidentifier - Filter for entries not starting with the text", "title": "Pseudoidentifier.Not.Beginswith", "type": "string"}, "pseudoidentifier.endsWith": {"description": "Pseudoidentifier - Filter for entries ending with the text", "title": "Pseudoidentifier.Endswith", "type": "string"}, "pseudoidentifier.not.endsWith": {"description": "Pseudoidentifier - Filter for entries not ending with the text", "title": "Pseudoidentifier.Not.Endswith", "type": "string"}, "clinicalCenter": {"description": "Medical center - Filter for full text matches", "title": "Clinicalcenter", "type": "string"}, "clinicalCenter.not": {"description": "Medical center - Filter for full text mismatches", "title": "Clinicalcenter.Not", "type": "string"}, "clinicalCenter.contains": {"description": "Medical center - Filter for partial text matches", "title": "Clinicalcenter.Contains", "type": "string"}, "clinicalCenter.not.contains": {"description": "Medical center - Filter for partial text mismatches", "title": "Clinicalcenter.Not.Contains", "type": "string"}, "clinicalCenter.beginsWith": {"description": "Medical center - Filter for entries starting with the text", "title": "Clinicalcenter.Beginswith", "type": "string"}, "clinicalCenter.not.beginsWith": {"description": "Medical center - Filter for entries not starting with the text", "title": "Clinicalcenter.Not.Beginswith", "type": "string"}, "clinicalCenter.endsWith": {"description": "Medical center - Filter for entries ending with the text", "title": "Clinicalcenter.Endswith", "type": "string"}, "clinicalCenter.not.endsWith": {"description": "Medical center - Filter for entries not ending with the text", "title": "Clinicalcenter.Not.Endswith", "type": "string"}, "clinicalIdentifier": {"description": "Clinical identifier - Filter for full text matches", "title": "Clinicalidentifier", "type": "string"}, "clinicalIdentifier.not": {"description": "Clinical identifier - Filter for full text mismatches", "title": "Clinicalidentifier.Not", "type": "string"}, "clinicalIdentifier.contains": {"description": "Clinical identifier - Filter for partial text matches", "title": "Clinicalidentifier.Contains", "type": "string"}, "clinicalIdentifier.not.contains": {"description": "Clinical identifier - Filter for partial text mismatches", "title": "Clinicalidentifier.Not.Contains", "type": "string"}, "clinicalIdentifier.beginsWith": {"description": "Clinical identifier - Filter for entries starting with the text", "title": "Clinicalidentifier.Beginswith", "type": "string"}, "clinicalIdentifier.not.beginsWith": {"description": "Clinical identifier - Filter for entries not starting with the text", "title": "Clinicalidentifier.Not.Beginswith", "type": "string"}, "clinicalIdentifier.endsWith": {"description": "Clinical identifier - Filter for entries ending with the text", "title": "Clinicalidentifier.Endswith", "type": "string"}, "clinicalIdentifier.not.endsWith": {"description": "Clinical identifier - Filter for entries not ending with the text", "title": "Clinicalidentifier.Not.Endswith", "type": "string"}, "consentStatus": {"allOf": [{"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}], "description": "Consent status - ('Filter for single value choice',)"}, "consentStatus.not": {"allOf": [{"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}], "description": "Consent status - ('Filter for all but a single value choice',)"}, "consentStatus.anyOf": {"description": "Consent status - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["valid", "revoked", "unknown"], "title": "PatientCaseConsentStatusChoices", "type": "string"}, "title": "Consentstatus.Anyof", "type": "array"}, "gender": {"description": "Gender - Filter for a matching concept code", "title": "Gender", "type": "string"}, "gender.not": {"description": "Gender - Filter for a mismatching concept code", "title": "Gender.Not", "type": "string"}, "gender.anyOf": {"description": "Gender - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Gender.Anyof", "type": "array"}, "gender.not.anyOf": {"description": "Gender - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Gender.Not.Anyof", "type": "array"}, "gender.descendantsOf": {"description": "Gender - Filter for all child concepts of a given concepts code", "title": "Gender.Descendantsof", "type": "string"}, "race.not.exists": {"description": "Race - Filter for entries without a value", "title": "Race.Not.Exists", "type": "boolean"}, "race.exists": {"description": "Race - Filter for entries with a value", "title": "Race.Exists", "type": "boolean"}, "race": {"description": "Race - Filter for a matching concept code", "title": "Race", "type": "string"}, "race.not": {"description": "Race - Filter for a mismatching concept code", "title": "Race.Not", "type": "string"}, "race.anyOf": {"description": "Race - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Race.Anyof", "type": "array"}, "race.not.anyOf": {"description": "Race - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Race.Not.Anyof", "type": "array"}, "race.descendantsOf": {"description": "Race - Filter for all child concepts of a given concepts code", "title": "Race.Descendantsof", "type": "string"}, "sexAtBirth.not.exists": {"description": "Birth sex - Filter for entries without a value", "title": "Sexatbirth.Not.Exists", "type": "boolean"}, "sexAtBirth.exists": {"description": "Birth sex - Filter for entries with a value", "title": "Sexatbirth.Exists", "type": "boolean"}, "sexAtBirth": {"description": "Birth sex - Filter for a matching concept code", "title": "Sexatbirth", "type": "string"}, "sexAtBirth.not": {"description": "Birth sex - Filter for a mismatching concept code", "title": "Sexatbirth.Not", "type": "string"}, "sexAtBirth.anyOf": {"description": "Birth sex - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Sexatbirth.Anyof", "type": "array"}, "sexAtBirth.not.anyOf": {"description": "Birth sex - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Sexatbirth.Not.Anyof", "type": "array"}, "sexAtBirth.descendantsOf": {"description": "Birth sex - Filter for all child concepts of a given concepts code", "title": "Sexatbirth.Descendantsof", "type": "string"}, "genderIdentity.not.exists": {"description": "Gender identity - Filter for entries without a value", "title": "Genderidentity.Not.Exists", "type": "boolean"}, "genderIdentity.exists": {"description": "Gender identity - Filter for entries with a value", "title": "Genderidentity.Exists", "type": "boolean"}, "genderIdentity": {"description": "Gender identity - Filter for a matching concept code", "title": "Genderidentity", "type": "string"}, "genderIdentity.not": {"description": "Gender identity - Filter for a mismatching concept code", "title": "Genderidentity.Not", "type": "string"}, "genderIdentity.anyOf": {"description": "Gender identity - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Genderidentity.Anyof", "type": "array"}, "genderIdentity.not.anyOf": {"description": "Gender identity - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Genderidentity.Not.Anyof", "type": "array"}, "genderIdentity.descendantsOf": {"description": "Gender identity - Filter for all child concepts of a given concepts code", "title": "Genderidentity.Descendantsof", "type": "string"}, "dateOfBirth.before": {"description": "Date of birth - Filter for entries with dates before the specified value", "format": "date", "title": "Dateofbirth.Before", "type": "string"}, "dateOfBirth.after": {"description": "Date of birth - Filter for entries with dates after the specified value", "format": "date", "title": "Dateofbirth.After", "type": "string"}, "dateOfBirth.onOrBefore": {"description": "Date of birth - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateofbirth.Onorbefore", "type": "string"}, "dateOfBirth.onOrAfter": {"description": "Date of birth - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateofbirth.Onorafter", "type": "string"}, "dateOfBirth.on": {"description": "Date of birth - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateofbirth.On", "type": "string"}, "dateOfBirth.not.on": {"description": "Date of birth - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateofbirth.Not.On", "type": "string"}, "dateOfBirth.between": {"description": "Date of birth - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofbirth.Between", "type": "array"}, "dateOfBirth.not.between": {"description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofbirth.Not.Between", "type": "array"}, "isDeceased": {"description": "Is deceased - ('Filter for yes/no statement',)", "title": "Isdeceased", "type": "boolean"}, "dateOfDeath.not.exists": {"description": "Date of death - Filter for entries without a value", "title": "Dateofdeath.Not.Exists", "type": "boolean"}, "dateOfDeath.exists": {"description": "Date of death - Filter for entries with a value", "title": "Dateofdeath.Exists", "type": "boolean"}, "dateOfDeath.before": {"description": "Date of death - Filter for entries with dates before the specified value", "format": "date", "title": "Dateofdeath.Before", "type": "string"}, "dateOfDeath.after": {"description": "Date of death - Filter for entries with dates after the specified value", "format": "date", "title": "Dateofdeath.After", "type": "string"}, "dateOfDeath.onOrBefore": {"description": "Date of death - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateofdeath.Onorbefore", "type": "string"}, "dateOfDeath.onOrAfter": {"description": "Date of death - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateofdeath.Onorafter", "type": "string"}, "dateOfDeath.on": {"description": "Date of death - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateofdeath.On", "type": "string"}, "dateOfDeath.not.on": {"description": "Date of death - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateofdeath.Not.On", "type": "string"}, "dateOfDeath.between": {"description": "Date of death - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofdeath.Between", "type": "array"}, "dateOfDeath.not.between": {"description": "Date of death - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateofdeath.Not.Between", "type": "array"}, "causeOfDeath.not.exists": {"description": "Cause of death - Filter for entries without a value", "title": "Causeofdeath.Not.Exists", "type": "boolean"}, "causeOfDeath.exists": {"description": "Cause of death - Filter for entries with a value", "title": "Causeofdeath.Exists", "type": "boolean"}, "causeOfDeath": {"description": "Cause of death - Filter for a matching concept code", "title": "Causeofdeath", "type": "string"}, "causeOfDeath.not": {"description": "Cause of death - Filter for a mismatching concept code", "title": "Causeofdeath.Not", "type": "string"}, "causeOfDeath.anyOf": {"description": "Cause of death - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Causeofdeath.Anyof", "type": "array"}, "causeOfDeath.not.anyOf": {"description": "Cause of death - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Causeofdeath.Not.Anyof", "type": "array"}, "causeOfDeath.descendantsOf": {"description": "Cause of death - Filter for all child concepts of a given concepts code", "title": "Causeofdeath.Descendantsof", "type": "string"}, "manager": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Filter for a particular case manager by its username", "title": "Manager"}}, "title": "PatientCaseFilters", "type": "object"}, "Paginated_PatientCase_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/PatientCase"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[PatientCase]", "type": "object"}, "PatientCase": {"properties": {"age": {"description": "Approximate age of the patient in years", "title": "Age", "type": "integer"}, "overallSurvival": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Overall survival of the patient since diagnosis", "title": "Overall survival"}, "dataCompletionRate": {"description": "Percentage indicating the completeness of a case in terms of its data.", "title": "Data completion rate", "type": "number"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "pseudoidentifier": {"description": "Pseudoidentifier of the patient", "examples": [], "maxLength": 40, "title": "Pseudoidentifier", "type": "string", "x-expanded": null}, "clinicalCenter": {"description": "Medical center where the patient data originally resides", "examples": [], "maxLength": 200, "title": "Medical center", "type": "string", "x-expanded": null}, "clinicalIdentifier": {"description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient", "examples": [], "maxLength": 100, "title": "Clinical identifier", "type": "string", "x-expanded": null}, "consentStatus": {"allOf": [{"$ref": "#/components/schemas/PatientCaseConsentStatusChoices", "maxLength": 20}], "default": "unknown", "description": "Status of the general consent by the patient for the use of their data for research purposes", "examples": [], "title": "Consent status", "x-expanded": null}, "gender": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Gender for administrative purposes", "examples": [], "title": "Gender", "x-expanded": null, "x-terminology": "AdministrativeGender"}, "race": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Race of the patient", "examples": [], "title": "Race", "x-expanded": null, "x-terminology": "RaceCategory"}, "sexAtBirth": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Sex assigned at birth", "examples": [], "title": "Birth sex", "x-expanded": null, "x-terminology": "BirthSex"}, "genderIdentity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "", "examples": [], "title": "Gender identity", "x-expanded": null, "x-terminology": "GenderIdentity"}, "dateOfBirth": {"description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.", "examples": [], "format": "date", "title": "Date of birth", "type": "string", "x-expanded": null}, "isDeceased": {"description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)", "examples": [], "title": "Is deceased", "type": "boolean", "x-expanded": null}, "dateOfDeath": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.", "examples": [], "title": "Date of death", "x-expanded": null}, "causeOfDeath": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the cause of death.", "examples": [], "title": "Cause of death", "x-expanded": null, "x-terminology": "CauseOfDeath"}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}}, "required": ["age", "dataCompletionRate", "id", "createdAt", "updatedAt", "pseudoidentifier", "clinicalCenter", "clinicalIdentifier", "gender", "dateOfBirth", "isDeceased"], "title": "PatientCase", "type": "object"}, "NeoplasticEntityCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's neoplasm(s) are recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "relationship": {"$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices", "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.", "examples": [], "maxLength": 30, "title": "Neoplastic relationship", "x-expanded": null}, "relatedPrimaryId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.", "examples": [], "title": "Related primary neoplasm", "x-expanded": null}, "assertionDate": {"description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged", "examples": [], "format": "date", "title": "Assertion date", "type": "string", "x-expanded": null}, "topography": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Anatomical location of the neoplasm(s)", "examples": [], "title": "Topography", "x-expanded": null, "x-terminology": "CancerTopography"}, "morphology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself", "examples": [], "title": "Morphology", "x-expanded": null, "x-terminology": "CancerMorphology"}, "differentitation": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphologic differentitation characteristics of the neoplasm(s)", "examples": [], "title": "Differentiation", "x-expanded": null, "x-terminology": "HistologyDifferentiation"}, "laterality": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Laterality qualifier for the location of the neoplasm(s)", "examples": [], "title": "Laterality", "x-expanded": null, "x-terminology": "LateralityQualifier"}}, "required": ["caseId", "relationship", "assertionDate", "topography", "morphology"], "title": "NeoplasticEntityCreate", "type": "object"}, "NeoplasticEntityRelationshipChoices": {"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}, "PatientCaseBundleCreate": {"properties": {"neoplasticEntities": {"description": "Neoplastic entities", "items": {"$ref": "#/components/schemas/NeoplasticEntityCreate"}, "title": "Neoplasticentities", "type": "array"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "pseudoidentifier": {"description": "Pseudoidentifier of the patient", "examples": [], "maxLength": 40, "title": "Pseudoidentifier", "type": "string", "x-expanded": null}, "clinicalCenter": {"description": "Medical center where the patient data originally resides", "examples": [], "maxLength": 200, "title": "Medical center", "type": "string", "x-expanded": null}, "clinicalIdentifier": {"description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient", "examples": [], "maxLength": 100, "title": "Clinical identifier", "type": "string", "x-expanded": null}, "consentStatus": {"allOf": [{"$ref": "#/components/schemas/PatientCaseConsentStatusChoices", "maxLength": 20}], "default": "unknown", "description": "Status of the general consent by the patient for the use of their data for research purposes", "examples": [], "title": "Consent status", "x-expanded": null}, "gender": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Gender for administrative purposes", "examples": [], "title": "Gender", "x-expanded": null, "x-terminology": "AdministrativeGender"}, "race": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Race of the patient", "examples": [], "title": "Race", "x-expanded": null, "x-terminology": "RaceCategory"}, "sexAtBirth": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Sex assigned at birth", "examples": [], "title": "Birth sex", "x-expanded": null, "x-terminology": "BirthSex"}, "genderIdentity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "", "examples": [], "title": "Gender identity", "x-expanded": null, "x-terminology": "GenderIdentity"}, "dateOfBirth": {"description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.", "examples": [], "format": "date", "title": "Date of birth", "type": "string", "x-expanded": null}, "dateOfDeath": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.", "examples": [], "title": "Date of death", "x-expanded": null}, "causeOfDeath": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the cause of death.", "examples": [], "title": "Cause of death", "x-expanded": null, "x-terminology": "CauseOfDeath"}}, "required": ["neoplasticEntities", "pseudoidentifier", "clinicalCenter", "clinicalIdentifier", "gender", "dateOfBirth"], "title": "PatientCaseBundleCreate", "type": "object"}, "PatientCaseDataCategories": {"enum": ["comorbidities-assessments", "family-histories", "genomic-signatures", "genomic-variants", "lifestyles", "comorbidities", "neoplastic-entities", "performance-status", "radiotherapies", "risk-assessments", "stagings", "surgeries", "systemic-therapies", "tumor-markers", "vitals", "tumor-board-reviews", "adverse-events", "therapy-responses"], "title": "PatientCaseDataCategories", "type": "string"}, "PatientCaseDataCompletionStatusSchema": {"properties": {"status": {"description": "Boolean indicating whether the data category has been marked as completed", "title": "Status", "type": "boolean"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Username of the person who marked the category as completed", "title": "Username"}, "timestamp": {"anyOf": [{"format": "date-time", "type": "string"}, {"type": "null"}], "description": "Username of the person who marked the category as completed", "title": "Timestamp"}}, "required": ["status"], "title": "PatientCaseDataCompletionStatusSchema", "type": "object"}, "NeoplasticEntity": {"properties": {"description": {"description": "Human-readable description of the neoplastic entity", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's neoplasm(s) are recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "relationship": {"$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices", "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.", "examples": [], "maxLength": 30, "title": "Neoplastic relationship", "x-expanded": null}, "relatedPrimaryId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.", "examples": [], "title": "Related primary neoplasm", "x-expanded": null}, "assertionDate": {"description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged", "examples": [], "format": "date", "title": "Assertion date", "type": "string", "x-expanded": null}, "topography": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Anatomical location of the neoplasm(s)", "examples": [], "title": "Topography", "x-expanded": null, "x-terminology": "CancerTopography"}, "morphology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself", "examples": [], "title": "Morphology", "x-expanded": null, "x-terminology": "CancerMorphology"}, "differentitation": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphologic differentitation characteristics of the neoplasm(s)", "examples": [], "title": "Differentiation", "x-expanded": null, "x-terminology": "HistologyDifferentiation"}, "laterality": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Laterality qualifier for the location of the neoplasm(s)", "examples": [], "title": "Laterality", "x-expanded": null, "x-terminology": "LateralityQualifier"}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "relationship", "assertionDate", "topography", "morphology"], "title": "NeoplasticEntity", "type": "object"}, "PatientCaseBundle": {"properties": {"age": {"description": "Approximate age of the patient in years", "title": "Age", "type": "integer"}, "neoplasticEntities": {"description": "Neoplastic entities", "items": {"$ref": "#/components/schemas/NeoplasticEntity"}, "title": "Neoplasticentities", "type": "array"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "pseudoidentifier": {"description": "Pseudoidentifier of the patient", "examples": [], "maxLength": 40, "title": "Pseudoidentifier", "type": "string", "x-expanded": null}, "clinicalCenter": {"description": "Medical center where the patient data originally resides", "examples": [], "maxLength": 200, "title": "Medical center", "type": "string", "x-expanded": null}, "clinicalIdentifier": {"description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient", "examples": [], "maxLength": 100, "title": "Clinical identifier", "type": "string", "x-expanded": null}, "consentStatus": {"allOf": [{"$ref": "#/components/schemas/PatientCaseConsentStatusChoices", "maxLength": 20}], "default": "unknown", "description": "Status of the general consent by the patient for the use of their data for research purposes", "examples": [], "title": "Consent status", "x-expanded": null}, "gender": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Gender for administrative purposes", "examples": [], "title": "Gender", "x-expanded": null, "x-terminology": "AdministrativeGender"}, "race": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Race of the patient", "examples": [], "title": "Race", "x-expanded": null, "x-terminology": "RaceCategory"}, "sexAtBirth": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Sex assigned at birth", "examples": [], "title": "Birth sex", "x-expanded": null, "x-terminology": "BirthSex"}, "genderIdentity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "", "examples": [], "title": "Gender identity", "x-expanded": null, "x-terminology": "GenderIdentity"}, "dateOfBirth": {"description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.", "examples": [], "format": "date", "title": "Date of birth", "type": "string", "x-expanded": null}, "isDeceased": {"description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)", "examples": [], "title": "Is deceased", "type": "boolean", "x-expanded": null}, "dateOfDeath": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.", "examples": [], "title": "Date of death", "x-expanded": null}, "causeOfDeath": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the cause of death.", "examples": [], "title": "Cause of death", "x-expanded": null, "x-terminology": "CauseOfDeath"}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}}, "required": ["age", "id", "createdAt", "updatedAt", "pseudoidentifier", "clinicalCenter", "clinicalIdentifier", "gender", "dateOfBirth", "isDeceased"], "title": "PatientCaseBundle", "type": "object"}, "NeoplasticEntityFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "relationship": {"allOf": [{"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}], "description": "Neoplastic relationship - ('Filter for single value choice',)"}, "relationship.not": {"allOf": [{"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}], "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"}, "relationship.anyOf": {"description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["primary", "metastatic", "local_recurrence", "regional_recurrence"], "title": "NeoplasticEntityRelationshipChoices", "type": "string"}, "title": "Relationship.Anyof", "type": "array"}, "relatedPrimaryId.not.exists": {"description": "Related primary neoplasm - Filter for entries without a value", "title": "Relatedprimaryid.Not.Exists", "type": "boolean"}, "relatedPrimaryId.exists": {"description": "Related primary neoplasm - Filter for entries with a value", "title": "Relatedprimaryid.Exists", "type": "boolean"}, "relatedPrimaryId": {"description": "Related primary neoplasm - Filter for reference matches", "title": "Relatedprimaryid", "type": "string"}, "relatedPrimaryId.not": {"description": "Related primary neoplasm - Filter for reference mismatches", "title": "Relatedprimaryid.Not", "type": "string"}, "relatedPrimaryId.contains": {"description": "Related primary neoplasm - Filter for partial text matches", "title": "Relatedprimaryid.Contains", "type": "string"}, "relatedPrimaryId.not.contains": {"description": "Related primary neoplasm - Filter for partial text mismatches", "title": "Relatedprimaryid.Not.Contains", "type": "string"}, "relatedPrimaryId.beginsWith": {"description": "Related primary neoplasm - Filter for entries starting with the text", "title": "Relatedprimaryid.Beginswith", "type": "string"}, "relatedPrimaryId.not.beginsWith": {"description": "Related primary neoplasm - Filter for entries not starting with the text", "title": "Relatedprimaryid.Not.Beginswith", "type": "string"}, "relatedPrimaryId.endsWith": {"description": "Related primary neoplasm - Filter for entries ending with the text", "title": "Relatedprimaryid.Endswith", "type": "string"}, "relatedPrimaryId.not.endsWith": {"description": "Related primary neoplasm - Filter for entries not ending with the text", "title": "Relatedprimaryid.Not.Endswith", "type": "string"}, "assertionDate.before": {"description": "Assertion date - Filter for entries with dates before the specified value", "format": "date", "title": "Assertiondate.Before", "type": "string"}, "assertionDate.after": {"description": "Assertion date - Filter for entries with dates after the specified value", "format": "date", "title": "Assertiondate.After", "type": "string"}, "assertionDate.onOrBefore": {"description": "Assertion date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Assertiondate.Onorbefore", "type": "string"}, "assertionDate.onOrAfter": {"description": "Assertion date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Assertiondate.Onorafter", "type": "string"}, "assertionDate.on": {"description": "Assertion date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Assertiondate.On", "type": "string"}, "assertionDate.not.on": {"description": "Assertion date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Assertiondate.Not.On", "type": "string"}, "assertionDate.between": {"description": "Assertion date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Assertiondate.Between", "type": "array"}, "assertionDate.not.between": {"description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Assertiondate.Not.Between", "type": "array"}, "topography": {"description": "Topography - Filter for a matching concept code", "title": "Topography", "type": "string"}, "topography.not": {"description": "Topography - Filter for a mismatching concept code", "title": "Topography.Not", "type": "string"}, "topography.anyOf": {"description": "Topography - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Topography.Anyof", "type": "array"}, "topography.not.anyOf": {"description": "Topography - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Topography.Not.Anyof", "type": "array"}, "topography.descendantsOf": {"description": "Topography - Filter for all child concepts of a given concepts code", "title": "Topography.Descendantsof", "type": "string"}, "morphology": {"description": "Morphology - Filter for a matching concept code", "title": "Morphology", "type": "string"}, "morphology.not": {"description": "Morphology - Filter for a mismatching concept code", "title": "Morphology.Not", "type": "string"}, "morphology.anyOf": {"description": "Morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Anyof", "type": "array"}, "morphology.not.anyOf": {"description": "Morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Not.Anyof", "type": "array"}, "morphology.descendantsOf": {"description": "Morphology - Filter for all child concepts of a given concepts code", "title": "Morphology.Descendantsof", "type": "string"}, "differentitation.not.exists": {"description": "Differentiation - Filter for entries without a value", "title": "Differentitation.Not.Exists", "type": "boolean"}, "differentitation.exists": {"description": "Differentiation - Filter for entries with a value", "title": "Differentitation.Exists", "type": "boolean"}, "differentitation": {"description": "Differentiation - Filter for a matching concept code", "title": "Differentitation", "type": "string"}, "differentitation.not": {"description": "Differentiation - Filter for a mismatching concept code", "title": "Differentitation.Not", "type": "string"}, "differentitation.anyOf": {"description": "Differentiation - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Differentitation.Anyof", "type": "array"}, "differentitation.not.anyOf": {"description": "Differentiation - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Differentitation.Not.Anyof", "type": "array"}, "differentitation.descendantsOf": {"description": "Differentiation - Filter for all child concepts of a given concepts code", "title": "Differentitation.Descendantsof", "type": "string"}, "laterality.not.exists": {"description": "Laterality - Filter for entries without a value", "title": "Laterality.Not.Exists", "type": "boolean"}, "laterality.exists": {"description": "Laterality - Filter for entries with a value", "title": "Laterality.Exists", "type": "boolean"}, "laterality": {"description": "Laterality - Filter for a matching concept code", "title": "Laterality", "type": "string"}, "laterality.not": {"description": "Laterality - Filter for a mismatching concept code", "title": "Laterality.Not", "type": "string"}, "laterality.anyOf": {"description": "Laterality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Laterality.Anyof", "type": "array"}, "laterality.not.anyOf": {"description": "Laterality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Laterality.Not.Anyof", "type": "array"}, "laterality.descendantsOf": {"description": "Laterality - Filter for all child concepts of a given concepts code", "title": "Laterality.Descendantsof", "type": "string"}}, "title": "NeoplasticEntityFilters", "type": "object"}, "Paginated_NeoplasticEntity_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/NeoplasticEntity"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[NeoplasticEntity]", "type": "object"}, "BinetStagingCreate": {"properties": {"stagingDomain": {"const": "binet", "default": "binet", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Binet stage", "examples": [], "title": "Binet Stage", "x-expanded": null, "x-terminology": "BinetStage"}}, "required": ["caseId", "date", "stage"], "title": "BinetStagingCreate", "type": "object"}, "BreslowDepthCreate": {"properties": {"stagingDomain": {"const": "breslow", "default": "breslow", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "depth": {"description": "Breslow depth given in milimeters", "examples": [], "title": "Breslow depth", "type": "number", "x-expanded": null}, "isUlcered": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the primary tumour presents ulceration", "examples": [], "title": "Ulcered", "x-expanded": null}}, "required": ["caseId", "date", "depth"], "title": "BreslowDepthCreate", "type": "object"}, "ClarkStagingCreate": {"properties": {"stagingDomain": {"const": "clark", "default": "clark", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Clark level stage", "examples": [], "title": "Clark Level Stage", "x-expanded": null, "x-terminology": "ClarkLevel"}}, "required": ["caseId", "date", "stage"], "title": "ClarkStagingCreate", "type": "object"}, "FIGOStagingCreate": {"properties": {"stagingDomain": {"const": "figo", "default": "figo", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the FIGO stage", "examples": [], "title": "FIGO Stage", "x-expanded": null, "x-terminology": "FIGOStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the FIGO staging", "examples": [], "title": "FIGO staging methodology", "x-expanded": null, "x-terminology": "FIGOStagingMethod"}}, "required": ["caseId", "date", "stage"], "title": "FIGOStagingCreate", "type": "object"}, "GleasonGradeCreate": {"properties": {"stagingDomain": {"const": "gleason", "default": "gleason", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Gleason grade stage", "examples": [], "title": "Gleason grade Stage", "x-expanded": null, "x-terminology": "GleasonGradeGroupStage"}}, "required": ["caseId", "date", "stage"], "title": "GleasonGradeCreate", "type": "object"}, "INRGSSStageCreate": {"properties": {"stagingDomain": {"const": "inrgss", "default": "inrgss", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the INRGSS stage", "examples": [], "title": "INRGSS Stage", "x-expanded": null, "x-terminology": "NeuroblastomaINRGSSStage"}}, "required": ["caseId", "date", "stage"], "title": "INRGSSStageCreate", "type": "object"}, "INSSStageCreate": {"properties": {"stagingDomain": {"const": "inss", "default": "inss", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the INSS stage", "examples": [], "title": "INSS Stage", "x-expanded": null, "x-terminology": "NeuroblastomaINSSStage"}}, "required": ["caseId", "date", "stage"], "title": "INSSStageCreate", "type": "object"}, "ISSStagingCreate": {"properties": {"stagingDomain": {"const": "iss", "default": "iss", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of theISS stage", "examples": [], "title": "ISS Stage", "x-expanded": null, "x-terminology": "MyelomaISSStage"}}, "required": ["caseId", "date", "stage"], "title": "ISSStagingCreate", "type": "object"}, "LymphomaStagingCreate": {"properties": {"stagingDomain": {"const": "lymphoma", "default": "lymphoma", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Lymphoma stage", "examples": [], "title": "Lymphoma Stage", "x-expanded": null, "x-terminology": "LymphomaStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the Lymphoma staging", "examples": [], "title": "Lymphoma staging methodology", "x-expanded": null, "x-terminology": "LymphomaStagingMethod"}, "bulky": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.", "examples": [], "title": "Bulky disease modifier", "x-expanded": null}, "pathological": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the staging was based on clinical or pathologic evidence.", "examples": [], "title": "Pathological staging", "x-expanded": null}, "modifiers": {"default": [], "description": "Qualifier acting as modifier for the lymphoma stage", "examples": [], "items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Lymphoma stage modifier", "type": "array", "x-expanded": null, "x-terminology": "LymphomaStageValueModifier"}}, "required": ["caseId", "date", "stage"], "title": "LymphomaStagingCreate", "type": "object"}, "RISSStagingCreate": {"properties": {"stagingDomain": {"const": "riss", "default": "riss", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the RISS stage", "examples": [], "title": "RISS Stage", "x-expanded": null, "x-terminology": "MyelomaRISSStage"}}, "required": ["caseId", "date", "stage"], "title": "RISSStagingCreate", "type": "object"}, "RaiStagingCreate": {"properties": {"stagingDomain": {"const": "rai", "default": "rai", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Rai stage", "examples": [], "title": "Rai Stage", "x-expanded": null, "x-terminology": "RaiStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the Rai staging", "examples": [], "title": "Rai staging methodology", "x-expanded": null, "x-terminology": "RaiStagingMethod"}}, "required": ["caseId", "date", "stage"], "title": "RaiStagingCreate", "type": "object"}, "RhabdomyosarcomaClinicalGroupCreate": {"properties": {"stagingDomain": {"const": "rhabdomyosarcoma", "default": "rhabdomyosarcoma", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the rhabdomyosarcoma clinical group", "examples": [], "title": "Rhabdomyosarcoma clinical group", "x-expanded": null, "x-terminology": "RhabdomyosarcomaClinicalGroup"}}, "required": ["caseId", "date", "stage"], "title": "RhabdomyosarcomaClinicalGroupCreate", "type": "object"}, "TNMStagingCreate": {"properties": {"stagingDomain": {"const": "tnm", "default": "tnm", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The information determined as a result of making the observation, if the information has a simple value", "examples": [], "title": "TNM Stage", "x-expanded": null, "x-terminology": "TNMStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for TNM staging", "examples": [], "title": "TNM Staging methodology", "x-expanded": null, "x-terminology": "TNMStagingMethod"}, "pathological": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.", "examples": [], "title": "Pathological staging", "x-expanded": null}, "primarytumor": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "T stage (extent of the primary tumor)", "examples": [], "title": "T Stage", "x-expanded": null, "x-terminology": "TNMPrimaryTumorCategory"}, "regionalnodes": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "N stage (degree of spread to regional lymph nodes)", "examples": [], "title": "N Stage", "x-expanded": null, "x-terminology": "TNMRegionalNodesCategory"}, "distantmetastases": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "M stage (presence of distant metastasis)", "examples": [], "title": "M Stage", "x-expanded": null, "x-terminology": "TNMDistantMetastasesCategory"}, "grade": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "G stage (grade of the cancer cells)", "examples": [], "title": "G Stage", "x-expanded": null, "x-terminology": "TNMGradeCategory"}, "residualtumor": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "R stage (extent of residual tumor cells after operation)", "examples": [], "title": "R Stage", "x-expanded": null, "x-terminology": "TNMResidualTumorCategory"}, "lymphaticinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "L stage (invasion into lymphatic vessels)", "examples": [], "title": "L Stage", "x-expanded": null, "x-terminology": "TNMLymphaticInvasionCategory"}, "venousinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "V stage (invasion into venous vessels)", "examples": [], "title": "V Stage", "x-expanded": null, "x-terminology": "TNMVenousInvasionCategory"}, "perineuralinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Pn stage (invasion into adjunct nerves)", "examples": [], "title": "Pn Stage", "x-expanded": null, "x-terminology": "TNMPerineuralInvasionCategory"}, "serumtumormarkerlevel": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "S stage (serum tumor marker level)", "examples": [], "title": "S Stage", "x-expanded": null, "x-terminology": "TNMSerumTumorMarkerLevelCategory"}}, "required": ["caseId", "date", "stage"], "title": "TNMStagingCreate", "type": "object"}, "WilmsStageCreate": {"properties": {"stagingDomain": {"const": "wilms", "default": "wilms", "title": "Stagingdomain", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Wilms stage", "examples": [], "title": "Wilms Stage", "x-expanded": null, "x-terminology": "WilmsTumorStage"}}, "required": ["caseId", "date", "stage"], "title": "WilmsStageCreate", "type": "object"}, "StagingDomain": {"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}, "StagingFilters": {"properties": {"stagingDomain": {"allOf": [{"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}], "description": "None - ('Filter for single value choice',)"}, "stagingDomain.not": {"allOf": [{"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}], "description": "None - ('Filter for all but a single value choice',)"}, "stagingDomain.anyOf": {"description": "None - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["tnm", "figo", "binet", "rai", "breslow", "clark", "iss", "riss", "inss", "inrgss", "gleason", "rhabdomyosarcoma", "wilms", "lymphoma"], "title": "StagingDomain", "type": "string"}, "title": "Stagingdomain.Anyof", "type": "array"}, "stage": {"description": "None - Filter for a matching concept code", "title": "Stage", "type": "string"}, "stage.not": {"description": "None - Filter for a mismatching concept code", "title": "Stage.Not", "type": "string"}, "stage.anyOf": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Stage.Anyof", "type": "array"}, "stage.not.anyOf": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Stage.Not.Anyof", "type": "array"}, "stage.descendantsOf": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Stage.Descendantsof", "type": "string"}, "id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Staging date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Staging date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Staging date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Staging date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Staging date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Staging date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Staging date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Staging date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "stagedEntitiesIds": {"description": "Staged neoplastic entities - Filter for reference matches", "title": "Stagedentitiesids", "type": "string"}, "stagedEntitiesIds.not": {"description": "Staged neoplastic entities - Filter for reference mismatches", "title": "Stagedentitiesids.Not", "type": "string"}}, "title": "StagingFilters", "type": "object"}, "AnyStaging": {"anyOf": [{"$ref": "#/components/schemas/TNMStaging"}, {"$ref": "#/components/schemas/FIGOStaging"}, {"$ref": "#/components/schemas/BinetStaging"}, {"$ref": "#/components/schemas/RaiStaging"}, {"$ref": "#/components/schemas/BreslowDepth"}, {"$ref": "#/components/schemas/ClarkStaging"}, {"$ref": "#/components/schemas/ISSStaging"}, {"$ref": "#/components/schemas/RISSStaging"}, {"$ref": "#/components/schemas/GleasonGrade"}, {"$ref": "#/components/schemas/INSSStage"}, {"$ref": "#/components/schemas/INRGSSStage"}, {"$ref": "#/components/schemas/WilmsStage"}, {"$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroup"}, {"$ref": "#/components/schemas/LymphomaStaging"}]}, "BinetStaging": {"properties": {"stagingDomain": {"const": "binet", "default": "binet", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Binet stage", "examples": [], "title": "Binet Stage", "x-expanded": null, "x-terminology": "BinetStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "BinetStaging", "type": "object"}, "BreslowDepth": {"properties": {"stagingDomain": {"const": "breslow", "default": "breslow", "title": "Stagingdomain", "type": "string"}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "depth": {"description": "Breslow depth given in milimeters", "examples": [], "title": "Breslow depth", "type": "number", "x-expanded": null}, "isUlcered": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the primary tumour presents ulceration", "examples": [], "title": "Ulcered", "x-expanded": null}}, "required": ["stage", "description", "id", "createdAt", "updatedAt", "caseId", "date", "depth"], "title": "BreslowDepth", "type": "object"}, "ClarkStaging": {"properties": {"stagingDomain": {"const": "clark", "default": "clark", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Clark level stage", "examples": [], "title": "Clark Level Stage", "x-expanded": null, "x-terminology": "ClarkLevel"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "ClarkStaging", "type": "object"}, "FIGOStaging": {"properties": {"stagingDomain": {"const": "figo", "default": "figo", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the FIGO stage", "examples": [], "title": "FIGO Stage", "x-expanded": null, "x-terminology": "FIGOStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the FIGO staging", "examples": [], "title": "FIGO staging methodology", "x-expanded": null, "x-terminology": "FIGOStagingMethod"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "FIGOStaging", "type": "object"}, "GleasonGrade": {"properties": {"stagingDomain": {"const": "gleason", "default": "gleason", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Gleason grade stage", "examples": [], "title": "Gleason grade Stage", "x-expanded": null, "x-terminology": "GleasonGradeGroupStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "GleasonGrade", "type": "object"}, "INRGSSStage": {"properties": {"stagingDomain": {"const": "inrgss", "default": "inrgss", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the INRGSS stage", "examples": [], "title": "INRGSS Stage", "x-expanded": null, "x-terminology": "NeuroblastomaINRGSSStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "INRGSSStage", "type": "object"}, "INSSStage": {"properties": {"stagingDomain": {"const": "inss", "default": "inss", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the INSS stage", "examples": [], "title": "INSS Stage", "x-expanded": null, "x-terminology": "NeuroblastomaINSSStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "INSSStage", "type": "object"}, "ISSStaging": {"properties": {"stagingDomain": {"const": "iss", "default": "iss", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of theISS stage", "examples": [], "title": "ISS Stage", "x-expanded": null, "x-terminology": "MyelomaISSStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "ISSStaging", "type": "object"}, "LymphomaStaging": {"properties": {"stagingDomain": {"const": "lymphoma", "default": "lymphoma", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Lymphoma stage", "examples": [], "title": "Lymphoma Stage", "x-expanded": null, "x-terminology": "LymphomaStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the Lymphoma staging", "examples": [], "title": "Lymphoma staging methodology", "x-expanded": null, "x-terminology": "LymphomaStagingMethod"}, "bulky": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.", "examples": [], "title": "Bulky disease modifier", "x-expanded": null}, "pathological": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the staging was based on clinical or pathologic evidence.", "examples": [], "title": "Pathological staging", "x-expanded": null}, "modifiers": {"default": [], "description": "Qualifier acting as modifier for the lymphoma stage", "examples": [], "items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Lymphoma stage modifier", "type": "array", "x-expanded": null, "x-terminology": "LymphomaStageValueModifier"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "LymphomaStaging", "type": "object"}, "Paginated_AnyStaging_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/AnyStaging"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[AnyStaging]", "type": "object"}, "RISSStaging": {"properties": {"stagingDomain": {"const": "riss", "default": "riss", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the RISS stage", "examples": [], "title": "RISS Stage", "x-expanded": null, "x-terminology": "MyelomaRISSStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "RISSStaging", "type": "object"}, "RaiStaging": {"properties": {"stagingDomain": {"const": "rai", "default": "rai", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Rai stage", "examples": [], "title": "Rai Stage", "x-expanded": null, "x-terminology": "RaiStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for the Rai staging", "examples": [], "title": "Rai staging methodology", "x-expanded": null, "x-terminology": "RaiStagingMethod"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "RaiStaging", "type": "object"}, "RhabdomyosarcomaClinicalGroup": {"properties": {"stagingDomain": {"const": "rhabdomyosarcoma", "default": "rhabdomyosarcoma", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the rhabdomyosarcoma clinical group", "examples": [], "title": "Rhabdomyosarcoma clinical group", "x-expanded": null, "x-terminology": "RhabdomyosarcomaClinicalGroup"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "RhabdomyosarcomaClinicalGroup", "type": "object"}, "TNMStaging": {"properties": {"stagingDomain": {"const": "tnm", "default": "tnm", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The information determined as a result of making the observation, if the information has a simple value", "examples": [], "title": "TNM Stage", "x-expanded": null, "x-terminology": "TNMStage"}, "methodology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Methodology used for TNM staging", "examples": [], "title": "TNM Staging methodology", "x-expanded": null, "x-terminology": "TNMStagingMethod"}, "pathological": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.", "examples": [], "title": "Pathological staging", "x-expanded": null}, "primarytumor": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "T stage (extent of the primary tumor)", "examples": [], "title": "T Stage", "x-expanded": null, "x-terminology": "TNMPrimaryTumorCategory"}, "regionalnodes": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "N stage (degree of spread to regional lymph nodes)", "examples": [], "title": "N Stage", "x-expanded": null, "x-terminology": "TNMRegionalNodesCategory"}, "distantmetastases": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "M stage (presence of distant metastasis)", "examples": [], "title": "M Stage", "x-expanded": null, "x-terminology": "TNMDistantMetastasesCategory"}, "grade": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "G stage (grade of the cancer cells)", "examples": [], "title": "G Stage", "x-expanded": null, "x-terminology": "TNMGradeCategory"}, "residualtumor": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "R stage (extent of residual tumor cells after operation)", "examples": [], "title": "R Stage", "x-expanded": null, "x-terminology": "TNMResidualTumorCategory"}, "lymphaticinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "L stage (invasion into lymphatic vessels)", "examples": [], "title": "L Stage", "x-expanded": null, "x-terminology": "TNMLymphaticInvasionCategory"}, "venousinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "V stage (invasion into venous vessels)", "examples": [], "title": "V Stage", "x-expanded": null, "x-terminology": "TNMVenousInvasionCategory"}, "perineuralinvasion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Pn stage (invasion into adjunct nerves)", "examples": [], "title": "Pn Stage", "x-expanded": null, "x-terminology": "TNMPerineuralInvasionCategory"}, "serumtumormarkerlevel": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "S stage (serum tumor marker level)", "examples": [], "title": "S Stage", "x-expanded": null, "x-terminology": "TNMSerumTumorMarkerLevelCategory"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "TNMStaging", "type": "object"}, "WilmsStage": {"properties": {"stagingDomain": {"const": "wilms", "default": "wilms", "title": "Stagingdomain", "type": "string"}, "description": {"description": "Human-readable description of the staging", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer is staged", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the staging was performed and recorded.", "examples": [], "format": "date", "title": "Staging date", "type": "string", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "stagedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the staging.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Staged neoplastic entities", "type": "array", "x-expanded": null}, "stage": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The value of the Wilms stage", "examples": [], "title": "Wilms Stage", "x-expanded": null, "x-terminology": "WilmsTumorStage"}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "stage"], "title": "WilmsStage", "type": "object"}, "RiskAssessmentCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer risk is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the risk assessment was performed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "methodology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Indicates the method or type of risk assessment", "examples": [], "title": "Assessment methodology", "x-expanded": null, "x-terminology": "CancerRiskAssessmentMethod"}, "risk": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Assessed risk", "examples": [], "title": "Risk", "x-expanded": null, "x-terminology": "CancerRiskAssessmentClassification"}, "score": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Quantitative score used to classify the risk", "examples": [], "title": "Score", "x-expanded": null}, "assessedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were assessed to estimate the risk.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Assessed neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["caseId", "date", "methodology", "risk"], "title": "RiskAssessmentCreate", "type": "object"}, "RiskAssessmentFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "methodology": {"description": "Assessment methodology - Filter for a matching concept code", "title": "Methodology", "type": "string"}, "methodology.not": {"description": "Assessment methodology - Filter for a mismatching concept code", "title": "Methodology.Not", "type": "string"}, "methodology.anyOf": {"description": "Assessment methodology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Anyof", "type": "array"}, "methodology.not.anyOf": {"description": "Assessment methodology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Not.Anyof", "type": "array"}, "methodology.descendantsOf": {"description": "Assessment methodology - Filter for all child concepts of a given concepts code", "title": "Methodology.Descendantsof", "type": "string"}, "risk": {"description": "Risk - Filter for a matching concept code", "title": "Risk", "type": "string"}, "risk.not": {"description": "Risk - Filter for a mismatching concept code", "title": "Risk.Not", "type": "string"}, "risk.anyOf": {"description": "Risk - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Risk.Anyof", "type": "array"}, "risk.not.anyOf": {"description": "Risk - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Risk.Not.Anyof", "type": "array"}, "risk.descendantsOf": {"description": "Risk - Filter for all child concepts of a given concepts code", "title": "Risk.Descendantsof", "type": "string"}, "score.not.exists": {"description": "Score - Filter for entries without a value", "title": "Score.Not.Exists", "type": "boolean"}, "score.exists": {"description": "Score - Filter for entries with a value", "title": "Score.Exists", "type": "boolean"}, "score.lessThan": {"description": "Score - Filter for entries with values less than the specified value", "title": "Score.Lessthan", "type": "number"}, "score.lessThanOrEqual": {"description": "Score - Filter for entries with values less than or equal to the specified value", "title": "Score.Lessthanorequal", "type": "number"}, "score.greaterThan": {"description": "Score - Filter for entries with values greater than the specified value", "title": "Score.Greaterthan", "type": "number"}, "score.greaterThanOrEqual": {"description": "Score - Filter for entries with values greater than or equal to the specified value", "title": "Score.Greaterthanorequal", "type": "number"}, "score.equal": {"description": "Score - Filter for entries with values exactly equal to the specified value", "title": "Score.Equal", "type": "number"}, "score.not.equal": {"description": "Score - Filter for entries with values not equal to the specified value", "title": "Score.Not.Equal", "type": "number"}, "score.between": {"description": "Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Score.Between", "type": "array"}, "score.not.between": {"description": "Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Score.Not.Between", "type": "array"}, "assessedEntitiesIds": {"description": "Assessed neoplastic entities - Filter for reference matches", "title": "Assessedentitiesids", "type": "string"}, "assessedEntitiesIds.not": {"description": "Assessed neoplastic entities - Filter for reference mismatches", "title": "Assessedentitiesids.Not", "type": "string"}}, "title": "RiskAssessmentFilters", "type": "object"}, "Paginated_RiskAssessment_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/RiskAssessment"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[RiskAssessment]", "type": "object"}, "RiskAssessment": {"properties": {"description": {"description": "Human-readable description of the tumor marker", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's cancer risk is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the risk assessment was performed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "methodology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Indicates the method or type of risk assessment", "examples": [], "title": "Assessment methodology", "x-expanded": null, "x-terminology": "CancerRiskAssessmentMethod"}, "risk": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Assessed risk", "examples": [], "title": "Risk", "x-expanded": null, "x-terminology": "CancerRiskAssessmentClassification"}, "score": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Quantitative score used to classify the risk", "examples": [], "title": "Score", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "assessedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were assessed to estimate the risk.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Assessed neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "methodology", "risk"], "title": "RiskAssessment", "type": "object"}, "MeasureSchema": {"description": "Represents a measure value with its unit.\n\nAttributes:\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.", "properties": {"value": {"title": "Value", "type": "number"}, "unit": {"title": "Unit", "type": "string"}}, "required": ["value", "unit"], "title": "Measure", "type": "object"}, "TumorMarkerCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient related to the tumor marker result", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the tumor marker was analyzed.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "analyte": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The chemical or biological substance/agent that is analyzed.", "examples": [], "title": "Analyte", "x-expanded": null, "x-terminology": "TumorMarkerAnalyte"}, "massConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Mass concentration of the analyte (if revelant/measured)", "examples": [], "title": "Mass concentration", "x-expanded": null}, "arbitraryConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Arbitrary concentration of the analyte (if revelant/measured)", "examples": [], "title": "Arbitrary concentration", "x-expanded": null}, "substanceConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Substance concentration of the analyte (if revelant/measured)", "examples": [], "title": "Substance concentration", "x-expanded": null}, "fraction": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Analyte fraction (if revelant/measured)", "examples": [], "title": "Fraction", "x-expanded": null}, "multipleOfMedian": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Multiples of the median analyte (if revelant/measured)", "examples": [], "title": "Multiples of the median", "x-expanded": null}, "tumorProportionScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the percentage of cells in a tumor that express PD-L1", "examples": [], "title": "Immune Cells Score (ICS)", "x-expanded": null}, "immuneCellScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the percentage of PD-L1 positive immune cells", "examples": [], "title": "Immune Cells Score (ICS)", "x-expanded": null}, "combinedPositiveScore": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100", "examples": [], "title": "Combined Positive Score (CPS)", "x-expanded": null}, "immunohistochemicalScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the number of analyte-positive cells in a sample", "examples": [], "title": "Immunohistochemical Score", "x-expanded": null}, "presence": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerPresenceChoices", "maxLength": 50}, {"type": "null"}], "description": "Whether an analyte has tested positive or negative.", "examples": [], "title": "Presence", "x-expanded": null}, "nuclearExpressionStatus": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the status of expression of the analyte", "examples": [], "title": "Nuclear expression status", "x-expanded": null}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["caseId", "date", "analyte"], "title": "TumorMarkerCreate", "type": "object"}, "TumorMarkerImmuneCellScoreChoices": {"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}, "TumorMarkerImmunohistochemicalScoreChoices": {"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}, "TumorMarkerNuclearExpressionStatusChoices": {"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}, "TumorMarkerPresenceChoices": {"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}, "TumorMarkerTumorProportionScoreChoices": {"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}, "TumorMarkerFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "analyte": {"description": "Analyte - Filter for a matching concept code", "title": "Analyte", "type": "string"}, "analyte.not": {"description": "Analyte - Filter for a mismatching concept code", "title": "Analyte.Not", "type": "string"}, "analyte.anyOf": {"description": "Analyte - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Analyte.Anyof", "type": "array"}, "analyte.not.anyOf": {"description": "Analyte - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Analyte.Not.Anyof", "type": "array"}, "analyte.descendantsOf": {"description": "Analyte - Filter for all child concepts of a given concepts code", "title": "Analyte.Descendantsof", "type": "string"}, "massConcentration.not.exists": {"description": "Mass concentration - Filter for entries without a value", "title": "Massconcentration.Not.Exists", "type": "boolean"}, "massConcentration.exists": {"description": "Mass concentration - Filter for entries with a value", "title": "Massconcentration.Exists", "type": "boolean"}, "massConcentration.lessThan": {"description": "Mass concentration - Filter for entries with values less than the specified value", "title": "Massconcentration.Lessthan", "type": "number"}, "massConcentration.lessThanOrEqual": {"description": "Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Massconcentration.Lessthanorequal", "type": "number"}, "massConcentration.greaterThan": {"description": "Mass concentration - Filter for entries with values greater than the specified value", "title": "Massconcentration.Greaterthan", "type": "number"}, "massConcentration.greaterThanOrEqual": {"description": "Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Massconcentration.Greaterthanorequal", "type": "number"}, "massConcentration.equal": {"description": "Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Massconcentration.Equal", "type": "number"}, "massConcentration.not.equal": {"description": "Mass concentration - Filter for entries with values not equal to the specified value", "title": "Massconcentration.Not.Equal", "type": "number"}, "massConcentration.between": {"description": "Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Massconcentration.Between", "type": "array"}, "massConcentration.not.between": {"description": "Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Massconcentration.Not.Between", "type": "array"}, "arbitraryConcentration.not.exists": {"description": "Arbitrary concentration - Filter for entries without a value", "title": "Arbitraryconcentration.Not.Exists", "type": "boolean"}, "arbitraryConcentration.exists": {"description": "Arbitrary concentration - Filter for entries with a value", "title": "Arbitraryconcentration.Exists", "type": "boolean"}, "arbitraryConcentration.lessThan": {"description": "Arbitrary concentration - Filter for entries with values less than the specified value", "title": "Arbitraryconcentration.Lessthan", "type": "number"}, "arbitraryConcentration.lessThanOrEqual": {"description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value", "title": "Arbitraryconcentration.Lessthanorequal", "type": "number"}, "arbitraryConcentration.greaterThan": {"description": "Arbitrary concentration - Filter for entries with values greater than the specified value", "title": "Arbitraryconcentration.Greaterthan", "type": "number"}, "arbitraryConcentration.greaterThanOrEqual": {"description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value", "title": "Arbitraryconcentration.Greaterthanorequal", "type": "number"}, "arbitraryConcentration.equal": {"description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value", "title": "Arbitraryconcentration.Equal", "type": "number"}, "arbitraryConcentration.not.equal": {"description": "Arbitrary concentration - Filter for entries with values not equal to the specified value", "title": "Arbitraryconcentration.Not.Equal", "type": "number"}, "arbitraryConcentration.between": {"description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Arbitraryconcentration.Between", "type": "array"}, "arbitraryConcentration.not.between": {"description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Arbitraryconcentration.Not.Between", "type": "array"}, "substanceConcentration.not.exists": {"description": "Substance concentration - Filter for entries without a value", "title": "Substanceconcentration.Not.Exists", "type": "boolean"}, "substanceConcentration.exists": {"description": "Substance concentration - Filter for entries with a value", "title": "Substanceconcentration.Exists", "type": "boolean"}, "substanceConcentration.lessThan": {"description": "Substance concentration - Filter for entries with values less than the specified value", "title": "Substanceconcentration.Lessthan", "type": "number"}, "substanceConcentration.lessThanOrEqual": {"description": "Substance concentration - Filter for entries with values less than or equal to the specified value", "title": "Substanceconcentration.Lessthanorequal", "type": "number"}, "substanceConcentration.greaterThan": {"description": "Substance concentration - Filter for entries with values greater than the specified value", "title": "Substanceconcentration.Greaterthan", "type": "number"}, "substanceConcentration.greaterThanOrEqual": {"description": "Substance concentration - Filter for entries with values greater than or equal to the specified value", "title": "Substanceconcentration.Greaterthanorequal", "type": "number"}, "substanceConcentration.equal": {"description": "Substance concentration - Filter for entries with values exactly equal to the specified value", "title": "Substanceconcentration.Equal", "type": "number"}, "substanceConcentration.not.equal": {"description": "Substance concentration - Filter for entries with values not equal to the specified value", "title": "Substanceconcentration.Not.Equal", "type": "number"}, "substanceConcentration.between": {"description": "Substance concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Substanceconcentration.Between", "type": "array"}, "substanceConcentration.not.between": {"description": "Substance concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Substanceconcentration.Not.Between", "type": "array"}, "fraction.not.exists": {"description": "Fraction - Filter for entries without a value", "title": "Fraction.Not.Exists", "type": "boolean"}, "fraction.exists": {"description": "Fraction - Filter for entries with a value", "title": "Fraction.Exists", "type": "boolean"}, "fraction.lessThan": {"description": "Fraction - Filter for entries with values less than the specified value", "title": "Fraction.Lessthan", "type": "number"}, "fraction.lessThanOrEqual": {"description": "Fraction - Filter for entries with values less than or equal to the specified value", "title": "Fraction.Lessthanorequal", "type": "number"}, "fraction.greaterThan": {"description": "Fraction - Filter for entries with values greater than the specified value", "title": "Fraction.Greaterthan", "type": "number"}, "fraction.greaterThanOrEqual": {"description": "Fraction - Filter for entries with values greater than or equal to the specified value", "title": "Fraction.Greaterthanorequal", "type": "number"}, "fraction.equal": {"description": "Fraction - Filter for entries with values exactly equal to the specified value", "title": "Fraction.Equal", "type": "number"}, "fraction.not.equal": {"description": "Fraction - Filter for entries with values not equal to the specified value", "title": "Fraction.Not.Equal", "type": "number"}, "fraction.between": {"description": "Fraction - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Fraction.Between", "type": "array"}, "fraction.not.between": {"description": "Fraction - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Fraction.Not.Between", "type": "array"}, "multipleOfMedian.not.exists": {"description": "Multiples of the median - Filter for entries without a value", "title": "Multipleofmedian.Not.Exists", "type": "boolean"}, "multipleOfMedian.exists": {"description": "Multiples of the median - Filter for entries with a value", "title": "Multipleofmedian.Exists", "type": "boolean"}, "multipleOfMedian.lessThan": {"description": "Multiples of the median - Filter for entries with values less than the specified value", "title": "Multipleofmedian.Lessthan", "type": "number"}, "multipleOfMedian.lessThanOrEqual": {"description": "Multiples of the median - Filter for entries with values less than or equal to the specified value", "title": "Multipleofmedian.Lessthanorequal", "type": "number"}, "multipleOfMedian.greaterThan": {"description": "Multiples of the median - Filter for entries with values greater than the specified value", "title": "Multipleofmedian.Greaterthan", "type": "number"}, "multipleOfMedian.greaterThanOrEqual": {"description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value", "title": "Multipleofmedian.Greaterthanorequal", "type": "number"}, "multipleOfMedian.equal": {"description": "Multiples of the median - Filter for entries with values exactly equal to the specified value", "title": "Multipleofmedian.Equal", "type": "number"}, "multipleOfMedian.not.equal": {"description": "Multiples of the median - Filter for entries with values not equal to the specified value", "title": "Multipleofmedian.Not.Equal", "type": "number"}, "multipleOfMedian.between": {"description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Multipleofmedian.Between", "type": "array"}, "multipleOfMedian.not.between": {"description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Multipleofmedian.Not.Between", "type": "array"}, "tumorProportionScore.not.exists": {"description": "Immune Cells Score (ICS) - Filter for entries without a value", "title": "Tumorproportionscore.Not.Exists", "type": "boolean"}, "tumorProportionScore.exists": {"description": "Immune Cells Score (ICS) - Filter for entries with a value", "title": "Tumorproportionscore.Exists", "type": "boolean"}, "tumorProportionScore": {"allOf": [{"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, "tumorProportionScore.not": {"allOf": [{"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, "tumorProportionScore.anyOf": {"description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["TC0", "TC1", "TC2", "TC3"], "title": "TumorMarkerTumorProportionScoreChoices", "type": "string"}, "title": "Tumorproportionscore.Anyof", "type": "array"}, "immuneCellScore.not.exists": {"description": "Immune Cells Score (ICS) - Filter for entries without a value", "title": "Immunecellscore.Not.Exists", "type": "boolean"}, "immuneCellScore.exists": {"description": "Immune Cells Score (ICS) - Filter for entries with a value", "title": "Immunecellscore.Exists", "type": "boolean"}, "immuneCellScore": {"allOf": [{"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"}, "immuneCellScore.not": {"allOf": [{"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}], "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"}, "immuneCellScore.anyOf": {"description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["IC0", "IC1", "IC2", "IC3"], "title": "TumorMarkerImmuneCellScoreChoices", "type": "string"}, "title": "Immunecellscore.Anyof", "type": "array"}, "combinedPositiveScore.not.exists": {"description": "Combined Positive Score (CPS) - Filter for entries without a value", "title": "Combinedpositivescore.Not.Exists", "type": "boolean"}, "combinedPositiveScore.exists": {"description": "Combined Positive Score (CPS) - Filter for entries with a value", "title": "Combinedpositivescore.Exists", "type": "boolean"}, "combinedPositiveScore.lessThan": {"description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value", "title": "Combinedpositivescore.Lessthan", "type": "number"}, "combinedPositiveScore.lessThanOrEqual": {"description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value", "title": "Combinedpositivescore.Lessthanorequal", "type": "number"}, "combinedPositiveScore.greaterThan": {"description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value", "title": "Combinedpositivescore.Greaterthan", "type": "number"}, "combinedPositiveScore.greaterThanOrEqual": {"description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value", "title": "Combinedpositivescore.Greaterthanorequal", "type": "number"}, "combinedPositiveScore.equal": {"description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value", "title": "Combinedpositivescore.Equal", "type": "number"}, "combinedPositiveScore.not.equal": {"description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value", "title": "Combinedpositivescore.Not.Equal", "type": "number"}, "combinedPositiveScore.between": {"description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Combinedpositivescore.Between", "type": "array"}, "combinedPositiveScore.not.between": {"description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Combinedpositivescore.Not.Between", "type": "array"}, "immunohistochemicalScore.not.exists": {"description": "Immunohistochemical Score - Filter for entries without a value", "title": "Immunohistochemicalscore.Not.Exists", "type": "boolean"}, "immunohistochemicalScore.exists": {"description": "Immunohistochemical Score - Filter for entries with a value", "title": "Immunohistochemicalscore.Exists", "type": "boolean"}, "immunohistochemicalScore": {"allOf": [{"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}], "description": "Immunohistochemical Score - ('Filter for single value choice',)"}, "immunohistochemicalScore.not": {"allOf": [{"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}], "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"}, "immunohistochemicalScore.anyOf": {"description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["0", "1+", "2+", "3+", "indeterminate"], "title": "TumorMarkerImmunohistochemicalScoreChoices", "type": "string"}, "title": "Immunohistochemicalscore.Anyof", "type": "array"}, "presence.not.exists": {"description": "Presence - Filter for entries without a value", "title": "Presence.Not.Exists", "type": "boolean"}, "presence.exists": {"description": "Presence - Filter for entries with a value", "title": "Presence.Exists", "type": "boolean"}, "presence": {"allOf": [{"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}], "description": "Presence - ('Filter for single value choice',)"}, "presence.not": {"allOf": [{"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}], "description": "Presence - ('Filter for all but a single value choice',)"}, "presence.anyOf": {"description": "Presence - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["positive", "negative", "indeterminate"], "title": "TumorMarkerPresenceChoices", "type": "string"}, "title": "Presence.Anyof", "type": "array"}, "nuclearExpressionStatus.not.exists": {"description": "Nuclear expression status - Filter for entries without a value", "title": "Nuclearexpressionstatus.Not.Exists", "type": "boolean"}, "nuclearExpressionStatus.exists": {"description": "Nuclear expression status - Filter for entries with a value", "title": "Nuclearexpressionstatus.Exists", "type": "boolean"}, "nuclearExpressionStatus": {"allOf": [{"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}], "description": "Nuclear expression status - ('Filter for single value choice',)"}, "nuclearExpressionStatus.not": {"allOf": [{"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}], "description": "Nuclear expression status - ('Filter for all but a single value choice',)"}, "nuclearExpressionStatus.anyOf": {"description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["intact", "loss", "indeterminate"], "title": "TumorMarkerNuclearExpressionStatusChoices", "type": "string"}, "title": "Nuclearexpressionstatus.Anyof", "type": "array"}, "relatedEntitiesIds": {"description": "Related neoplastic entities - Filter for reference matches", "title": "Relatedentitiesids", "type": "string"}, "relatedEntitiesIds.not": {"description": "Related neoplastic entities - Filter for reference mismatches", "title": "Relatedentitiesids.Not", "type": "string"}}, "title": "TumorMarkerFilters", "type": "object"}, "Paginated_TumorMarker_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/TumorMarker"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[TumorMarker]", "type": "object"}, "TumorMarker": {"properties": {"description": {"description": "Human-readable description of the tumor marker", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient related to the tumor marker result", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the tumor marker was analyzed.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "analyte": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The chemical or biological substance/agent that is analyzed.", "examples": [], "title": "Analyte", "x-expanded": null, "x-terminology": "TumorMarkerAnalyte"}, "massConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Mass concentration of the analyte (if revelant/measured)", "examples": [], "title": "Mass concentration", "x-expanded": null}, "arbitraryConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Arbitrary concentration of the analyte (if revelant/measured)", "examples": [], "title": "Arbitrary concentration", "x-expanded": null}, "substanceConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Substance concentration of the analyte (if revelant/measured)", "examples": [], "title": "Substance concentration", "x-expanded": null}, "fraction": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Analyte fraction (if revelant/measured)", "examples": [], "title": "Fraction", "x-expanded": null}, "multipleOfMedian": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Multiples of the median analyte (if revelant/measured)", "examples": [], "title": "Multiples of the median", "x-expanded": null}, "tumorProportionScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the percentage of cells in a tumor that express PD-L1", "examples": [], "title": "Immune Cells Score (ICS)", "x-expanded": null}, "immuneCellScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the percentage of PD-L1 positive immune cells", "examples": [], "title": "Immune Cells Score (ICS)", "x-expanded": null}, "combinedPositiveScore": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100", "examples": [], "title": "Combined Positive Score (CPS)", "x-expanded": null}, "immunohistochemicalScore": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the number of analyte-positive cells in a sample", "examples": [], "title": "Immunohistochemical Score", "x-expanded": null}, "presence": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerPresenceChoices", "maxLength": 50}, {"type": "null"}], "description": "Whether an analyte has tested positive or negative.", "examples": [], "title": "Presence", "x-expanded": null}, "nuclearExpressionStatus": {"anyOf": [{"$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices", "maxLength": 50}, {"type": "null"}], "description": "Categorization of the status of expression of the analyte", "examples": [], "title": "Nuclear expression status", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "analyte"], "title": "TumorMarker", "type": "object"}, "AnalyteDetails": {"properties": {"acronym": {"title": "Acronym", "type": "string"}, "display": {"title": "Display", "type": "string"}, "valueTypes": {"items": {"$ref": "#/components/schemas/AnalyteResultType"}, "title": "Valuetypes", "type": "array"}}, "required": ["acronym", "display", "valueTypes"], "title": "AnalyteDetails", "type": "object"}, "AnalyteResultType": {"enum": ["MassConcentration", "ArbitraryConcentration", "SubstanceConcentration", "MultipleOfMedian", "Fraction", "Presence", "CombinedPositiveScore", "ImmuneCellsScore", "TumorProportionScore", "ImmunoHistoChemicalScore", "NuclearExpressionStatus"], "title": "AnalyteResultType", "type": "string"}, "PeriodSchema": {"properties": {"start": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "title": "Start"}, "end": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "title": "End"}}, "title": "Period", "type": "object"}, "SystemicTherapyCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the systemic therapy", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "period": {"$ref": "#/components/schemas/PeriodSchema", "description": "Clinically-relevant period during which the therapy was administered to the patient.", "examples": [], "title": "Treatment period", "x-expanded": null}, "cycles": {"description": "The total number of treatment cycles during the treatment period.", "examples": [], "title": "Cycles", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/SystemicTherapyIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "role": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Indicates the role of this therapy in the overall treatment strategy.", "examples": [], "title": "Treatment Role", "x-expanded": null, "x-terminology": "TreatmentCategory"}, "terminationReason": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Explanation for the premature or planned termination of the systemic therapy", "examples": [], "title": "Termination reason", "x-expanded": null, "x-terminology": "TreatmentTerminationReason"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the systemic therapy is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the systemic therapy", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["caseId", "period", "cycles", "intent"], "title": "SystemicTherapyCreate", "type": "object"}, "SystemicTherapyIntentChoices": {"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}, "SystemicTherapyFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "period.overlaps": {"description": "Treatment period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "period.not.overlaps": {"description": "Treatment period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "period.contains": {"description": "Treatment period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "period.not.contains": {"description": "Treatment period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "period.containedBy": {"description": "Treatment period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "period.not.containedBy": {"description": "Treatment period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "cycles.lessThan": {"description": "Cycles - Filter for entries with values less than the specified value", "title": "Cycles.Lessthan", "type": "integer"}, "cycles.lessThanOrEqual": {"description": "Cycles - Filter for entries with values less than or equal to the specified value", "title": "Cycles.Lessthanorequal", "type": "integer"}, "cycles.greaterThan": {"description": "Cycles - Filter for entries with values greater than the specified value", "title": "Cycles.Greaterthan", "type": "integer"}, "cycles.greaterThanOrEqual": {"description": "Cycles - Filter for entries with values greater than or equal to the specified value", "title": "Cycles.Greaterthanorequal", "type": "integer"}, "cycles.equal": {"description": "Cycles - Filter for entries with values exactly equal to the specified value", "title": "Cycles.Equal", "type": "integer"}, "cycles.not.equal": {"description": "Cycles - Filter for entries with values not equal to the specified value", "title": "Cycles.Not.Equal", "type": "integer"}, "cycles.between": {"description": "Cycles - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Cycles.Between", "type": "array"}, "cycles.not.between": {"description": "Cycles - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Cycles.Not.Between", "type": "array"}, "intent": {"allOf": [{"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "intent.not": {"allOf": [{"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "intent.anyOf": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "SystemicTherapyIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "role.not.exists": {"description": "Treatment Role - Filter for entries without a value", "title": "Role.Not.Exists", "type": "boolean"}, "role.exists": {"description": "Treatment Role - Filter for entries with a value", "title": "Role.Exists", "type": "boolean"}, "role": {"description": "Treatment Role - Filter for a matching concept code", "title": "Role", "type": "string"}, "role.not": {"description": "Treatment Role - Filter for a mismatching concept code", "title": "Role.Not", "type": "string"}, "role.anyOf": {"description": "Treatment Role - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Role.Anyof", "type": "array"}, "role.not.anyOf": {"description": "Treatment Role - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Role.Not.Anyof", "type": "array"}, "role.descendantsOf": {"description": "Treatment Role - Filter for all child concepts of a given concepts code", "title": "Role.Descendantsof", "type": "string"}, "terminationReason.not.exists": {"description": "Termination reason - Filter for entries without a value", "title": "Terminationreason.Not.Exists", "type": "boolean"}, "terminationReason.exists": {"description": "Termination reason - Filter for entries with a value", "title": "Terminationreason.Exists", "type": "boolean"}, "terminationReason": {"description": "Termination reason - Filter for a matching concept code", "title": "Terminationreason", "type": "string"}, "terminationReason.not": {"description": "Termination reason - Filter for a mismatching concept code", "title": "Terminationreason.Not", "type": "string"}, "terminationReason.anyOf": {"description": "Termination reason - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Anyof", "type": "array"}, "terminationReason.not.anyOf": {"description": "Termination reason - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Not.Anyof", "type": "array"}, "terminationReason.descendantsOf": {"description": "Termination reason - Filter for all child concepts of a given concepts code", "title": "Terminationreason.Descendantsof", "type": "string"}, "therapyLineId.not.exists": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "therapyLineId.exists": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "therapyLineId": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "therapyLineId.not": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "therapyLineId.contains": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "therapyLineId.not.contains": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "therapyLineId.beginsWith": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "therapyLineId.not.beginsWith": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "therapyLineId.endsWith": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "therapyLineId.not.endsWith": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "targetedEntitiesIds": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "targetedEntitiesIds.not": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}, "medications.id": {"description": "Id - Filter for full text matches", "title": "Medications.Id", "type": "string"}, "medications.id.not": {"description": "Id - Filter for full text mismatches", "title": "Medications.Id.Not", "type": "string"}, "medications.id.contains": {"description": "Id - Filter for partial text matches", "title": "Medications.Id.Contains", "type": "string"}, "medications.id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Medications.Id.Not.Contains", "type": "string"}, "medications.id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Medications.Id.Beginswith", "type": "string"}, "medications.id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Medications.Id.Not.Beginswith", "type": "string"}, "medications.id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Medications.Id.Endswith", "type": "string"}, "medications.id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Medications.Id.Not.Endswith", "type": "string"}, "medications.createdAt.before": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Medications.Createdat.Before", "type": "string"}, "medications.createdAt.after": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Medications.Createdat.After", "type": "string"}, "medications.createdAt.onOrBefore": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Medications.Createdat.Onorbefore", "type": "string"}, "medications.createdAt.onOrAfter": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Medications.Createdat.Onorafter", "type": "string"}, "medications.createdAt.on": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Medications.Createdat.On", "type": "string"}, "medications.createdAt.not.on": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Medications.Createdat.Not.On", "type": "string"}, "medications.createdAt.between": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Createdat.Between", "type": "array"}, "medications.createdAt.not.between": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Createdat.Not.Between", "type": "array"}, "medications.updatedAt.before": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Medications.Updatedat.Before", "type": "string"}, "medications.updatedAt.after": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Medications.Updatedat.After", "type": "string"}, "medications.updatedAt.onOrBefore": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Medications.Updatedat.Onorbefore", "type": "string"}, "medications.updatedAt.onOrAfter": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Medications.Updatedat.Onorafter", "type": "string"}, "medications.updatedAt.on": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Medications.Updatedat.On", "type": "string"}, "medications.updatedAt.not.on": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Medications.Updatedat.Not.On", "type": "string"}, "medications.updatedAt.between": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Updatedat.Between", "type": "array"}, "medications.updatedAt.not.between": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Medications.Updatedat.Not.Between", "type": "array"}, "medications.createdBy.not.exists": {"description": "Created By - Filter for entries without a value", "title": "Medications.Createdby.Not.Exists", "type": "boolean"}, "medications.createdBy.exists": {"description": "Created By - Filter for entries with a value", "title": "Medications.Createdby.Exists", "type": "boolean"}, "medications.updatedBy.id.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Medications.Updatedby.Id.Lessthan", "type": "integer"}, "medications.updatedBy.id.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Medications.Updatedby.Id.Lessthanorequal", "type": "integer"}, "medications.updatedBy.id.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Medications.Updatedby.Id.Greaterthan", "type": "integer"}, "medications.updatedBy.id.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "medications.updatedBy.id.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Medications.Updatedby.Id.Equal", "type": "integer"}, "medications.updatedBy.id.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Medications.Updatedby.Id.Not.Equal", "type": "integer"}, "medications.updatedBy.id.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Medications.Updatedby.Id.Between", "type": "array"}, "medications.updatedBy.id.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Medications.Updatedby.Id.Not.Between", "type": "array"}, "medications.updatedBy.username": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Username", "type": "string"}, "medications.updatedBy.username.not": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Username.Not", "type": "string"}, "medications.updatedBy.username.contains": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Username.Contains", "type": "string"}, "medications.updatedBy.username.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Username.Not.Contains", "type": "string"}, "medications.updatedBy.username.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Username.Beginswith", "type": "string"}, "medications.updatedBy.username.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Username.Not.Beginswith", "type": "string"}, "medications.updatedBy.username.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Username.Endswith", "type": "string"}, "medications.updatedBy.username.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Username.Not.Endswith", "type": "string"}, "medications.updatedBy.email": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Email", "type": "string"}, "medications.updatedBy.email.not": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Email.Not", "type": "string"}, "medications.updatedBy.email.contains": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Email.Contains", "type": "string"}, "medications.updatedBy.email.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Email.Not.Contains", "type": "string"}, "medications.updatedBy.email.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Email.Beginswith", "type": "string"}, "medications.updatedBy.email.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Email.Not.Beginswith", "type": "string"}, "medications.updatedBy.email.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Email.Endswith", "type": "string"}, "medications.updatedBy.email.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Email.Not.Endswith", "type": "string"}, "medications.updatedBy.firstName.not.exists": {"description": "None - Filter for entries without a value", "title": "Medications.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "medications.updatedBy.firstName.exists": {"description": "None - Filter for entries with a value", "title": "Medications.Updatedby.Firstname.Exists", "type": "boolean"}, "medications.updatedBy.firstName": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Firstname", "type": "string"}, "medications.updatedBy.firstName.not": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Firstname.Not", "type": "string"}, "medications.updatedBy.firstName.contains": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Firstname.Contains", "type": "string"}, "medications.updatedBy.firstName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Firstname.Not.Contains", "type": "string"}, "medications.updatedBy.firstName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Firstname.Beginswith", "type": "string"}, "medications.updatedBy.firstName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "medications.updatedBy.firstName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Firstname.Endswith", "type": "string"}, "medications.updatedBy.firstName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Firstname.Not.Endswith", "type": "string"}, "medications.updatedBy.lastName.not.exists": {"description": "None - Filter for entries without a value", "title": "Medications.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "medications.updatedBy.lastName.exists": {"description": "None - Filter for entries with a value", "title": "Medications.Updatedby.Lastname.Exists", "type": "boolean"}, "medications.updatedBy.lastName": {"description": "None - Filter for full text matches", "title": "Medications.Updatedby.Lastname", "type": "string"}, "medications.updatedBy.lastName.not": {"description": "None - Filter for full text mismatches", "title": "Medications.Updatedby.Lastname.Not", "type": "string"}, "medications.updatedBy.lastName.contains": {"description": "None - Filter for partial text matches", "title": "Medications.Updatedby.Lastname.Contains", "type": "string"}, "medications.updatedBy.lastName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Medications.Updatedby.Lastname.Not.Contains", "type": "string"}, "medications.updatedBy.lastName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Medications.Updatedby.Lastname.Beginswith", "type": "string"}, "medications.updatedBy.lastName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "medications.updatedBy.lastName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Medications.Updatedby.Lastname.Endswith", "type": "string"}, "medications.updatedBy.lastName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Updatedby.Lastname.Not.Endswith", "type": "string"}, "medications.description": {"description": "None - Filter for full text matches", "title": "Medications.Description", "type": "string"}, "medications.description.not": {"description": "None - Filter for full text mismatches", "title": "Medications.Description.Not", "type": "string"}, "medications.description.contains": {"description": "None - Filter for partial text matches", "title": "Medications.Description.Contains", "type": "string"}, "medications.description.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Medications.Description.Not.Contains", "type": "string"}, "medications.description.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Medications.Description.Beginswith", "type": "string"}, "medications.description.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Medications.Description.Not.Beginswith", "type": "string"}, "medications.description.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Medications.Description.Endswith", "type": "string"}, "medications.description.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Medications.Description.Not.Endswith", "type": "string"}, "medications.externalSource.not.exists": {"description": "External data source - Filter for entries without a value", "title": "Medications.Externalsource.Not.Exists", "type": "boolean"}, "medications.externalSource.exists": {"description": "External data source - Filter for entries with a value", "title": "Medications.Externalsource.Exists", "type": "boolean"}, "medications.externalSource": {"description": "External data source - Filter for full text matches", "title": "Medications.Externalsource", "type": "string"}, "medications.externalSource.not": {"description": "External data source - Filter for full text mismatches", "title": "Medications.Externalsource.Not", "type": "string"}, "medications.externalSource.contains": {"description": "External data source - Filter for partial text matches", "title": "Medications.Externalsource.Contains", "type": "string"}, "medications.externalSource.not.contains": {"description": "External data source - Filter for partial text mismatches", "title": "Medications.Externalsource.Not.Contains", "type": "string"}, "medications.externalSource.beginsWith": {"description": "External data source - Filter for entries starting with the text", "title": "Medications.Externalsource.Beginswith", "type": "string"}, "medications.externalSource.not.beginsWith": {"description": "External data source - Filter for entries not starting with the text", "title": "Medications.Externalsource.Not.Beginswith", "type": "string"}, "medications.externalSource.endsWith": {"description": "External data source - Filter for entries ending with the text", "title": "Medications.Externalsource.Endswith", "type": "string"}, "medications.externalSource.not.endsWith": {"description": "External data source - Filter for entries not ending with the text", "title": "Medications.Externalsource.Not.Endswith", "type": "string"}, "medications.externalSourceId.not.exists": {"description": "External data source Id - Filter for entries without a value", "title": "Medications.Externalsourceid.Not.Exists", "type": "boolean"}, "medications.externalSourceId.exists": {"description": "External data source Id - Filter for entries with a value", "title": "Medications.Externalsourceid.Exists", "type": "boolean"}, "medications.externalSourceId": {"description": "External data source Id - Filter for reference matches", "title": "Medications.Externalsourceid", "type": "string"}, "medications.externalSourceId.not": {"description": "External data source Id - Filter for reference mismatches", "title": "Medications.Externalsourceid.Not", "type": "string"}, "medications.externalSourceId.contains": {"description": "External data source Id - Filter for partial text matches", "title": "Medications.Externalsourceid.Contains", "type": "string"}, "medications.externalSourceId.not.contains": {"description": "External data source Id - Filter for partial text mismatches", "title": "Medications.Externalsourceid.Not.Contains", "type": "string"}, "medications.externalSourceId.beginsWith": {"description": "External data source Id - Filter for entries starting with the text", "title": "Medications.Externalsourceid.Beginswith", "type": "string"}, "medications.externalSourceId.not.beginsWith": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Medications.Externalsourceid.Not.Beginswith", "type": "string"}, "medications.externalSourceId.endsWith": {"description": "External data source Id - Filter for entries ending with the text", "title": "Medications.Externalsourceid.Endswith", "type": "string"}, "medications.externalSourceId.not.endsWith": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Medications.Externalsourceid.Not.Endswith", "type": "string"}, "medications.drug": {"description": "Antineoplastic Drug - Filter for a matching concept code", "title": "Medications.Drug", "type": "string"}, "medications.drug.not": {"description": "Antineoplastic Drug - Filter for a mismatching concept code", "title": "Medications.Drug.Not", "type": "string"}, "medications.drug.anyOf": {"description": "Antineoplastic Drug - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Medications.Drug.Anyof", "type": "array"}, "medications.drug.not.anyOf": {"description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Medications.Drug.Not.Anyof", "type": "array"}, "medications.drug.descendantsOf": {"description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code", "title": "Medications.Drug.Descendantsof", "type": "string"}, "medications.route.not.exists": {"description": "Route - Filter for entries without a value", "title": "Medications.Route.Not.Exists", "type": "boolean"}, "medications.route.exists": {"description": "Route - Filter for entries with a value", "title": "Medications.Route.Exists", "type": "boolean"}, "medications.route": {"description": "Route - Filter for a matching concept code", "title": "Medications.Route", "type": "string"}, "medications.route.not": {"description": "Route - Filter for a mismatching concept code", "title": "Medications.Route.Not", "type": "string"}, "medications.route.anyOf": {"description": "Route - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Medications.Route.Anyof", "type": "array"}, "medications.route.not.anyOf": {"description": "Route - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Medications.Route.Not.Anyof", "type": "array"}, "medications.route.descendantsOf": {"description": "Route - Filter for all child concepts of a given concepts code", "title": "Medications.Route.Descendantsof", "type": "string"}, "medications.usedOfflabel.not.exists": {"description": "Off-label use - Filter for entries without a value", "title": "Medications.Usedofflabel.Not.Exists", "type": "boolean"}, "medications.usedOfflabel.exists": {"description": "Off-label use - Filter for entries with a value", "title": "Medications.Usedofflabel.Exists", "type": "boolean"}, "medications.usedOfflabel": {"description": "Off-label use - ('Filter for yes/no statement',)", "title": "Medications.Usedofflabel", "type": "boolean"}, "medications.withinSoc.not.exists": {"description": "Within SOC - Filter for entries without a value", "title": "Medications.Withinsoc.Not.Exists", "type": "boolean"}, "medications.withinSoc.exists": {"description": "Within SOC - Filter for entries with a value", "title": "Medications.Withinsoc.Exists", "type": "boolean"}, "medications.withinSoc": {"description": "Within SOC - ('Filter for yes/no statement',)", "title": "Medications.Withinsoc", "type": "boolean"}, "medications.dosageMassConcentration.not.exists": {"description": "Dosage - Mass concentration - Filter for entries without a value", "title": "Medications.Dosagemassconcentration.Not.Exists", "type": "boolean"}, "medications.dosageMassConcentration.exists": {"description": "Dosage - Mass concentration - Filter for entries with a value", "title": "Medications.Dosagemassconcentration.Exists", "type": "boolean"}, "medications.dosageMassConcentration.lessThan": {"description": "Dosage - Mass concentration - Filter for entries with values less than the specified value", "title": "Medications.Dosagemassconcentration.Lessthan", "type": "number"}, "medications.dosageMassConcentration.lessThanOrEqual": {"description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemassconcentration.Lessthanorequal", "type": "number"}, "medications.dosageMassConcentration.greaterThan": {"description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemassconcentration.Greaterthan", "type": "number"}, "medications.dosageMassConcentration.greaterThanOrEqual": {"description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemassconcentration.Greaterthanorequal", "type": "number"}, "medications.dosageMassConcentration.equal": {"description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemassconcentration.Equal", "type": "number"}, "medications.dosageMassConcentration.not.equal": {"description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemassconcentration.Not.Equal", "type": "number"}, "medications.dosageMassConcentration.between": {"description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemassconcentration.Between", "type": "array"}, "medications.dosageMassConcentration.not.between": {"description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemassconcentration.Not.Between", "type": "array"}, "medications.dosageMass.not.exists": {"description": "Dosage - Fixed Mass - Filter for entries without a value", "title": "Medications.Dosagemass.Not.Exists", "type": "boolean"}, "medications.dosageMass.exists": {"description": "Dosage - Fixed Mass - Filter for entries with a value", "title": "Medications.Dosagemass.Exists", "type": "boolean"}, "medications.dosageMass.lessThan": {"description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value", "title": "Medications.Dosagemass.Lessthan", "type": "number"}, "medications.dosageMass.lessThanOrEqual": {"description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemass.Lessthanorequal", "type": "number"}, "medications.dosageMass.greaterThan": {"description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemass.Greaterthan", "type": "number"}, "medications.dosageMass.greaterThanOrEqual": {"description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemass.Greaterthanorequal", "type": "number"}, "medications.dosageMass.equal": {"description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemass.Equal", "type": "number"}, "medications.dosageMass.not.equal": {"description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemass.Not.Equal", "type": "number"}, "medications.dosageMass.between": {"description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemass.Between", "type": "array"}, "medications.dosageMass.not.between": {"description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemass.Not.Between", "type": "array"}, "medications.dosageVolume.not.exists": {"description": "Dosage - Volume - Filter for entries without a value", "title": "Medications.Dosagevolume.Not.Exists", "type": "boolean"}, "medications.dosageVolume.exists": {"description": "Dosage - Volume - Filter for entries with a value", "title": "Medications.Dosagevolume.Exists", "type": "boolean"}, "medications.dosageVolume.lessThan": {"description": "Dosage - Volume - Filter for entries with values less than the specified value", "title": "Medications.Dosagevolume.Lessthan", "type": "number"}, "medications.dosageVolume.lessThanOrEqual": {"description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagevolume.Lessthanorequal", "type": "number"}, "medications.dosageVolume.greaterThan": {"description": "Dosage - Volume - Filter for entries with values greater than the specified value", "title": "Medications.Dosagevolume.Greaterthan", "type": "number"}, "medications.dosageVolume.greaterThanOrEqual": {"description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagevolume.Greaterthanorequal", "type": "number"}, "medications.dosageVolume.equal": {"description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagevolume.Equal", "type": "number"}, "medications.dosageVolume.not.equal": {"description": "Dosage - Volume - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagevolume.Not.Equal", "type": "number"}, "medications.dosageVolume.between": {"description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagevolume.Between", "type": "array"}, "medications.dosageVolume.not.between": {"description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagevolume.Not.Between", "type": "array"}, "medications.dosageMassSurface.not.exists": {"description": "Dosage - Mass per body surface - Filter for entries without a value", "title": "Medications.Dosagemasssurface.Not.Exists", "type": "boolean"}, "medications.dosageMassSurface.exists": {"description": "Dosage - Mass per body surface - Filter for entries with a value", "title": "Medications.Dosagemasssurface.Exists", "type": "boolean"}, "medications.dosageMassSurface.lessThan": {"description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value", "title": "Medications.Dosagemasssurface.Lessthan", "type": "number"}, "medications.dosageMassSurface.lessThanOrEqual": {"description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosagemasssurface.Lessthanorequal", "type": "number"}, "medications.dosageMassSurface.greaterThan": {"description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value", "title": "Medications.Dosagemasssurface.Greaterthan", "type": "number"}, "medications.dosageMassSurface.greaterThanOrEqual": {"description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosagemasssurface.Greaterthanorequal", "type": "number"}, "medications.dosageMassSurface.equal": {"description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosagemasssurface.Equal", "type": "number"}, "medications.dosageMassSurface.not.equal": {"description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value", "title": "Medications.Dosagemasssurface.Not.Equal", "type": "number"}, "medications.dosageMassSurface.between": {"description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemasssurface.Between", "type": "array"}, "medications.dosageMassSurface.not.between": {"description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosagemasssurface.Not.Between", "type": "array"}, "medications.dosageRateMassConcentration.not.exists": {"description": "Dosage rate - Mass concentration - Filter for entries without a value", "title": "Medications.Dosageratemassconcentration.Not.Exists", "type": "boolean"}, "medications.dosageRateMassConcentration.exists": {"description": "Dosage rate - Mass concentration - Filter for entries with a value", "title": "Medications.Dosageratemassconcentration.Exists", "type": "boolean"}, "medications.dosageRateMassConcentration.lessThan": {"description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemassconcentration.Lessthan", "type": "number"}, "medications.dosageRateMassConcentration.lessThanOrEqual": {"description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemassconcentration.Lessthanorequal", "type": "number"}, "medications.dosageRateMassConcentration.greaterThan": {"description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemassconcentration.Greaterthan", "type": "number"}, "medications.dosageRateMassConcentration.greaterThanOrEqual": {"description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemassconcentration.Greaterthanorequal", "type": "number"}, "medications.dosageRateMassConcentration.equal": {"description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemassconcentration.Equal", "type": "number"}, "medications.dosageRateMassConcentration.not.equal": {"description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemassconcentration.Not.Equal", "type": "number"}, "medications.dosageRateMassConcentration.between": {"description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemassconcentration.Between", "type": "array"}, "medications.dosageRateMassConcentration.not.between": {"description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemassconcentration.Not.Between", "type": "array"}, "medications.dosageRateMass.not.exists": {"description": "Dosage rate - Fixed Mass - Filter for entries without a value", "title": "Medications.Dosageratemass.Not.Exists", "type": "boolean"}, "medications.dosageRateMass.exists": {"description": "Dosage rate - Fixed Mass - Filter for entries with a value", "title": "Medications.Dosageratemass.Exists", "type": "boolean"}, "medications.dosageRateMass.lessThan": {"description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemass.Lessthan", "type": "number"}, "medications.dosageRateMass.lessThanOrEqual": {"description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemass.Lessthanorequal", "type": "number"}, "medications.dosageRateMass.greaterThan": {"description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemass.Greaterthan", "type": "number"}, "medications.dosageRateMass.greaterThanOrEqual": {"description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemass.Greaterthanorequal", "type": "number"}, "medications.dosageRateMass.equal": {"description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemass.Equal", "type": "number"}, "medications.dosageRateMass.not.equal": {"description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemass.Not.Equal", "type": "number"}, "medications.dosageRateMass.between": {"description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemass.Between", "type": "array"}, "medications.dosageRateMass.not.between": {"description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemass.Not.Between", "type": "array"}, "medications.dosageRateVolume.not.exists": {"description": "Dosage rate - Volume - Filter for entries without a value", "title": "Medications.Dosageratevolume.Not.Exists", "type": "boolean"}, "medications.dosageRateVolume.exists": {"description": "Dosage rate - Volume - Filter for entries with a value", "title": "Medications.Dosageratevolume.Exists", "type": "boolean"}, "medications.dosageRateVolume.lessThan": {"description": "Dosage rate - Volume - Filter for entries with values less than the specified value", "title": "Medications.Dosageratevolume.Lessthan", "type": "number"}, "medications.dosageRateVolume.lessThanOrEqual": {"description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratevolume.Lessthanorequal", "type": "number"}, "medications.dosageRateVolume.greaterThan": {"description": "Dosage rate - Volume - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratevolume.Greaterthan", "type": "number"}, "medications.dosageRateVolume.greaterThanOrEqual": {"description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratevolume.Greaterthanorequal", "type": "number"}, "medications.dosageRateVolume.equal": {"description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratevolume.Equal", "type": "number"}, "medications.dosageRateVolume.not.equal": {"description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratevolume.Not.Equal", "type": "number"}, "medications.dosageRateVolume.between": {"description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratevolume.Between", "type": "array"}, "medications.dosageRateVolume.not.between": {"description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratevolume.Not.Between", "type": "array"}, "medications.dosageRateMassSurface.not.exists": {"description": "Dosage rate - Mass per body surface - Filter for entries without a value", "title": "Medications.Dosageratemasssurface.Not.Exists", "type": "boolean"}, "medications.dosageRateMassSurface.exists": {"description": "Dosage rate - Mass per body surface - Filter for entries with a value", "title": "Medications.Dosageratemasssurface.Exists", "type": "boolean"}, "medications.dosageRateMassSurface.lessThan": {"description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value", "title": "Medications.Dosageratemasssurface.Lessthan", "type": "number"}, "medications.dosageRateMassSurface.lessThanOrEqual": {"description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value", "title": "Medications.Dosageratemasssurface.Lessthanorequal", "type": "number"}, "medications.dosageRateMassSurface.greaterThan": {"description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value", "title": "Medications.Dosageratemasssurface.Greaterthan", "type": "number"}, "medications.dosageRateMassSurface.greaterThanOrEqual": {"description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value", "title": "Medications.Dosageratemasssurface.Greaterthanorequal", "type": "number"}, "medications.dosageRateMassSurface.equal": {"description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value", "title": "Medications.Dosageratemasssurface.Equal", "type": "number"}, "medications.dosageRateMassSurface.not.equal": {"description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value", "title": "Medications.Dosageratemasssurface.Not.Equal", "type": "number"}, "medications.dosageRateMassSurface.between": {"description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemasssurface.Between", "type": "array"}, "medications.dosageRateMassSurface.not.between": {"description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Medications.Dosageratemasssurface.Not.Between", "type": "array"}}, "title": "SystemicTherapyFilters", "type": "object"}, "Paginated_SystemicTherapySchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/SystemicTherapySchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[SystemicTherapySchema]", "type": "object"}, "SystemicTherapyMedicationSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "drug": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Antineoplastic drug/medication administered to the patient", "examples": [], "title": "Antineoplastic Drug", "x-expanded": null, "x-terminology": "AntineoplasticAgent"}, "route": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Drug administration route", "examples": [], "title": "Route", "x-expanded": null, "x-terminology": "DosageRoute"}, "usedOfflabel": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a medication was used off-label at the time of administration", "examples": [], "title": "Off-label use", "x-expanded": null}, "withinSoc": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.", "examples": [], "title": "Within SOC", "x-expanded": null}, "dosageMassConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)", "examples": [], "title": "Dosage - Mass concentration", "x-expanded": null}, "dosageMass": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)", "examples": [], "title": "Dosage - Fixed Mass", "x-expanded": null}, "dosageVolume": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)", "examples": [], "title": "Dosage - Volume", "x-expanded": null}, "dosageMassSurface": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)", "examples": [], "title": "Dosage - Mass per body surface", "x-expanded": null}, "dosageRateMassConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Mass concentration", "x-expanded": null}, "dosageRateMass": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Fixed Mass", "x-expanded": null}, "dosageRateVolume": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Volume", "x-expanded": null}, "dosageRateMassSurface": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Mass per body surface", "x-expanded": null}}, "required": ["id", "createdAt", "updatedAt", "description", "drug"], "title": "SystemicTherapyMedication", "type": "object"}, "SystemicTherapySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the systemic therapy", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "period": {"$ref": "#/components/schemas/PeriodSchema", "description": "Clinically-relevant period during which the therapy was administered to the patient.", "examples": [], "title": "Treatment period", "x-expanded": null}, "cycles": {"description": "The total number of treatment cycles during the treatment period.", "examples": [], "title": "Cycles", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/SystemicTherapyIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "role": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Indicates the role of this therapy in the overall treatment strategy.", "examples": [], "title": "Treatment Role", "x-expanded": null, "x-terminology": "TreatmentCategory"}, "terminationReason": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Explanation for the premature or planned termination of the systemic therapy", "examples": [], "title": "Termination reason", "x-expanded": null, "x-terminology": "TreatmentTerminationReason"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the systemic therapy is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the systemic therapy", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}, "medications": {"description": "Medications administered during the systemic therapy", "items": {"$ref": "#/components/schemas/SystemicTherapyMedicationSchema"}, "title": "Medications", "type": "array"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "period", "cycles", "intent", "medications"], "title": "SystemicTherapy", "type": "object"}, "SystemicTherapyMedicationCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "drug": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Antineoplastic drug/medication administered to the patient", "examples": [], "title": "Antineoplastic Drug", "x-expanded": null, "x-terminology": "AntineoplasticAgent"}, "route": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Drug administration route", "examples": [], "title": "Route", "x-expanded": null, "x-terminology": "DosageRoute"}, "usedOfflabel": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a medication was used off-label at the time of administration", "examples": [], "title": "Off-label use", "x-expanded": null}, "withinSoc": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.", "examples": [], "title": "Within SOC", "x-expanded": null}, "dosageMassConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)", "examples": [], "title": "Dosage - Mass concentration", "x-expanded": null}, "dosageMass": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)", "examples": [], "title": "Dosage - Fixed Mass", "x-expanded": null}, "dosageVolume": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)", "examples": [], "title": "Dosage - Volume", "x-expanded": null}, "dosageMassSurface": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)", "examples": [], "title": "Dosage - Mass per body surface", "x-expanded": null}, "dosageRateMassConcentration": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Mass concentration", "x-expanded": null}, "dosageRateMass": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Fixed Mass", "x-expanded": null}, "dosageRateVolume": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Volume", "x-expanded": null}, "dosageRateMassSurface": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)", "examples": [], "title": "Dosage rate - Mass per body surface", "x-expanded": null}}, "required": ["drug"], "title": "SystemicTherapyMedicationCreate", "type": "object"}, "SurgeryCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the surgical procedure", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date of the surgical procedure.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "procedure": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The specific surgical procedure that was performed", "examples": [], "title": "Surgical procedure", "x-expanded": null, "x-terminology": "SurgicalProcedure"}, "intent": {"$ref": "#/components/schemas/SurgeryIntentChoices", "description": "Therapeutic intent of the surgery", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "bodysite": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Anatomical location of the surgery", "examples": [], "title": "Anatomical location", "x-expanded": null, "x-terminology": "CancerTopography"}, "bodysiteQualifier": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "General qualifier for the anatomical location of the surgery", "examples": [], "title": "Anatomical location qualifier", "x-expanded": null, "x-terminology": "BodyLocationQualifier"}, "bodysiteLaterality": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Laterality for the anatomical location of the surgery", "examples": [], "title": "Anatomical location laterality", "x-expanded": null, "x-terminology": "LateralityQualifier"}, "outcome": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The outcome of the surgery", "examples": [], "title": "Outcome", "x-expanded": null, "x-terminology": "ProcedureOutcome"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the surgery is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the surgery", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["caseId", "date", "procedure", "intent"], "title": "SurgeryCreate", "type": "object"}, "SurgeryIntentChoices": {"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}, "SurgeryFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "procedure": {"description": "Surgical procedure - Filter for a matching concept code", "title": "Procedure", "type": "string"}, "procedure.not": {"description": "Surgical procedure - Filter for a mismatching concept code", "title": "Procedure.Not", "type": "string"}, "procedure.anyOf": {"description": "Surgical procedure - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Procedure.Anyof", "type": "array"}, "procedure.not.anyOf": {"description": "Surgical procedure - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Procedure.Not.Anyof", "type": "array"}, "procedure.descendantsOf": {"description": "Surgical procedure - Filter for all child concepts of a given concepts code", "title": "Procedure.Descendantsof", "type": "string"}, "intent": {"allOf": [{"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "intent.not": {"allOf": [{"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "intent.anyOf": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "SurgeryIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "bodysite.not.exists": {"description": "Anatomical location - Filter for entries without a value", "title": "Bodysite.Not.Exists", "type": "boolean"}, "bodysite.exists": {"description": "Anatomical location - Filter for entries with a value", "title": "Bodysite.Exists", "type": "boolean"}, "bodysite": {"description": "Anatomical location - Filter for a matching concept code", "title": "Bodysite", "type": "string"}, "bodysite.not": {"description": "Anatomical location - Filter for a mismatching concept code", "title": "Bodysite.Not", "type": "string"}, "bodysite.anyOf": {"description": "Anatomical location - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysite.Anyof", "type": "array"}, "bodysite.not.anyOf": {"description": "Anatomical location - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysite.Not.Anyof", "type": "array"}, "bodysite.descendantsOf": {"description": "Anatomical location - Filter for all child concepts of a given concepts code", "title": "Bodysite.Descendantsof", "type": "string"}, "bodysiteQualifier.not.exists": {"description": "Anatomical location qualifier - Filter for entries without a value", "title": "Bodysitequalifier.Not.Exists", "type": "boolean"}, "bodysiteQualifier.exists": {"description": "Anatomical location qualifier - Filter for entries with a value", "title": "Bodysitequalifier.Exists", "type": "boolean"}, "bodysiteQualifier": {"description": "Anatomical location qualifier - Filter for a matching concept code", "title": "Bodysitequalifier", "type": "string"}, "bodysiteQualifier.not": {"description": "Anatomical location qualifier - Filter for a mismatching concept code", "title": "Bodysitequalifier.Not", "type": "string"}, "bodysiteQualifier.anyOf": {"description": "Anatomical location qualifier - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysitequalifier.Anyof", "type": "array"}, "bodysiteQualifier.not.anyOf": {"description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysitequalifier.Not.Anyof", "type": "array"}, "bodysiteQualifier.descendantsOf": {"description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code", "title": "Bodysitequalifier.Descendantsof", "type": "string"}, "bodysiteLaterality.not.exists": {"description": "Anatomical location laterality - Filter for entries without a value", "title": "Bodysitelaterality.Not.Exists", "type": "boolean"}, "bodysiteLaterality.exists": {"description": "Anatomical location laterality - Filter for entries with a value", "title": "Bodysitelaterality.Exists", "type": "boolean"}, "bodysiteLaterality": {"description": "Anatomical location laterality - Filter for a matching concept code", "title": "Bodysitelaterality", "type": "string"}, "bodysiteLaterality.not": {"description": "Anatomical location laterality - Filter for a mismatching concept code", "title": "Bodysitelaterality.Not", "type": "string"}, "bodysiteLaterality.anyOf": {"description": "Anatomical location laterality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Bodysitelaterality.Anyof", "type": "array"}, "bodysiteLaterality.not.anyOf": {"description": "Anatomical location laterality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Bodysitelaterality.Not.Anyof", "type": "array"}, "bodysiteLaterality.descendantsOf": {"description": "Anatomical location laterality - Filter for all child concepts of a given concepts code", "title": "Bodysitelaterality.Descendantsof", "type": "string"}, "outcome.not.exists": {"description": "Outcome - Filter for entries without a value", "title": "Outcome.Not.Exists", "type": "boolean"}, "outcome.exists": {"description": "Outcome - Filter for entries with a value", "title": "Outcome.Exists", "type": "boolean"}, "outcome": {"description": "Outcome - Filter for a matching concept code", "title": "Outcome", "type": "string"}, "outcome.not": {"description": "Outcome - Filter for a mismatching concept code", "title": "Outcome.Not", "type": "string"}, "outcome.anyOf": {"description": "Outcome - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Outcome.Anyof", "type": "array"}, "outcome.not.anyOf": {"description": "Outcome - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Outcome.Not.Anyof", "type": "array"}, "outcome.descendantsOf": {"description": "Outcome - Filter for all child concepts of a given concepts code", "title": "Outcome.Descendantsof", "type": "string"}, "therapyLineId.not.exists": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "therapyLineId.exists": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "therapyLineId": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "therapyLineId.not": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "therapyLineId.contains": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "therapyLineId.not.contains": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "therapyLineId.beginsWith": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "therapyLineId.not.beginsWith": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "therapyLineId.endsWith": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "therapyLineId.not.endsWith": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "targetedEntitiesIds": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "targetedEntitiesIds.not": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}}, "title": "SurgeryFilters", "type": "object"}, "Paginated_Surgery_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/Surgery"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[Surgery]", "type": "object"}, "Surgery": {"properties": {"description": {"description": "Human-readable description of the surgery", "title": "Description", "type": "string"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the surgical procedure", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date of the surgical procedure.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "procedure": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The specific surgical procedure that was performed", "examples": [], "title": "Surgical procedure", "x-expanded": null, "x-terminology": "SurgicalProcedure"}, "intent": {"$ref": "#/components/schemas/SurgeryIntentChoices", "description": "Therapeutic intent of the surgery", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "bodysite": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Anatomical location of the surgery", "examples": [], "title": "Anatomical location", "x-expanded": null, "x-terminology": "CancerTopography"}, "bodysiteQualifier": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "General qualifier for the anatomical location of the surgery", "examples": [], "title": "Anatomical location qualifier", "x-expanded": null, "x-terminology": "BodyLocationQualifier"}, "bodysiteLaterality": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Laterality for the anatomical location of the surgery", "examples": [], "title": "Anatomical location laterality", "x-expanded": null, "x-terminology": "LateralityQualifier"}, "outcome": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The outcome of the surgery", "examples": [], "title": "Outcome", "x-expanded": null, "x-terminology": "ProcedureOutcome"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the surgery is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the surgery", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["description", "id", "createdAt", "updatedAt", "caseId", "date", "procedure", "intent"], "title": "Surgery", "type": "object"}, "RadiotherapyCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the radiotherapy", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "period": {"$ref": "#/components/schemas/PeriodSchema", "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.", "examples": [], "title": "Treatment period", "x-expanded": null}, "sessions": {"description": "The total number of radiotherapy sessions over the treatment period.", "examples": [], "title": "Total sessions", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/RadiotherapyIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "terminationReason": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Explanation for the premature or planned termination of the radiotherapy", "examples": [], "title": "Termination reason", "x-expanded": null, "x-terminology": "TreatmentTerminationReason"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the radiotherapy is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the radiotherapy", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}}, "required": ["caseId", "period", "sessions", "intent"], "title": "RadiotherapyCreate", "type": "object"}, "RadiotherapyIntentChoices": {"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}, "RadiotherapyFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "period.overlaps": {"description": "Treatment period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "period.not.overlaps": {"description": "Treatment period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "period.contains": {"description": "Treatment period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "period.not.contains": {"description": "Treatment period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "period.containedBy": {"description": "Treatment period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "period.not.containedBy": {"description": "Treatment period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "sessions.lessThan": {"description": "Total sessions - Filter for entries with values less than the specified value", "title": "Sessions.Lessthan", "type": "integer"}, "sessions.lessThanOrEqual": {"description": "Total sessions - Filter for entries with values less than or equal to the specified value", "title": "Sessions.Lessthanorequal", "type": "integer"}, "sessions.greaterThan": {"description": "Total sessions - Filter for entries with values greater than the specified value", "title": "Sessions.Greaterthan", "type": "integer"}, "sessions.greaterThanOrEqual": {"description": "Total sessions - Filter for entries with values greater than or equal to the specified value", "title": "Sessions.Greaterthanorequal", "type": "integer"}, "sessions.equal": {"description": "Total sessions - Filter for entries with values exactly equal to the specified value", "title": "Sessions.Equal", "type": "integer"}, "sessions.not.equal": {"description": "Total sessions - Filter for entries with values not equal to the specified value", "title": "Sessions.Not.Equal", "type": "integer"}, "sessions.between": {"description": "Total sessions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Sessions.Between", "type": "array"}, "sessions.not.between": {"description": "Total sessions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Sessions.Not.Between", "type": "array"}, "intent": {"allOf": [{"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "intent.not": {"allOf": [{"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "intent.anyOf": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "RadiotherapyIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "terminationReason.not.exists": {"description": "Termination reason - Filter for entries without a value", "title": "Terminationreason.Not.Exists", "type": "boolean"}, "terminationReason.exists": {"description": "Termination reason - Filter for entries with a value", "title": "Terminationreason.Exists", "type": "boolean"}, "terminationReason": {"description": "Termination reason - Filter for a matching concept code", "title": "Terminationreason", "type": "string"}, "terminationReason.not": {"description": "Termination reason - Filter for a mismatching concept code", "title": "Terminationreason.Not", "type": "string"}, "terminationReason.anyOf": {"description": "Termination reason - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Anyof", "type": "array"}, "terminationReason.not.anyOf": {"description": "Termination reason - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Terminationreason.Not.Anyof", "type": "array"}, "terminationReason.descendantsOf": {"description": "Termination reason - Filter for all child concepts of a given concepts code", "title": "Terminationreason.Descendantsof", "type": "string"}, "therapyLineId.not.exists": {"description": "Therapy line - Filter for entries without a value", "title": "Therapylineid.Not.Exists", "type": "boolean"}, "therapyLineId.exists": {"description": "Therapy line - Filter for entries with a value", "title": "Therapylineid.Exists", "type": "boolean"}, "therapyLineId": {"description": "Therapy line - Filter for reference matches", "title": "Therapylineid", "type": "string"}, "therapyLineId.not": {"description": "Therapy line - Filter for reference mismatches", "title": "Therapylineid.Not", "type": "string"}, "therapyLineId.contains": {"description": "Therapy line - Filter for partial text matches", "title": "Therapylineid.Contains", "type": "string"}, "therapyLineId.not.contains": {"description": "Therapy line - Filter for partial text mismatches", "title": "Therapylineid.Not.Contains", "type": "string"}, "therapyLineId.beginsWith": {"description": "Therapy line - Filter for entries starting with the text", "title": "Therapylineid.Beginswith", "type": "string"}, "therapyLineId.not.beginsWith": {"description": "Therapy line - Filter for entries not starting with the text", "title": "Therapylineid.Not.Beginswith", "type": "string"}, "therapyLineId.endsWith": {"description": "Therapy line - Filter for entries ending with the text", "title": "Therapylineid.Endswith", "type": "string"}, "therapyLineId.not.endsWith": {"description": "Therapy line - Filter for entries not ending with the text", "title": "Therapylineid.Not.Endswith", "type": "string"}, "targetedEntitiesIds": {"description": "Targeted neoplastic entities - Filter for reference matches", "title": "Targetedentitiesids", "type": "string"}, "targetedEntitiesIds.not": {"description": "Targeted neoplastic entities - Filter for reference mismatches", "title": "Targetedentitiesids.Not", "type": "string"}, "dosages.id": {"description": "Id - Filter for full text matches", "title": "Dosages.Id", "type": "string"}, "dosages.id.not": {"description": "Id - Filter for full text mismatches", "title": "Dosages.Id.Not", "type": "string"}, "dosages.id.contains": {"description": "Id - Filter for partial text matches", "title": "Dosages.Id.Contains", "type": "string"}, "dosages.id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Dosages.Id.Not.Contains", "type": "string"}, "dosages.id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Dosages.Id.Beginswith", "type": "string"}, "dosages.id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Dosages.Id.Not.Beginswith", "type": "string"}, "dosages.id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Dosages.Id.Endswith", "type": "string"}, "dosages.id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Dosages.Id.Not.Endswith", "type": "string"}, "dosages.createdAt.before": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Dosages.Createdat.Before", "type": "string"}, "dosages.createdAt.after": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Dosages.Createdat.After", "type": "string"}, "dosages.createdAt.onOrBefore": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dosages.Createdat.Onorbefore", "type": "string"}, "dosages.createdAt.onOrAfter": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dosages.Createdat.Onorafter", "type": "string"}, "dosages.createdAt.on": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dosages.Createdat.On", "type": "string"}, "dosages.createdAt.not.on": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dosages.Createdat.Not.On", "type": "string"}, "dosages.createdAt.between": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Createdat.Between", "type": "array"}, "dosages.createdAt.not.between": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Createdat.Not.Between", "type": "array"}, "dosages.updatedAt.before": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Dosages.Updatedat.Before", "type": "string"}, "dosages.updatedAt.after": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Dosages.Updatedat.After", "type": "string"}, "dosages.updatedAt.onOrBefore": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dosages.Updatedat.Onorbefore", "type": "string"}, "dosages.updatedAt.onOrAfter": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dosages.Updatedat.Onorafter", "type": "string"}, "dosages.updatedAt.on": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dosages.Updatedat.On", "type": "string"}, "dosages.updatedAt.not.on": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dosages.Updatedat.Not.On", "type": "string"}, "dosages.updatedAt.between": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Updatedat.Between", "type": "array"}, "dosages.updatedAt.not.between": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dosages.Updatedat.Not.Between", "type": "array"}, "dosages.createdBy.not.exists": {"description": "Created By - Filter for entries without a value", "title": "Dosages.Createdby.Not.Exists", "type": "boolean"}, "dosages.createdBy.exists": {"description": "Created By - Filter for entries with a value", "title": "Dosages.Createdby.Exists", "type": "boolean"}, "dosages.updatedBy.id.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Dosages.Updatedby.Id.Lessthan", "type": "integer"}, "dosages.updatedBy.id.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Updatedby.Id.Lessthanorequal", "type": "integer"}, "dosages.updatedBy.id.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Dosages.Updatedby.Id.Greaterthan", "type": "integer"}, "dosages.updatedBy.id.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "dosages.updatedBy.id.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Updatedby.Id.Equal", "type": "integer"}, "dosages.updatedBy.id.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Dosages.Updatedby.Id.Not.Equal", "type": "integer"}, "dosages.updatedBy.id.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Updatedby.Id.Between", "type": "array"}, "dosages.updatedBy.id.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Updatedby.Id.Not.Between", "type": "array"}, "dosages.updatedBy.username": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Username", "type": "string"}, "dosages.updatedBy.username.not": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Username.Not", "type": "string"}, "dosages.updatedBy.username.contains": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Username.Contains", "type": "string"}, "dosages.updatedBy.username.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Username.Not.Contains", "type": "string"}, "dosages.updatedBy.username.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Username.Beginswith", "type": "string"}, "dosages.updatedBy.username.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Username.Not.Beginswith", "type": "string"}, "dosages.updatedBy.username.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Username.Endswith", "type": "string"}, "dosages.updatedBy.username.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Username.Not.Endswith", "type": "string"}, "dosages.updatedBy.email": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Email", "type": "string"}, "dosages.updatedBy.email.not": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Email.Not", "type": "string"}, "dosages.updatedBy.email.contains": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Email.Contains", "type": "string"}, "dosages.updatedBy.email.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Email.Not.Contains", "type": "string"}, "dosages.updatedBy.email.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Email.Beginswith", "type": "string"}, "dosages.updatedBy.email.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Email.Not.Beginswith", "type": "string"}, "dosages.updatedBy.email.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Email.Endswith", "type": "string"}, "dosages.updatedBy.email.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Email.Not.Endswith", "type": "string"}, "dosages.updatedBy.firstName.not.exists": {"description": "None - Filter for entries without a value", "title": "Dosages.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "dosages.updatedBy.firstName.exists": {"description": "None - Filter for entries with a value", "title": "Dosages.Updatedby.Firstname.Exists", "type": "boolean"}, "dosages.updatedBy.firstName": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Firstname", "type": "string"}, "dosages.updatedBy.firstName.not": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Firstname.Not", "type": "string"}, "dosages.updatedBy.firstName.contains": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Firstname.Contains", "type": "string"}, "dosages.updatedBy.firstName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Firstname.Not.Contains", "type": "string"}, "dosages.updatedBy.firstName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Firstname.Beginswith", "type": "string"}, "dosages.updatedBy.firstName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "dosages.updatedBy.firstName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Firstname.Endswith", "type": "string"}, "dosages.updatedBy.firstName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Firstname.Not.Endswith", "type": "string"}, "dosages.updatedBy.lastName.not.exists": {"description": "None - Filter for entries without a value", "title": "Dosages.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "dosages.updatedBy.lastName.exists": {"description": "None - Filter for entries with a value", "title": "Dosages.Updatedby.Lastname.Exists", "type": "boolean"}, "dosages.updatedBy.lastName": {"description": "None - Filter for full text matches", "title": "Dosages.Updatedby.Lastname", "type": "string"}, "dosages.updatedBy.lastName.not": {"description": "None - Filter for full text mismatches", "title": "Dosages.Updatedby.Lastname.Not", "type": "string"}, "dosages.updatedBy.lastName.contains": {"description": "None - Filter for partial text matches", "title": "Dosages.Updatedby.Lastname.Contains", "type": "string"}, "dosages.updatedBy.lastName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Updatedby.Lastname.Not.Contains", "type": "string"}, "dosages.updatedBy.lastName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Updatedby.Lastname.Beginswith", "type": "string"}, "dosages.updatedBy.lastName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "dosages.updatedBy.lastName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Updatedby.Lastname.Endswith", "type": "string"}, "dosages.updatedBy.lastName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Updatedby.Lastname.Not.Endswith", "type": "string"}, "dosages.description": {"description": "None - Filter for full text matches", "title": "Dosages.Description", "type": "string"}, "dosages.description.not": {"description": "None - Filter for full text mismatches", "title": "Dosages.Description.Not", "type": "string"}, "dosages.description.contains": {"description": "None - Filter for partial text matches", "title": "Dosages.Description.Contains", "type": "string"}, "dosages.description.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Dosages.Description.Not.Contains", "type": "string"}, "dosages.description.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Dosages.Description.Beginswith", "type": "string"}, "dosages.description.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Dosages.Description.Not.Beginswith", "type": "string"}, "dosages.description.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Dosages.Description.Endswith", "type": "string"}, "dosages.description.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Dosages.Description.Not.Endswith", "type": "string"}, "dosages.externalSource.not.exists": {"description": "External data source - Filter for entries without a value", "title": "Dosages.Externalsource.Not.Exists", "type": "boolean"}, "dosages.externalSource.exists": {"description": "External data source - Filter for entries with a value", "title": "Dosages.Externalsource.Exists", "type": "boolean"}, "dosages.externalSource": {"description": "External data source - Filter for full text matches", "title": "Dosages.Externalsource", "type": "string"}, "dosages.externalSource.not": {"description": "External data source - Filter for full text mismatches", "title": "Dosages.Externalsource.Not", "type": "string"}, "dosages.externalSource.contains": {"description": "External data source - Filter for partial text matches", "title": "Dosages.Externalsource.Contains", "type": "string"}, "dosages.externalSource.not.contains": {"description": "External data source - Filter for partial text mismatches", "title": "Dosages.Externalsource.Not.Contains", "type": "string"}, "dosages.externalSource.beginsWith": {"description": "External data source - Filter for entries starting with the text", "title": "Dosages.Externalsource.Beginswith", "type": "string"}, "dosages.externalSource.not.beginsWith": {"description": "External data source - Filter for entries not starting with the text", "title": "Dosages.Externalsource.Not.Beginswith", "type": "string"}, "dosages.externalSource.endsWith": {"description": "External data source - Filter for entries ending with the text", "title": "Dosages.Externalsource.Endswith", "type": "string"}, "dosages.externalSource.not.endsWith": {"description": "External data source - Filter for entries not ending with the text", "title": "Dosages.Externalsource.Not.Endswith", "type": "string"}, "dosages.externalSourceId.not.exists": {"description": "External data source Id - Filter for entries without a value", "title": "Dosages.Externalsourceid.Not.Exists", "type": "boolean"}, "dosages.externalSourceId.exists": {"description": "External data source Id - Filter for entries with a value", "title": "Dosages.Externalsourceid.Exists", "type": "boolean"}, "dosages.externalSourceId": {"description": "External data source Id - Filter for reference matches", "title": "Dosages.Externalsourceid", "type": "string"}, "dosages.externalSourceId.not": {"description": "External data source Id - Filter for reference mismatches", "title": "Dosages.Externalsourceid.Not", "type": "string"}, "dosages.externalSourceId.contains": {"description": "External data source Id - Filter for partial text matches", "title": "Dosages.Externalsourceid.Contains", "type": "string"}, "dosages.externalSourceId.not.contains": {"description": "External data source Id - Filter for partial text mismatches", "title": "Dosages.Externalsourceid.Not.Contains", "type": "string"}, "dosages.externalSourceId.beginsWith": {"description": "External data source Id - Filter for entries starting with the text", "title": "Dosages.Externalsourceid.Beginswith", "type": "string"}, "dosages.externalSourceId.not.beginsWith": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Dosages.Externalsourceid.Not.Beginswith", "type": "string"}, "dosages.externalSourceId.endsWith": {"description": "External data source Id - Filter for entries ending with the text", "title": "Dosages.Externalsourceid.Endswith", "type": "string"}, "dosages.externalSourceId.not.endsWith": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Dosages.Externalsourceid.Not.Endswith", "type": "string"}, "dosages.fractions.not.exists": {"description": "Total fractions - Filter for entries without a value", "title": "Dosages.Fractions.Not.Exists", "type": "boolean"}, "dosages.fractions.exists": {"description": "Total fractions - Filter for entries with a value", "title": "Dosages.Fractions.Exists", "type": "boolean"}, "dosages.fractions.lessThan": {"description": "Total fractions - Filter for entries with values less than the specified value", "title": "Dosages.Fractions.Lessthan", "type": "integer"}, "dosages.fractions.lessThanOrEqual": {"description": "Total fractions - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Fractions.Lessthanorequal", "type": "integer"}, "dosages.fractions.greaterThan": {"description": "Total fractions - Filter for entries with values greater than the specified value", "title": "Dosages.Fractions.Greaterthan", "type": "integer"}, "dosages.fractions.greaterThanOrEqual": {"description": "Total fractions - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Fractions.Greaterthanorequal", "type": "integer"}, "dosages.fractions.equal": {"description": "Total fractions - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Fractions.Equal", "type": "integer"}, "dosages.fractions.not.equal": {"description": "Total fractions - Filter for entries with values not equal to the specified value", "title": "Dosages.Fractions.Not.Equal", "type": "integer"}, "dosages.fractions.between": {"description": "Total fractions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Fractions.Between", "type": "array"}, "dosages.fractions.not.between": {"description": "Total fractions - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Dosages.Fractions.Not.Between", "type": "array"}, "dosages.dose.not.exists": {"description": "Total radiation dose - Filter for entries without a value", "title": "Dosages.Dose.Not.Exists", "type": "boolean"}, "dosages.dose.exists": {"description": "Total radiation dose - Filter for entries with a value", "title": "Dosages.Dose.Exists", "type": "boolean"}, "dosages.dose.lessThan": {"description": "Total radiation dose - Filter for entries with values less than the specified value", "title": "Dosages.Dose.Lessthan", "type": "number"}, "dosages.dose.lessThanOrEqual": {"description": "Total radiation dose - Filter for entries with values less than or equal to the specified value", "title": "Dosages.Dose.Lessthanorequal", "type": "number"}, "dosages.dose.greaterThan": {"description": "Total radiation dose - Filter for entries with values greater than the specified value", "title": "Dosages.Dose.Greaterthan", "type": "number"}, "dosages.dose.greaterThanOrEqual": {"description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value", "title": "Dosages.Dose.Greaterthanorequal", "type": "number"}, "dosages.dose.equal": {"description": "Total radiation dose - Filter for entries with values exactly equal to the specified value", "title": "Dosages.Dose.Equal", "type": "number"}, "dosages.dose.not.equal": {"description": "Total radiation dose - Filter for entries with values not equal to the specified value", "title": "Dosages.Dose.Not.Equal", "type": "number"}, "dosages.dose.between": {"description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Dosages.Dose.Between", "type": "array"}, "dosages.dose.not.between": {"description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Dosages.Dose.Not.Between", "type": "array"}, "dosages.irradiatedVolume": {"description": "Irradiated volume - Filter for a matching concept code", "title": "Dosages.Irradiatedvolume", "type": "string"}, "dosages.irradiatedVolume.not": {"description": "Irradiated volume - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolume.Not", "type": "string"}, "dosages.irradiatedVolume.anyOf": {"description": "Irradiated volume - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolume.Anyof", "type": "array"}, "dosages.irradiatedVolume.not.anyOf": {"description": "Irradiated volume - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolume.Not.Anyof", "type": "array"}, "dosages.irradiatedVolume.descendantsOf": {"description": "Irradiated volume - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolume.Descendantsof", "type": "string"}, "dosages.irradiatedVolumeMorphology.not.exists": {"description": "Irradiated volume morphology - Filter for entries without a value", "title": "Dosages.Irradiatedvolumemorphology.Not.Exists", "type": "boolean"}, "dosages.irradiatedVolumeMorphology.exists": {"description": "Irradiated volume morphology - Filter for entries with a value", "title": "Dosages.Irradiatedvolumemorphology.Exists", "type": "boolean"}, "dosages.irradiatedVolumeMorphology": {"description": "Irradiated volume morphology - Filter for a matching concept code", "title": "Dosages.Irradiatedvolumemorphology", "type": "string"}, "dosages.irradiatedVolumeMorphology.not": {"description": "Irradiated volume morphology - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolumemorphology.Not", "type": "string"}, "dosages.irradiatedVolumeMorphology.anyOf": {"description": "Irradiated volume morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumemorphology.Anyof", "type": "array"}, "dosages.irradiatedVolumeMorphology.not.anyOf": {"description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof", "type": "array"}, "dosages.irradiatedVolumeMorphology.descendantsOf": {"description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolumemorphology.Descendantsof", "type": "string"}, "dosages.irradiatedVolumeQualifier.not.exists": {"description": "Irradiated volume qualifier - Filter for entries without a value", "title": "Dosages.Irradiatedvolumequalifier.Not.Exists", "type": "boolean"}, "dosages.irradiatedVolumeQualifier.exists": {"description": "Irradiated volume qualifier - Filter for entries with a value", "title": "Dosages.Irradiatedvolumequalifier.Exists", "type": "boolean"}, "dosages.irradiatedVolumeQualifier": {"description": "Irradiated volume qualifier - Filter for a matching concept code", "title": "Dosages.Irradiatedvolumequalifier", "type": "string"}, "dosages.irradiatedVolumeQualifier.not": {"description": "Irradiated volume qualifier - Filter for a mismatching concept code", "title": "Dosages.Irradiatedvolumequalifier.Not", "type": "string"}, "dosages.irradiatedVolumeQualifier.anyOf": {"description": "Irradiated volume qualifier - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumequalifier.Anyof", "type": "array"}, "dosages.irradiatedVolumeQualifier.not.anyOf": {"description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof", "type": "array"}, "dosages.irradiatedVolumeQualifier.descendantsOf": {"description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code", "title": "Dosages.Irradiatedvolumequalifier.Descendantsof", "type": "string"}, "settings.id": {"description": "Id - Filter for full text matches", "title": "Settings.Id", "type": "string"}, "settings.id.not": {"description": "Id - Filter for full text mismatches", "title": "Settings.Id.Not", "type": "string"}, "settings.id.contains": {"description": "Id - Filter for partial text matches", "title": "Settings.Id.Contains", "type": "string"}, "settings.id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Settings.Id.Not.Contains", "type": "string"}, "settings.id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Settings.Id.Beginswith", "type": "string"}, "settings.id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Settings.Id.Not.Beginswith", "type": "string"}, "settings.id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Settings.Id.Endswith", "type": "string"}, "settings.id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Settings.Id.Not.Endswith", "type": "string"}, "settings.createdAt.before": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Settings.Createdat.Before", "type": "string"}, "settings.createdAt.after": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Settings.Createdat.After", "type": "string"}, "settings.createdAt.onOrBefore": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Settings.Createdat.Onorbefore", "type": "string"}, "settings.createdAt.onOrAfter": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Settings.Createdat.Onorafter", "type": "string"}, "settings.createdAt.on": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Settings.Createdat.On", "type": "string"}, "settings.createdAt.not.on": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Settings.Createdat.Not.On", "type": "string"}, "settings.createdAt.between": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Createdat.Between", "type": "array"}, "settings.createdAt.not.between": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Createdat.Not.Between", "type": "array"}, "settings.updatedAt.before": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Settings.Updatedat.Before", "type": "string"}, "settings.updatedAt.after": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Settings.Updatedat.After", "type": "string"}, "settings.updatedAt.onOrBefore": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Settings.Updatedat.Onorbefore", "type": "string"}, "settings.updatedAt.onOrAfter": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Settings.Updatedat.Onorafter", "type": "string"}, "settings.updatedAt.on": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Settings.Updatedat.On", "type": "string"}, "settings.updatedAt.not.on": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Settings.Updatedat.Not.On", "type": "string"}, "settings.updatedAt.between": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Updatedat.Between", "type": "array"}, "settings.updatedAt.not.between": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Settings.Updatedat.Not.Between", "type": "array"}, "settings.createdBy.not.exists": {"description": "Created By - Filter for entries without a value", "title": "Settings.Createdby.Not.Exists", "type": "boolean"}, "settings.createdBy.exists": {"description": "Created By - Filter for entries with a value", "title": "Settings.Createdby.Exists", "type": "boolean"}, "settings.updatedBy.id.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Settings.Updatedby.Id.Lessthan", "type": "integer"}, "settings.updatedBy.id.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Settings.Updatedby.Id.Lessthanorequal", "type": "integer"}, "settings.updatedBy.id.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Settings.Updatedby.Id.Greaterthan", "type": "integer"}, "settings.updatedBy.id.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Settings.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "settings.updatedBy.id.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Settings.Updatedby.Id.Equal", "type": "integer"}, "settings.updatedBy.id.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Settings.Updatedby.Id.Not.Equal", "type": "integer"}, "settings.updatedBy.id.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Settings.Updatedby.Id.Between", "type": "array"}, "settings.updatedBy.id.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Settings.Updatedby.Id.Not.Between", "type": "array"}, "settings.updatedBy.username": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Username", "type": "string"}, "settings.updatedBy.username.not": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Username.Not", "type": "string"}, "settings.updatedBy.username.contains": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Username.Contains", "type": "string"}, "settings.updatedBy.username.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Username.Not.Contains", "type": "string"}, "settings.updatedBy.username.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Username.Beginswith", "type": "string"}, "settings.updatedBy.username.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Username.Not.Beginswith", "type": "string"}, "settings.updatedBy.username.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Username.Endswith", "type": "string"}, "settings.updatedBy.username.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Username.Not.Endswith", "type": "string"}, "settings.updatedBy.email": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Email", "type": "string"}, "settings.updatedBy.email.not": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Email.Not", "type": "string"}, "settings.updatedBy.email.contains": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Email.Contains", "type": "string"}, "settings.updatedBy.email.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Email.Not.Contains", "type": "string"}, "settings.updatedBy.email.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Email.Beginswith", "type": "string"}, "settings.updatedBy.email.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Email.Not.Beginswith", "type": "string"}, "settings.updatedBy.email.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Email.Endswith", "type": "string"}, "settings.updatedBy.email.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Email.Not.Endswith", "type": "string"}, "settings.updatedBy.firstName.not.exists": {"description": "None - Filter for entries without a value", "title": "Settings.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "settings.updatedBy.firstName.exists": {"description": "None - Filter for entries with a value", "title": "Settings.Updatedby.Firstname.Exists", "type": "boolean"}, "settings.updatedBy.firstName": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Firstname", "type": "string"}, "settings.updatedBy.firstName.not": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Firstname.Not", "type": "string"}, "settings.updatedBy.firstName.contains": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Firstname.Contains", "type": "string"}, "settings.updatedBy.firstName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Firstname.Not.Contains", "type": "string"}, "settings.updatedBy.firstName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Firstname.Beginswith", "type": "string"}, "settings.updatedBy.firstName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "settings.updatedBy.firstName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Firstname.Endswith", "type": "string"}, "settings.updatedBy.firstName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Firstname.Not.Endswith", "type": "string"}, "settings.updatedBy.lastName.not.exists": {"description": "None - Filter for entries without a value", "title": "Settings.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "settings.updatedBy.lastName.exists": {"description": "None - Filter for entries with a value", "title": "Settings.Updatedby.Lastname.Exists", "type": "boolean"}, "settings.updatedBy.lastName": {"description": "None - Filter for full text matches", "title": "Settings.Updatedby.Lastname", "type": "string"}, "settings.updatedBy.lastName.not": {"description": "None - Filter for full text mismatches", "title": "Settings.Updatedby.Lastname.Not", "type": "string"}, "settings.updatedBy.lastName.contains": {"description": "None - Filter for partial text matches", "title": "Settings.Updatedby.Lastname.Contains", "type": "string"}, "settings.updatedBy.lastName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Settings.Updatedby.Lastname.Not.Contains", "type": "string"}, "settings.updatedBy.lastName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Settings.Updatedby.Lastname.Beginswith", "type": "string"}, "settings.updatedBy.lastName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "settings.updatedBy.lastName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Settings.Updatedby.Lastname.Endswith", "type": "string"}, "settings.updatedBy.lastName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Updatedby.Lastname.Not.Endswith", "type": "string"}, "settings.description": {"description": "None - Filter for full text matches", "title": "Settings.Description", "type": "string"}, "settings.description.not": {"description": "None - Filter for full text mismatches", "title": "Settings.Description.Not", "type": "string"}, "settings.description.contains": {"description": "None - Filter for partial text matches", "title": "Settings.Description.Contains", "type": "string"}, "settings.description.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Settings.Description.Not.Contains", "type": "string"}, "settings.description.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Settings.Description.Beginswith", "type": "string"}, "settings.description.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Settings.Description.Not.Beginswith", "type": "string"}, "settings.description.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Settings.Description.Endswith", "type": "string"}, "settings.description.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Settings.Description.Not.Endswith", "type": "string"}, "settings.externalSource.not.exists": {"description": "External data source - Filter for entries without a value", "title": "Settings.Externalsource.Not.Exists", "type": "boolean"}, "settings.externalSource.exists": {"description": "External data source - Filter for entries with a value", "title": "Settings.Externalsource.Exists", "type": "boolean"}, "settings.externalSource": {"description": "External data source - Filter for full text matches", "title": "Settings.Externalsource", "type": "string"}, "settings.externalSource.not": {"description": "External data source - Filter for full text mismatches", "title": "Settings.Externalsource.Not", "type": "string"}, "settings.externalSource.contains": {"description": "External data source - Filter for partial text matches", "title": "Settings.Externalsource.Contains", "type": "string"}, "settings.externalSource.not.contains": {"description": "External data source - Filter for partial text mismatches", "title": "Settings.Externalsource.Not.Contains", "type": "string"}, "settings.externalSource.beginsWith": {"description": "External data source - Filter for entries starting with the text", "title": "Settings.Externalsource.Beginswith", "type": "string"}, "settings.externalSource.not.beginsWith": {"description": "External data source - Filter for entries not starting with the text", "title": "Settings.Externalsource.Not.Beginswith", "type": "string"}, "settings.externalSource.endsWith": {"description": "External data source - Filter for entries ending with the text", "title": "Settings.Externalsource.Endswith", "type": "string"}, "settings.externalSource.not.endsWith": {"description": "External data source - Filter for entries not ending with the text", "title": "Settings.Externalsource.Not.Endswith", "type": "string"}, "settings.externalSourceId.not.exists": {"description": "External data source Id - Filter for entries without a value", "title": "Settings.Externalsourceid.Not.Exists", "type": "boolean"}, "settings.externalSourceId.exists": {"description": "External data source Id - Filter for entries with a value", "title": "Settings.Externalsourceid.Exists", "type": "boolean"}, "settings.externalSourceId": {"description": "External data source Id - Filter for reference matches", "title": "Settings.Externalsourceid", "type": "string"}, "settings.externalSourceId.not": {"description": "External data source Id - Filter for reference mismatches", "title": "Settings.Externalsourceid.Not", "type": "string"}, "settings.externalSourceId.contains": {"description": "External data source Id - Filter for partial text matches", "title": "Settings.Externalsourceid.Contains", "type": "string"}, "settings.externalSourceId.not.contains": {"description": "External data source Id - Filter for partial text mismatches", "title": "Settings.Externalsourceid.Not.Contains", "type": "string"}, "settings.externalSourceId.beginsWith": {"description": "External data source Id - Filter for entries starting with the text", "title": "Settings.Externalsourceid.Beginswith", "type": "string"}, "settings.externalSourceId.not.beginsWith": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Settings.Externalsourceid.Not.Beginswith", "type": "string"}, "settings.externalSourceId.endsWith": {"description": "External data source Id - Filter for entries ending with the text", "title": "Settings.Externalsourceid.Endswith", "type": "string"}, "settings.externalSourceId.not.endsWith": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Settings.Externalsourceid.Not.Endswith", "type": "string"}, "settings.modality": {"description": "Modality - Filter for a matching concept code", "title": "Settings.Modality", "type": "string"}, "settings.modality.not": {"description": "Modality - Filter for a mismatching concept code", "title": "Settings.Modality.Not", "type": "string"}, "settings.modality.anyOf": {"description": "Modality - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Settings.Modality.Anyof", "type": "array"}, "settings.modality.not.anyOf": {"description": "Modality - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Settings.Modality.Not.Anyof", "type": "array"}, "settings.modality.descendantsOf": {"description": "Modality - Filter for all child concepts of a given concepts code", "title": "Settings.Modality.Descendantsof", "type": "string"}, "settings.technique": {"description": "Technique - Filter for a matching concept code", "title": "Settings.Technique", "type": "string"}, "settings.technique.not": {"description": "Technique - Filter for a mismatching concept code", "title": "Settings.Technique.Not", "type": "string"}, "settings.technique.anyOf": {"description": "Technique - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Settings.Technique.Anyof", "type": "array"}, "settings.technique.not.anyOf": {"description": "Technique - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Settings.Technique.Not.Anyof", "type": "array"}, "settings.technique.descendantsOf": {"description": "Technique - Filter for all child concepts of a given concepts code", "title": "Settings.Technique.Descendantsof", "type": "string"}}, "title": "RadiotherapyFilters", "type": "object"}, "Paginated_RadiotherapySchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/RadiotherapySchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[RadiotherapySchema]", "type": "object"}, "RadiotherapyDosageSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "fractions": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "The total number of radiotherapy fractions delivered over the treatment period.", "examples": [], "title": "Total fractions", "x-expanded": null}, "dose": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Total radiation dose delivered over the full radiotherapy course", "examples": [], "title": "Total radiation dose", "x-expanded": null}, "irradiatedVolume": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume", "x-expanded": null, "x-terminology": "RadiotherapyTreatmentLocation"}, "irradiatedVolumeMorphology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphology of the anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume morphology", "x-expanded": null, "x-terminology": "RadiotherapyVolumeType"}, "irradiatedVolumeQualifier": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "General qualifier for the anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume qualifier", "x-expanded": null, "x-terminology": "RadiotherapyTreatmentLocationQualifier"}}, "required": ["id", "createdAt", "updatedAt", "description", "irradiatedVolume"], "title": "RadiotherapyDosage", "type": "object"}, "RadiotherapySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who received the radiotherapy", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "period": {"$ref": "#/components/schemas/PeriodSchema", "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.", "examples": [], "title": "Treatment period", "x-expanded": null}, "sessions": {"description": "The total number of radiotherapy sessions over the treatment period.", "examples": [], "title": "Total sessions", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/RadiotherapyIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "terminationReason": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Explanation for the premature or planned termination of the radiotherapy", "examples": [], "title": "Termination reason", "x-expanded": null, "x-terminology": "TreatmentTerminationReason"}, "therapyLineId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Therapy line to which the radiotherapy is assigned to", "examples": [], "title": "Therapy line", "x-expanded": null}, "targetedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were targeted by the radiotherapy", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Targeted neoplastic entities", "type": "array", "x-expanded": null}, "dosages": {"description": "Radiation doses administered during the radiotherapy", "items": {"$ref": "#/components/schemas/RadiotherapyDosageSchema"}, "title": "Dosages", "type": "array"}, "settings": {"description": "Settings of the radiotherapy irradiation procedure", "items": {"$ref": "#/components/schemas/RadiotherapySettingSchema"}, "title": "Settings", "type": "array"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "period", "sessions", "intent", "dosages", "settings"], "title": "Radiotherapy", "type": "object"}, "RadiotherapySettingSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "modality": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Modality of external beam or brachytherapy radiation procedures", "examples": [], "title": "Modality", "x-expanded": null, "x-terminology": "RadiotherapyModality"}, "technique": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Technique of external beam or brachytherapy radiation procedures", "examples": [], "title": "Technique", "x-expanded": null, "x-terminology": "RadiotherapyTechnique"}}, "required": ["id", "createdAt", "updatedAt", "description", "modality", "technique"], "title": "RadiotherapySetting", "type": "object"}, "RadiotherapyDosageCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "fractions": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "The total number of radiotherapy fractions delivered over the treatment period.", "examples": [], "title": "Total fractions", "x-expanded": null}, "dose": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Total radiation dose delivered over the full radiotherapy course", "examples": [], "title": "Total radiation dose", "x-expanded": null}, "irradiatedVolume": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume", "x-expanded": null, "x-terminology": "RadiotherapyTreatmentLocation"}, "irradiatedVolumeMorphology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphology of the anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume morphology", "x-expanded": null, "x-terminology": "RadiotherapyVolumeType"}, "irradiatedVolumeQualifier": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "General qualifier for the anatomical location of the irradiated volume", "examples": [], "title": "Irradiated volume qualifier", "x-expanded": null, "x-terminology": "RadiotherapyTreatmentLocationQualifier"}}, "required": ["irradiatedVolume"], "title": "RadiotherapyDosageCreate", "type": "object"}, "RadiotherapySettingCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "modality": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Modality of external beam or brachytherapy radiation procedures", "examples": [], "title": "Modality", "x-expanded": null, "x-terminology": "RadiotherapyModality"}, "technique": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Technique of external beam or brachytherapy radiation procedures", "examples": [], "title": "Technique", "x-expanded": null, "x-terminology": "RadiotherapyTechnique"}}, "required": ["modality", "technique"], "title": "RadiotherapySettingCreate", "type": "object"}, "TherapyLineCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient to whom this therapy line is associated", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "ordinal": {"description": "Number indicating the sequence in which this block of treatments were administered to the patient", "examples": [], "title": "Line ordinal number", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/TherapyLineIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "progressionDate": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Date at which progression was first detected, if applicable", "examples": [], "title": "Begin of progression", "x-expanded": null}}, "required": ["caseId", "ordinal", "intent"], "title": "TherapyLineCreate", "type": "object"}, "TherapyLineIntentChoices": {"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}, "TherapyLineFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "ordinal.lessThan": {"description": "Line ordinal number - Filter for entries with values less than the specified value", "title": "Ordinal.Lessthan", "type": "integer"}, "ordinal.lessThanOrEqual": {"description": "Line ordinal number - Filter for entries with values less than or equal to the specified value", "title": "Ordinal.Lessthanorequal", "type": "integer"}, "ordinal.greaterThan": {"description": "Line ordinal number - Filter for entries with values greater than the specified value", "title": "Ordinal.Greaterthan", "type": "integer"}, "ordinal.greaterThanOrEqual": {"description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value", "title": "Ordinal.Greaterthanorequal", "type": "integer"}, "ordinal.equal": {"description": "Line ordinal number - Filter for entries with values exactly equal to the specified value", "title": "Ordinal.Equal", "type": "integer"}, "ordinal.not.equal": {"description": "Line ordinal number - Filter for entries with values not equal to the specified value", "title": "Ordinal.Not.Equal", "type": "integer"}, "ordinal.between": {"description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ordinal.Between", "type": "array"}, "ordinal.not.between": {"description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ordinal.Not.Between", "type": "array"}, "intent": {"allOf": [{"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}], "description": "Intent - ('Filter for single value choice',)"}, "intent.not": {"allOf": [{"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}], "description": "Intent - ('Filter for all but a single value choice',)"}, "intent.anyOf": {"description": "Intent - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["curative", "palliative"], "title": "TherapyLineIntentChoices", "type": "string"}, "title": "Intent.Anyof", "type": "array"}, "progressionDate.not.exists": {"description": "Begin of progression - Filter for entries without a value", "title": "Progressiondate.Not.Exists", "type": "boolean"}, "progressionDate.exists": {"description": "Begin of progression - Filter for entries with a value", "title": "Progressiondate.Exists", "type": "boolean"}, "progressionDate.before": {"description": "Begin of progression - Filter for entries with dates before the specified value", "format": "date", "title": "Progressiondate.Before", "type": "string"}, "progressionDate.after": {"description": "Begin of progression - Filter for entries with dates after the specified value", "format": "date", "title": "Progressiondate.After", "type": "string"}, "progressionDate.onOrBefore": {"description": "Begin of progression - Filter for entries with dates on or before the specified value", "format": "date", "title": "Progressiondate.Onorbefore", "type": "string"}, "progressionDate.onOrAfter": {"description": "Begin of progression - Filter for entries with dates on or after the specified value", "format": "date", "title": "Progressiondate.Onorafter", "type": "string"}, "progressionDate.on": {"description": "Begin of progression - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Progressiondate.On", "type": "string"}, "progressionDate.not.on": {"description": "Begin of progression - Filter for entries with dates not matching the specified value", "format": "date", "title": "Progressiondate.Not.On", "type": "string"}, "progressionDate.between": {"description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Progressiondate.Between", "type": "array"}, "progressionDate.not.between": {"description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Progressiondate.Not.Between", "type": "array"}, "period.not.exists": {"description": "Period - Filter for entries without a value", "title": "Period.Not.Exists", "type": "boolean"}, "period.exists": {"description": "Period - Filter for entries with a value", "title": "Period.Exists", "type": "boolean"}, "period.overlaps": {"description": "Period - Filter for entries overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Overlaps", "type": "array"}, "period.not.overlaps": {"description": "Period - Filter for entries not overlapping with the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Overlaps", "type": "array"}, "period.contains": {"description": "Period - Filter for entries containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Contains", "type": "array"}, "period.not.contains": {"description": "Period - Filter for entries not containing the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Contains", "type": "array"}, "period.containedBy": {"description": "Period - Filter for entries whose period are contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Containedby", "type": "array"}, "period.not.containedBy": {"description": "Period - Filter for entries whose period are not contined by the time period", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Period.Not.Containedby", "type": "array"}, "label": {"description": "Label - Filter for full text matches", "title": "Label", "type": "string"}, "label.not": {"description": "Label - Filter for full text mismatches", "title": "Label.Not", "type": "string"}, "label.contains": {"description": "Label - Filter for partial text matches", "title": "Label.Contains", "type": "string"}, "label.not.contains": {"description": "Label - Filter for partial text mismatches", "title": "Label.Not.Contains", "type": "string"}, "label.beginsWith": {"description": "Label - Filter for entries starting with the text", "title": "Label.Beginswith", "type": "string"}, "label.not.beginsWith": {"description": "Label - Filter for entries not starting with the text", "title": "Label.Not.Beginswith", "type": "string"}, "label.endsWith": {"description": "Label - Filter for entries ending with the text", "title": "Label.Endswith", "type": "string"}, "label.not.endsWith": {"description": "Label - Filter for entries not ending with the text", "title": "Label.Not.Endswith", "type": "string"}, "progressionFreeSurvival.not.exists": {"description": "Progression-free survival in months - Filter for entries without a value", "title": "Progressionfreesurvival.Not.Exists", "type": "boolean"}, "progressionFreeSurvival.exists": {"description": "Progression-free survival in months - Filter for entries with a value", "title": "Progressionfreesurvival.Exists", "type": "boolean"}, "progressionFreeSurvival.lessThan": {"description": "Progression-free survival in months - Filter for entries with values less than the specified value", "title": "Progressionfreesurvival.Lessthan", "type": "number"}, "progressionFreeSurvival.lessThanOrEqual": {"description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value", "title": "Progressionfreesurvival.Lessthanorequal", "type": "number"}, "progressionFreeSurvival.greaterThan": {"description": "Progression-free survival in months - Filter for entries with values greater than the specified value", "title": "Progressionfreesurvival.Greaterthan", "type": "number"}, "progressionFreeSurvival.greaterThanOrEqual": {"description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value", "title": "Progressionfreesurvival.Greaterthanorequal", "type": "number"}, "progressionFreeSurvival.equal": {"description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value", "title": "Progressionfreesurvival.Equal", "type": "number"}, "progressionFreeSurvival.not.equal": {"description": "Progression-free survival in months - Filter for entries with values not equal to the specified value", "title": "Progressionfreesurvival.Not.Equal", "type": "number"}, "progressionFreeSurvival.between": {"description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Progressionfreesurvival.Between", "type": "array"}, "progressionFreeSurvival.not.between": {"description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Progressionfreesurvival.Not.Between", "type": "array"}}, "title": "TherapyLineFilters", "type": "object"}, "Paginated_TherapyLineSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/TherapyLineSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[TherapyLineSchema]", "type": "object"}, "TherapyLineSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient to whom this therapy line is associated", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "ordinal": {"description": "Number indicating the sequence in which this block of treatments were administered to the patient", "examples": [], "title": "Line ordinal number", "type": "integer", "x-expanded": null}, "intent": {"$ref": "#/components/schemas/TherapyLineIntentChoices", "description": "Treatment intent of the system therapy", "examples": [], "maxLength": 30, "title": "Intent", "x-expanded": null}, "progressionDate": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "Date at which progression was first detected, if applicable", "examples": [], "title": "Begin of progression", "x-expanded": null}, "period": {"anyOf": [{"$ref": "#/components/schemas/PeriodSchema"}, {"type": "null"}], "description": "Time period of the therapy line", "title": "Period"}, "label": {"description": "Label categorizing the therapy line", "title": "Label", "type": "string"}, "progressionFreeSurvival": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Progression-free survival (PFS) of the patient for the therapy line", "title": "Progression-free survival in months"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "ordinal", "intent", "label"], "title": "TherapyLine", "type": "object"}, "AdverseEventCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who had the adverse event being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the adverse event ocurred.", "examples": [], "format": "date", "title": "Event date", "type": "string", "x-expanded": null}, "event": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Classification of the adverse event using CTCAE criteria", "examples": [], "title": "Adverse event", "x-expanded": null, "x-terminology": "AdverseEventTerm"}, "grade": {"description": "The grade associated with the severity of an adverse event, using CTCAE criteria.", "examples": [], "title": "Grade", "type": "integer", "x-expanded": null}, "outcome": {"$ref": "#/components/schemas/AdverseEventOutcomeChoices", "description": "The date when the adverse event ended or returned to baseline.", "examples": [], "maxLength": 50, "title": "Date resolved", "x-expanded": null}, "dateResolved": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "The date when the adverse event ended or returned to baseline.", "examples": [], "title": "Date resolved", "x-expanded": null}}, "required": ["caseId", "date", "event", "grade", "outcome"], "title": "AdverseEventCreate", "type": "object"}, "AdverseEventOutcomeChoices": {"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}, "AdverseEventFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Event date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Event date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Event date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Event date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Event date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Event date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Event date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Event date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "event": {"description": "Adverse event - Filter for a matching concept code", "title": "Event", "type": "string"}, "event.not": {"description": "Adverse event - Filter for a mismatching concept code", "title": "Event.Not", "type": "string"}, "event.anyOf": {"description": "Adverse event - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Event.Anyof", "type": "array"}, "event.not.anyOf": {"description": "Adverse event - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Event.Not.Anyof", "type": "array"}, "event.descendantsOf": {"description": "Adverse event - Filter for all child concepts of a given concepts code", "title": "Event.Descendantsof", "type": "string"}, "grade.lessThan": {"description": "Grade - Filter for entries with values less than the specified value", "title": "Grade.Lessthan", "type": "integer"}, "grade.lessThanOrEqual": {"description": "Grade - Filter for entries with values less than or equal to the specified value", "title": "Grade.Lessthanorequal", "type": "integer"}, "grade.greaterThan": {"description": "Grade - Filter for entries with values greater than the specified value", "title": "Grade.Greaterthan", "type": "integer"}, "grade.greaterThanOrEqual": {"description": "Grade - Filter for entries with values greater than or equal to the specified value", "title": "Grade.Greaterthanorequal", "type": "integer"}, "grade.equal": {"description": "Grade - Filter for entries with values exactly equal to the specified value", "title": "Grade.Equal", "type": "integer"}, "grade.not.equal": {"description": "Grade - Filter for entries with values not equal to the specified value", "title": "Grade.Not.Equal", "type": "integer"}, "grade.between": {"description": "Grade - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Grade.Between", "type": "array"}, "grade.not.between": {"description": "Grade - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Grade.Not.Between", "type": "array"}, "outcome": {"allOf": [{"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}], "description": "Date resolved - ('Filter for single value choice',)"}, "outcome.not": {"allOf": [{"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}], "description": "Date resolved - ('Filter for all but a single value choice',)"}, "outcome.anyOf": {"description": "Date resolved - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["resolved", "resolved-with-sequelae", "recovering", "ongoing", "fatal", "unknown"], "title": "AdverseEventOutcomeChoices", "type": "string"}, "title": "Outcome.Anyof", "type": "array"}, "dateResolved.not.exists": {"description": "Date resolved - Filter for entries without a value", "title": "Dateresolved.Not.Exists", "type": "boolean"}, "dateResolved.exists": {"description": "Date resolved - Filter for entries with a value", "title": "Dateresolved.Exists", "type": "boolean"}, "dateResolved.before": {"description": "Date resolved - Filter for entries with dates before the specified value", "format": "date", "title": "Dateresolved.Before", "type": "string"}, "dateResolved.after": {"description": "Date resolved - Filter for entries with dates after the specified value", "format": "date", "title": "Dateresolved.After", "type": "string"}, "dateResolved.onOrBefore": {"description": "Date resolved - Filter for entries with dates on or before the specified value", "format": "date", "title": "Dateresolved.Onorbefore", "type": "string"}, "dateResolved.onOrAfter": {"description": "Date resolved - Filter for entries with dates on or after the specified value", "format": "date", "title": "Dateresolved.Onorafter", "type": "string"}, "dateResolved.on": {"description": "Date resolved - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Dateresolved.On", "type": "string"}, "dateResolved.not.on": {"description": "Date resolved - Filter for entries with dates not matching the specified value", "format": "date", "title": "Dateresolved.Not.On", "type": "string"}, "dateResolved.between": {"description": "Date resolved - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateresolved.Between", "type": "array"}, "dateResolved.not.between": {"description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Dateresolved.Not.Between", "type": "array"}, "suspectedCauses.id": {"description": "Id - Filter for full text matches", "title": "Suspectedcauses.Id", "type": "string"}, "suspectedCauses.id.not": {"description": "Id - Filter for full text mismatches", "title": "Suspectedcauses.Id.Not", "type": "string"}, "suspectedCauses.id.contains": {"description": "Id - Filter for partial text matches", "title": "Suspectedcauses.Id.Contains", "type": "string"}, "suspectedCauses.id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Suspectedcauses.Id.Not.Contains", "type": "string"}, "suspectedCauses.id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Suspectedcauses.Id.Beginswith", "type": "string"}, "suspectedCauses.id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Suspectedcauses.Id.Not.Beginswith", "type": "string"}, "suspectedCauses.id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Suspectedcauses.Id.Endswith", "type": "string"}, "suspectedCauses.id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Suspectedcauses.Id.Not.Endswith", "type": "string"}, "suspectedCauses.createdAt.before": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Before", "type": "string"}, "suspectedCauses.createdAt.after": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Suspectedcauses.Createdat.After", "type": "string"}, "suspectedCauses.createdAt.onOrBefore": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Onorbefore", "type": "string"}, "suspectedCauses.createdAt.onOrAfter": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Onorafter", "type": "string"}, "suspectedCauses.createdAt.on": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Suspectedcauses.Createdat.On", "type": "string"}, "suspectedCauses.createdAt.not.on": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Suspectedcauses.Createdat.Not.On", "type": "string"}, "suspectedCauses.createdAt.between": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Createdat.Between", "type": "array"}, "suspectedCauses.createdAt.not.between": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Createdat.Not.Between", "type": "array"}, "suspectedCauses.updatedAt.before": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Before", "type": "string"}, "suspectedCauses.updatedAt.after": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.After", "type": "string"}, "suspectedCauses.updatedAt.onOrBefore": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Onorbefore", "type": "string"}, "suspectedCauses.updatedAt.onOrAfter": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Onorafter", "type": "string"}, "suspectedCauses.updatedAt.on": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.On", "type": "string"}, "suspectedCauses.updatedAt.not.on": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Suspectedcauses.Updatedat.Not.On", "type": "string"}, "suspectedCauses.updatedAt.between": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Updatedat.Between", "type": "array"}, "suspectedCauses.updatedAt.not.between": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Suspectedcauses.Updatedat.Not.Between", "type": "array"}, "suspectedCauses.createdBy.not.exists": {"description": "Created By - Filter for entries without a value", "title": "Suspectedcauses.Createdby.Not.Exists", "type": "boolean"}, "suspectedCauses.createdBy.exists": {"description": "Created By - Filter for entries with a value", "title": "Suspectedcauses.Createdby.Exists", "type": "boolean"}, "suspectedCauses.updatedBy.id.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Suspectedcauses.Updatedby.Id.Lessthan", "type": "integer"}, "suspectedCauses.updatedBy.id.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Lessthanorequal", "type": "integer"}, "suspectedCauses.updatedBy.id.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Suspectedcauses.Updatedby.Id.Greaterthan", "type": "integer"}, "suspectedCauses.updatedBy.id.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "suspectedCauses.updatedBy.id.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Equal", "type": "integer"}, "suspectedCauses.updatedBy.id.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Suspectedcauses.Updatedby.Id.Not.Equal", "type": "integer"}, "suspectedCauses.updatedBy.id.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Suspectedcauses.Updatedby.Id.Between", "type": "array"}, "suspectedCauses.updatedBy.id.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Suspectedcauses.Updatedby.Id.Not.Between", "type": "array"}, "suspectedCauses.updatedBy.username": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Username", "type": "string"}, "suspectedCauses.updatedBy.username.not": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Username.Not", "type": "string"}, "suspectedCauses.updatedBy.username.contains": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Username.Contains", "type": "string"}, "suspectedCauses.updatedBy.username.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Username.Not.Contains", "type": "string"}, "suspectedCauses.updatedBy.username.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Username.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.username.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Username.Not.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.username.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Username.Endswith", "type": "string"}, "suspectedCauses.updatedBy.username.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Username.Not.Endswith", "type": "string"}, "suspectedCauses.updatedBy.email": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Email", "type": "string"}, "suspectedCauses.updatedBy.email.not": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Email.Not", "type": "string"}, "suspectedCauses.updatedBy.email.contains": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Email.Contains", "type": "string"}, "suspectedCauses.updatedBy.email.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Email.Not.Contains", "type": "string"}, "suspectedCauses.updatedBy.email.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Email.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.email.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Email.Not.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.email.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Email.Endswith", "type": "string"}, "suspectedCauses.updatedBy.email.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Email.Not.Endswith", "type": "string"}, "suspectedCauses.updatedBy.firstName.not.exists": {"description": "None - Filter for entries without a value", "title": "Suspectedcauses.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "suspectedCauses.updatedBy.firstName.exists": {"description": "None - Filter for entries with a value", "title": "Suspectedcauses.Updatedby.Firstname.Exists", "type": "boolean"}, "suspectedCauses.updatedBy.firstName": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Firstname", "type": "string"}, "suspectedCauses.updatedBy.firstName.not": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Firstname.Not", "type": "string"}, "suspectedCauses.updatedBy.firstName.contains": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Firstname.Contains", "type": "string"}, "suspectedCauses.updatedBy.firstName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Firstname.Not.Contains", "type": "string"}, "suspectedCauses.updatedBy.firstName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Firstname.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.firstName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.firstName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Firstname.Endswith", "type": "string"}, "suspectedCauses.updatedBy.firstName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Firstname.Not.Endswith", "type": "string"}, "suspectedCauses.updatedBy.lastName.not.exists": {"description": "None - Filter for entries without a value", "title": "Suspectedcauses.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "suspectedCauses.updatedBy.lastName.exists": {"description": "None - Filter for entries with a value", "title": "Suspectedcauses.Updatedby.Lastname.Exists", "type": "boolean"}, "suspectedCauses.updatedBy.lastName": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Updatedby.Lastname", "type": "string"}, "suspectedCauses.updatedBy.lastName.not": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Updatedby.Lastname.Not", "type": "string"}, "suspectedCauses.updatedBy.lastName.contains": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Updatedby.Lastname.Contains", "type": "string"}, "suspectedCauses.updatedBy.lastName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Updatedby.Lastname.Not.Contains", "type": "string"}, "suspectedCauses.updatedBy.lastName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Updatedby.Lastname.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.lastName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "suspectedCauses.updatedBy.lastName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Updatedby.Lastname.Endswith", "type": "string"}, "suspectedCauses.updatedBy.lastName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Updatedby.Lastname.Not.Endswith", "type": "string"}, "suspectedCauses.description": {"description": "None - Filter for full text matches", "title": "Suspectedcauses.Description", "type": "string"}, "suspectedCauses.description.not": {"description": "None - Filter for full text mismatches", "title": "Suspectedcauses.Description.Not", "type": "string"}, "suspectedCauses.description.contains": {"description": "None - Filter for partial text matches", "title": "Suspectedcauses.Description.Contains", "type": "string"}, "suspectedCauses.description.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Suspectedcauses.Description.Not.Contains", "type": "string"}, "suspectedCauses.description.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Suspectedcauses.Description.Beginswith", "type": "string"}, "suspectedCauses.description.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Suspectedcauses.Description.Not.Beginswith", "type": "string"}, "suspectedCauses.description.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Suspectedcauses.Description.Endswith", "type": "string"}, "suspectedCauses.description.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Suspectedcauses.Description.Not.Endswith", "type": "string"}, "suspectedCauses.externalSource.not.exists": {"description": "External data source - Filter for entries without a value", "title": "Suspectedcauses.Externalsource.Not.Exists", "type": "boolean"}, "suspectedCauses.externalSource.exists": {"description": "External data source - Filter for entries with a value", "title": "Suspectedcauses.Externalsource.Exists", "type": "boolean"}, "suspectedCauses.externalSource": {"description": "External data source - Filter for full text matches", "title": "Suspectedcauses.Externalsource", "type": "string"}, "suspectedCauses.externalSource.not": {"description": "External data source - Filter for full text mismatches", "title": "Suspectedcauses.Externalsource.Not", "type": "string"}, "suspectedCauses.externalSource.contains": {"description": "External data source - Filter for partial text matches", "title": "Suspectedcauses.Externalsource.Contains", "type": "string"}, "suspectedCauses.externalSource.not.contains": {"description": "External data source - Filter for partial text mismatches", "title": "Suspectedcauses.Externalsource.Not.Contains", "type": "string"}, "suspectedCauses.externalSource.beginsWith": {"description": "External data source - Filter for entries starting with the text", "title": "Suspectedcauses.Externalsource.Beginswith", "type": "string"}, "suspectedCauses.externalSource.not.beginsWith": {"description": "External data source - Filter for entries not starting with the text", "title": "Suspectedcauses.Externalsource.Not.Beginswith", "type": "string"}, "suspectedCauses.externalSource.endsWith": {"description": "External data source - Filter for entries ending with the text", "title": "Suspectedcauses.Externalsource.Endswith", "type": "string"}, "suspectedCauses.externalSource.not.endsWith": {"description": "External data source - Filter for entries not ending with the text", "title": "Suspectedcauses.Externalsource.Not.Endswith", "type": "string"}, "suspectedCauses.externalSourceId.not.exists": {"description": "External data source Id - Filter for entries without a value", "title": "Suspectedcauses.Externalsourceid.Not.Exists", "type": "boolean"}, "suspectedCauses.externalSourceId.exists": {"description": "External data source Id - Filter for entries with a value", "title": "Suspectedcauses.Externalsourceid.Exists", "type": "boolean"}, "suspectedCauses.externalSourceId": {"description": "External data source Id - Filter for reference matches", "title": "Suspectedcauses.Externalsourceid", "type": "string"}, "suspectedCauses.externalSourceId.not": {"description": "External data source Id - Filter for reference mismatches", "title": "Suspectedcauses.Externalsourceid.Not", "type": "string"}, "suspectedCauses.externalSourceId.contains": {"description": "External data source Id - Filter for partial text matches", "title": "Suspectedcauses.Externalsourceid.Contains", "type": "string"}, "suspectedCauses.externalSourceId.not.contains": {"description": "External data source Id - Filter for partial text mismatches", "title": "Suspectedcauses.Externalsourceid.Not.Contains", "type": "string"}, "suspectedCauses.externalSourceId.beginsWith": {"description": "External data source Id - Filter for entries starting with the text", "title": "Suspectedcauses.Externalsourceid.Beginswith", "type": "string"}, "suspectedCauses.externalSourceId.not.beginsWith": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Suspectedcauses.Externalsourceid.Not.Beginswith", "type": "string"}, "suspectedCauses.externalSourceId.endsWith": {"description": "External data source Id - Filter for entries ending with the text", "title": "Suspectedcauses.Externalsourceid.Endswith", "type": "string"}, "suspectedCauses.externalSourceId.not.endsWith": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Suspectedcauses.Externalsourceid.Not.Endswith", "type": "string"}, "suspectedCauses.systemicTherapyId.not.exists": {"description": "Suspected systemic therapy - Filter for entries without a value", "title": "Suspectedcauses.Systemictherapyid.Not.Exists", "type": "boolean"}, "suspectedCauses.systemicTherapyId.exists": {"description": "Suspected systemic therapy - Filter for entries with a value", "title": "Suspectedcauses.Systemictherapyid.Exists", "type": "boolean"}, "suspectedCauses.systemicTherapyId": {"description": "Suspected systemic therapy - Filter for reference matches", "title": "Suspectedcauses.Systemictherapyid", "type": "string"}, "suspectedCauses.systemicTherapyId.not": {"description": "Suspected systemic therapy - Filter for reference mismatches", "title": "Suspectedcauses.Systemictherapyid.Not", "type": "string"}, "suspectedCauses.systemicTherapyId.contains": {"description": "Suspected systemic therapy - Filter for partial text matches", "title": "Suspectedcauses.Systemictherapyid.Contains", "type": "string"}, "suspectedCauses.systemicTherapyId.not.contains": {"description": "Suspected systemic therapy - Filter for partial text mismatches", "title": "Suspectedcauses.Systemictherapyid.Not.Contains", "type": "string"}, "suspectedCauses.systemicTherapyId.beginsWith": {"description": "Suspected systemic therapy - Filter for entries starting with the text", "title": "Suspectedcauses.Systemictherapyid.Beginswith", "type": "string"}, "suspectedCauses.systemicTherapyId.not.beginsWith": {"description": "Suspected systemic therapy - Filter for entries not starting with the text", "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith", "type": "string"}, "suspectedCauses.systemicTherapyId.endsWith": {"description": "Suspected systemic therapy - Filter for entries ending with the text", "title": "Suspectedcauses.Systemictherapyid.Endswith", "type": "string"}, "suspectedCauses.systemicTherapyId.not.endsWith": {"description": "Suspected systemic therapy - Filter for entries not ending with the text", "title": "Suspectedcauses.Systemictherapyid.Not.Endswith", "type": "string"}, "suspectedCauses.medicationId.not.exists": {"description": "Suspected systemic therapy medication - Filter for entries without a value", "title": "Suspectedcauses.Medicationid.Not.Exists", "type": "boolean"}, "suspectedCauses.medicationId.exists": {"description": "Suspected systemic therapy medication - Filter for entries with a value", "title": "Suspectedcauses.Medicationid.Exists", "type": "boolean"}, "suspectedCauses.medicationId": {"description": "Suspected systemic therapy medication - Filter for reference matches", "title": "Suspectedcauses.Medicationid", "type": "string"}, "suspectedCauses.medicationId.not": {"description": "Suspected systemic therapy medication - Filter for reference mismatches", "title": "Suspectedcauses.Medicationid.Not", "type": "string"}, "suspectedCauses.medicationId.contains": {"description": "Suspected systemic therapy medication - Filter for partial text matches", "title": "Suspectedcauses.Medicationid.Contains", "type": "string"}, "suspectedCauses.medicationId.not.contains": {"description": "Suspected systemic therapy medication - Filter for partial text mismatches", "title": "Suspectedcauses.Medicationid.Not.Contains", "type": "string"}, "suspectedCauses.medicationId.beginsWith": {"description": "Suspected systemic therapy medication - Filter for entries starting with the text", "title": "Suspectedcauses.Medicationid.Beginswith", "type": "string"}, "suspectedCauses.medicationId.not.beginsWith": {"description": "Suspected systemic therapy medication - Filter for entries not starting with the text", "title": "Suspectedcauses.Medicationid.Not.Beginswith", "type": "string"}, "suspectedCauses.medicationId.endsWith": {"description": "Suspected systemic therapy medication - Filter for entries ending with the text", "title": "Suspectedcauses.Medicationid.Endswith", "type": "string"}, "suspectedCauses.medicationId.not.endsWith": {"description": "Suspected systemic therapy medication - Filter for entries not ending with the text", "title": "Suspectedcauses.Medicationid.Not.Endswith", "type": "string"}, "suspectedCauses.radiotherapyId.not.exists": {"description": "Suspected radiotherapy - Filter for entries without a value", "title": "Suspectedcauses.Radiotherapyid.Not.Exists", "type": "boolean"}, "suspectedCauses.radiotherapyId.exists": {"description": "Suspected radiotherapy - Filter for entries with a value", "title": "Suspectedcauses.Radiotherapyid.Exists", "type": "boolean"}, "suspectedCauses.radiotherapyId": {"description": "Suspected radiotherapy - Filter for reference matches", "title": "Suspectedcauses.Radiotherapyid", "type": "string"}, "suspectedCauses.radiotherapyId.not": {"description": "Suspected radiotherapy - Filter for reference mismatches", "title": "Suspectedcauses.Radiotherapyid.Not", "type": "string"}, "suspectedCauses.radiotherapyId.contains": {"description": "Suspected radiotherapy - Filter for partial text matches", "title": "Suspectedcauses.Radiotherapyid.Contains", "type": "string"}, "suspectedCauses.radiotherapyId.not.contains": {"description": "Suspected radiotherapy - Filter for partial text mismatches", "title": "Suspectedcauses.Radiotherapyid.Not.Contains", "type": "string"}, "suspectedCauses.radiotherapyId.beginsWith": {"description": "Suspected radiotherapy - Filter for entries starting with the text", "title": "Suspectedcauses.Radiotherapyid.Beginswith", "type": "string"}, "suspectedCauses.radiotherapyId.not.beginsWith": {"description": "Suspected radiotherapy - Filter for entries not starting with the text", "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith", "type": "string"}, "suspectedCauses.radiotherapyId.endsWith": {"description": "Suspected radiotherapy - Filter for entries ending with the text", "title": "Suspectedcauses.Radiotherapyid.Endswith", "type": "string"}, "suspectedCauses.radiotherapyId.not.endsWith": {"description": "Suspected radiotherapy - Filter for entries not ending with the text", "title": "Suspectedcauses.Radiotherapyid.Not.Endswith", "type": "string"}, "suspectedCauses.surgeryId.not.exists": {"description": "Suspected surgery - Filter for entries without a value", "title": "Suspectedcauses.Surgeryid.Not.Exists", "type": "boolean"}, "suspectedCauses.surgeryId.exists": {"description": "Suspected surgery - Filter for entries with a value", "title": "Suspectedcauses.Surgeryid.Exists", "type": "boolean"}, "suspectedCauses.surgeryId": {"description": "Suspected surgery - Filter for reference matches", "title": "Suspectedcauses.Surgeryid", "type": "string"}, "suspectedCauses.surgeryId.not": {"description": "Suspected surgery - Filter for reference mismatches", "title": "Suspectedcauses.Surgeryid.Not", "type": "string"}, "suspectedCauses.surgeryId.contains": {"description": "Suspected surgery - Filter for partial text matches", "title": "Suspectedcauses.Surgeryid.Contains", "type": "string"}, "suspectedCauses.surgeryId.not.contains": {"description": "Suspected surgery - Filter for partial text mismatches", "title": "Suspectedcauses.Surgeryid.Not.Contains", "type": "string"}, "suspectedCauses.surgeryId.beginsWith": {"description": "Suspected surgery - Filter for entries starting with the text", "title": "Suspectedcauses.Surgeryid.Beginswith", "type": "string"}, "suspectedCauses.surgeryId.not.beginsWith": {"description": "Suspected surgery - Filter for entries not starting with the text", "title": "Suspectedcauses.Surgeryid.Not.Beginswith", "type": "string"}, "suspectedCauses.surgeryId.endsWith": {"description": "Suspected surgery - Filter for entries ending with the text", "title": "Suspectedcauses.Surgeryid.Endswith", "type": "string"}, "suspectedCauses.surgeryId.not.endsWith": {"description": "Suspected surgery - Filter for entries not ending with the text", "title": "Suspectedcauses.Surgeryid.Not.Endswith", "type": "string"}, "suspectedCauses.causality.not.exists": {"description": "Causality - Filter for entries without a value", "title": "Suspectedcauses.Causality.Not.Exists", "type": "boolean"}, "suspectedCauses.causality.exists": {"description": "Causality - Filter for entries with a value", "title": "Suspectedcauses.Causality.Exists", "type": "boolean"}, "suspectedCauses.causality": {"allOf": [{"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}], "description": "Causality - ('Filter for single value choice',)"}, "suspectedCauses.causality.not": {"allOf": [{"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}], "description": "Causality - ('Filter for all but a single value choice',)"}, "suspectedCauses.causality.anyOf": {"description": "Causality - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}, "title": "Suspectedcauses.Causality.Anyof", "type": "array"}, "mitigations.id": {"description": "Id - Filter for full text matches", "title": "Mitigations.Id", "type": "string"}, "mitigations.id.not": {"description": "Id - Filter for full text mismatches", "title": "Mitigations.Id.Not", "type": "string"}, "mitigations.id.contains": {"description": "Id - Filter for partial text matches", "title": "Mitigations.Id.Contains", "type": "string"}, "mitigations.id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Mitigations.Id.Not.Contains", "type": "string"}, "mitigations.id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Mitigations.Id.Beginswith", "type": "string"}, "mitigations.id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Mitigations.Id.Not.Beginswith", "type": "string"}, "mitigations.id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Mitigations.Id.Endswith", "type": "string"}, "mitigations.id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Mitigations.Id.Not.Endswith", "type": "string"}, "mitigations.createdAt.before": {"description": "Created At - Filter for entries with dates before the specified value", "format": "date", "title": "Mitigations.Createdat.Before", "type": "string"}, "mitigations.createdAt.after": {"description": "Created At - Filter for entries with dates after the specified value", "format": "date", "title": "Mitigations.Createdat.After", "type": "string"}, "mitigations.createdAt.onOrBefore": {"description": "Created At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Mitigations.Createdat.Onorbefore", "type": "string"}, "mitigations.createdAt.onOrAfter": {"description": "Created At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Mitigations.Createdat.Onorafter", "type": "string"}, "mitigations.createdAt.on": {"description": "Created At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Mitigations.Createdat.On", "type": "string"}, "mitigations.createdAt.not.on": {"description": "Created At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Mitigations.Createdat.Not.On", "type": "string"}, "mitigations.createdAt.between": {"description": "Created At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Createdat.Between", "type": "array"}, "mitigations.createdAt.not.between": {"description": "Created At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Createdat.Not.Between", "type": "array"}, "mitigations.updatedAt.before": {"description": "Updated At - Filter for entries with dates before the specified value", "format": "date", "title": "Mitigations.Updatedat.Before", "type": "string"}, "mitigations.updatedAt.after": {"description": "Updated At - Filter for entries with dates after the specified value", "format": "date", "title": "Mitigations.Updatedat.After", "type": "string"}, "mitigations.updatedAt.onOrBefore": {"description": "Updated At - Filter for entries with dates on or before the specified value", "format": "date", "title": "Mitigations.Updatedat.Onorbefore", "type": "string"}, "mitigations.updatedAt.onOrAfter": {"description": "Updated At - Filter for entries with dates on or after the specified value", "format": "date", "title": "Mitigations.Updatedat.Onorafter", "type": "string"}, "mitigations.updatedAt.on": {"description": "Updated At - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Mitigations.Updatedat.On", "type": "string"}, "mitigations.updatedAt.not.on": {"description": "Updated At - Filter for entries with dates not matching the specified value", "format": "date", "title": "Mitigations.Updatedat.Not.On", "type": "string"}, "mitigations.updatedAt.between": {"description": "Updated At - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Updatedat.Between", "type": "array"}, "mitigations.updatedAt.not.between": {"description": "Updated At - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Mitigations.Updatedat.Not.Between", "type": "array"}, "mitigations.createdBy.not.exists": {"description": "Created By - Filter for entries without a value", "title": "Mitigations.Createdby.Not.Exists", "type": "boolean"}, "mitigations.createdBy.exists": {"description": "Created By - Filter for entries with a value", "title": "Mitigations.Createdby.Exists", "type": "boolean"}, "mitigations.updatedBy.id.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Mitigations.Updatedby.Id.Lessthan", "type": "integer"}, "mitigations.updatedBy.id.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Mitigations.Updatedby.Id.Lessthanorequal", "type": "integer"}, "mitigations.updatedBy.id.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Mitigations.Updatedby.Id.Greaterthan", "type": "integer"}, "mitigations.updatedBy.id.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Mitigations.Updatedby.Id.Greaterthanorequal", "type": "integer"}, "mitigations.updatedBy.id.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Mitigations.Updatedby.Id.Equal", "type": "integer"}, "mitigations.updatedBy.id.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Mitigations.Updatedby.Id.Not.Equal", "type": "integer"}, "mitigations.updatedBy.id.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Mitigations.Updatedby.Id.Between", "type": "array"}, "mitigations.updatedBy.id.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Mitigations.Updatedby.Id.Not.Between", "type": "array"}, "mitigations.updatedBy.username": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Username", "type": "string"}, "mitigations.updatedBy.username.not": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Username.Not", "type": "string"}, "mitigations.updatedBy.username.contains": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Username.Contains", "type": "string"}, "mitigations.updatedBy.username.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Username.Not.Contains", "type": "string"}, "mitigations.updatedBy.username.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Username.Beginswith", "type": "string"}, "mitigations.updatedBy.username.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Username.Not.Beginswith", "type": "string"}, "mitigations.updatedBy.username.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Username.Endswith", "type": "string"}, "mitigations.updatedBy.username.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Username.Not.Endswith", "type": "string"}, "mitigations.updatedBy.email": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Email", "type": "string"}, "mitigations.updatedBy.email.not": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Email.Not", "type": "string"}, "mitigations.updatedBy.email.contains": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Email.Contains", "type": "string"}, "mitigations.updatedBy.email.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Email.Not.Contains", "type": "string"}, "mitigations.updatedBy.email.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Email.Beginswith", "type": "string"}, "mitigations.updatedBy.email.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Email.Not.Beginswith", "type": "string"}, "mitigations.updatedBy.email.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Email.Endswith", "type": "string"}, "mitigations.updatedBy.email.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Email.Not.Endswith", "type": "string"}, "mitigations.updatedBy.firstName.not.exists": {"description": "None - Filter for entries without a value", "title": "Mitigations.Updatedby.Firstname.Not.Exists", "type": "boolean"}, "mitigations.updatedBy.firstName.exists": {"description": "None - Filter for entries with a value", "title": "Mitigations.Updatedby.Firstname.Exists", "type": "boolean"}, "mitigations.updatedBy.firstName": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Firstname", "type": "string"}, "mitigations.updatedBy.firstName.not": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Firstname.Not", "type": "string"}, "mitigations.updatedBy.firstName.contains": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Firstname.Contains", "type": "string"}, "mitigations.updatedBy.firstName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Firstname.Not.Contains", "type": "string"}, "mitigations.updatedBy.firstName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Firstname.Beginswith", "type": "string"}, "mitigations.updatedBy.firstName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Firstname.Not.Beginswith", "type": "string"}, "mitigations.updatedBy.firstName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Firstname.Endswith", "type": "string"}, "mitigations.updatedBy.firstName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Firstname.Not.Endswith", "type": "string"}, "mitigations.updatedBy.lastName.not.exists": {"description": "None - Filter for entries without a value", "title": "Mitigations.Updatedby.Lastname.Not.Exists", "type": "boolean"}, "mitigations.updatedBy.lastName.exists": {"description": "None - Filter for entries with a value", "title": "Mitigations.Updatedby.Lastname.Exists", "type": "boolean"}, "mitigations.updatedBy.lastName": {"description": "None - Filter for full text matches", "title": "Mitigations.Updatedby.Lastname", "type": "string"}, "mitigations.updatedBy.lastName.not": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Updatedby.Lastname.Not", "type": "string"}, "mitigations.updatedBy.lastName.contains": {"description": "None - Filter for partial text matches", "title": "Mitigations.Updatedby.Lastname.Contains", "type": "string"}, "mitigations.updatedBy.lastName.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Updatedby.Lastname.Not.Contains", "type": "string"}, "mitigations.updatedBy.lastName.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Updatedby.Lastname.Beginswith", "type": "string"}, "mitigations.updatedBy.lastName.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Updatedby.Lastname.Not.Beginswith", "type": "string"}, "mitigations.updatedBy.lastName.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Updatedby.Lastname.Endswith", "type": "string"}, "mitigations.updatedBy.lastName.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Updatedby.Lastname.Not.Endswith", "type": "string"}, "mitigations.description": {"description": "None - Filter for full text matches", "title": "Mitigations.Description", "type": "string"}, "mitigations.description.not": {"description": "None - Filter for full text mismatches", "title": "Mitigations.Description.Not", "type": "string"}, "mitigations.description.contains": {"description": "None - Filter for partial text matches", "title": "Mitigations.Description.Contains", "type": "string"}, "mitigations.description.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Mitigations.Description.Not.Contains", "type": "string"}, "mitigations.description.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Mitigations.Description.Beginswith", "type": "string"}, "mitigations.description.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Mitigations.Description.Not.Beginswith", "type": "string"}, "mitigations.description.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Mitigations.Description.Endswith", "type": "string"}, "mitigations.description.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Mitigations.Description.Not.Endswith", "type": "string"}, "mitigations.externalSource.not.exists": {"description": "External data source - Filter for entries without a value", "title": "Mitigations.Externalsource.Not.Exists", "type": "boolean"}, "mitigations.externalSource.exists": {"description": "External data source - Filter for entries with a value", "title": "Mitigations.Externalsource.Exists", "type": "boolean"}, "mitigations.externalSource": {"description": "External data source - Filter for full text matches", "title": "Mitigations.Externalsource", "type": "string"}, "mitigations.externalSource.not": {"description": "External data source - Filter for full text mismatches", "title": "Mitigations.Externalsource.Not", "type": "string"}, "mitigations.externalSource.contains": {"description": "External data source - Filter for partial text matches", "title": "Mitigations.Externalsource.Contains", "type": "string"}, "mitigations.externalSource.not.contains": {"description": "External data source - Filter for partial text mismatches", "title": "Mitigations.Externalsource.Not.Contains", "type": "string"}, "mitigations.externalSource.beginsWith": {"description": "External data source - Filter for entries starting with the text", "title": "Mitigations.Externalsource.Beginswith", "type": "string"}, "mitigations.externalSource.not.beginsWith": {"description": "External data source - Filter for entries not starting with the text", "title": "Mitigations.Externalsource.Not.Beginswith", "type": "string"}, "mitigations.externalSource.endsWith": {"description": "External data source - Filter for entries ending with the text", "title": "Mitigations.Externalsource.Endswith", "type": "string"}, "mitigations.externalSource.not.endsWith": {"description": "External data source - Filter for entries not ending with the text", "title": "Mitigations.Externalsource.Not.Endswith", "type": "string"}, "mitigations.externalSourceId.not.exists": {"description": "External data source Id - Filter for entries without a value", "title": "Mitigations.Externalsourceid.Not.Exists", "type": "boolean"}, "mitigations.externalSourceId.exists": {"description": "External data source Id - Filter for entries with a value", "title": "Mitigations.Externalsourceid.Exists", "type": "boolean"}, "mitigations.externalSourceId": {"description": "External data source Id - Filter for reference matches", "title": "Mitigations.Externalsourceid", "type": "string"}, "mitigations.externalSourceId.not": {"description": "External data source Id - Filter for reference mismatches", "title": "Mitigations.Externalsourceid.Not", "type": "string"}, "mitigations.externalSourceId.contains": {"description": "External data source Id - Filter for partial text matches", "title": "Mitigations.Externalsourceid.Contains", "type": "string"}, "mitigations.externalSourceId.not.contains": {"description": "External data source Id - Filter for partial text mismatches", "title": "Mitigations.Externalsourceid.Not.Contains", "type": "string"}, "mitigations.externalSourceId.beginsWith": {"description": "External data source Id - Filter for entries starting with the text", "title": "Mitigations.Externalsourceid.Beginswith", "type": "string"}, "mitigations.externalSourceId.not.beginsWith": {"description": "External data source Id - Filter for entries not starting with the text", "title": "Mitigations.Externalsourceid.Not.Beginswith", "type": "string"}, "mitigations.externalSourceId.endsWith": {"description": "External data source Id - Filter for entries ending with the text", "title": "Mitigations.Externalsourceid.Endswith", "type": "string"}, "mitigations.externalSourceId.not.endsWith": {"description": "External data source Id - Filter for entries not ending with the text", "title": "Mitigations.Externalsourceid.Not.Endswith", "type": "string"}, "mitigations.category": {"allOf": [{"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}], "description": "Mitigation category - ('Filter for single value choice',)"}, "mitigations.category.not": {"allOf": [{"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}], "description": "Mitigation category - ('Filter for all but a single value choice',)"}, "mitigations.category.anyOf": {"description": "Mitigation category - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}, "title": "Mitigations.Category.Anyof", "type": "array"}, "mitigations.adjustment.not.exists": {"description": "Treatment Adjustment - Filter for entries without a value", "title": "Mitigations.Adjustment.Not.Exists", "type": "boolean"}, "mitigations.adjustment.exists": {"description": "Treatment Adjustment - Filter for entries with a value", "title": "Mitigations.Adjustment.Exists", "type": "boolean"}, "mitigations.adjustment": {"description": "Treatment Adjustment - Filter for a matching concept code", "title": "Mitigations.Adjustment", "type": "string"}, "mitigations.adjustment.not": {"description": "Treatment Adjustment - Filter for a mismatching concept code", "title": "Mitigations.Adjustment.Not", "type": "string"}, "mitigations.adjustment.anyOf": {"description": "Treatment Adjustment - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Adjustment.Anyof", "type": "array"}, "mitigations.adjustment.not.anyOf": {"description": "Treatment Adjustment - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Adjustment.Not.Anyof", "type": "array"}, "mitigations.adjustment.descendantsOf": {"description": "Treatment Adjustment - Filter for all child concepts of a given concepts code", "title": "Mitigations.Adjustment.Descendantsof", "type": "string"}, "mitigations.drug.not.exists": {"description": "Pharmacological drug - Filter for entries without a value", "title": "Mitigations.Drug.Not.Exists", "type": "boolean"}, "mitigations.drug.exists": {"description": "Pharmacological drug - Filter for entries with a value", "title": "Mitigations.Drug.Exists", "type": "boolean"}, "mitigations.drug": {"description": "Pharmacological drug - Filter for a matching concept code", "title": "Mitigations.Drug", "type": "string"}, "mitigations.drug.not": {"description": "Pharmacological drug - Filter for a mismatching concept code", "title": "Mitigations.Drug.Not", "type": "string"}, "mitigations.drug.anyOf": {"description": "Pharmacological drug - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Drug.Anyof", "type": "array"}, "mitigations.drug.not.anyOf": {"description": "Pharmacological drug - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Drug.Not.Anyof", "type": "array"}, "mitigations.drug.descendantsOf": {"description": "Pharmacological drug - Filter for all child concepts of a given concepts code", "title": "Mitigations.Drug.Descendantsof", "type": "string"}, "mitigations.procedure.not.exists": {"description": "Procedure - Filter for entries without a value", "title": "Mitigations.Procedure.Not.Exists", "type": "boolean"}, "mitigations.procedure.exists": {"description": "Procedure - Filter for entries with a value", "title": "Mitigations.Procedure.Exists", "type": "boolean"}, "mitigations.procedure": {"description": "Procedure - Filter for a matching concept code", "title": "Mitigations.Procedure", "type": "string"}, "mitigations.procedure.not": {"description": "Procedure - Filter for a mismatching concept code", "title": "Mitigations.Procedure.Not", "type": "string"}, "mitigations.procedure.anyOf": {"description": "Procedure - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Procedure.Anyof", "type": "array"}, "mitigations.procedure.not.anyOf": {"description": "Procedure - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Procedure.Not.Anyof", "type": "array"}, "mitigations.procedure.descendantsOf": {"description": "Procedure - Filter for all child concepts of a given concepts code", "title": "Mitigations.Procedure.Descendantsof", "type": "string"}, "mitigations.management.not.exists": {"description": "Management - Filter for entries without a value", "title": "Mitigations.Management.Not.Exists", "type": "boolean"}, "mitigations.management.exists": {"description": "Management - Filter for entries with a value", "title": "Mitigations.Management.Exists", "type": "boolean"}, "mitigations.management": {"description": "Management - Filter for a matching concept code", "title": "Mitigations.Management", "type": "string"}, "mitigations.management.not": {"description": "Management - Filter for a mismatching concept code", "title": "Mitigations.Management.Not", "type": "string"}, "mitigations.management.anyOf": {"description": "Management - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Management.Anyof", "type": "array"}, "mitigations.management.not.anyOf": {"description": "Management - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Mitigations.Management.Not.Anyof", "type": "array"}, "mitigations.management.descendantsOf": {"description": "Management - Filter for all child concepts of a given concepts code", "title": "Mitigations.Management.Descendantsof", "type": "string"}}, "title": "AdverseEventFilters", "type": "object"}, "AdverseEventMitigationCategoryChoices": {"enum": ["adjustment", "pharmacological", "procedure"], "title": "AdverseEventMitigationCategoryChoices", "type": "string"}, "AdverseEventSuspectedCauseCausalityChoices": {"enum": ["unrelated", "unlikely-related", "possibly-related", "probably-related", "definitely-related", "conditionally-related"], "title": "AdverseEventSuspectedCauseCausalityChoices", "type": "string"}, "AdverseEventMitigationSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "category": {"$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices", "description": "Type of mitigation employed", "examples": [], "maxLength": 50, "title": "Mitigation category", "x-expanded": null}, "adjustment": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)", "examples": [], "title": "Treatment Adjustment", "x-expanded": null, "x-terminology": "AdverseEventMitigationTreatmentAdjustment"}, "drug": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)", "examples": [], "title": "Pharmacological drug", "x-expanded": null, "x-terminology": "AdverseEventMitigationDrug"}, "procedure": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)", "examples": [], "title": "Procedure", "x-expanded": null, "x-terminology": "AdverseEventMitigationProcedure"}, "management": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Management type of the adverse event mitigation", "examples": [], "title": "Management", "x-expanded": null, "x-terminology": "AdverseEventMitigationManagement"}}, "required": ["id", "createdAt", "updatedAt", "description", "category"], "title": "AdverseEventMitigation", "type": "object"}, "AdverseEventSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who had the adverse event being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the adverse event ocurred.", "examples": [], "format": "date", "title": "Event date", "type": "string", "x-expanded": null}, "event": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Classification of the adverse event using CTCAE criteria", "examples": [], "title": "Adverse event", "x-expanded": null, "x-terminology": "AdverseEventTerm"}, "grade": {"description": "The grade associated with the severity of an adverse event, using CTCAE criteria.", "examples": [], "title": "Grade", "type": "integer", "x-expanded": null}, "outcome": {"$ref": "#/components/schemas/AdverseEventOutcomeChoices", "description": "The date when the adverse event ended or returned to baseline.", "examples": [], "maxLength": 50, "title": "Date resolved", "x-expanded": null}, "dateResolved": {"anyOf": [{"format": "date", "type": "string"}, {"type": "null"}], "description": "The date when the adverse event ended or returned to baseline.", "examples": [], "title": "Date resolved", "x-expanded": null}, "suspectedCauses": {"description": "Suspected causes of the adverse event", "items": {"$ref": "#/components/schemas/AdverseEventSuspectedCauseSchema"}, "title": "Suspectedcauses", "type": "array", "validation_aliases": {"choices": ["suspected_causes", "suspectedCauses"]}}, "mitigations": {"description": "Mitigations of the adverse event", "items": {"$ref": "#/components/schemas/AdverseEventMitigationSchema"}, "title": "Mitigations", "type": "array"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "event", "grade", "outcome", "suspectedCauses", "mitigations"], "title": "AdverseEvent", "type": "object"}, "AdverseEventSuspectedCauseSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "systemicTherapyId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Systemic therapy suspected to be the cause of the adverse event", "examples": [], "title": "Suspected systemic therapy", "x-expanded": null}, "medicationId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Systemic therapy medication suspected to be the cause of the adverse event", "examples": [], "title": "Suspected systemic therapy medication", "x-expanded": null}, "radiotherapyId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Radiotherapy suspected to be the cause of the adverse event", "examples": [], "title": "Suspected radiotherapy", "x-expanded": null}, "surgeryId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Surgery suspected to be the cause of the adverse event", "examples": [], "title": "Suspected surgery", "x-expanded": null}, "causality": {"anyOf": [{"$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices", "maxLength": 50}, {"type": "null"}], "description": "Assessment of the potential causality", "examples": [], "title": "Causality", "x-expanded": null}}, "required": ["id", "createdAt", "updatedAt", "description"], "title": "AdverseEventSuspectedCause", "type": "object"}, "Paginated_AdverseEventSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/AdverseEventSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[AdverseEventSchema]", "type": "object"}, "AdverseEventMitigationCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "category": {"$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices", "description": "Type of mitigation employed", "examples": [], "maxLength": 50, "title": "Mitigation category", "x-expanded": null}, "adjustment": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)", "examples": [], "title": "Treatment Adjustment", "x-expanded": null, "x-terminology": "AdverseEventMitigationTreatmentAdjustment"}, "drug": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)", "examples": [], "title": "Pharmacological drug", "x-expanded": null, "x-terminology": "AdverseEventMitigationDrug"}, "procedure": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)", "examples": [], "title": "Procedure", "x-expanded": null, "x-terminology": "AdverseEventMitigationProcedure"}, "management": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Management type of the adverse event mitigation", "examples": [], "title": "Management", "x-expanded": null, "x-terminology": "AdverseEventMitigationManagement"}}, "required": ["category"], "title": "AdverseEventMitigationCreate", "type": "object"}, "AdverseEventSuspectedCauseCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "systemicTherapyId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Systemic therapy suspected to be the cause of the adverse event", "examples": [], "title": "Suspected systemic therapy", "x-expanded": null}, "medicationId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Systemic therapy medication suspected to be the cause of the adverse event", "examples": [], "title": "Suspected systemic therapy medication", "x-expanded": null}, "radiotherapyId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Radiotherapy suspected to be the cause of the adverse event", "examples": [], "title": "Suspected radiotherapy", "x-expanded": null}, "surgeryId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "Surgery suspected to be the cause of the adverse event", "examples": [], "title": "Suspected surgery", "x-expanded": null}, "causality": {"anyOf": [{"$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices", "maxLength": 50}, {"type": "null"}], "description": "Assessment of the potential causality", "examples": [], "title": "Causality", "x-expanded": null}}, "title": "AdverseEventSuspectedCauseCreate", "type": "object"}, "TreatmentResponseCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's treatment response is asseessed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date of the treatment response assessment", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "recist": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The classification of the treatment response according to RECIST", "examples": [], "title": "RECIST", "x-expanded": null, "x-terminology": "CancerTreatmentResponse"}, "recistInterpreted": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report", "examples": [], "title": "RECIST Interpreted?", "x-expanded": null}, "methodology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Method used to assess and classify the treatment response", "examples": [], "title": "Assessment method", "x-expanded": null, "x-terminology": "CancerTreatmentResponseObservationMethod"}, "assessedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were assesed for treatment response", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Assessed neoplastic entities", "type": "array", "x-expanded": null}, "assessedBodysites": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Anatomical location assessed to determine the treatment response", "examples": [], "title": "Assessed anatomical location", "x-expanded": null, "x-terminology": "ObservationBodySite"}}, "required": ["caseId", "date", "recist", "methodology"], "title": "TreatmentResponseCreate", "type": "object"}, "TreatmentResponseFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "recist": {"description": "RECIST - Filter for a matching concept code", "title": "Recist", "type": "string"}, "recist.not": {"description": "RECIST - Filter for a mismatching concept code", "title": "Recist.Not", "type": "string"}, "recist.anyOf": {"description": "RECIST - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Recist.Anyof", "type": "array"}, "recist.not.anyOf": {"description": "RECIST - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Recist.Not.Anyof", "type": "array"}, "recist.descendantsOf": {"description": "RECIST - Filter for all child concepts of a given concepts code", "title": "Recist.Descendantsof", "type": "string"}, "recistInterpreted.not.exists": {"description": "RECIST Interpreted? - Filter for entries without a value", "title": "Recistinterpreted.Not.Exists", "type": "boolean"}, "recistInterpreted.exists": {"description": "RECIST Interpreted? - Filter for entries with a value", "title": "Recistinterpreted.Exists", "type": "boolean"}, "recistInterpreted": {"description": "RECIST Interpreted? - ('Filter for yes/no statement',)", "title": "Recistinterpreted", "type": "boolean"}, "methodology": {"description": "Assessment method - Filter for a matching concept code", "title": "Methodology", "type": "string"}, "methodology.not": {"description": "Assessment method - Filter for a mismatching concept code", "title": "Methodology.Not", "type": "string"}, "methodology.anyOf": {"description": "Assessment method - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Anyof", "type": "array"}, "methodology.not.anyOf": {"description": "Assessment method - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Methodology.Not.Anyof", "type": "array"}, "methodology.descendantsOf": {"description": "Assessment method - Filter for all child concepts of a given concepts code", "title": "Methodology.Descendantsof", "type": "string"}, "assessedEntitiesIds": {"description": "Assessed neoplastic entities - Filter for reference matches", "title": "Assessedentitiesids", "type": "string"}, "assessedEntitiesIds.not": {"description": "Assessed neoplastic entities - Filter for reference mismatches", "title": "Assessedentitiesids.Not", "type": "string"}, "assessedBodysites.code": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Code", "type": "string"}, "assessedBodysites.code.not": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Code.Not", "type": "string"}, "assessedBodysites.code.contains": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Code.Contains", "type": "string"}, "assessedBodysites.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Code.Not.Contains", "type": "string"}, "assessedBodysites.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Code.Beginswith", "type": "string"}, "assessedBodysites.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Code.Not.Beginswith", "type": "string"}, "assessedBodysites.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Code.Endswith", "type": "string"}, "assessedBodysites.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Code.Not.Endswith", "type": "string"}, "assessedBodysites.system": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.System", "type": "string"}, "assessedBodysites.system.not": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.System.Not", "type": "string"}, "assessedBodysites.system.contains": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.System.Contains", "type": "string"}, "assessedBodysites.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.System.Not.Contains", "type": "string"}, "assessedBodysites.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.System.Beginswith", "type": "string"}, "assessedBodysites.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.System.Not.Beginswith", "type": "string"}, "assessedBodysites.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.System.Endswith", "type": "string"}, "assessedBodysites.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.System.Not.Endswith", "type": "string"}, "assessedBodysites.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Display.Not.Exists", "type": "boolean"}, "assessedBodysites.display.exists": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Display.Exists", "type": "boolean"}, "assessedBodysites.display": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Display", "type": "string"}, "assessedBodysites.display.not": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Display.Not", "type": "string"}, "assessedBodysites.display.contains": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Display.Contains", "type": "string"}, "assessedBodysites.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Display.Not.Contains", "type": "string"}, "assessedBodysites.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Display.Beginswith", "type": "string"}, "assessedBodysites.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Display.Not.Beginswith", "type": "string"}, "assessedBodysites.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Display.Endswith", "type": "string"}, "assessedBodysites.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Display.Not.Endswith", "type": "string"}, "assessedBodysites.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Version.Not.Exists", "type": "boolean"}, "assessedBodysites.version.exists": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Version.Exists", "type": "boolean"}, "assessedBodysites.version": {"description": "None - Filter for full text matches", "title": "Assessedbodysites.Version", "type": "string"}, "assessedBodysites.version.not": {"description": "None - Filter for full text mismatches", "title": "Assessedbodysites.Version.Not", "type": "string"}, "assessedBodysites.version.contains": {"description": "None - Filter for partial text matches", "title": "Assessedbodysites.Version.Contains", "type": "string"}, "assessedBodysites.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Assessedbodysites.Version.Not.Contains", "type": "string"}, "assessedBodysites.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Assessedbodysites.Version.Beginswith", "type": "string"}, "assessedBodysites.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Assessedbodysites.Version.Not.Beginswith", "type": "string"}, "assessedBodysites.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Assessedbodysites.Version.Endswith", "type": "string"}, "assessedBodysites.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Assessedbodysites.Version.Not.Endswith", "type": "string"}, "assessedBodysites.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Synonyms.Not.Exists", "type": "boolean"}, "assessedBodysites.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Synonyms.Exists", "type": "boolean"}, "assessedBodysites.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Assessedbodysites.Properties.Not.Exists", "type": "boolean"}, "assessedBodysites.properties.exists": {"description": "None - Filter for entries with a value", "title": "Assessedbodysites.Properties.Exists", "type": "boolean"}}, "title": "TreatmentResponseFilters", "type": "object"}, "Paginated_TreatmentResponseSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/TreatmentResponseSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[TreatmentResponseSchema]", "type": "object"}, "TreatmentResponseSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's treatment response is asseessed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date of the treatment response assessment", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "recist": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "The classification of the treatment response according to RECIST", "examples": [], "title": "RECIST", "x-expanded": null, "x-terminology": "CancerTreatmentResponse"}, "recistInterpreted": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report", "examples": [], "title": "RECIST Interpreted?", "x-expanded": null}, "methodology": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Method used to assess and classify the treatment response", "examples": [], "title": "Assessment method", "x-expanded": null, "x-terminology": "CancerTreatmentResponseObservationMethod"}, "assessedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were assesed for treatment response", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Assessed neoplastic entities", "type": "array", "x-expanded": null}, "assessedBodysites": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Anatomical location assessed to determine the treatment response", "examples": [], "title": "Assessed anatomical location", "x-expanded": null, "x-terminology": "ObservationBodySite"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "recist", "methodology"], "title": "TreatmentResponse", "type": "object"}, "MolecularTumorBoardCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient which was discussed at the tumor board", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Date at which the tumor board took place and/or when the board provided a recommendation.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the tumor board.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}, "recommendations": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Recommendation(s) provided by the board regarding the patient's care", "examples": [], "title": "Recommendations", "x-expanded": null, "x-terminology": "TumorBoardRecommendation"}, "conductedMolecularComparison": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board", "examples": [], "title": "Conducted molecular comparison?", "x-expanded": null}, "molecularComparisonMatchId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "The neoplastic entity that was matched during the molecular comparison", "examples": [], "title": "Molecular comparison match", "x-expanded": null}, "conductedCupCharacterization": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.", "examples": [], "title": "Conducted CUP characterization?", "x-expanded": null}, "characterizedCup": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the cancer of unknown primary (CUP) characterization was successful.", "examples": [], "title": "Successful CUP characterization?", "x-expanded": null}, "reviewedReports": {"description": "", "examples": [], "items": {"type": "string"}, "maxItems": 500, "title": "Reviewed Reports", "type": "array", "x-expanded": null}, "category": {"const": "molecular", "default": "molecular", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "reviewedReports"], "title": "MolecularTumorBoardCreate", "type": "object"}, "UnspecifiedTumorBoardCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient which was discussed at the tumor board", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Date at which the tumor board took place and/or when the board provided a recommendation.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the tumor board.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}, "recommendations": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Recommendation(s) provided by the board regarding the patient's care", "examples": [], "title": "Recommendations", "x-expanded": null, "x-terminology": "TumorBoardRecommendation"}, "category": {"const": "unspecified", "default": "unspecified", "title": "Category", "type": "string"}}, "required": ["caseId", "date"], "title": "UnspecifiedTumorBoardCreate", "type": "object"}, "TumorBoardFilters2": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "relatedEntitiesIds": {"description": "Related neoplastic entities - Filter for reference matches", "title": "Relatedentitiesids", "type": "string"}, "relatedEntitiesIds.not": {"description": "Related neoplastic entities - Filter for reference mismatches", "title": "Relatedentitiesids.Not", "type": "string"}, "recommendations.code": {"description": "None - Filter for full text matches", "title": "Recommendations.Code", "type": "string"}, "recommendations.code.not": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Code.Not", "type": "string"}, "recommendations.code.contains": {"description": "None - Filter for partial text matches", "title": "Recommendations.Code.Contains", "type": "string"}, "recommendations.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Code.Not.Contains", "type": "string"}, "recommendations.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Code.Beginswith", "type": "string"}, "recommendations.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Code.Not.Beginswith", "type": "string"}, "recommendations.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Code.Endswith", "type": "string"}, "recommendations.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Code.Not.Endswith", "type": "string"}, "recommendations.system": {"description": "None - Filter for full text matches", "title": "Recommendations.System", "type": "string"}, "recommendations.system.not": {"description": "None - Filter for full text mismatches", "title": "Recommendations.System.Not", "type": "string"}, "recommendations.system.contains": {"description": "None - Filter for partial text matches", "title": "Recommendations.System.Contains", "type": "string"}, "recommendations.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.System.Not.Contains", "type": "string"}, "recommendations.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.System.Beginswith", "type": "string"}, "recommendations.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.System.Not.Beginswith", "type": "string"}, "recommendations.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.System.Endswith", "type": "string"}, "recommendations.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.System.Not.Endswith", "type": "string"}, "recommendations.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Recommendations.Display.Not.Exists", "type": "boolean"}, "recommendations.display.exists": {"description": "None - Filter for entries with a value", "title": "Recommendations.Display.Exists", "type": "boolean"}, "recommendations.display": {"description": "None - Filter for full text matches", "title": "Recommendations.Display", "type": "string"}, "recommendations.display.not": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Display.Not", "type": "string"}, "recommendations.display.contains": {"description": "None - Filter for partial text matches", "title": "Recommendations.Display.Contains", "type": "string"}, "recommendations.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Display.Not.Contains", "type": "string"}, "recommendations.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Display.Beginswith", "type": "string"}, "recommendations.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Display.Not.Beginswith", "type": "string"}, "recommendations.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Display.Endswith", "type": "string"}, "recommendations.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Display.Not.Endswith", "type": "string"}, "recommendations.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Recommendations.Version.Not.Exists", "type": "boolean"}, "recommendations.version.exists": {"description": "None - Filter for entries with a value", "title": "Recommendations.Version.Exists", "type": "boolean"}, "recommendations.version": {"description": "None - Filter for full text matches", "title": "Recommendations.Version", "type": "string"}, "recommendations.version.not": {"description": "None - Filter for full text mismatches", "title": "Recommendations.Version.Not", "type": "string"}, "recommendations.version.contains": {"description": "None - Filter for partial text matches", "title": "Recommendations.Version.Contains", "type": "string"}, "recommendations.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recommendations.Version.Not.Contains", "type": "string"}, "recommendations.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recommendations.Version.Beginswith", "type": "string"}, "recommendations.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recommendations.Version.Not.Beginswith", "type": "string"}, "recommendations.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recommendations.Version.Endswith", "type": "string"}, "recommendations.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recommendations.Version.Not.Endswith", "type": "string"}, "recommendations.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Recommendations.Synonyms.Not.Exists", "type": "boolean"}, "recommendations.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Recommendations.Synonyms.Exists", "type": "boolean"}, "recommendations.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Recommendations.Properties.Not.Exists", "type": "boolean"}, "recommendations.properties.exists": {"description": "None - Filter for entries with a value", "title": "Recommendations.Properties.Exists", "type": "boolean"}}, "title": "TumorBoardFilters2", "type": "object"}, "AnyTumorBoard": {"anyOf": [{"$ref": "#/components/schemas/UnspecifiedTumorBoardSchema"}, {"$ref": "#/components/schemas/MolecularTumorBoardSchema"}]}, "MolecularTherapeuticRecommendationSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "expectedEffect": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the expected effect of the drug", "examples": [], "title": "Expected medication action", "x-expanded": null, "x-terminology": "ExpectedDrugAction"}, "clinicalTrial": {"anyOf": [{"maxLength": 15, "type": "string"}, {"type": "null"}], "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment", "examples": [], "title": "Recommended clinical trial", "x-expanded": null}, "offLabelUse": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the medication(s) recommended were off-label", "examples": [], "title": "Off-label use", "x-expanded": null}, "withinSoc": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the medication(s) recommended were within standard of care", "examples": [], "title": "Within SOC", "x-expanded": null}, "drugs": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Drugs(s) being recommended", "examples": [], "title": "Drug(s)", "x-expanded": null, "x-terminology": "AntineoplasticAgent"}, "supportingGenomicVariantsIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Genomic variants that support the recommendation", "examples": [], "title": "Supporting genomic variants", "x-expanded": null}, "supportingGenomicSignaturesIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Genomic signatures that support the recommendation", "examples": [], "title": "Supporting genomic signatures", "x-expanded": null}, "supportingTumorMarkersIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Tumor markers that support the recommendation", "examples": [], "title": "Supporting tumor markers", "x-expanded": null}}, "required": ["id", "createdAt", "updatedAt", "description"], "title": "MolecularTherapeuticRecommendation", "type": "object"}, "MolecularTumorBoardSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient which was discussed at the tumor board", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Date at which the tumor board took place and/or when the board provided a recommendation.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the tumor board.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}, "recommendations": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Recommendation(s) provided by the board regarding the patient's care", "examples": [], "title": "Recommendations", "x-expanded": null, "x-terminology": "TumorBoardRecommendation"}, "conductedMolecularComparison": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board", "examples": [], "title": "Conducted molecular comparison?", "x-expanded": null}, "molecularComparisonMatchId": {"anyOf": [{"format": "uuid", "type": "string"}, {"type": "null"}], "description": "The neoplastic entity that was matched during the molecular comparison", "examples": [], "title": "Molecular comparison match", "x-expanded": null}, "conductedCupCharacterization": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.", "examples": [], "title": "Conducted CUP characterization?", "x-expanded": null}, "characterizedCup": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the cancer of unknown primary (CUP) characterization was successful.", "examples": [], "title": "Successful CUP characterization?", "x-expanded": null}, "reviewedReports": {"description": "", "examples": [], "items": {"type": "string"}, "maxItems": 500, "title": "Reviewed Reports", "type": "array", "x-expanded": null}, "category": {"const": "molecular", "default": "molecular", "title": "Category", "type": "string"}, "therapeuticRecommendations": {"description": "Therapeutic recommendations of the molecular tumor board", "items": {"$ref": "#/components/schemas/MolecularTherapeuticRecommendationSchema"}, "title": "Therapeuticrecommendations", "type": "array", "validation_aliases": {"choices": ["therapeutic_recommendations", "therapeuticRecommendations"]}}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "reviewedReports", "therapeuticRecommendations"], "title": "MolecularTumorBoard", "type": "object"}, "Paginated_AnyTumorBoard_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/AnyTumorBoard"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[AnyTumorBoard]", "type": "object"}, "UnspecifiedTumorBoardSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient which was discussed at the tumor board", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Date at which the tumor board took place and/or when the board provided a recommendation.", "examples": [], "format": "date", "title": "Date", "type": "string", "x-expanded": null}, "relatedEntitiesIds": {"default": [], "description": "References to the neoplastic entities that were the focus of the tumor board.", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Related neoplastic entities", "type": "array", "x-expanded": null}, "recommendations": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Recommendation(s) provided by the board regarding the patient's care", "examples": [], "title": "Recommendations", "x-expanded": null, "x-terminology": "TumorBoardRecommendation"}, "category": {"const": "unspecified", "default": "unspecified", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date"], "title": "UnspecifiedTumorBoard", "type": "object"}, "MolecularTherapeuticRecommendationCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "expectedEffect": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the expected effect of the drug", "examples": [], "title": "Expected medication action", "x-expanded": null, "x-terminology": "ExpectedDrugAction"}, "clinicalTrial": {"anyOf": [{"maxLength": 15, "type": "string"}, {"type": "null"}], "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment", "examples": [], "title": "Recommended clinical trial", "x-expanded": null}, "offLabelUse": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the medication(s) recommended were off-label", "examples": [], "title": "Off-label use", "x-expanded": null}, "withinSoc": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the medication(s) recommended were within standard of care", "examples": [], "title": "Within SOC", "x-expanded": null}, "drugs": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Drugs(s) being recommended", "examples": [], "title": "Drug(s)", "x-expanded": null, "x-terminology": "AntineoplasticAgent"}, "supportingGenomicVariantsIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Genomic variants that support the recommendation", "examples": [], "title": "Supporting genomic variants", "x-expanded": null}, "supportingGenomicSignaturesIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Genomic signatures that support the recommendation", "examples": [], "title": "Supporting genomic signatures", "x-expanded": null}, "supportingTumorMarkersIds": {"anyOf": [{"items": {"format": "uuid", "type": "string"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Tumor markers that support the recommendation", "examples": [], "title": "Supporting tumor markers", "x-expanded": null}}, "title": "MolecularTherapeuticRecommendationCreate", "type": "object"}, "PerformanceStatusCreate": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's performance status is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the performance score was performed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "ecogScore": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "ECOG Performance Status Score", "examples": [], "title": "ECOG Score", "x-expanded": null}, "karnofskyScore": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Karnofsky Performance Status Score", "examples": [], "title": "Karnofsky Score", "x-expanded": null}}, "required": ["caseId", "date"], "title": "PerformanceStatusCreate", "type": "object"}, "PerformanceStatusFilters": {"properties": {"ecogInterpretation.not.exists": {"description": "None - Filter for entries without a value", "title": "Ecoginterpretation.Not.Exists", "type": "boolean"}, "ecogInterpretation.exists": {"description": "None - Filter for entries with a value", "title": "Ecoginterpretation.Exists", "type": "boolean"}, "ecogInterpretation": {"description": "None - Filter for a matching concept code", "title": "Ecoginterpretation", "type": "string"}, "ecogInterpretation.not": {"description": "None - Filter for a mismatching concept code", "title": "Ecoginterpretation.Not", "type": "string"}, "ecogInterpretation.anyOf": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Ecoginterpretation.Anyof", "type": "array"}, "ecogInterpretation.not.anyOf": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Ecoginterpretation.Not.Anyof", "type": "array"}, "ecogInterpretation.descendantsOf": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Ecoginterpretation.Descendantsof", "type": "string"}, "karnofskyInterpretation.not.exists": {"description": "None - Filter for entries without a value", "title": "Karnofskyinterpretation.Not.Exists", "type": "boolean"}, "karnofskyInterpretation.exists": {"description": "None - Filter for entries with a value", "title": "Karnofskyinterpretation.Exists", "type": "boolean"}, "karnofskyInterpretation": {"description": "None - Filter for a matching concept code", "title": "Karnofskyinterpretation", "type": "string"}, "karnofskyInterpretation.not": {"description": "None - Filter for a mismatching concept code", "title": "Karnofskyinterpretation.Not", "type": "string"}, "karnofskyInterpretation.anyOf": {"description": "None - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Karnofskyinterpretation.Anyof", "type": "array"}, "karnofskyInterpretation.not.anyOf": {"description": "None - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Karnofskyinterpretation.Not.Anyof", "type": "array"}, "karnofskyInterpretation.descendantsOf": {"description": "None - Filter for all child concepts of a given concepts code", "title": "Karnofskyinterpretation.Descendantsof", "type": "string"}, "id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "ecogScore.not.exists": {"description": "ECOG Score - Filter for entries without a value", "title": "Ecogscore.Not.Exists", "type": "boolean"}, "ecogScore.exists": {"description": "ECOG Score - Filter for entries with a value", "title": "Ecogscore.Exists", "type": "boolean"}, "ecogScore.lessThan": {"description": "ECOG Score - Filter for entries with values less than the specified value", "title": "Ecogscore.Lessthan", "type": "integer"}, "ecogScore.lessThanOrEqual": {"description": "ECOG Score - Filter for entries with values less than or equal to the specified value", "title": "Ecogscore.Lessthanorequal", "type": "integer"}, "ecogScore.greaterThan": {"description": "ECOG Score - Filter for entries with values greater than the specified value", "title": "Ecogscore.Greaterthan", "type": "integer"}, "ecogScore.greaterThanOrEqual": {"description": "ECOG Score - Filter for entries with values greater than or equal to the specified value", "title": "Ecogscore.Greaterthanorequal", "type": "integer"}, "ecogScore.equal": {"description": "ECOG Score - Filter for entries with values exactly equal to the specified value", "title": "Ecogscore.Equal", "type": "integer"}, "ecogScore.not.equal": {"description": "ECOG Score - Filter for entries with values not equal to the specified value", "title": "Ecogscore.Not.Equal", "type": "integer"}, "ecogScore.between": {"description": "ECOG Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ecogscore.Between", "type": "array"}, "ecogScore.not.between": {"description": "ECOG Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Ecogscore.Not.Between", "type": "array"}, "karnofskyScore.not.exists": {"description": "Karnofsky Score - Filter for entries without a value", "title": "Karnofskyscore.Not.Exists", "type": "boolean"}, "karnofskyScore.exists": {"description": "Karnofsky Score - Filter for entries with a value", "title": "Karnofskyscore.Exists", "type": "boolean"}, "karnofskyScore.lessThan": {"description": "Karnofsky Score - Filter for entries with values less than the specified value", "title": "Karnofskyscore.Lessthan", "type": "integer"}, "karnofskyScore.lessThanOrEqual": {"description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value", "title": "Karnofskyscore.Lessthanorequal", "type": "integer"}, "karnofskyScore.greaterThan": {"description": "Karnofsky Score - Filter for entries with values greater than the specified value", "title": "Karnofskyscore.Greaterthan", "type": "integer"}, "karnofskyScore.greaterThanOrEqual": {"description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value", "title": "Karnofskyscore.Greaterthanorequal", "type": "integer"}, "karnofskyScore.equal": {"description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value", "title": "Karnofskyscore.Equal", "type": "integer"}, "karnofskyScore.not.equal": {"description": "Karnofsky Score - Filter for entries with values not equal to the specified value", "title": "Karnofskyscore.Not.Equal", "type": "integer"}, "karnofskyScore.between": {"description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Karnofskyscore.Between", "type": "array"}, "karnofskyScore.not.between": {"description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Karnofskyscore.Not.Between", "type": "array"}}, "title": "PerformanceStatusFilters", "type": "object"}, "Paginated_PerformanceStatus_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/PerformanceStatus"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[PerformanceStatus]", "type": "object"}, "PerformanceStatus": {"properties": {"description": {"description": "Human-readable description of the performance status", "title": "Description", "type": "string"}, "ecogInterpretation": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Official interpretation of the ECOG score"}, "karnofskyInterpretation": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Official interpretation of the Karnofsky score"}, "id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's performance status is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the performance score was performed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "ecogScore": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "ECOG Performance Status Score", "examples": [], "title": "ECOG Score", "x-expanded": null}, "karnofskyScore": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Karnofsky Performance Status Score", "examples": [], "title": "Karnofsky Score", "x-expanded": null}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}}, "required": ["description", "ecogInterpretation", "karnofskyInterpretation", "id", "createdAt", "updatedAt", "caseId", "date"], "title": "PerformanceStatus", "type": "object"}, "GenomicVariantAssessmentChoices": {"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}, "GenomicVariantClinicalRelevanceChoices": {"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}, "GenomicVariantConfidenceChoices": {"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}, "GenomicVariantCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who' genomic variant is described", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the genomic variant was detected and/or reported.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "genePanel": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "Commercial or official name of the gene panel tested to identify the variant", "examples": [], "title": "Gene panel", "x-expanded": null}, "assessment": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantAssessmentChoices", "maxLength": 15}, {"type": "null"}], "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.", "examples": [], "title": "Assessment", "x-expanded": null}, "confidence": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantConfidenceChoices", "maxLength": 15}, {"type": "null"}], "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.", "examples": [], "title": "Confidence", "x-expanded": null}, "analysisMethod": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Analysis method used to detect the variant", "examples": [], "title": "Analysis method", "x-expanded": null, "x-terminology": "StructuralVariantAnalysisMethod"}, "clinicalRelevance": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"}, {"type": "null"}], "description": "Classification of the clinical relevance or pathogenicity of the variant.", "examples": [], "title": "Clinical relevance", "x-expanded": null}, "cytogeneticLocation": {"anyOf": [{"maxLength": 60, "type": "string"}, {"type": "null"}], "description": "The genetic address of the variant specifying the relevant chromosomal region.", "examples": [], "title": "Cytogenetic location", "x-expanded": null}, "genomeAssemblyVersion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The reference genome assembly versionused in this analysis.", "examples": [], "title": "Genome assembly version", "x-expanded": null, "x-terminology": "ReferenceGenomeBuild"}, "genomicRefseq": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')", "examples": [], "title": "Genomic RefSeq", "x-expanded": null}, "transcriptRefseq": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)", "examples": [], "title": "Transcript RefSeq", "x-expanded": null}, "codingHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T", "examples": [], "title": "Coding DNA change expression (cHGVS)", "x-expanded": null}, "proteinHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)", "examples": [], "title": "Protein/aminoacid change expression (pHGVS)", "x-expanded": null}, "genomicHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup", "examples": [], "title": "Genomic change expression (gHGVS)", "x-expanded": null}, "dnaChangeType": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the DNA change type of the variant.", "examples": [], "title": "Coding DNA change type", "x-expanded": null, "x-terminology": "DnaChangeType"}, "aminoacidChangeType": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the amino acid change type", "examples": [], "title": "Aminoacid change type", "x-expanded": null, "x-terminology": "AminoAcidChangeType"}, "molecularConsequence": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.", "examples": [], "title": "Molecular consequence", "x-expanded": null, "x-terminology": "MolecularConsequence"}, "copyNumber": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.", "examples": [], "title": "Copy number", "x-expanded": null}, "alleleFrequency": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.", "examples": [], "title": "Allele frequency", "x-expanded": null}, "alleleDepth": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.", "examples": [], "title": "Allele depth (reads)", "x-expanded": null}, "zygosity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The observed level of occurrence of the variant in the set of chromosomes.", "examples": [], "title": "Zygosity", "x-expanded": null, "x-terminology": "Zygosity"}, "inheritance": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Variant inheritance origin (if known).", "examples": [], "title": "Inheritance", "x-expanded": null, "x-terminology": "VariantInheritance"}, "coordinateSystem": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.", "examples": [], "title": "Coordinate system", "x-expanded": null, "x-terminology": "GenomicCoordinateSystem"}, "exactGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The exact integer-based genomic coordinates of the start and end of the variant region. \"High\" can be omitted for single nucleotide variants.", "examples": [], "title": "Exact genomic coordinates", "x-expanded": null}, "innerGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.", "examples": [], "title": "Inner genomic coordinates", "x-expanded": null}, "outerGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.", "examples": [], "title": "Outer genomic coordinates", "x-expanded": null}, "clinvar": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Accession number in the ClinVar variant database, given for cross-reference.", "examples": [], "title": "ClinVar accession number", "x-expanded": null}, "genes": {"default": [], "description": "Gene(s) affected by this variant", "examples": [], "items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Gene(s)", "type": "array", "x-expanded": null, "x-terminology": "Gene"}, "chromosomes": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Chromosome(s) affected by this variant", "examples": [], "title": "Chromosome(s)", "x-expanded": null, "x-terminology": "ChromosomeIdentifier"}}, "required": ["caseId", "date"], "title": "GenomicVariantCreate", "type": "object"}, "RangeSchema": {"properties": {"start": {"anyOf": [{"type": "integer"}, {"type": "number"}], "title": "Start"}, "end": {"anyOf": [{"type": "integer"}, {"type": "number"}, {"type": "null"}], "title": "End"}}, "required": ["start"], "title": "Range", "type": "object"}, "GenomicVariantFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "genePanel.not.exists": {"description": "Gene panel - Filter for entries without a value", "title": "Genepanel.Not.Exists", "type": "boolean"}, "genePanel.exists": {"description": "Gene panel - Filter for entries with a value", "title": "Genepanel.Exists", "type": "boolean"}, "genePanel": {"description": "Gene panel - Filter for full text matches", "title": "Genepanel", "type": "string"}, "genePanel.not": {"description": "Gene panel - Filter for full text mismatches", "title": "Genepanel.Not", "type": "string"}, "genePanel.contains": {"description": "Gene panel - Filter for partial text matches", "title": "Genepanel.Contains", "type": "string"}, "genePanel.not.contains": {"description": "Gene panel - Filter for partial text mismatches", "title": "Genepanel.Not.Contains", "type": "string"}, "genePanel.beginsWith": {"description": "Gene panel - Filter for entries starting with the text", "title": "Genepanel.Beginswith", "type": "string"}, "genePanel.not.beginsWith": {"description": "Gene panel - Filter for entries not starting with the text", "title": "Genepanel.Not.Beginswith", "type": "string"}, "genePanel.endsWith": {"description": "Gene panel - Filter for entries ending with the text", "title": "Genepanel.Endswith", "type": "string"}, "genePanel.not.endsWith": {"description": "Gene panel - Filter for entries not ending with the text", "title": "Genepanel.Not.Endswith", "type": "string"}, "assessment.not.exists": {"description": "Assessment - Filter for entries without a value", "title": "Assessment.Not.Exists", "type": "boolean"}, "assessment.exists": {"description": "Assessment - Filter for entries with a value", "title": "Assessment.Exists", "type": "boolean"}, "assessment": {"allOf": [{"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}], "description": "Assessment - ('Filter for single value choice',)"}, "assessment.not": {"allOf": [{"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}], "description": "Assessment - ('Filter for all but a single value choice',)"}, "assessment.anyOf": {"description": "Assessment - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["present", "absent", "no-call", "indeterminate"], "title": "GenomicVariantAssessmentChoices", "type": "string"}, "title": "Assessment.Anyof", "type": "array"}, "confidence.not.exists": {"description": "Confidence - Filter for entries without a value", "title": "Confidence.Not.Exists", "type": "boolean"}, "confidence.exists": {"description": "Confidence - Filter for entries with a value", "title": "Confidence.Exists", "type": "boolean"}, "confidence": {"allOf": [{"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}], "description": "Confidence - ('Filter for single value choice',)"}, "confidence.not": {"allOf": [{"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}], "description": "Confidence - ('Filter for all but a single value choice',)"}, "confidence.anyOf": {"description": "Confidence - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["low", "high", "indeterminate"], "title": "GenomicVariantConfidenceChoices", "type": "string"}, "title": "Confidence.Anyof", "type": "array"}, "analysisMethod.not.exists": {"description": "Analysis method - Filter for entries without a value", "title": "Analysismethod.Not.Exists", "type": "boolean"}, "analysisMethod.exists": {"description": "Analysis method - Filter for entries with a value", "title": "Analysismethod.Exists", "type": "boolean"}, "analysisMethod": {"description": "Analysis method - Filter for a matching concept code", "title": "Analysismethod", "type": "string"}, "analysisMethod.not": {"description": "Analysis method - Filter for a mismatching concept code", "title": "Analysismethod.Not", "type": "string"}, "analysisMethod.anyOf": {"description": "Analysis method - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Analysismethod.Anyof", "type": "array"}, "analysisMethod.not.anyOf": {"description": "Analysis method - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Analysismethod.Not.Anyof", "type": "array"}, "analysisMethod.descendantsOf": {"description": "Analysis method - Filter for all child concepts of a given concepts code", "title": "Analysismethod.Descendantsof", "type": "string"}, "clinicalRelevance.not.exists": {"description": "Clinical relevance - Filter for entries without a value", "title": "Clinicalrelevance.Not.Exists", "type": "boolean"}, "clinicalRelevance.exists": {"description": "Clinical relevance - Filter for entries with a value", "title": "Clinicalrelevance.Exists", "type": "boolean"}, "clinicalRelevance": {"allOf": [{"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}], "description": "Clinical relevance - ('Filter for single value choice',)"}, "clinicalRelevance.not": {"allOf": [{"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}], "description": "Clinical relevance - ('Filter for all but a single value choice',)"}, "clinicalRelevance.anyOf": {"description": "Clinical relevance - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["pathogenic", "likely_pathogenic", "uncertain_significance", "ambiguous", "likely_benign", "benign"], "title": "GenomicVariantClinicalRelevanceChoices", "type": "string"}, "title": "Clinicalrelevance.Anyof", "type": "array"}, "cytogeneticLocation.not.exists": {"description": "Cytogenetic location - Filter for entries without a value", "title": "Cytogeneticlocation.Not.Exists", "type": "boolean"}, "cytogeneticLocation.exists": {"description": "Cytogenetic location - Filter for entries with a value", "title": "Cytogeneticlocation.Exists", "type": "boolean"}, "cytogeneticLocation": {"description": "Cytogenetic location - Filter for full text matches", "title": "Cytogeneticlocation", "type": "string"}, "cytogeneticLocation.not": {"description": "Cytogenetic location - Filter for full text mismatches", "title": "Cytogeneticlocation.Not", "type": "string"}, "cytogeneticLocation.contains": {"description": "Cytogenetic location - Filter for partial text matches", "title": "Cytogeneticlocation.Contains", "type": "string"}, "cytogeneticLocation.not.contains": {"description": "Cytogenetic location - Filter for partial text mismatches", "title": "Cytogeneticlocation.Not.Contains", "type": "string"}, "cytogeneticLocation.beginsWith": {"description": "Cytogenetic location - Filter for entries starting with the text", "title": "Cytogeneticlocation.Beginswith", "type": "string"}, "cytogeneticLocation.not.beginsWith": {"description": "Cytogenetic location - Filter for entries not starting with the text", "title": "Cytogeneticlocation.Not.Beginswith", "type": "string"}, "cytogeneticLocation.endsWith": {"description": "Cytogenetic location - Filter for entries ending with the text", "title": "Cytogeneticlocation.Endswith", "type": "string"}, "cytogeneticLocation.not.endsWith": {"description": "Cytogenetic location - Filter for entries not ending with the text", "title": "Cytogeneticlocation.Not.Endswith", "type": "string"}, "genomeAssemblyVersion.not.exists": {"description": "Genome assembly version - Filter for entries without a value", "title": "Genomeassemblyversion.Not.Exists", "type": "boolean"}, "genomeAssemblyVersion.exists": {"description": "Genome assembly version - Filter for entries with a value", "title": "Genomeassemblyversion.Exists", "type": "boolean"}, "genomeAssemblyVersion": {"description": "Genome assembly version - Filter for a matching concept code", "title": "Genomeassemblyversion", "type": "string"}, "genomeAssemblyVersion.not": {"description": "Genome assembly version - Filter for a mismatching concept code", "title": "Genomeassemblyversion.Not", "type": "string"}, "genomeAssemblyVersion.anyOf": {"description": "Genome assembly version - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Genomeassemblyversion.Anyof", "type": "array"}, "genomeAssemblyVersion.not.anyOf": {"description": "Genome assembly version - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Genomeassemblyversion.Not.Anyof", "type": "array"}, "genomeAssemblyVersion.descendantsOf": {"description": "Genome assembly version - Filter for all child concepts of a given concepts code", "title": "Genomeassemblyversion.Descendantsof", "type": "string"}, "genomicRefseq.not.exists": {"description": "Genomic RefSeq - Filter for entries without a value", "title": "Genomicrefseq.Not.Exists", "type": "boolean"}, "genomicRefseq.exists": {"description": "Genomic RefSeq - Filter for entries with a value", "title": "Genomicrefseq.Exists", "type": "boolean"}, "genomicRefseq": {"description": "Genomic RefSeq - Filter for full text matches", "title": "Genomicrefseq", "type": "string"}, "genomicRefseq.not": {"description": "Genomic RefSeq - Filter for full text mismatches", "title": "Genomicrefseq.Not", "type": "string"}, "genomicRefseq.contains": {"description": "Genomic RefSeq - Filter for partial text matches", "title": "Genomicrefseq.Contains", "type": "string"}, "genomicRefseq.not.contains": {"description": "Genomic RefSeq - Filter for partial text mismatches", "title": "Genomicrefseq.Not.Contains", "type": "string"}, "genomicRefseq.beginsWith": {"description": "Genomic RefSeq - Filter for entries starting with the text", "title": "Genomicrefseq.Beginswith", "type": "string"}, "genomicRefseq.not.beginsWith": {"description": "Genomic RefSeq - Filter for entries not starting with the text", "title": "Genomicrefseq.Not.Beginswith", "type": "string"}, "genomicRefseq.endsWith": {"description": "Genomic RefSeq - Filter for entries ending with the text", "title": "Genomicrefseq.Endswith", "type": "string"}, "genomicRefseq.not.endsWith": {"description": "Genomic RefSeq - Filter for entries not ending with the text", "title": "Genomicrefseq.Not.Endswith", "type": "string"}, "transcriptRefseq.not.exists": {"description": "Transcript RefSeq - Filter for entries without a value", "title": "Transcriptrefseq.Not.Exists", "type": "boolean"}, "transcriptRefseq.exists": {"description": "Transcript RefSeq - Filter for entries with a value", "title": "Transcriptrefseq.Exists", "type": "boolean"}, "transcriptRefseq": {"description": "Transcript RefSeq - Filter for full text matches", "title": "Transcriptrefseq", "type": "string"}, "transcriptRefseq.not": {"description": "Transcript RefSeq - Filter for full text mismatches", "title": "Transcriptrefseq.Not", "type": "string"}, "transcriptRefseq.contains": {"description": "Transcript RefSeq - Filter for partial text matches", "title": "Transcriptrefseq.Contains", "type": "string"}, "transcriptRefseq.not.contains": {"description": "Transcript RefSeq - Filter for partial text mismatches", "title": "Transcriptrefseq.Not.Contains", "type": "string"}, "transcriptRefseq.beginsWith": {"description": "Transcript RefSeq - Filter for entries starting with the text", "title": "Transcriptrefseq.Beginswith", "type": "string"}, "transcriptRefseq.not.beginsWith": {"description": "Transcript RefSeq - Filter for entries not starting with the text", "title": "Transcriptrefseq.Not.Beginswith", "type": "string"}, "transcriptRefseq.endsWith": {"description": "Transcript RefSeq - Filter for entries ending with the text", "title": "Transcriptrefseq.Endswith", "type": "string"}, "transcriptRefseq.not.endsWith": {"description": "Transcript RefSeq - Filter for entries not ending with the text", "title": "Transcriptrefseq.Not.Endswith", "type": "string"}, "codingHgvs.not.exists": {"description": "Coding DNA change expression (cHGVS) - Filter for entries without a value", "title": "Codinghgvs.Not.Exists", "type": "boolean"}, "codingHgvs.exists": {"description": "Coding DNA change expression (cHGVS) - Filter for entries with a value", "title": "Codinghgvs.Exists", "type": "boolean"}, "codingHgvs": {"description": "Coding DNA change expression (cHGVS) - Filter for full text matches", "title": "Codinghgvs", "type": "string"}, "codingHgvs.not": {"description": "Coding DNA change expression (cHGVS) - Filter for full text mismatches", "title": "Codinghgvs.Not", "type": "string"}, "codingHgvs.contains": {"description": "Coding DNA change expression (cHGVS) - Filter for partial text matches", "title": "Codinghgvs.Contains", "type": "string"}, "codingHgvs.not.contains": {"description": "Coding DNA change expression (cHGVS) - Filter for partial text mismatches", "title": "Codinghgvs.Not.Contains", "type": "string"}, "codingHgvs.beginsWith": {"description": "Coding DNA change expression (cHGVS) - Filter for entries starting with the text", "title": "Codinghgvs.Beginswith", "type": "string"}, "codingHgvs.not.beginsWith": {"description": "Coding DNA change expression (cHGVS) - Filter for entries not starting with the text", "title": "Codinghgvs.Not.Beginswith", "type": "string"}, "codingHgvs.endsWith": {"description": "Coding DNA change expression (cHGVS) - Filter for entries ending with the text", "title": "Codinghgvs.Endswith", "type": "string"}, "codingHgvs.not.endsWith": {"description": "Coding DNA change expression (cHGVS) - Filter for entries not ending with the text", "title": "Codinghgvs.Not.Endswith", "type": "string"}, "proteinHgvs.not.exists": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries without a value", "title": "Proteinhgvs.Not.Exists", "type": "boolean"}, "proteinHgvs.exists": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries with a value", "title": "Proteinhgvs.Exists", "type": "boolean"}, "proteinHgvs": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for full text matches", "title": "Proteinhgvs", "type": "string"}, "proteinHgvs.not": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for full text mismatches", "title": "Proteinhgvs.Not", "type": "string"}, "proteinHgvs.contains": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text matches", "title": "Proteinhgvs.Contains", "type": "string"}, "proteinHgvs.not.contains": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for partial text mismatches", "title": "Proteinhgvs.Not.Contains", "type": "string"}, "proteinHgvs.beginsWith": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries starting with the text", "title": "Proteinhgvs.Beginswith", "type": "string"}, "proteinHgvs.not.beginsWith": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not starting with the text", "title": "Proteinhgvs.Not.Beginswith", "type": "string"}, "proteinHgvs.endsWith": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries ending with the text", "title": "Proteinhgvs.Endswith", "type": "string"}, "proteinHgvs.not.endsWith": {"description": "Protein/aminoacid change expression (pHGVS) - Filter for entries not ending with the text", "title": "Proteinhgvs.Not.Endswith", "type": "string"}, "genomicHgvs.not.exists": {"description": "Genomic change expression (gHGVS) - Filter for entries without a value", "title": "Genomichgvs.Not.Exists", "type": "boolean"}, "genomicHgvs.exists": {"description": "Genomic change expression (gHGVS) - Filter for entries with a value", "title": "Genomichgvs.Exists", "type": "boolean"}, "genomicHgvs": {"description": "Genomic change expression (gHGVS) - Filter for full text matches", "title": "Genomichgvs", "type": "string"}, "genomicHgvs.not": {"description": "Genomic change expression (gHGVS) - Filter for full text mismatches", "title": "Genomichgvs.Not", "type": "string"}, "genomicHgvs.contains": {"description": "Genomic change expression (gHGVS) - Filter for partial text matches", "title": "Genomichgvs.Contains", "type": "string"}, "genomicHgvs.not.contains": {"description": "Genomic change expression (gHGVS) - Filter for partial text mismatches", "title": "Genomichgvs.Not.Contains", "type": "string"}, "genomicHgvs.beginsWith": {"description": "Genomic change expression (gHGVS) - Filter for entries starting with the text", "title": "Genomichgvs.Beginswith", "type": "string"}, "genomicHgvs.not.beginsWith": {"description": "Genomic change expression (gHGVS) - Filter for entries not starting with the text", "title": "Genomichgvs.Not.Beginswith", "type": "string"}, "genomicHgvs.endsWith": {"description": "Genomic change expression (gHGVS) - Filter for entries ending with the text", "title": "Genomichgvs.Endswith", "type": "string"}, "genomicHgvs.not.endsWith": {"description": "Genomic change expression (gHGVS) - Filter for entries not ending with the text", "title": "Genomichgvs.Not.Endswith", "type": "string"}, "dnaChangeType.not.exists": {"description": "Coding DNA change type - Filter for entries without a value", "title": "Dnachangetype.Not.Exists", "type": "boolean"}, "dnaChangeType.exists": {"description": "Coding DNA change type - Filter for entries with a value", "title": "Dnachangetype.Exists", "type": "boolean"}, "dnaChangeType": {"description": "Coding DNA change type - Filter for a matching concept code", "title": "Dnachangetype", "type": "string"}, "dnaChangeType.not": {"description": "Coding DNA change type - Filter for a mismatching concept code", "title": "Dnachangetype.Not", "type": "string"}, "dnaChangeType.anyOf": {"description": "Coding DNA change type - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Dnachangetype.Anyof", "type": "array"}, "dnaChangeType.not.anyOf": {"description": "Coding DNA change type - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Dnachangetype.Not.Anyof", "type": "array"}, "dnaChangeType.descendantsOf": {"description": "Coding DNA change type - Filter for all child concepts of a given concepts code", "title": "Dnachangetype.Descendantsof", "type": "string"}, "aminoacidChangeType.not.exists": {"description": "Aminoacid change type - Filter for entries without a value", "title": "Aminoacidchangetype.Not.Exists", "type": "boolean"}, "aminoacidChangeType.exists": {"description": "Aminoacid change type - Filter for entries with a value", "title": "Aminoacidchangetype.Exists", "type": "boolean"}, "aminoacidChangeType": {"description": "Aminoacid change type - Filter for a matching concept code", "title": "Aminoacidchangetype", "type": "string"}, "aminoacidChangeType.not": {"description": "Aminoacid change type - Filter for a mismatching concept code", "title": "Aminoacidchangetype.Not", "type": "string"}, "aminoacidChangeType.anyOf": {"description": "Aminoacid change type - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Aminoacidchangetype.Anyof", "type": "array"}, "aminoacidChangeType.not.anyOf": {"description": "Aminoacid change type - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Aminoacidchangetype.Not.Anyof", "type": "array"}, "aminoacidChangeType.descendantsOf": {"description": "Aminoacid change type - Filter for all child concepts of a given concepts code", "title": "Aminoacidchangetype.Descendantsof", "type": "string"}, "molecularConsequence.not.exists": {"description": "Molecular consequence - Filter for entries without a value", "title": "Molecularconsequence.Not.Exists", "type": "boolean"}, "molecularConsequence.exists": {"description": "Molecular consequence - Filter for entries with a value", "title": "Molecularconsequence.Exists", "type": "boolean"}, "molecularConsequence": {"description": "Molecular consequence - Filter for a matching concept code", "title": "Molecularconsequence", "type": "string"}, "molecularConsequence.not": {"description": "Molecular consequence - Filter for a mismatching concept code", "title": "Molecularconsequence.Not", "type": "string"}, "molecularConsequence.anyOf": {"description": "Molecular consequence - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Molecularconsequence.Anyof", "type": "array"}, "molecularConsequence.not.anyOf": {"description": "Molecular consequence - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Molecularconsequence.Not.Anyof", "type": "array"}, "molecularConsequence.descendantsOf": {"description": "Molecular consequence - Filter for all child concepts of a given concepts code", "title": "Molecularconsequence.Descendantsof", "type": "string"}, "copyNumber.not.exists": {"description": "Copy number - Filter for entries without a value", "title": "Copynumber.Not.Exists", "type": "boolean"}, "copyNumber.exists": {"description": "Copy number - Filter for entries with a value", "title": "Copynumber.Exists", "type": "boolean"}, "copyNumber.lessThan": {"description": "Copy number - Filter for entries with values less than the specified value", "title": "Copynumber.Lessthan", "type": "integer"}, "copyNumber.lessThanOrEqual": {"description": "Copy number - Filter for entries with values less than or equal to the specified value", "title": "Copynumber.Lessthanorequal", "type": "integer"}, "copyNumber.greaterThan": {"description": "Copy number - Filter for entries with values greater than the specified value", "title": "Copynumber.Greaterthan", "type": "integer"}, "copyNumber.greaterThanOrEqual": {"description": "Copy number - Filter for entries with values greater than or equal to the specified value", "title": "Copynumber.Greaterthanorequal", "type": "integer"}, "copyNumber.equal": {"description": "Copy number - Filter for entries with values exactly equal to the specified value", "title": "Copynumber.Equal", "type": "integer"}, "copyNumber.not.equal": {"description": "Copy number - Filter for entries with values not equal to the specified value", "title": "Copynumber.Not.Equal", "type": "integer"}, "copyNumber.between": {"description": "Copy number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Copynumber.Between", "type": "array"}, "copyNumber.not.between": {"description": "Copy number - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Copynumber.Not.Between", "type": "array"}, "alleleFrequency.not.exists": {"description": "Allele frequency - Filter for entries without a value", "title": "Allelefrequency.Not.Exists", "type": "boolean"}, "alleleFrequency.exists": {"description": "Allele frequency - Filter for entries with a value", "title": "Allelefrequency.Exists", "type": "boolean"}, "alleleFrequency.lessThan": {"description": "Allele frequency - Filter for entries with values less than the specified value", "title": "Allelefrequency.Lessthan", "type": "number"}, "alleleFrequency.lessThanOrEqual": {"description": "Allele frequency - Filter for entries with values less than or equal to the specified value", "title": "Allelefrequency.Lessthanorequal", "type": "number"}, "alleleFrequency.greaterThan": {"description": "Allele frequency - Filter for entries with values greater than the specified value", "title": "Allelefrequency.Greaterthan", "type": "number"}, "alleleFrequency.greaterThanOrEqual": {"description": "Allele frequency - Filter for entries with values greater than or equal to the specified value", "title": "Allelefrequency.Greaterthanorequal", "type": "number"}, "alleleFrequency.equal": {"description": "Allele frequency - Filter for entries with values exactly equal to the specified value", "title": "Allelefrequency.Equal", "type": "number"}, "alleleFrequency.not.equal": {"description": "Allele frequency - Filter for entries with values not equal to the specified value", "title": "Allelefrequency.Not.Equal", "type": "number"}, "alleleFrequency.between": {"description": "Allele frequency - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Allelefrequency.Between", "type": "array"}, "alleleFrequency.not.between": {"description": "Allele frequency - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Allelefrequency.Not.Between", "type": "array"}, "alleleDepth.not.exists": {"description": "Allele depth (reads) - Filter for entries without a value", "title": "Alleledepth.Not.Exists", "type": "boolean"}, "alleleDepth.exists": {"description": "Allele depth (reads) - Filter for entries with a value", "title": "Alleledepth.Exists", "type": "boolean"}, "alleleDepth.lessThan": {"description": "Allele depth (reads) - Filter for entries with values less than the specified value", "title": "Alleledepth.Lessthan", "type": "integer"}, "alleleDepth.lessThanOrEqual": {"description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value", "title": "Alleledepth.Lessthanorequal", "type": "integer"}, "alleleDepth.greaterThan": {"description": "Allele depth (reads) - Filter for entries with values greater than the specified value", "title": "Alleledepth.Greaterthan", "type": "integer"}, "alleleDepth.greaterThanOrEqual": {"description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value", "title": "Alleledepth.Greaterthanorequal", "type": "integer"}, "alleleDepth.equal": {"description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value", "title": "Alleledepth.Equal", "type": "integer"}, "alleleDepth.not.equal": {"description": "Allele depth (reads) - Filter for entries with values not equal to the specified value", "title": "Alleledepth.Not.Equal", "type": "integer"}, "alleleDepth.between": {"description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Alleledepth.Between", "type": "array"}, "alleleDepth.not.between": {"description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Alleledepth.Not.Between", "type": "array"}, "zygosity.not.exists": {"description": "Zygosity - Filter for entries without a value", "title": "Zygosity.Not.Exists", "type": "boolean"}, "zygosity.exists": {"description": "Zygosity - Filter for entries with a value", "title": "Zygosity.Exists", "type": "boolean"}, "zygosity": {"description": "Zygosity - Filter for a matching concept code", "title": "Zygosity", "type": "string"}, "zygosity.not": {"description": "Zygosity - Filter for a mismatching concept code", "title": "Zygosity.Not", "type": "string"}, "zygosity.anyOf": {"description": "Zygosity - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Zygosity.Anyof", "type": "array"}, "zygosity.not.anyOf": {"description": "Zygosity - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Zygosity.Not.Anyof", "type": "array"}, "zygosity.descendantsOf": {"description": "Zygosity - Filter for all child concepts of a given concepts code", "title": "Zygosity.Descendantsof", "type": "string"}, "inheritance.not.exists": {"description": "Inheritance - Filter for entries without a value", "title": "Inheritance.Not.Exists", "type": "boolean"}, "inheritance.exists": {"description": "Inheritance - Filter for entries with a value", "title": "Inheritance.Exists", "type": "boolean"}, "inheritance": {"description": "Inheritance - Filter for a matching concept code", "title": "Inheritance", "type": "string"}, "inheritance.not": {"description": "Inheritance - Filter for a mismatching concept code", "title": "Inheritance.Not", "type": "string"}, "inheritance.anyOf": {"description": "Inheritance - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Inheritance.Anyof", "type": "array"}, "inheritance.not.anyOf": {"description": "Inheritance - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Inheritance.Not.Anyof", "type": "array"}, "inheritance.descendantsOf": {"description": "Inheritance - Filter for all child concepts of a given concepts code", "title": "Inheritance.Descendantsof", "type": "string"}, "coordinateSystem.not.exists": {"description": "Coordinate system - Filter for entries without a value", "title": "Coordinatesystem.Not.Exists", "type": "boolean"}, "coordinateSystem.exists": {"description": "Coordinate system - Filter for entries with a value", "title": "Coordinatesystem.Exists", "type": "boolean"}, "coordinateSystem": {"description": "Coordinate system - Filter for a matching concept code", "title": "Coordinatesystem", "type": "string"}, "coordinateSystem.not": {"description": "Coordinate system - Filter for a mismatching concept code", "title": "Coordinatesystem.Not", "type": "string"}, "coordinateSystem.anyOf": {"description": "Coordinate system - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Coordinatesystem.Anyof", "type": "array"}, "coordinateSystem.not.anyOf": {"description": "Coordinate system - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Coordinatesystem.Not.Anyof", "type": "array"}, "coordinateSystem.descendantsOf": {"description": "Coordinate system - Filter for all child concepts of a given concepts code", "title": "Coordinatesystem.Descendantsof", "type": "string"}, "exactGenomicCoordinates.not.exists": {"description": "Exact genomic coordinates - Filter for entries without a value", "title": "Exactgenomiccoordinates.Not.Exists", "type": "boolean"}, "exactGenomicCoordinates.exists": {"description": "Exact genomic coordinates - Filter for entries with a value", "title": "Exactgenomiccoordinates.Exists", "type": "boolean"}, "innerGenomicCoordinates.not.exists": {"description": "Inner genomic coordinates - Filter for entries without a value", "title": "Innergenomiccoordinates.Not.Exists", "type": "boolean"}, "innerGenomicCoordinates.exists": {"description": "Inner genomic coordinates - Filter for entries with a value", "title": "Innergenomiccoordinates.Exists", "type": "boolean"}, "outerGenomicCoordinates.not.exists": {"description": "Outer genomic coordinates - Filter for entries without a value", "title": "Outergenomiccoordinates.Not.Exists", "type": "boolean"}, "outerGenomicCoordinates.exists": {"description": "Outer genomic coordinates - Filter for entries with a value", "title": "Outergenomiccoordinates.Exists", "type": "boolean"}, "clinvar.not.exists": {"description": "ClinVar accession number - Filter for entries without a value", "title": "Clinvar.Not.Exists", "type": "boolean"}, "clinvar.exists": {"description": "ClinVar accession number - Filter for entries with a value", "title": "Clinvar.Exists", "type": "boolean"}, "clinvar": {"description": "ClinVar accession number - Filter for full text matches", "title": "Clinvar", "type": "string"}, "clinvar.not": {"description": "ClinVar accession number - Filter for full text mismatches", "title": "Clinvar.Not", "type": "string"}, "clinvar.contains": {"description": "ClinVar accession number - Filter for partial text matches", "title": "Clinvar.Contains", "type": "string"}, "clinvar.not.contains": {"description": "ClinVar accession number - Filter for partial text mismatches", "title": "Clinvar.Not.Contains", "type": "string"}, "clinvar.beginsWith": {"description": "ClinVar accession number - Filter for entries starting with the text", "title": "Clinvar.Beginswith", "type": "string"}, "clinvar.not.beginsWith": {"description": "ClinVar accession number - Filter for entries not starting with the text", "title": "Clinvar.Not.Beginswith", "type": "string"}, "clinvar.endsWith": {"description": "ClinVar accession number - Filter for entries ending with the text", "title": "Clinvar.Endswith", "type": "string"}, "clinvar.not.endsWith": {"description": "ClinVar accession number - Filter for entries not ending with the text", "title": "Clinvar.Not.Endswith", "type": "string"}, "genes.code": {"description": "None - Filter for full text matches", "title": "Genes.Code", "type": "string"}, "genes.code.not": {"description": "None - Filter for full text mismatches", "title": "Genes.Code.Not", "type": "string"}, "genes.code.contains": {"description": "None - Filter for partial text matches", "title": "Genes.Code.Contains", "type": "string"}, "genes.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Genes.Code.Not.Contains", "type": "string"}, "genes.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Genes.Code.Beginswith", "type": "string"}, "genes.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Code.Not.Beginswith", "type": "string"}, "genes.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Genes.Code.Endswith", "type": "string"}, "genes.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Code.Not.Endswith", "type": "string"}, "genes.system": {"description": "None - Filter for full text matches", "title": "Genes.System", "type": "string"}, "genes.system.not": {"description": "None - Filter for full text mismatches", "title": "Genes.System.Not", "type": "string"}, "genes.system.contains": {"description": "None - Filter for partial text matches", "title": "Genes.System.Contains", "type": "string"}, "genes.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Genes.System.Not.Contains", "type": "string"}, "genes.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Genes.System.Beginswith", "type": "string"}, "genes.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Genes.System.Not.Beginswith", "type": "string"}, "genes.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Genes.System.Endswith", "type": "string"}, "genes.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Genes.System.Not.Endswith", "type": "string"}, "genes.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Genes.Display.Not.Exists", "type": "boolean"}, "genes.display.exists": {"description": "None - Filter for entries with a value", "title": "Genes.Display.Exists", "type": "boolean"}, "genes.display": {"description": "None - Filter for full text matches", "title": "Genes.Display", "type": "string"}, "genes.display.not": {"description": "None - Filter for full text mismatches", "title": "Genes.Display.Not", "type": "string"}, "genes.display.contains": {"description": "None - Filter for partial text matches", "title": "Genes.Display.Contains", "type": "string"}, "genes.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Genes.Display.Not.Contains", "type": "string"}, "genes.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Genes.Display.Beginswith", "type": "string"}, "genes.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Display.Not.Beginswith", "type": "string"}, "genes.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Genes.Display.Endswith", "type": "string"}, "genes.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Display.Not.Endswith", "type": "string"}, "genes.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Genes.Version.Not.Exists", "type": "boolean"}, "genes.version.exists": {"description": "None - Filter for entries with a value", "title": "Genes.Version.Exists", "type": "boolean"}, "genes.version": {"description": "None - Filter for full text matches", "title": "Genes.Version", "type": "string"}, "genes.version.not": {"description": "None - Filter for full text mismatches", "title": "Genes.Version.Not", "type": "string"}, "genes.version.contains": {"description": "None - Filter for partial text matches", "title": "Genes.Version.Contains", "type": "string"}, "genes.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Genes.Version.Not.Contains", "type": "string"}, "genes.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Genes.Version.Beginswith", "type": "string"}, "genes.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Genes.Version.Not.Beginswith", "type": "string"}, "genes.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Genes.Version.Endswith", "type": "string"}, "genes.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Genes.Version.Not.Endswith", "type": "string"}, "genes.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Genes.Synonyms.Not.Exists", "type": "boolean"}, "genes.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Genes.Synonyms.Exists", "type": "boolean"}, "genes.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Genes.Properties.Not.Exists", "type": "boolean"}, "genes.properties.exists": {"description": "None - Filter for entries with a value", "title": "Genes.Properties.Exists", "type": "boolean"}, "chromosomes.code": {"description": "None - Filter for full text matches", "title": "Chromosomes.Code", "type": "string"}, "chromosomes.code.not": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Code.Not", "type": "string"}, "chromosomes.code.contains": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Code.Contains", "type": "string"}, "chromosomes.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Code.Not.Contains", "type": "string"}, "chromosomes.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Code.Beginswith", "type": "string"}, "chromosomes.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Code.Not.Beginswith", "type": "string"}, "chromosomes.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Code.Endswith", "type": "string"}, "chromosomes.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Code.Not.Endswith", "type": "string"}, "chromosomes.system": {"description": "None - Filter for full text matches", "title": "Chromosomes.System", "type": "string"}, "chromosomes.system.not": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.System.Not", "type": "string"}, "chromosomes.system.contains": {"description": "None - Filter for partial text matches", "title": "Chromosomes.System.Contains", "type": "string"}, "chromosomes.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.System.Not.Contains", "type": "string"}, "chromosomes.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.System.Beginswith", "type": "string"}, "chromosomes.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.System.Not.Beginswith", "type": "string"}, "chromosomes.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.System.Endswith", "type": "string"}, "chromosomes.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.System.Not.Endswith", "type": "string"}, "chromosomes.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Display.Not.Exists", "type": "boolean"}, "chromosomes.display.exists": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Display.Exists", "type": "boolean"}, "chromosomes.display": {"description": "None - Filter for full text matches", "title": "Chromosomes.Display", "type": "string"}, "chromosomes.display.not": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Display.Not", "type": "string"}, "chromosomes.display.contains": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Display.Contains", "type": "string"}, "chromosomes.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Display.Not.Contains", "type": "string"}, "chromosomes.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Display.Beginswith", "type": "string"}, "chromosomes.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Display.Not.Beginswith", "type": "string"}, "chromosomes.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Display.Endswith", "type": "string"}, "chromosomes.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Display.Not.Endswith", "type": "string"}, "chromosomes.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Version.Not.Exists", "type": "boolean"}, "chromosomes.version.exists": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Version.Exists", "type": "boolean"}, "chromosomes.version": {"description": "None - Filter for full text matches", "title": "Chromosomes.Version", "type": "string"}, "chromosomes.version.not": {"description": "None - Filter for full text mismatches", "title": "Chromosomes.Version.Not", "type": "string"}, "chromosomes.version.contains": {"description": "None - Filter for partial text matches", "title": "Chromosomes.Version.Contains", "type": "string"}, "chromosomes.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Chromosomes.Version.Not.Contains", "type": "string"}, "chromosomes.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Chromosomes.Version.Beginswith", "type": "string"}, "chromosomes.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Chromosomes.Version.Not.Beginswith", "type": "string"}, "chromosomes.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Chromosomes.Version.Endswith", "type": "string"}, "chromosomes.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Chromosomes.Version.Not.Endswith", "type": "string"}, "chromosomes.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Synonyms.Not.Exists", "type": "boolean"}, "chromosomes.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Synonyms.Exists", "type": "boolean"}, "chromosomes.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Chromosomes.Properties.Not.Exists", "type": "boolean"}, "chromosomes.properties.exists": {"description": "None - Filter for entries with a value", "title": "Chromosomes.Properties.Exists", "type": "boolean"}}, "title": "GenomicVariantFilters", "type": "object"}, "GenomicVariantSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who' genomic variant is described", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the genomic variant was detected and/or reported.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "genePanel": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "Commercial or official name of the gene panel tested to identify the variant", "examples": [], "title": "Gene panel", "x-expanded": null}, "assessment": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantAssessmentChoices", "maxLength": 15}, {"type": "null"}], "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.", "examples": [], "title": "Assessment", "x-expanded": null}, "confidence": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantConfidenceChoices", "maxLength": 15}, {"type": "null"}], "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.", "examples": [], "title": "Confidence", "x-expanded": null}, "analysisMethod": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Analysis method used to detect the variant", "examples": [], "title": "Analysis method", "x-expanded": null, "x-terminology": "StructuralVariantAnalysisMethod"}, "clinicalRelevance": {"anyOf": [{"$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"}, {"type": "null"}], "description": "Classification of the clinical relevance or pathogenicity of the variant.", "examples": [], "title": "Clinical relevance", "x-expanded": null}, "cytogeneticLocation": {"anyOf": [{"maxLength": 60, "type": "string"}, {"type": "null"}], "description": "The genetic address of the variant specifying the relevant chromosomal region.", "examples": [], "title": "Cytogenetic location", "x-expanded": null}, "genomeAssemblyVersion": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The reference genome assembly versionused in this analysis.", "examples": [], "title": "Genome assembly version", "x-expanded": null, "x-terminology": "ReferenceGenomeBuild"}, "genomicRefseq": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')", "examples": [], "title": "Genomic RefSeq", "x-expanded": null}, "transcriptRefseq": {"anyOf": [{"maxLength": 200, "type": "string"}, {"type": "null"}], "description": "\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)", "examples": [], "title": "Transcript RefSeq", "x-expanded": null}, "codingHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T", "examples": [], "title": "Coding DNA change expression (cHGVS)", "x-expanded": null}, "proteinHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)", "examples": [], "title": "Protein/aminoacid change expression (pHGVS)", "x-expanded": null}, "genomicHgvs": {"anyOf": [{"maxLength": 500, "type": "string"}, {"type": "null"}], "description": "Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup", "examples": [], "title": "Genomic change expression (gHGVS)", "x-expanded": null}, "dnaChangeType": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the DNA change type of the variant.", "examples": [], "title": "Coding DNA change type", "x-expanded": null, "x-terminology": "DnaChangeType"}, "aminoacidChangeType": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Classification of the amino acid change type", "examples": [], "title": "Aminoacid change type", "x-expanded": null, "x-terminology": "AminoAcidChangeType"}, "molecularConsequence": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.", "examples": [], "title": "Molecular consequence", "x-expanded": null, "x-terminology": "MolecularConsequence"}, "copyNumber": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.", "examples": [], "title": "Copy number", "x-expanded": null}, "alleleFrequency": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.", "examples": [], "title": "Allele frequency", "x-expanded": null}, "alleleDepth": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.", "examples": [], "title": "Allele depth (reads)", "x-expanded": null}, "zygosity": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "The observed level of occurrence of the variant in the set of chromosomes.", "examples": [], "title": "Zygosity", "x-expanded": null, "x-terminology": "Zygosity"}, "inheritance": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Variant inheritance origin (if known).", "examples": [], "title": "Inheritance", "x-expanded": null, "x-terminology": "VariantInheritance"}, "coordinateSystem": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.", "examples": [], "title": "Coordinate system", "x-expanded": null, "x-terminology": "GenomicCoordinateSystem"}, "exactGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The exact integer-based genomic coordinates of the start and end of the variant region. \"High\" can be omitted for single nucleotide variants.", "examples": [], "title": "Exact genomic coordinates", "x-expanded": null}, "innerGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.", "examples": [], "title": "Inner genomic coordinates", "x-expanded": null}, "outerGenomicCoordinates": {"anyOf": [{"$ref": "#/components/schemas/RangeSchema"}, {"type": "null"}], "description": "The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.", "examples": [], "title": "Outer genomic coordinates", "x-expanded": null}, "clinvar": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Accession number in the ClinVar variant database, given for cross-reference.", "examples": [], "title": "ClinVar accession number", "x-expanded": null}, "genes": {"default": [], "description": "Gene(s) affected by this variant", "examples": [], "items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Gene(s)", "type": "array", "x-expanded": null, "x-terminology": "Gene"}, "chromosomes": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Chromosome(s) affected by this variant", "examples": [], "title": "Chromosome(s)", "x-expanded": null, "x-terminology": "ChromosomeIdentifier"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date"], "title": "GenomicVariant", "type": "object"}, "Paginated_GenomicVariantSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/GenomicVariantSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[GenomicVariantSchema]", "type": "object"}, "AneuploidScoreCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual aneuploid score (AS) value in total altered arms", "examples": [], "title": "Value", "type": "integer", "x-expanded": null}, "category": {"const": "aneuploid_score", "default": "aneuploid_score", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "value"], "title": "AneuploidScoreCreate", "type": "object"}, "HomologousRecombinationDeficiencyCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Homologous recombination deficiency (HRD) score value", "examples": [], "title": "Value", "x-expanded": null}, "interpretation": {"anyOf": [{"$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"}, {"type": "null"}], "description": "Homologous recombination deficiency (HRD) interpretation", "examples": [], "title": "Interpretation", "x-expanded": null}, "category": {"const": "homologous_recombination_deficiency", "default": "homologous_recombination_deficiency", "title": "Category", "type": "string"}}, "required": ["caseId", "date"], "title": "HomologousRecombinationDeficiencyCreate", "type": "object"}, "HomologousRecombinationDeficiencyInterpretationChoices": {"enum": ["positive", "negative", "indeterminate"], "title": "HomologousRecombinationDeficiencyInterpretationChoices", "type": "string"}, "LossOfHeterozygosityCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "Loss of heterozygosity (LOH) as a percentage", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "category": {"const": "loss_of_heterozygosity", "default": "loss_of_heterozygosity", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "value"], "title": "LossOfHeterozygosityCreate", "type": "object"}, "MicrosatelliteInstabilityCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Microsatellite instability (MSI) classification", "examples": [], "title": "Value", "x-expanded": null, "x-terminology": "MicrosatelliteInstabilityState"}, "category": {"const": "microsatellite_instability", "default": "microsatellite_instability", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "value"], "title": "MicrosatelliteInstabilityCreate", "type": "object"}, "TumorMutationalBurdenCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual tumor mutational burden (TMB) value in mutations/Mb", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "status": {"anyOf": [{"$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"}, {"type": "null"}], "description": "Cclassification of the tumor mutational burden (TMB) status", "examples": [], "title": "Status", "x-expanded": null}, "category": {"const": "tumor_mutational_burden", "default": "tumor_mutational_burden", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "value"], "title": "TumorMutationalBurdenCreate", "type": "object"}, "TumorMutationalBurdenStatusChoices": {"enum": ["low", "high", "intermediate", "indeterminate"], "title": "TumorMutationalBurdenStatusChoices", "type": "string"}, "TumorNeoantigenBurdenCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "category": {"const": "tumor_neoantigen_burden", "default": "tumor_neoantigen_burden", "title": "Category", "type": "string"}}, "required": ["caseId", "date", "value"], "title": "TumorNeoantigenBurdenCreate", "type": "object"}, "GenomicSignatureFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "category": {"allOf": [{"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}], "description": "None - ('Filter for single value choice',)"}, "category.not": {"allOf": [{"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}], "description": "None - ('Filter for all but a single value choice',)"}, "category.anyOf": {"description": "None - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}, "title": "Category.Anyof", "type": "array"}}, "title": "GenomicSignatureFilters", "type": "object"}, "GenomicSignatureTypes": {"enum": ["tumor_mutational_burden", "loss_of_heterozygosity", "microsatellite_instability", "homologous_recombination_deficiency", "tumor_neoantigen_burden", "aneuploid_score"], "title": "GenomicSignatureTypes", "type": "string"}, "AneuploidScoreSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual aneuploid score (AS) value in total altered arms", "examples": [], "title": "Value", "type": "integer", "x-expanded": null}, "category": {"const": "aneuploid_score", "default": "aneuploid_score", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "value"], "title": "AneuploidScore", "type": "object"}, "AnyGenomicSignature": {"anyOf": [{"$ref": "#/components/schemas/MicrosatelliteInstabilitySchema"}, {"$ref": "#/components/schemas/TumorMutationalBurdenSchema"}, {"$ref": "#/components/schemas/LossOfHeterozygositySchema"}, {"$ref": "#/components/schemas/HomologousRecombinationDeficiencySchema"}, {"$ref": "#/components/schemas/TumorNeoantigenBurdenSchema"}, {"$ref": "#/components/schemas/AneuploidScoreSchema"}]}, "HomologousRecombinationDeficiencySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Homologous recombination deficiency (HRD) score value", "examples": [], "title": "Value", "x-expanded": null}, "interpretation": {"anyOf": [{"$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"}, {"type": "null"}], "description": "Homologous recombination deficiency (HRD) interpretation", "examples": [], "title": "Interpretation", "x-expanded": null}, "category": {"const": "homologous_recombination_deficiency", "default": "homologous_recombination_deficiency", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date"], "title": "HomologousRecombinationDeficiency", "type": "object"}, "LossOfHeterozygositySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "Loss of heterozygosity (LOH) as a percentage", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "category": {"const": "loss_of_heterozygosity", "default": "loss_of_heterozygosity", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "value"], "title": "LossOfHeterozygosity", "type": "object"}, "MicrosatelliteInstabilitySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Microsatellite instability (MSI) classification", "examples": [], "title": "Value", "x-expanded": null, "x-terminology": "MicrosatelliteInstabilityState"}, "category": {"const": "microsatellite_instability", "default": "microsatellite_instability", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "value"], "title": "MicrosatelliteInstability", "type": "object"}, "Paginated_AnyGenomicSignature_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/AnyGenomicSignature"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[AnyGenomicSignature]", "type": "object"}, "TumorMutationalBurdenSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual tumor mutational burden (TMB) value in mutations/Mb", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "status": {"anyOf": [{"$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"}, {"type": "null"}], "description": "Cclassification of the tumor mutational burden (TMB) status", "examples": [], "title": "Status", "x-expanded": null}, "category": {"const": "tumor_mutational_burden", "default": "tumor_mutational_burden", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "value"], "title": "TumorMutationalBurden", "type": "object"}, "TumorNeoantigenBurdenSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's genomic signature was assessed.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "value": {"description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb", "examples": [], "title": "Value", "type": "number", "x-expanded": null}, "category": {"const": "tumor_neoantigen_burden", "default": "tumor_neoantigen_burden", "title": "Category", "type": "string"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "value"], "title": "TumorNeoantigenBurden", "type": "object"}, "LifestyleCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "smokingStatus": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Frequency of alcohol consumption", "examples": [], "title": "Alcohol consumption", "x-expanded": null, "x-terminology": "SmokingStatus"}, "smokingPackyears": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Smoking pack-years (if applicable)", "examples": [], "title": "Smoking packyears", "x-expanded": null}, "smokingQuited": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Estimated time since quitting smoking (if applicable)", "examples": [], "title": "Time since quitted smoking", "x-expanded": null}, "alcoholConsumption": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Frequency of alcohol consumption", "examples": [], "title": "Alcohol consumption", "x-expanded": null, "x-terminology": "AlcoholConsumptionFrequency"}, "nightSleep": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Estimated average sleep time per night", "examples": [], "title": "Night sleep", "x-expanded": null}, "recreationalDrugs": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Any recreational drug(s) used by the patient", "examples": [], "title": "Recreational drugs", "x-expanded": null, "x-terminology": "RecreationalDrug"}, "exposures": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Environmental or occupational exposures to hazards or carcinogenic agents", "examples": [], "title": "Exposures", "x-expanded": null, "x-terminology": "ExposureAgent"}}, "required": ["caseId", "date"], "title": "LifestyleCreate", "type": "object"}, "LifestyleFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "smokingStatus.not.exists": {"description": "Alcohol consumption - Filter for entries without a value", "title": "Smokingstatus.Not.Exists", "type": "boolean"}, "smokingStatus.exists": {"description": "Alcohol consumption - Filter for entries with a value", "title": "Smokingstatus.Exists", "type": "boolean"}, "smokingStatus": {"description": "Alcohol consumption - Filter for a matching concept code", "title": "Smokingstatus", "type": "string"}, "smokingStatus.not": {"description": "Alcohol consumption - Filter for a mismatching concept code", "title": "Smokingstatus.Not", "type": "string"}, "smokingStatus.anyOf": {"description": "Alcohol consumption - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Smokingstatus.Anyof", "type": "array"}, "smokingStatus.not.anyOf": {"description": "Alcohol consumption - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Smokingstatus.Not.Anyof", "type": "array"}, "smokingStatus.descendantsOf": {"description": "Alcohol consumption - Filter for all child concepts of a given concepts code", "title": "Smokingstatus.Descendantsof", "type": "string"}, "smokingPackyears.not.exists": {"description": "Smoking packyears - Filter for entries without a value", "title": "Smokingpackyears.Not.Exists", "type": "boolean"}, "smokingPackyears.exists": {"description": "Smoking packyears - Filter for entries with a value", "title": "Smokingpackyears.Exists", "type": "boolean"}, "smokingPackyears.lessThan": {"description": "Smoking packyears - Filter for entries with values less than the specified value", "title": "Smokingpackyears.Lessthan", "type": "number"}, "smokingPackyears.lessThanOrEqual": {"description": "Smoking packyears - Filter for entries with values less than or equal to the specified value", "title": "Smokingpackyears.Lessthanorequal", "type": "number"}, "smokingPackyears.greaterThan": {"description": "Smoking packyears - Filter for entries with values greater than the specified value", "title": "Smokingpackyears.Greaterthan", "type": "number"}, "smokingPackyears.greaterThanOrEqual": {"description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value", "title": "Smokingpackyears.Greaterthanorequal", "type": "number"}, "smokingPackyears.equal": {"description": "Smoking packyears - Filter for entries with values exactly equal to the specified value", "title": "Smokingpackyears.Equal", "type": "number"}, "smokingPackyears.not.equal": {"description": "Smoking packyears - Filter for entries with values not equal to the specified value", "title": "Smokingpackyears.Not.Equal", "type": "number"}, "smokingPackyears.between": {"description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingpackyears.Between", "type": "array"}, "smokingPackyears.not.between": {"description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingpackyears.Not.Between", "type": "array"}, "smokingQuited.not.exists": {"description": "Time since quitted smoking - Filter for entries without a value", "title": "Smokingquited.Not.Exists", "type": "boolean"}, "smokingQuited.exists": {"description": "Time since quitted smoking - Filter for entries with a value", "title": "Smokingquited.Exists", "type": "boolean"}, "smokingQuited.lessThan": {"description": "Time since quitted smoking - Filter for entries with values less than the specified value", "title": "Smokingquited.Lessthan", "type": "number"}, "smokingQuited.lessThanOrEqual": {"description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value", "title": "Smokingquited.Lessthanorequal", "type": "number"}, "smokingQuited.greaterThan": {"description": "Time since quitted smoking - Filter for entries with values greater than the specified value", "title": "Smokingquited.Greaterthan", "type": "number"}, "smokingQuited.greaterThanOrEqual": {"description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value", "title": "Smokingquited.Greaterthanorequal", "type": "number"}, "smokingQuited.equal": {"description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value", "title": "Smokingquited.Equal", "type": "number"}, "smokingQuited.not.equal": {"description": "Time since quitted smoking - Filter for entries with values not equal to the specified value", "title": "Smokingquited.Not.Equal", "type": "number"}, "smokingQuited.between": {"description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingquited.Between", "type": "array"}, "smokingQuited.not.between": {"description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Smokingquited.Not.Between", "type": "array"}, "alcoholConsumption.not.exists": {"description": "Alcohol consumption - Filter for entries without a value", "title": "Alcoholconsumption.Not.Exists", "type": "boolean"}, "alcoholConsumption.exists": {"description": "Alcohol consumption - Filter for entries with a value", "title": "Alcoholconsumption.Exists", "type": "boolean"}, "alcoholConsumption": {"description": "Alcohol consumption - Filter for a matching concept code", "title": "Alcoholconsumption", "type": "string"}, "alcoholConsumption.not": {"description": "Alcohol consumption - Filter for a mismatching concept code", "title": "Alcoholconsumption.Not", "type": "string"}, "alcoholConsumption.anyOf": {"description": "Alcohol consumption - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Alcoholconsumption.Anyof", "type": "array"}, "alcoholConsumption.not.anyOf": {"description": "Alcohol consumption - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Alcoholconsumption.Not.Anyof", "type": "array"}, "alcoholConsumption.descendantsOf": {"description": "Alcohol consumption - Filter for all child concepts of a given concepts code", "title": "Alcoholconsumption.Descendantsof", "type": "string"}, "nightSleep.not.exists": {"description": "Night sleep - Filter for entries without a value", "title": "Nightsleep.Not.Exists", "type": "boolean"}, "nightSleep.exists": {"description": "Night sleep - Filter for entries with a value", "title": "Nightsleep.Exists", "type": "boolean"}, "nightSleep.lessThan": {"description": "Night sleep - Filter for entries with values less than the specified value", "title": "Nightsleep.Lessthan", "type": "number"}, "nightSleep.lessThanOrEqual": {"description": "Night sleep - Filter for entries with values less than or equal to the specified value", "title": "Nightsleep.Lessthanorequal", "type": "number"}, "nightSleep.greaterThan": {"description": "Night sleep - Filter for entries with values greater than the specified value", "title": "Nightsleep.Greaterthan", "type": "number"}, "nightSleep.greaterThanOrEqual": {"description": "Night sleep - Filter for entries with values greater than or equal to the specified value", "title": "Nightsleep.Greaterthanorequal", "type": "number"}, "nightSleep.equal": {"description": "Night sleep - Filter for entries with values exactly equal to the specified value", "title": "Nightsleep.Equal", "type": "number"}, "nightSleep.not.equal": {"description": "Night sleep - Filter for entries with values not equal to the specified value", "title": "Nightsleep.Not.Equal", "type": "number"}, "nightSleep.between": {"description": "Night sleep - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Nightsleep.Between", "type": "array"}, "nightSleep.not.between": {"description": "Night sleep - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Nightsleep.Not.Between", "type": "array"}, "recreationalDrugs.code": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Code", "type": "string"}, "recreationalDrugs.code.not": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Code.Not", "type": "string"}, "recreationalDrugs.code.contains": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Code.Contains", "type": "string"}, "recreationalDrugs.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Code.Not.Contains", "type": "string"}, "recreationalDrugs.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Code.Beginswith", "type": "string"}, "recreationalDrugs.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Code.Not.Beginswith", "type": "string"}, "recreationalDrugs.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Code.Endswith", "type": "string"}, "recreationalDrugs.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Code.Not.Endswith", "type": "string"}, "recreationalDrugs.system": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.System", "type": "string"}, "recreationalDrugs.system.not": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.System.Not", "type": "string"}, "recreationalDrugs.system.contains": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.System.Contains", "type": "string"}, "recreationalDrugs.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.System.Not.Contains", "type": "string"}, "recreationalDrugs.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.System.Beginswith", "type": "string"}, "recreationalDrugs.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.System.Not.Beginswith", "type": "string"}, "recreationalDrugs.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.System.Endswith", "type": "string"}, "recreationalDrugs.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.System.Not.Endswith", "type": "string"}, "recreationalDrugs.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Display.Not.Exists", "type": "boolean"}, "recreationalDrugs.display.exists": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Display.Exists", "type": "boolean"}, "recreationalDrugs.display": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Display", "type": "string"}, "recreationalDrugs.display.not": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Display.Not", "type": "string"}, "recreationalDrugs.display.contains": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Display.Contains", "type": "string"}, "recreationalDrugs.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Display.Not.Contains", "type": "string"}, "recreationalDrugs.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Display.Beginswith", "type": "string"}, "recreationalDrugs.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Display.Not.Beginswith", "type": "string"}, "recreationalDrugs.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Display.Endswith", "type": "string"}, "recreationalDrugs.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Display.Not.Endswith", "type": "string"}, "recreationalDrugs.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Version.Not.Exists", "type": "boolean"}, "recreationalDrugs.version.exists": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Version.Exists", "type": "boolean"}, "recreationalDrugs.version": {"description": "None - Filter for full text matches", "title": "Recreationaldrugs.Version", "type": "string"}, "recreationalDrugs.version.not": {"description": "None - Filter for full text mismatches", "title": "Recreationaldrugs.Version.Not", "type": "string"}, "recreationalDrugs.version.contains": {"description": "None - Filter for partial text matches", "title": "Recreationaldrugs.Version.Contains", "type": "string"}, "recreationalDrugs.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Recreationaldrugs.Version.Not.Contains", "type": "string"}, "recreationalDrugs.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Recreationaldrugs.Version.Beginswith", "type": "string"}, "recreationalDrugs.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Recreationaldrugs.Version.Not.Beginswith", "type": "string"}, "recreationalDrugs.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Recreationaldrugs.Version.Endswith", "type": "string"}, "recreationalDrugs.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Recreationaldrugs.Version.Not.Endswith", "type": "string"}, "recreationalDrugs.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Synonyms.Not.Exists", "type": "boolean"}, "recreationalDrugs.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Synonyms.Exists", "type": "boolean"}, "recreationalDrugs.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Recreationaldrugs.Properties.Not.Exists", "type": "boolean"}, "recreationalDrugs.properties.exists": {"description": "None - Filter for entries with a value", "title": "Recreationaldrugs.Properties.Exists", "type": "boolean"}, "exposures.code": {"description": "None - Filter for full text matches", "title": "Exposures.Code", "type": "string"}, "exposures.code.not": {"description": "None - Filter for full text mismatches", "title": "Exposures.Code.Not", "type": "string"}, "exposures.code.contains": {"description": "None - Filter for partial text matches", "title": "Exposures.Code.Contains", "type": "string"}, "exposures.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Code.Not.Contains", "type": "string"}, "exposures.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Code.Beginswith", "type": "string"}, "exposures.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Code.Not.Beginswith", "type": "string"}, "exposures.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Code.Endswith", "type": "string"}, "exposures.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Code.Not.Endswith", "type": "string"}, "exposures.system": {"description": "None - Filter for full text matches", "title": "Exposures.System", "type": "string"}, "exposures.system.not": {"description": "None - Filter for full text mismatches", "title": "Exposures.System.Not", "type": "string"}, "exposures.system.contains": {"description": "None - Filter for partial text matches", "title": "Exposures.System.Contains", "type": "string"}, "exposures.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Exposures.System.Not.Contains", "type": "string"}, "exposures.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Exposures.System.Beginswith", "type": "string"}, "exposures.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.System.Not.Beginswith", "type": "string"}, "exposures.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Exposures.System.Endswith", "type": "string"}, "exposures.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.System.Not.Endswith", "type": "string"}, "exposures.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Exposures.Display.Not.Exists", "type": "boolean"}, "exposures.display.exists": {"description": "None - Filter for entries with a value", "title": "Exposures.Display.Exists", "type": "boolean"}, "exposures.display": {"description": "None - Filter for full text matches", "title": "Exposures.Display", "type": "string"}, "exposures.display.not": {"description": "None - Filter for full text mismatches", "title": "Exposures.Display.Not", "type": "string"}, "exposures.display.contains": {"description": "None - Filter for partial text matches", "title": "Exposures.Display.Contains", "type": "string"}, "exposures.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Display.Not.Contains", "type": "string"}, "exposures.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Display.Beginswith", "type": "string"}, "exposures.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Display.Not.Beginswith", "type": "string"}, "exposures.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Display.Endswith", "type": "string"}, "exposures.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Display.Not.Endswith", "type": "string"}, "exposures.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Exposures.Version.Not.Exists", "type": "boolean"}, "exposures.version.exists": {"description": "None - Filter for entries with a value", "title": "Exposures.Version.Exists", "type": "boolean"}, "exposures.version": {"description": "None - Filter for full text matches", "title": "Exposures.Version", "type": "string"}, "exposures.version.not": {"description": "None - Filter for full text mismatches", "title": "Exposures.Version.Not", "type": "string"}, "exposures.version.contains": {"description": "None - Filter for partial text matches", "title": "Exposures.Version.Contains", "type": "string"}, "exposures.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Exposures.Version.Not.Contains", "type": "string"}, "exposures.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Exposures.Version.Beginswith", "type": "string"}, "exposures.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Exposures.Version.Not.Beginswith", "type": "string"}, "exposures.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Exposures.Version.Endswith", "type": "string"}, "exposures.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Exposures.Version.Not.Endswith", "type": "string"}, "exposures.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Exposures.Synonyms.Not.Exists", "type": "boolean"}, "exposures.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Exposures.Synonyms.Exists", "type": "boolean"}, "exposures.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Exposures.Properties.Not.Exists", "type": "boolean"}, "exposures.properties.exists": {"description": "None - Filter for entries with a value", "title": "Exposures.Properties.Exists", "type": "boolean"}}, "title": "LifestyleFilters", "type": "object"}, "LifestyleSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's lifestyle is assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "smokingStatus": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Frequency of alcohol consumption", "examples": [], "title": "Alcohol consumption", "x-expanded": null, "x-terminology": "SmokingStatus"}, "smokingPackyears": {"anyOf": [{"type": "number"}, {"type": "null"}], "description": "Smoking pack-years (if applicable)", "examples": [], "title": "Smoking packyears", "x-expanded": null}, "smokingQuited": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Estimated time since quitting smoking (if applicable)", "examples": [], "title": "Time since quitted smoking", "x-expanded": null}, "alcoholConsumption": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Frequency of alcohol consumption", "examples": [], "title": "Alcohol consumption", "x-expanded": null, "x-terminology": "AlcoholConsumptionFrequency"}, "nightSleep": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Estimated average sleep time per night", "examples": [], "title": "Night sleep", "x-expanded": null}, "recreationalDrugs": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Any recreational drug(s) used by the patient", "examples": [], "title": "Recreational drugs", "x-expanded": null, "x-terminology": "RecreationalDrug"}, "exposures": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Environmental or occupational exposures to hazards or carcinogenic agents", "examples": [], "title": "Exposures", "x-expanded": null, "x-terminology": "ExposureAgent"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date"], "title": "Lifestyle", "type": "object"}, "Paginated_LifestyleSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/LifestyleSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[LifestyleSchema]", "type": "object"}, "FamilyHistoryCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's family's history is being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's family history was assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "relationship": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Relationship to the patient", "examples": [], "title": "Relationship", "x-expanded": null, "x-terminology": "FamilyMemberType"}, "hadCancer": {"description": "Whether the family member has a history of cancer", "examples": [], "title": "Had cancer", "type": "boolean", "x-expanded": null}, "contributedToDeath": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the cancer contributed to the cause of death of the family member", "examples": [], "title": "Contributed to death", "x-expanded": null}, "onsetAge": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Age at which the family member's cancer manifested", "examples": [], "title": "Onset age", "x-expanded": null}, "topography": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Estimated or actual topography of the family member's cancer", "examples": [], "title": "Topography", "x-expanded": null, "x-terminology": "CancerTopography"}, "morphology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphology of the family member's cancer (if known)", "examples": [], "title": "Morphology", "x-expanded": null, "x-terminology": "CancerMorphology"}}, "required": ["caseId", "date", "relationship", "hadCancer"], "title": "FamilyHistoryCreate", "type": "object"}, "FamilyHistoryFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "relationship": {"description": "Relationship - Filter for a matching concept code", "title": "Relationship", "type": "string"}, "relationship.not": {"description": "Relationship - Filter for a mismatching concept code", "title": "Relationship.Not", "type": "string"}, "relationship.anyOf": {"description": "Relationship - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Relationship.Anyof", "type": "array"}, "relationship.not.anyOf": {"description": "Relationship - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Relationship.Not.Anyof", "type": "array"}, "relationship.descendantsOf": {"description": "Relationship - Filter for all child concepts of a given concepts code", "title": "Relationship.Descendantsof", "type": "string"}, "hadCancer": {"description": "Had cancer - ('Filter for yes/no statement',)", "title": "Hadcancer", "type": "boolean"}, "contributedToDeath.not.exists": {"description": "Contributed to death - Filter for entries without a value", "title": "Contributedtodeath.Not.Exists", "type": "boolean"}, "contributedToDeath.exists": {"description": "Contributed to death - Filter for entries with a value", "title": "Contributedtodeath.Exists", "type": "boolean"}, "contributedToDeath": {"description": "Contributed to death - ('Filter for yes/no statement',)", "title": "Contributedtodeath", "type": "boolean"}, "onsetAge.not.exists": {"description": "Onset age - Filter for entries without a value", "title": "Onsetage.Not.Exists", "type": "boolean"}, "onsetAge.exists": {"description": "Onset age - Filter for entries with a value", "title": "Onsetage.Exists", "type": "boolean"}, "onsetAge.lessThan": {"description": "Onset age - Filter for entries with values less than the specified value", "title": "Onsetage.Lessthan", "type": "integer"}, "onsetAge.lessThanOrEqual": {"description": "Onset age - Filter for entries with values less than or equal to the specified value", "title": "Onsetage.Lessthanorequal", "type": "integer"}, "onsetAge.greaterThan": {"description": "Onset age - Filter for entries with values greater than the specified value", "title": "Onsetage.Greaterthan", "type": "integer"}, "onsetAge.greaterThanOrEqual": {"description": "Onset age - Filter for entries with values greater than or equal to the specified value", "title": "Onsetage.Greaterthanorequal", "type": "integer"}, "onsetAge.equal": {"description": "Onset age - Filter for entries with values exactly equal to the specified value", "title": "Onsetage.Equal", "type": "integer"}, "onsetAge.not.equal": {"description": "Onset age - Filter for entries with values not equal to the specified value", "title": "Onsetage.Not.Equal", "type": "integer"}, "onsetAge.between": {"description": "Onset age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Onsetage.Between", "type": "array"}, "onsetAge.not.between": {"description": "Onset age - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Onsetage.Not.Between", "type": "array"}, "topography.not.exists": {"description": "Topography - Filter for entries without a value", "title": "Topography.Not.Exists", "type": "boolean"}, "topography.exists": {"description": "Topography - Filter for entries with a value", "title": "Topography.Exists", "type": "boolean"}, "topography": {"description": "Topography - Filter for a matching concept code", "title": "Topography", "type": "string"}, "topography.not": {"description": "Topography - Filter for a mismatching concept code", "title": "Topography.Not", "type": "string"}, "topography.anyOf": {"description": "Topography - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Topography.Anyof", "type": "array"}, "topography.not.anyOf": {"description": "Topography - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Topography.Not.Anyof", "type": "array"}, "topography.descendantsOf": {"description": "Topography - Filter for all child concepts of a given concepts code", "title": "Topography.Descendantsof", "type": "string"}, "morphology.not.exists": {"description": "Morphology - Filter for entries without a value", "title": "Morphology.Not.Exists", "type": "boolean"}, "morphology.exists": {"description": "Morphology - Filter for entries with a value", "title": "Morphology.Exists", "type": "boolean"}, "morphology": {"description": "Morphology - Filter for a matching concept code", "title": "Morphology", "type": "string"}, "morphology.not": {"description": "Morphology - Filter for a mismatching concept code", "title": "Morphology.Not", "type": "string"}, "morphology.anyOf": {"description": "Morphology - Filter for a matching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Anyof", "type": "array"}, "morphology.not.anyOf": {"description": "Morphology - Filter for a mismmatching set of concept codes", "items": {"type": "string"}, "title": "Morphology.Not.Anyof", "type": "array"}, "morphology.descendantsOf": {"description": "Morphology - Filter for all child concepts of a given concepts code", "title": "Morphology.Descendantsof", "type": "string"}}, "title": "FamilyHistoryFilters", "type": "object"}, "FamilyHistorySchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's family's history is being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's family history was assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "relationship": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Relationship to the patient", "examples": [], "title": "Relationship", "x-expanded": null, "x-terminology": "FamilyMemberType"}, "hadCancer": {"description": "Whether the family member has a history of cancer", "examples": [], "title": "Had cancer", "type": "boolean", "x-expanded": null}, "contributedToDeath": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "Whether the cancer contributed to the cause of death of the family member", "examples": [], "title": "Contributed to death", "x-expanded": null}, "onsetAge": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Age at which the family member's cancer manifested", "examples": [], "title": "Onset age", "x-expanded": null}, "topography": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Estimated or actual topography of the family member's cancer", "examples": [], "title": "Topography", "x-expanded": null, "x-terminology": "CancerTopography"}, "morphology": {"anyOf": [{"$ref": "#/components/schemas/CodedConceptSchema"}, {"type": "null"}], "description": "Morphology of the family member's cancer (if known)", "examples": [], "title": "Morphology", "x-expanded": null, "x-terminology": "CancerMorphology"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "relationship", "hadCancer"], "title": "FamilyHistory", "type": "object"}, "Paginated_FamilyHistorySchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/FamilyHistorySchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[FamilyHistorySchema]", "type": "object"}, "ComorbiditiesAssessmentCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's comorbidities are being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "indexconditionId": {"description": "The primary neoplastic entity against which comorbidities are assessed", "examples": [], "format": "uuid", "title": "Index neoplastic entity", "type": "string", "x-expanded": null}, "panel": {"anyOf": [{"$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices", "maxLength": 30}, {"type": "null"}], "description": "Comorbidities panel", "examples": [], "title": "Panel", "x-expanded": null}, "presentConditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Present comorbid conditions", "examples": [], "title": "Present comorbid conditions", "x-expanded": null, "x-terminology": "ICD10Condition"}, "absentConditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Absent comorbid conditions", "examples": [], "title": "Absent comorbid conditions", "x-expanded": null, "x-terminology": "ICD10Condition"}}, "required": ["caseId", "date", "indexconditionId"], "title": "ComorbiditiesAssessmentCreate", "type": "object"}, "ComorbiditiesAssessmentPanelChoices": {"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}, "ComorbiditiesAssessmentFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "indexconditionId": {"description": "Index neoplastic entity - Filter for reference matches", "title": "Indexconditionid", "type": "string"}, "indexconditionId.not": {"description": "Index neoplastic entity - Filter for reference mismatches", "title": "Indexconditionid.Not", "type": "string"}, "indexconditionId.contains": {"description": "Index neoplastic entity - Filter for partial text matches", "title": "Indexconditionid.Contains", "type": "string"}, "indexconditionId.not.contains": {"description": "Index neoplastic entity - Filter for partial text mismatches", "title": "Indexconditionid.Not.Contains", "type": "string"}, "indexconditionId.beginsWith": {"description": "Index neoplastic entity - Filter for entries starting with the text", "title": "Indexconditionid.Beginswith", "type": "string"}, "indexconditionId.not.beginsWith": {"description": "Index neoplastic entity - Filter for entries not starting with the text", "title": "Indexconditionid.Not.Beginswith", "type": "string"}, "indexconditionId.endsWith": {"description": "Index neoplastic entity - Filter for entries ending with the text", "title": "Indexconditionid.Endswith", "type": "string"}, "indexconditionId.not.endsWith": {"description": "Index neoplastic entity - Filter for entries not ending with the text", "title": "Indexconditionid.Not.Endswith", "type": "string"}, "panel.not.exists": {"description": "Panel - Filter for entries without a value", "title": "Panel.Not.Exists", "type": "boolean"}, "panel.exists": {"description": "Panel - Filter for entries with a value", "title": "Panel.Exists", "type": "boolean"}, "panel": {"allOf": [{"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}], "description": "Panel - ('Filter for single value choice',)"}, "panel.not": {"allOf": [{"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}], "description": "Panel - ('Filter for all but a single value choice',)"}, "panel.anyOf": {"description": "Panel - ('Filter for excluding a subset of value choices',)", "items": {"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesAssessmentPanelChoices", "type": "string"}, "title": "Panel.Anyof", "type": "array"}, "presentConditions.code": {"description": "None - Filter for full text matches", "title": "Presentconditions.Code", "type": "string"}, "presentConditions.code.not": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Code.Not", "type": "string"}, "presentConditions.code.contains": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Code.Contains", "type": "string"}, "presentConditions.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Code.Not.Contains", "type": "string"}, "presentConditions.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Code.Beginswith", "type": "string"}, "presentConditions.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Code.Not.Beginswith", "type": "string"}, "presentConditions.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Code.Endswith", "type": "string"}, "presentConditions.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Code.Not.Endswith", "type": "string"}, "presentConditions.system": {"description": "None - Filter for full text matches", "title": "Presentconditions.System", "type": "string"}, "presentConditions.system.not": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.System.Not", "type": "string"}, "presentConditions.system.contains": {"description": "None - Filter for partial text matches", "title": "Presentconditions.System.Contains", "type": "string"}, "presentConditions.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.System.Not.Contains", "type": "string"}, "presentConditions.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.System.Beginswith", "type": "string"}, "presentConditions.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.System.Not.Beginswith", "type": "string"}, "presentConditions.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.System.Endswith", "type": "string"}, "presentConditions.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.System.Not.Endswith", "type": "string"}, "presentConditions.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Display.Not.Exists", "type": "boolean"}, "presentConditions.display.exists": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Display.Exists", "type": "boolean"}, "presentConditions.display": {"description": "None - Filter for full text matches", "title": "Presentconditions.Display", "type": "string"}, "presentConditions.display.not": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Display.Not", "type": "string"}, "presentConditions.display.contains": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Display.Contains", "type": "string"}, "presentConditions.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Display.Not.Contains", "type": "string"}, "presentConditions.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Display.Beginswith", "type": "string"}, "presentConditions.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Display.Not.Beginswith", "type": "string"}, "presentConditions.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Display.Endswith", "type": "string"}, "presentConditions.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Display.Not.Endswith", "type": "string"}, "presentConditions.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Version.Not.Exists", "type": "boolean"}, "presentConditions.version.exists": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Version.Exists", "type": "boolean"}, "presentConditions.version": {"description": "None - Filter for full text matches", "title": "Presentconditions.Version", "type": "string"}, "presentConditions.version.not": {"description": "None - Filter for full text mismatches", "title": "Presentconditions.Version.Not", "type": "string"}, "presentConditions.version.contains": {"description": "None - Filter for partial text matches", "title": "Presentconditions.Version.Contains", "type": "string"}, "presentConditions.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Presentconditions.Version.Not.Contains", "type": "string"}, "presentConditions.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Presentconditions.Version.Beginswith", "type": "string"}, "presentConditions.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Presentconditions.Version.Not.Beginswith", "type": "string"}, "presentConditions.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Presentconditions.Version.Endswith", "type": "string"}, "presentConditions.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Presentconditions.Version.Not.Endswith", "type": "string"}, "presentConditions.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Synonyms.Not.Exists", "type": "boolean"}, "presentConditions.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Synonyms.Exists", "type": "boolean"}, "presentConditions.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Presentconditions.Properties.Not.Exists", "type": "boolean"}, "presentConditions.properties.exists": {"description": "None - Filter for entries with a value", "title": "Presentconditions.Properties.Exists", "type": "boolean"}, "absentConditions.code": {"description": "None - Filter for full text matches", "title": "Absentconditions.Code", "type": "string"}, "absentConditions.code.not": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Code.Not", "type": "string"}, "absentConditions.code.contains": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Code.Contains", "type": "string"}, "absentConditions.code.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Code.Not.Contains", "type": "string"}, "absentConditions.code.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Code.Beginswith", "type": "string"}, "absentConditions.code.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Code.Not.Beginswith", "type": "string"}, "absentConditions.code.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Code.Endswith", "type": "string"}, "absentConditions.code.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Code.Not.Endswith", "type": "string"}, "absentConditions.system": {"description": "None - Filter for full text matches", "title": "Absentconditions.System", "type": "string"}, "absentConditions.system.not": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.System.Not", "type": "string"}, "absentConditions.system.contains": {"description": "None - Filter for partial text matches", "title": "Absentconditions.System.Contains", "type": "string"}, "absentConditions.system.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.System.Not.Contains", "type": "string"}, "absentConditions.system.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.System.Beginswith", "type": "string"}, "absentConditions.system.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.System.Not.Beginswith", "type": "string"}, "absentConditions.system.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.System.Endswith", "type": "string"}, "absentConditions.system.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.System.Not.Endswith", "type": "string"}, "absentConditions.display.not.exists": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Display.Not.Exists", "type": "boolean"}, "absentConditions.display.exists": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Display.Exists", "type": "boolean"}, "absentConditions.display": {"description": "None - Filter for full text matches", "title": "Absentconditions.Display", "type": "string"}, "absentConditions.display.not": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Display.Not", "type": "string"}, "absentConditions.display.contains": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Display.Contains", "type": "string"}, "absentConditions.display.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Display.Not.Contains", "type": "string"}, "absentConditions.display.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Display.Beginswith", "type": "string"}, "absentConditions.display.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Display.Not.Beginswith", "type": "string"}, "absentConditions.display.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Display.Endswith", "type": "string"}, "absentConditions.display.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Display.Not.Endswith", "type": "string"}, "absentConditions.version.not.exists": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Version.Not.Exists", "type": "boolean"}, "absentConditions.version.exists": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Version.Exists", "type": "boolean"}, "absentConditions.version": {"description": "None - Filter for full text matches", "title": "Absentconditions.Version", "type": "string"}, "absentConditions.version.not": {"description": "None - Filter for full text mismatches", "title": "Absentconditions.Version.Not", "type": "string"}, "absentConditions.version.contains": {"description": "None - Filter for partial text matches", "title": "Absentconditions.Version.Contains", "type": "string"}, "absentConditions.version.not.contains": {"description": "None - Filter for partial text mismatches", "title": "Absentconditions.Version.Not.Contains", "type": "string"}, "absentConditions.version.beginsWith": {"description": "None - Filter for entries starting with the text", "title": "Absentconditions.Version.Beginswith", "type": "string"}, "absentConditions.version.not.beginsWith": {"description": "None - Filter for entries not starting with the text", "title": "Absentconditions.Version.Not.Beginswith", "type": "string"}, "absentConditions.version.endsWith": {"description": "None - Filter for entries ending with the text", "title": "Absentconditions.Version.Endswith", "type": "string"}, "absentConditions.version.not.endsWith": {"description": "None - Filter for entries not ending with the text", "title": "Absentconditions.Version.Not.Endswith", "type": "string"}, "absentConditions.synonyms.not.exists": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Synonyms.Not.Exists", "type": "boolean"}, "absentConditions.synonyms.exists": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Synonyms.Exists", "type": "boolean"}, "absentConditions.properties.not.exists": {"description": "None - Filter for entries without a value", "title": "Absentconditions.Properties.Not.Exists", "type": "boolean"}, "absentConditions.properties.exists": {"description": "None - Filter for entries with a value", "title": "Absentconditions.Properties.Exists", "type": "boolean"}, "index.not.exists": {"description": "None - Filter for entries without a value", "title": "Index.Not.Exists", "type": "boolean"}, "index.exists": {"description": "None - Filter for entries with a value", "title": "Index.Exists", "type": "boolean"}, "index.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Index.Lessthan", "type": "integer"}, "index.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Index.Lessthanorequal", "type": "integer"}, "index.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Index.Greaterthan", "type": "integer"}, "index.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Index.Greaterthanorequal", "type": "integer"}, "index.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Index.Equal", "type": "integer"}, "index.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Index.Not.Equal", "type": "integer"}, "index.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Index.Between", "type": "array"}, "index.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Index.Not.Between", "type": "array"}}, "title": "ComorbiditiesAssessmentFilters", "type": "object"}, "ComorbiditiesAssessmentSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's comorbidities are being recorded", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "indexconditionId": {"description": "The primary neoplastic entity against which comorbidities are assessed", "examples": [], "format": "uuid", "title": "Index neoplastic entity", "type": "string", "x-expanded": null}, "panel": {"anyOf": [{"$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices", "maxLength": 30}, {"type": "null"}], "description": "Comorbidities panel", "examples": [], "title": "Panel", "x-expanded": null}, "presentConditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Present comorbid conditions", "examples": [], "title": "Present comorbid conditions", "x-expanded": null, "x-terminology": "ICD10Condition"}, "absentConditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "type": "array"}, {"type": "null"}], "default": [], "description": "Absent comorbid conditions", "examples": [], "title": "Absent comorbid conditions", "x-expanded": null, "x-terminology": "ICD10Condition"}, "index": {"anyOf": [{"type": "integer"}, {"type": "number"}, {"type": "null"}], "description": "Comorbidity score", "title": "Index"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date", "indexconditionId"], "title": "ComorbiditiesAssessment", "type": "object"}, "Paginated_ComorbiditiesAssessmentSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/ComorbiditiesAssessmentSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[ComorbiditiesAssessmentSchema]", "type": "object"}, "ComorbiditiesPanelSchema": {"properties": {"name": {"description": "Comorbidity panel name", "title": "Name", "type": "string"}, "categories": {"description": "Comorbidity panel categories", "items": {"$ref": "#/components/schemas/ComorbidityPanelCategory"}, "title": "Categories", "type": "array"}}, "required": ["name"], "title": "ComorbiditiesPanel", "type": "object"}, "ComorbidityPanelCategory": {"properties": {"label": {"title": "Label", "type": "string"}, "default": {"$ref": "#/components/schemas/CodedConceptSchema", "description": "Default choice for category"}, "conditions": {"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Conditions", "type": "array"}}, "required": ["label", "default", "conditions"], "title": "ComorbidityPanelCategory", "type": "object"}, "ComorbiditiesPanel": {"enum": ["Charlson", "Elixhauser", "NCI"], "title": "ComorbiditiesPanel", "type": "string"}, "VitalsCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's vitals are assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the vitals were recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "height": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Height of the patient", "examples": [], "title": "Height", "x-expanded": null}, "weight": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Weight of the patient", "examples": [], "title": "Weight", "x-expanded": null}, "bloodPressureSystolic": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Systolic blood pressure of the patient", "examples": [], "title": "Systolic blood pressure", "x-expanded": null}, "bloodPressureDiastolic": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Diastolic blood pressure of the patient", "examples": [], "title": "Diastolic blood pressure", "x-expanded": null}, "temperature": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Temperature of the patient", "examples": [], "title": "Temperature", "x-expanded": null}}, "required": ["caseId", "date"], "title": "VitalsCreate", "type": "object"}, "VitalsFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "caseId": {"description": "Patient case - Filter for reference matches", "title": "Caseid", "type": "string"}, "caseId.not": {"description": "Patient case - Filter for reference mismatches", "title": "Caseid.Not", "type": "string"}, "caseId.contains": {"description": "Patient case - Filter for partial text matches", "title": "Caseid.Contains", "type": "string"}, "caseId.not.contains": {"description": "Patient case - Filter for partial text mismatches", "title": "Caseid.Not.Contains", "type": "string"}, "caseId.beginsWith": {"description": "Patient case - Filter for entries starting with the text", "title": "Caseid.Beginswith", "type": "string"}, "caseId.not.beginsWith": {"description": "Patient case - Filter for entries not starting with the text", "title": "Caseid.Not.Beginswith", "type": "string"}, "caseId.endsWith": {"description": "Patient case - Filter for entries ending with the text", "title": "Caseid.Endswith", "type": "string"}, "caseId.not.endsWith": {"description": "Patient case - Filter for entries not ending with the text", "title": "Caseid.Not.Endswith", "type": "string"}, "date.before": {"description": "Assessment date - Filter for entries with dates before the specified value", "format": "date", "title": "Date.Before", "type": "string"}, "date.after": {"description": "Assessment date - Filter for entries with dates after the specified value", "format": "date", "title": "Date.After", "type": "string"}, "date.onOrBefore": {"description": "Assessment date - Filter for entries with dates on or before the specified value", "format": "date", "title": "Date.Onorbefore", "type": "string"}, "date.onOrAfter": {"description": "Assessment date - Filter for entries with dates on or after the specified value", "format": "date", "title": "Date.Onorafter", "type": "string"}, "date.on": {"description": "Assessment date - Filter for entries with dates exactly matching the specified value", "format": "date", "title": "Date.On", "type": "string"}, "date.not.on": {"description": "Assessment date - Filter for entries with dates not matching the specified value", "format": "date", "title": "Date.Not.On", "type": "string"}, "date.between": {"description": "Assessment date - Filter for entries with dates between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Between", "type": "array"}, "date.not.between": {"description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"format": "date", "type": "string"}, {"format": "date", "type": "string"}], "title": "Date.Not.Between", "type": "array"}, "height.not.exists": {"description": "Height - Filter for entries without a value", "title": "Height.Not.Exists", "type": "boolean"}, "height.exists": {"description": "Height - Filter for entries with a value", "title": "Height.Exists", "type": "boolean"}, "height.lessThan": {"description": "Height - Filter for entries with values less than the specified value", "title": "Height.Lessthan", "type": "number"}, "height.lessThanOrEqual": {"description": "Height - Filter for entries with values less than or equal to the specified value", "title": "Height.Lessthanorequal", "type": "number"}, "height.greaterThan": {"description": "Height - Filter for entries with values greater than the specified value", "title": "Height.Greaterthan", "type": "number"}, "height.greaterThanOrEqual": {"description": "Height - Filter for entries with values greater than or equal to the specified value", "title": "Height.Greaterthanorequal", "type": "number"}, "height.equal": {"description": "Height - Filter for entries with values exactly equal to the specified value", "title": "Height.Equal", "type": "number"}, "height.not.equal": {"description": "Height - Filter for entries with values not equal to the specified value", "title": "Height.Not.Equal", "type": "number"}, "height.between": {"description": "Height - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Height.Between", "type": "array"}, "height.not.between": {"description": "Height - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Height.Not.Between", "type": "array"}, "weight.not.exists": {"description": "Weight - Filter for entries without a value", "title": "Weight.Not.Exists", "type": "boolean"}, "weight.exists": {"description": "Weight - Filter for entries with a value", "title": "Weight.Exists", "type": "boolean"}, "weight.lessThan": {"description": "Weight - Filter for entries with values less than the specified value", "title": "Weight.Lessthan", "type": "number"}, "weight.lessThanOrEqual": {"description": "Weight - Filter for entries with values less than or equal to the specified value", "title": "Weight.Lessthanorequal", "type": "number"}, "weight.greaterThan": {"description": "Weight - Filter for entries with values greater than the specified value", "title": "Weight.Greaterthan", "type": "number"}, "weight.greaterThanOrEqual": {"description": "Weight - Filter for entries with values greater than or equal to the specified value", "title": "Weight.Greaterthanorequal", "type": "number"}, "weight.equal": {"description": "Weight - Filter for entries with values exactly equal to the specified value", "title": "Weight.Equal", "type": "number"}, "weight.not.equal": {"description": "Weight - Filter for entries with values not equal to the specified value", "title": "Weight.Not.Equal", "type": "number"}, "weight.between": {"description": "Weight - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Weight.Between", "type": "array"}, "weight.not.between": {"description": "Weight - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Weight.Not.Between", "type": "array"}, "bloodPressureSystolic.not.exists": {"description": "Systolic blood pressure - Filter for entries without a value", "title": "Bloodpressuresystolic.Not.Exists", "type": "boolean"}, "bloodPressureSystolic.exists": {"description": "Systolic blood pressure - Filter for entries with a value", "title": "Bloodpressuresystolic.Exists", "type": "boolean"}, "bloodPressureSystolic.lessThan": {"description": "Systolic blood pressure - Filter for entries with values less than the specified value", "title": "Bloodpressuresystolic.Lessthan", "type": "number"}, "bloodPressureSystolic.lessThanOrEqual": {"description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value", "title": "Bloodpressuresystolic.Lessthanorequal", "type": "number"}, "bloodPressureSystolic.greaterThan": {"description": "Systolic blood pressure - Filter for entries with values greater than the specified value", "title": "Bloodpressuresystolic.Greaterthan", "type": "number"}, "bloodPressureSystolic.greaterThanOrEqual": {"description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value", "title": "Bloodpressuresystolic.Greaterthanorequal", "type": "number"}, "bloodPressureSystolic.equal": {"description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value", "title": "Bloodpressuresystolic.Equal", "type": "number"}, "bloodPressureSystolic.not.equal": {"description": "Systolic blood pressure - Filter for entries with values not equal to the specified value", "title": "Bloodpressuresystolic.Not.Equal", "type": "number"}, "bloodPressureSystolic.between": {"description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressuresystolic.Between", "type": "array"}, "bloodPressureSystolic.not.between": {"description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressuresystolic.Not.Between", "type": "array"}, "bloodPressureDiastolic.not.exists": {"description": "Diastolic blood pressure - Filter for entries without a value", "title": "Bloodpressurediastolic.Not.Exists", "type": "boolean"}, "bloodPressureDiastolic.exists": {"description": "Diastolic blood pressure - Filter for entries with a value", "title": "Bloodpressurediastolic.Exists", "type": "boolean"}, "bloodPressureDiastolic.lessThan": {"description": "Diastolic blood pressure - Filter for entries with values less than the specified value", "title": "Bloodpressurediastolic.Lessthan", "type": "number"}, "bloodPressureDiastolic.lessThanOrEqual": {"description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value", "title": "Bloodpressurediastolic.Lessthanorequal", "type": "number"}, "bloodPressureDiastolic.greaterThan": {"description": "Diastolic blood pressure - Filter for entries with values greater than the specified value", "title": "Bloodpressurediastolic.Greaterthan", "type": "number"}, "bloodPressureDiastolic.greaterThanOrEqual": {"description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value", "title": "Bloodpressurediastolic.Greaterthanorequal", "type": "number"}, "bloodPressureDiastolic.equal": {"description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value", "title": "Bloodpressurediastolic.Equal", "type": "number"}, "bloodPressureDiastolic.not.equal": {"description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value", "title": "Bloodpressurediastolic.Not.Equal", "type": "number"}, "bloodPressureDiastolic.between": {"description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressurediastolic.Between", "type": "array"}, "bloodPressureDiastolic.not.between": {"description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Bloodpressurediastolic.Not.Between", "type": "array"}, "temperature.not.exists": {"description": "Temperature - Filter for entries without a value", "title": "Temperature.Not.Exists", "type": "boolean"}, "temperature.exists": {"description": "Temperature - Filter for entries with a value", "title": "Temperature.Exists", "type": "boolean"}, "temperature.lessThan": {"description": "Temperature - Filter for entries with values less than the specified value", "title": "Temperature.Lessthan", "type": "number"}, "temperature.lessThanOrEqual": {"description": "Temperature - Filter for entries with values less than or equal to the specified value", "title": "Temperature.Lessthanorequal", "type": "number"}, "temperature.greaterThan": {"description": "Temperature - Filter for entries with values greater than the specified value", "title": "Temperature.Greaterthan", "type": "number"}, "temperature.greaterThanOrEqual": {"description": "Temperature - Filter for entries with values greater than or equal to the specified value", "title": "Temperature.Greaterthanorequal", "type": "number"}, "temperature.equal": {"description": "Temperature - Filter for entries with values exactly equal to the specified value", "title": "Temperature.Equal", "type": "number"}, "temperature.not.equal": {"description": "Temperature - Filter for entries with values not equal to the specified value", "title": "Temperature.Not.Equal", "type": "number"}, "temperature.between": {"description": "Temperature - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Temperature.Between", "type": "array"}, "temperature.not.between": {"description": "Temperature - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Temperature.Not.Between", "type": "array"}, "body_mass_index.not.exists": {"description": "None - Filter for entries without a value", "title": "Body Mass Index.Not.Exists", "type": "boolean"}, "body_mass_index.exists": {"description": "None - Filter for entries with a value", "title": "Body Mass Index.Exists", "type": "boolean"}, "body_mass_index.lessThan": {"description": "None - Filter for entries with values less than the specified value", "title": "Body Mass Index.Lessthan", "type": "number"}, "body_mass_index.lessThanOrEqual": {"description": "None - Filter for entries with values less than or equal to the specified value", "title": "Body Mass Index.Lessthanorequal", "type": "number"}, "body_mass_index.greaterThan": {"description": "None - Filter for entries with values greater than the specified value", "title": "Body Mass Index.Greaterthan", "type": "number"}, "body_mass_index.greaterThanOrEqual": {"description": "None - Filter for entries with values greater than or equal to the specified value", "title": "Body Mass Index.Greaterthanorequal", "type": "number"}, "body_mass_index.equal": {"description": "None - Filter for entries with values exactly equal to the specified value", "title": "Body Mass Index.Equal", "type": "number"}, "body_mass_index.not.equal": {"description": "None - Filter for entries with values not equal to the specified value", "title": "Body Mass Index.Not.Equal", "type": "number"}, "body_mass_index.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Body Mass Index.Between", "type": "array"}, "body_mass_index.not.between": {"description": "None - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "number"}, {"type": "number"}], "title": "Body Mass Index.Not.Between", "type": "array"}}, "title": "VitalsFilters", "type": "object"}, "Paginated_VitalsSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/VitalsSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[VitalsSchema]", "type": "object"}, "VitalsSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "caseId": {"description": "Indicates the case of the patient who's vitals are assesed", "examples": [], "format": "uuid", "title": "Patient case", "type": "string", "x-expanded": null}, "date": {"description": "Clinically-relevant date at which the vitals were recorded.", "examples": [], "format": "date", "title": "Assessment date", "type": "string", "x-expanded": null}, "height": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Height of the patient", "examples": [], "title": "Height", "x-expanded": null}, "weight": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Weight of the patient", "examples": [], "title": "Weight", "x-expanded": null}, "bloodPressureSystolic": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Systolic blood pressure of the patient", "examples": [], "title": "Systolic blood pressure", "x-expanded": null}, "bloodPressureDiastolic": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Diastolic blood pressure of the patient", "examples": [], "title": "Diastolic blood pressure", "x-expanded": null}, "temperature": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Temperature of the patient", "examples": [], "title": "Temperature", "x-expanded": null}, "body_mass_index": {"anyOf": [{"$ref": "#/components/schemas/MeasureSchema"}, {"type": "null"}], "description": "Bodymass index of the patient"}}, "required": ["id", "createdAt", "updatedAt", "description", "caseId", "date"], "title": "Vitals", "type": "object"}, "MeasureConversionSchema": {"description": "Represents a measure value to be converted to another unit.\n\nAttributes:\n\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.\n    new_unit (str): The new unit to convert the measure to.", "properties": {"value": {"title": "Value", "type": "number"}, "unit": {"title": "Unit", "type": "string"}, "new_unit": {"title": "New Unit", "type": "string"}}, "required": ["value", "unit", "new_unit"], "title": "MeasureConversion", "type": "object"}, "TerminologyFilters": {"properties": {"query": {"title": "Query", "type": "string"}, "codes": {"items": {"type": "string"}, "title": "Codes", "type": "array"}}, "title": "TerminologyFilters", "type": "object"}, "Paginated_CodedConceptSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/CodedConceptSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[CodedConceptSchema]", "type": "object"}, "CohortCreateSchema": {"properties": {"externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "name": {"description": "Name of the cohort", "examples": [], "maxLength": 255, "title": "Cohort name", "type": "string", "x-expanded": null}, "includeCriteria": {"anyOf": [{"type": "object"}, {"type": "null"}], "description": "JSON object defining inclusion criteria", "examples": [], "title": "Inclusion criteria", "x-expanded": null}, "excludeCriteria": {"anyOf": [{"type": "object"}, {"type": "null"}], "description": "JSON object defining exclusion criteria", "examples": [], "title": "Exclusion criteria", "x-expanded": null}, "isPublic": {"default": false, "description": "Whether the cohort is public", "examples": [], "title": "Is public?", "type": "boolean", "x-expanded": null}, "casesIds": {"default": [], "description": "Cases composing the cohort", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Cases", "type": "array", "x-expanded": null}, "manualChoicesIds": {"default": [], "description": "Manually added cases", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Manually added cases", "type": "array", "x-expanded": null}, "frozenSetIds": {"default": [], "description": "Frozen cases", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Frozen cases", "type": "array", "x-expanded": null}}, "required": ["name"], "title": "CohortCreate", "type": "object"}, "CohortFilters": {"properties": {"id": {"description": "Id - Filter for full text matches", "title": "Id", "type": "string"}, "id.not": {"description": "Id - Filter for full text mismatches", "title": "Id.Not", "type": "string"}, "id.contains": {"description": "Id - Filter for partial text matches", "title": "Id.Contains", "type": "string"}, "id.not.contains": {"description": "Id - Filter for partial text mismatches", "title": "Id.Not.Contains", "type": "string"}, "id.beginsWith": {"description": "Id - Filter for entries starting with the text", "title": "Id.Beginswith", "type": "string"}, "id.not.beginsWith": {"description": "Id - Filter for entries not starting with the text", "title": "Id.Not.Beginswith", "type": "string"}, "id.endsWith": {"description": "Id - Filter for entries ending with the text", "title": "Id.Endswith", "type": "string"}, "id.not.endsWith": {"description": "Id - Filter for entries not ending with the text", "title": "Id.Not.Endswith", "type": "string"}, "name": {"description": "Cohort name - Filter for full text matches", "title": "Name", "type": "string"}, "name.not": {"description": "Cohort name - Filter for full text mismatches", "title": "Name.Not", "type": "string"}, "name.contains": {"description": "Cohort name - Filter for partial text matches", "title": "Name.Contains", "type": "string"}, "name.not.contains": {"description": "Cohort name - Filter for partial text mismatches", "title": "Name.Not.Contains", "type": "string"}, "name.beginsWith": {"description": "Cohort name - Filter for entries starting with the text", "title": "Name.Beginswith", "type": "string"}, "name.not.beginsWith": {"description": "Cohort name - Filter for entries not starting with the text", "title": "Name.Not.Beginswith", "type": "string"}, "name.endsWith": {"description": "Cohort name - Filter for entries ending with the text", "title": "Name.Endswith", "type": "string"}, "name.not.endsWith": {"description": "Cohort name - Filter for entries not ending with the text", "title": "Name.Not.Endswith", "type": "string"}, "includeCriteria.not.exists": {"description": "Inclusion criteria - Filter for entries without a value", "title": "Includecriteria.Not.Exists", "type": "boolean"}, "includeCriteria.exists": {"description": "Inclusion criteria - Filter for entries with a value", "title": "Includecriteria.Exists", "type": "boolean"}, "excludeCriteria.not.exists": {"description": "Exclusion criteria - Filter for entries without a value", "title": "Excludecriteria.Not.Exists", "type": "boolean"}, "excludeCriteria.exists": {"description": "Exclusion criteria - Filter for entries with a value", "title": "Excludecriteria.Exists", "type": "boolean"}, "isPublic": {"description": "Is public? - ('Filter for yes/no statement',)", "title": "Ispublic", "type": "boolean"}, "casesIds": {"description": "Cases - Filter for reference matches", "title": "Casesids", "type": "string"}, "casesIds.not": {"description": "Cases - Filter for reference mismatches", "title": "Casesids.Not", "type": "string"}, "manualChoicesIds": {"description": "Manually added cases - Filter for reference matches", "title": "Manualchoicesids", "type": "string"}, "manualChoicesIds.not": {"description": "Manually added cases - Filter for reference mismatches", "title": "Manualchoicesids.Not", "type": "string"}, "frozenSetIds": {"description": "Frozen cases - Filter for reference matches", "title": "Frozensetids", "type": "string"}, "frozenSetIds.not": {"description": "Frozen cases - Filter for reference mismatches", "title": "Frozensetids.Not", "type": "string"}, "population.lessThan": {"description": "Population - Filter for entries with values less than the specified value", "title": "Population.Lessthan", "type": "integer"}, "population.lessThanOrEqual": {"description": "Population - Filter for entries with values less than or equal to the specified value", "title": "Population.Lessthanorequal", "type": "integer"}, "population.greaterThan": {"description": "Population - Filter for entries with values greater than the specified value", "title": "Population.Greaterthan", "type": "integer"}, "population.greaterThanOrEqual": {"description": "Population - Filter for entries with values greater than or equal to the specified value", "title": "Population.Greaterthanorequal", "type": "integer"}, "population.equal": {"description": "Population - Filter for entries with values exactly equal to the specified value", "title": "Population.Equal", "type": "integer"}, "population.not.equal": {"description": "Population - Filter for entries with values not equal to the specified value", "title": "Population.Not.Equal", "type": "integer"}, "population.between": {"description": "Population - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Population.Between", "type": "array"}, "population.not.between": {"description": "Population - Filter for entries with values between two specified values (inclusive)", "maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "integer"}], "title": "Population.Not.Between", "type": "array"}, "createdBy": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Filter for a particular cohort creator by its username", "title": "Createdby"}}, "title": "CohortFilters", "type": "object"}, "CohortSchema": {"properties": {"id": {"description": "", "examples": [], "format": "uuid", "title": "Id", "type": "string", "x-expanded": null}, "createdAt": {"description": "", "examples": [], "format": "date-time", "title": "Created At", "type": "string", "x-expanded": null}, "updatedAt": {"description": "", "examples": [], "format": "date-time", "title": "Updated At", "type": "string", "x-expanded": null}, "createdBy": {"anyOf": [{"$ref": "#/components/schemas/UserSchema"}, {"type": "null"}], "description": "The user who created the original data", "examples": [], "title": "Created By", "x-expanded": true}, "updatedBy": {"default": [], "description": "The user(s) who updated the data since its creation", "examples": [], "items": {"$ref": "#/components/schemas/UserSchema"}, "title": "Updated By", "type": "array", "x-expanded": true}, "description": {"description": "Human-readable description", "title": "Description", "type": "string"}, "externalSource": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The digital source of the data, relevant for automated data", "examples": [], "title": "External data source", "x-expanded": null}, "externalSourceId": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The data identifier at the digital source of the data, relevant for automated data", "examples": [], "title": "External data source Id", "x-expanded": null}, "name": {"description": "Name of the cohort", "examples": [], "maxLength": 255, "title": "Cohort name", "type": "string", "x-expanded": null}, "includeCriteria": {"anyOf": [{"type": "object"}, {"type": "null"}], "description": "JSON object defining inclusion criteria", "examples": [], "title": "Inclusion criteria", "x-expanded": null}, "excludeCriteria": {"anyOf": [{"type": "object"}, {"type": "null"}], "description": "JSON object defining exclusion criteria", "examples": [], "title": "Exclusion criteria", "x-expanded": null}, "isPublic": {"default": false, "description": "Whether the cohort is public", "examples": [], "title": "Is public?", "type": "boolean", "x-expanded": null}, "casesIds": {"default": [], "description": "Cases composing the cohort", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Cases", "type": "array", "x-expanded": null}, "manualChoicesIds": {"default": [], "description": "Manually added cases", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Manually added cases", "type": "array", "x-expanded": null}, "frozenSetIds": {"default": [], "description": "Frozen cases", "examples": [], "items": {"format": "uuid", "type": "string"}, "title": "Frozen cases", "type": "array", "x-expanded": null}, "population": {"description": "Cohort population", "title": "Population", "type": "integer"}}, "required": ["id", "createdAt", "updatedAt", "description", "name", "population"], "title": "Cohort", "type": "object"}, "Paginated_CohortSchema_": {"properties": {"count": {"title": "Count", "type": "integer"}, "items": {"items": {"$ref": "#/components/schemas/CohortSchema"}, "title": "Items", "type": "array"}}, "required": ["count", "items"], "title": "Paginated[CohortSchema]", "type": "object"}, "CohortStatisticsSchema": {"properties": {"ageAverage": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Ageaverage"}, "ageStdDev": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Agestddev"}, "dataCompletionAverage": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Datacompletionaverage"}, "dataCompletionStdDev": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Datacompletionstddev"}}, "title": "CohortStatistics", "type": "object"}, "CohortBuilderConfig": {"properties": {"allowEmptyRulesets": {"const": false, "default": false, "title": "Allowemptyrulesets", "type": "boolean"}, "fields": {"additionalProperties": {"$ref": "#/components/schemas/CohortBuilderField"}, "title": "Fields", "type": "object"}, "entities": {"additionalProperties": {"$ref": "#/components/schemas/CohortBuilderEntity"}, "title": "Entities", "type": "object"}}, "required": ["fields", "entities"], "title": "CohortBuilderConfig", "type": "object"}, "CohortBuilderEntity": {"properties": {"name": {"title": "Name", "type": "string"}}, "required": ["name"], "title": "CohortBuilderEntity", "type": "object"}, "CohortBuilderField": {"properties": {"name": {"title": "Name", "type": "string"}, "operators": {"items": {"$ref": "#/components/schemas/CohortQueryFilter"}, "title": "Operators", "type": "array"}, "type": {"$ref": "#/components/schemas/CohortRuleType"}, "entity": {"$ref": "#/components/schemas/CohortQueryEntity"}, "options": {"default": [], "items": {"$ref": "#/components/schemas/CohortBuilderFieldOption"}, "title": "Options", "type": "array"}}, "required": ["name", "operators", "type", "entity"], "title": "CohortBuilderField", "type": "object"}, "CohortBuilderFieldOption": {"properties": {"name": {"title": "Name", "type": "string"}, "value": {"title": "Value"}}, "required": ["name", "value"], "title": "CohortBuilderFieldOption", "type": "object"}, "CohortQueryEntity": {"enum": ["PatientCase", "PatientCaseDataCompletion", "NeoplasticEntity", "Staging", "TNMStaging", "FIGOStaging", "BinetStaging", "RaiStaging", "BreslowDepth", "ClarkStaging", "ISSStaging", "RISSStaging", "GleasonGrade", "INSSStage", "INRGSSStage", "WilmsStage", "RhabdomyosarcomaClinicalGroup", "LymphomaStaging", "TumorMarker", "RiskAssessment", "TreatmentResponse", "TherapyLine", "SystemicTherapy", "SystemicTherapyMedication", "PerformanceStatus", "Surgery", "Radiotherapy", "RadiotherapyDosage", "RadiotherapySetting", "Lifestyle", "ComorbiditiesAssessment", "FamilyHistory", "TumorBoard", "MolecularTumorBoard", "UnspecifiedTumorBoard", "MolecularTherapeuticRecommendation", "AdverseEvent", "AdverseEventSuspectedCause", "AdverseEventMitigation", "Vitals", "GenomicVariant", "GenomicSignature", "TumorMutationalBurden", "MicrosatelliteInstability", "LossOfHeterozygosity", "HomologousRecombinationDeficiency", "TumorNeoantigenBurden", "AneuploidScore"], "title": "CohortQueryEntity", "type": "string"}, "CohortQueryFilter": {"enum": ["ExactStringFilter", "NotExactStringFilter", "ContainsStringFilter", "NotContainsStringFilter", "BeginsWithStringFilter", "NotBeginsWithStringFilter", "EndsWithStringFilter", "NotEndsWithStringFilter", "BeforeDateFilter", "AfterDateFilter", "OnOrBeforeDateFilter", "OnOrAfterDateFilter", "OnDateFilter", "NotOnDateFilter", "BetweenDatesFilter", "NotBetweenDatesFilter", "OverlapsPeriodFilter", "NotOverlapsPeriodFilter", "ContainsPeriodFilter", "NotContainsPeriodFilter", "ContainedByPeriodFilter", "NotContainedByPeriodFilter", "LessThanIntegerFilter", "LessThanOrEqualIntegerFilter", "GreaterThanIntegerFilter", "GreaterThanOrEqualIntegerFilter", "EqualIntegerFilter", "NotEqualIntegerFilter", "BetweenIntegerFilter", "NotBetweenIntegerFilter", "LessThanFloatFilter", "LessThanOrEqualFloatFilter", "GreaterThanFloatFilter", "GreaterThanOrEqualFloatFilter", "EqualFloatFilter", "NotEqualFloatFilter", "BetweenFloatFilter", "NotBetweenFloatFilter", "EqualsBooleanFilter", "EqualsConceptFilter", "NotEqualsConceptFilter", "AnyOfConceptFilter", "NotAnyOfConceptFilter", "DescendantsOfConceptFilter", "ExactRefereceFilter", "NotExactRefereceFilter", "EqualsEnumFilter", "NotEqualsEnumFilter", "AnyOfEnumFilter", "NotAnyOfEnumFilter", "IsNullFilter", "NotIsNullFilter"], "title": "CohortQueryFilter", "type": "string"}, "CohortRuleType": {"enum": ["string", "number", "date", "boolean", "coded_concept", "measure", "enum"], "title": "CohortRuleType", "type": "string"}, "CasesPerMonthSchema": {"properties": {"month": {"format": "date", "title": "Month", "type": "string"}, "cumulativeCount": {"title": "Cumulativecount", "type": "integer"}}, "required": ["month", "cumulativeCount"], "title": "CasesPerMonthSchema", "type": "object"}, "DataPlatformStatisticsSchema": {"properties": {"cases": {"title": "Cases", "type": "integer"}, "primarySites": {"title": "Primarysites", "type": "integer"}, "projects": {"title": "Projects", "type": "integer"}, "entries": {"title": "Entries", "type": "integer"}, "mutations": {"title": "Mutations", "type": "integer"}, "clinicalCenters": {"title": "Clinicalcenters", "type": "integer"}, "contributors": {"title": "Contributors", "type": "integer"}}, "required": ["cases", "primarySites", "projects", "entries", "mutations", "clinicalCenters", "contributors"], "title": "DataPlatformStatisticsSchema", "type": "object"}, "EntityStatisticsSchema": {"properties": {"population": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Population"}, "dataCompletionAverage": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Datacompletionaverage"}, "topographyCode": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Topographycode"}, "topographyGroup": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Topographygroup"}, "contributors": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Contributors"}}, "title": "EntityStatistics", "type": "object"}}, "securitySchemes": {"JWTAuth": {"type": "http", "scheme": "bearer"}}}, "servers": []}