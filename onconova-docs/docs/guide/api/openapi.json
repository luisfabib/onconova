{
  "openapi": "3.1.0",
  "info": {
    "title": "Onconova API",
    "version": "1.0.0",
    "description": "\nWelcome to the Onconova API — a secure, standards-based interface designed to facilitate the exchange, management, and \nanalysis of research data related to cancer genomics, clinical records, and associated metadata. This API provides an extensive set of \nRESTful endpoints enabling authorized users to perform full CRUD (Create, Read, Update, Delete) operations on various resources within the platform’s data ecosystem.\n\nThe primary objective of this API is to support precision oncology research by enabling interoperability between data systems, \npromoting data sharing among research institutions, and streamlining workflows for clinical and genomic data management in a secure, authenticated environment.\n\n### Authentication\nTo ensure the security and integrity of cancer research data, **all API requests require proper authentication**.\n\nA valid session token must be obtained prior to accessing any protected endpoint. This token must be included in the request header `X-Session-Token`.\n\nThe authentication and authorization flows for obtaining and managing session tokens are provided through the AllAuth authentication service. \nThis includes endpoints for user login, logout, password management, and token renewal. For complete details on implementing authentication and \nmanaging session tokens, please refer to the [AllAuth API documentation](/api/allauth/openapi.html).\n\n**Important:** Unauthorized requests or those missing valid authentication tokens will receive an `HTTP 401 Unauthorized` response.\n\n### Terms and Conditions\nBy accessing and using this website, you agree to comply with and be bound by the following terms and conditions. The content provided on this API is \nintended solely for general informational and research purposes. While we strive to ensure the information is accurate and reliable, we do not make \nany express or implied warranties about the accuracy, adequacy, validity, reliability, availability, or completeness of the content.\n\nThe information presented on this platform is provided in good faith. However, we do not accept any liability for any loss or damage incurred as a \nresult of using the site or relying on the information provided. Your use of this site and any reliance on the content is solely at your own risk.\n\nThese terms and conditions may be updated from time to time, and it is your responsibility to review them regularly to ensure compliance.\n\n### License \nthe Onconova API specification is made available under the MIT License, a permissive open-source license that allows users to freely use, copy,\nmodify, merge, publish, distribute, sublicense, and/or sell copies of the software, subject to the inclusion of the original copyright and license.\n    ",
    "license": {
      "name": "MIT",
      "url": "https://github.com/precisionmedicineinitiative/Onconova/blob/main/LICENSE"
    }
  },
  "paths": {
    "/api/auth/session": {
      "post": {
        "operationId": "login",
        "summary": "Login",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationMeta"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              }
            }
          },
          "required": true
        },
        "security": []
      }
    },
    "/api/users": {
      "get": {
        "operationId": "getUsers",
        "summary": "Get All Users Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "description": "Full name - Filter for full text matches",
              "title": "Fullname",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "fullName.not",
            "schema": {
              "description": "Full name - Filter for full text mismatches",
              "title": "Fullname.Not",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "fullName.contains",
            "schema": {
              "description": "Full name - Filter for partial text matches",
              "title": "Fullname.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "fullName.not.contains",
            "schema": {
              "description": "Full name - Filter for partial text mismatches",
              "title": "Fullname.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "fullName.beginsWith",
            "schema": {
              "description": "Full name - Filter for entries starting with the text",
              "title": "Fullname.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "fullName.not.beginsWith",
            "schema": {
              "description": "Full name - Filter for entries not starting with the text",
              "title": "Fullname.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "fullName.endsWith",
            "schema": {
              "description": "Full name - Filter for entries ending with the text",
              "title": "Fullname.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "fullName.not.endsWith",
            "schema": {
              "description": "Full name - Filter for entries not ending with the text",
              "title": "Fullname.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Full name - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "fullName.anyOf",
            "schema": {
              "description": "Full name - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Fullname.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Full name - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "fullName.not.anyOf",
            "schema": {
              "description": "Full name - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Fullname.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Full name - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "External",
                    "Viewer",
                    "Data Contributor",
                    "Data Analyst",
                    "Project Manager",
                    "Platform Manager",
                    "System Administrator"
                  ],
                  "title": "AccessRoles",
                  "type": "string"
                }
              ],
              "description": "User role - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "User role - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "role.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "External",
                    "Viewer",
                    "Data Contributor",
                    "Data Analyst",
                    "Project Manager",
                    "Platform Manager",
                    "System Administrator"
                  ],
                  "title": "AccessRoles",
                  "type": "string"
                }
              ],
              "description": "User role - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "User role - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "role.anyOf",
            "schema": {
              "description": "User role - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "External",
                  "Viewer",
                  "Data Contributor",
                  "Data Analyst",
                  "Project Manager",
                  "Platform Manager",
                  "System Administrator"
                ],
                "title": "AccessRoles",
                "type": "string"
              },
              "title": "Role.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "User role - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "canViewCases",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canviewcases",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canViewProjects",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canviewprojects",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canViewCohorts",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canviewcohorts",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canViewUsers",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canviewusers",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canViewDatasets",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canviewdatasets",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canImportData",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canimportdata",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canManageCases",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canmanagecases",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canManageCohorts",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canmanagecohorts",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canManageDatasets",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canmanagedatasets",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canAnalyzeData",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Cananalyzedata",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canExportData",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canexportdata",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canManageProjects",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canmanageprojects",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canAccessSensitiveData",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canaccesssensitivedata",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canAuditLogs",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canauditlogs",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "canManageUsers",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Canmanageusers",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "isSystemAdmin",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Issystemadmin",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "isProvided",
            "schema": {
              "description": "None - ('Filter for yes/no statement',)",
              "title": "Isprovided",
              "type": "boolean"
            },
            "required": false,
            "description": "None - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "provider.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Provider.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "provider.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Provider.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "description": "None - Filter for full text matches",
              "title": "Provider",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "provider.not",
            "schema": {
              "description": "None - Filter for full text mismatches",
              "title": "Provider.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "provider.contains",
            "schema": {
              "description": "None - Filter for partial text matches",
              "title": "Provider.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "provider.not.contains",
            "schema": {
              "description": "None - Filter for partial text mismatches",
              "title": "Provider.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "provider.beginsWith",
            "schema": {
              "description": "None - Filter for entries starting with the text",
              "title": "Provider.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "provider.not.beginsWith",
            "schema": {
              "description": "None - Filter for entries not starting with the text",
              "title": "Provider.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "provider.endsWith",
            "schema": {
              "description": "None - Filter for entries ending with the text",
              "title": "Provider.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "provider.not.endsWith",
            "schema": {
              "description": "None - Filter for entries not ending with the text",
              "title": "Provider.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "provider.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Provider.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "provider.not.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Provider.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "lastLogin.not.exists",
            "schema": {
              "description": "Last Login - Filter for entries without a value",
              "title": "Lastlogin.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Last Login - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "lastLogin.exists",
            "schema": {
              "description": "Last Login - Filter for entries with a value",
              "title": "Lastlogin.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Last Login - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "lastLogin.before",
            "schema": {
              "description": "Last Login - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Lastlogin.Before",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.after",
            "schema": {
              "description": "Last Login - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Lastlogin.After",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.onOrBefore",
            "schema": {
              "description": "Last Login - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Lastlogin.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.onOrAfter",
            "schema": {
              "description": "Last Login - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Lastlogin.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.on",
            "schema": {
              "description": "Last Login - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Lastlogin.On",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.not.on",
            "schema": {
              "description": "Last Login - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Lastlogin.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "lastLogin.between",
            "schema": {
              "description": "Last Login - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Lastlogin.Between",
              "type": "array"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "lastLogin.not.between",
            "schema": {
              "description": "Last Login - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Lastlogin.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Last Login - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "description": "Username - Filter for full text matches",
              "title": "Username",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "username.not",
            "schema": {
              "description": "Username - Filter for full text mismatches",
              "title": "Username.Not",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "username.contains",
            "schema": {
              "description": "Username - Filter for partial text matches",
              "title": "Username.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "username.not.contains",
            "schema": {
              "description": "Username - Filter for partial text mismatches",
              "title": "Username.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "username.beginsWith",
            "schema": {
              "description": "Username - Filter for entries starting with the text",
              "title": "Username.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "username.not.beginsWith",
            "schema": {
              "description": "Username - Filter for entries not starting with the text",
              "title": "Username.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "username.endsWith",
            "schema": {
              "description": "Username - Filter for entries ending with the text",
              "title": "Username.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "username.not.endsWith",
            "schema": {
              "description": "Username - Filter for entries not ending with the text",
              "title": "Username.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Username - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "username.anyOf",
            "schema": {
              "description": "Username - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Username.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Username - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "username.not.anyOf",
            "schema": {
              "description": "Username - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Username.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Username - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "firstName.not.exists",
            "schema": {
              "description": "First Name - Filter for entries without a value",
              "title": "Firstname.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "First Name - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "firstName.exists",
            "schema": {
              "description": "First Name - Filter for entries with a value",
              "title": "Firstname.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "First Name - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "description": "First Name - Filter for full text matches",
              "title": "Firstname",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "firstName.not",
            "schema": {
              "description": "First Name - Filter for full text mismatches",
              "title": "Firstname.Not",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "firstName.contains",
            "schema": {
              "description": "First Name - Filter for partial text matches",
              "title": "Firstname.Contains",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "firstName.not.contains",
            "schema": {
              "description": "First Name - Filter for partial text mismatches",
              "title": "Firstname.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "firstName.beginsWith",
            "schema": {
              "description": "First Name - Filter for entries starting with the text",
              "title": "Firstname.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "firstName.not.beginsWith",
            "schema": {
              "description": "First Name - Filter for entries not starting with the text",
              "title": "Firstname.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "firstName.endsWith",
            "schema": {
              "description": "First Name - Filter for entries ending with the text",
              "title": "Firstname.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "firstName.not.endsWith",
            "schema": {
              "description": "First Name - Filter for entries not ending with the text",
              "title": "Firstname.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "First Name - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "firstName.anyOf",
            "schema": {
              "description": "First Name - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Firstname.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "First Name - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "firstName.not.anyOf",
            "schema": {
              "description": "First Name - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Firstname.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "First Name - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "lastName.not.exists",
            "schema": {
              "description": "Last Name - Filter for entries without a value",
              "title": "Lastname.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Last Name - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "lastName.exists",
            "schema": {
              "description": "Last Name - Filter for entries with a value",
              "title": "Lastname.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Last Name - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "description": "Last Name - Filter for full text matches",
              "title": "Lastname",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "lastName.not",
            "schema": {
              "description": "Last Name - Filter for full text mismatches",
              "title": "Lastname.Not",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "lastName.contains",
            "schema": {
              "description": "Last Name - Filter for partial text matches",
              "title": "Lastname.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "lastName.not.contains",
            "schema": {
              "description": "Last Name - Filter for partial text mismatches",
              "title": "Lastname.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "lastName.beginsWith",
            "schema": {
              "description": "Last Name - Filter for entries starting with the text",
              "title": "Lastname.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "lastName.not.beginsWith",
            "schema": {
              "description": "Last Name - Filter for entries not starting with the text",
              "title": "Lastname.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "lastName.endsWith",
            "schema": {
              "description": "Last Name - Filter for entries ending with the text",
              "title": "Lastname.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "lastName.not.endsWith",
            "schema": {
              "description": "Last Name - Filter for entries not ending with the text",
              "title": "Lastname.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Last Name - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "lastName.anyOf",
            "schema": {
              "description": "Last Name - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Lastname.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Last Name - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "lastName.not.anyOf",
            "schema": {
              "description": "Last Name - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Lastname.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Last Name - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "email.not.exists",
            "schema": {
              "description": "Email Address - Filter for entries without a value",
              "title": "Email.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Email Address - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "email.exists",
            "schema": {
              "description": "Email Address - Filter for entries with a value",
              "title": "Email.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Email Address - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "description": "Email Address - Filter for full text matches",
              "title": "Email",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "email.not",
            "schema": {
              "description": "Email Address - Filter for full text mismatches",
              "title": "Email.Not",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "email.contains",
            "schema": {
              "description": "Email Address - Filter for partial text matches",
              "title": "Email.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "email.not.contains",
            "schema": {
              "description": "Email Address - Filter for partial text mismatches",
              "title": "Email.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "email.beginsWith",
            "schema": {
              "description": "Email Address - Filter for entries starting with the text",
              "title": "Email.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "email.not.beginsWith",
            "schema": {
              "description": "Email Address - Filter for entries not starting with the text",
              "title": "Email.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "email.endsWith",
            "schema": {
              "description": "Email Address - Filter for entries ending with the text",
              "title": "Email.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "email.not.endsWith",
            "schema": {
              "description": "Email Address - Filter for entries not ending with the text",
              "title": "Email.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Email Address - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "email.anyOf",
            "schema": {
              "description": "Email Address - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Email.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Email Address - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "email.not.anyOf",
            "schema": {
              "description": "Email Address - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Email.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Email Address - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "isActive",
            "schema": {
              "description": "Active - ('Filter for yes/no statement',)",
              "title": "Isactive",
              "type": "boolean"
            },
            "required": false,
            "description": "Active - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "title.not.exists",
            "schema": {
              "description": "Title - Filter for entries without a value",
              "title": "Title.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Title - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "title.exists",
            "schema": {
              "description": "Title - Filter for entries with a value",
              "title": "Title.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Title - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "description": "Title - Filter for full text matches",
              "title": "Title",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "title.not",
            "schema": {
              "description": "Title - Filter for full text mismatches",
              "title": "Title.Not",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "title.contains",
            "schema": {
              "description": "Title - Filter for partial text matches",
              "title": "Title.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "title.not.contains",
            "schema": {
              "description": "Title - Filter for partial text mismatches",
              "title": "Title.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "title.beginsWith",
            "schema": {
              "description": "Title - Filter for entries starting with the text",
              "title": "Title.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "title.not.beginsWith",
            "schema": {
              "description": "Title - Filter for entries not starting with the text",
              "title": "Title.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "title.endsWith",
            "schema": {
              "description": "Title - Filter for entries ending with the text",
              "title": "Title.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "title.not.endsWith",
            "schema": {
              "description": "Title - Filter for entries not ending with the text",
              "title": "Title.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Title - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "title.anyOf",
            "schema": {
              "description": "Title - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Title.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Title - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "title.not.anyOf",
            "schema": {
              "description": "Title - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Title.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Title - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "organization.not.exists",
            "schema": {
              "description": "Organization - Filter for entries without a value",
              "title": "Organization.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Organization - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "organization.exists",
            "schema": {
              "description": "Organization - Filter for entries with a value",
              "title": "Organization.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Organization - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "organization",
            "schema": {
              "description": "Organization - Filter for full text matches",
              "title": "Organization",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "organization.not",
            "schema": {
              "description": "Organization - Filter for full text mismatches",
              "title": "Organization.Not",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "organization.contains",
            "schema": {
              "description": "Organization - Filter for partial text matches",
              "title": "Organization.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "organization.not.contains",
            "schema": {
              "description": "Organization - Filter for partial text mismatches",
              "title": "Organization.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "organization.beginsWith",
            "schema": {
              "description": "Organization - Filter for entries starting with the text",
              "title": "Organization.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "organization.not.beginsWith",
            "schema": {
              "description": "Organization - Filter for entries not starting with the text",
              "title": "Organization.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "organization.endsWith",
            "schema": {
              "description": "Organization - Filter for entries ending with the text",
              "title": "Organization.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "organization.not.endsWith",
            "schema": {
              "description": "Organization - Filter for entries not ending with the text",
              "title": "Organization.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Organization - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "organization.anyOf",
            "schema": {
              "description": "Organization - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Organization.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Organization - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "organization.not.anyOf",
            "schema": {
              "description": "Organization - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Organization.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Organization - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "department.not.exists",
            "schema": {
              "description": "Department - Filter for entries without a value",
              "title": "Department.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Department - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "department.exists",
            "schema": {
              "description": "Department - Filter for entries with a value",
              "title": "Department.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Department - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "description": "Department - Filter for full text matches",
              "title": "Department",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "department.not",
            "schema": {
              "description": "Department - Filter for full text mismatches",
              "title": "Department.Not",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "department.contains",
            "schema": {
              "description": "Department - Filter for partial text matches",
              "title": "Department.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "department.not.contains",
            "schema": {
              "description": "Department - Filter for partial text mismatches",
              "title": "Department.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "department.beginsWith",
            "schema": {
              "description": "Department - Filter for entries starting with the text",
              "title": "Department.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "department.not.beginsWith",
            "schema": {
              "description": "Department - Filter for entries not starting with the text",
              "title": "Department.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "department.endsWith",
            "schema": {
              "description": "Department - Filter for entries ending with the text",
              "title": "Department.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "department.not.endsWith",
            "schema": {
              "description": "Department - Filter for entries not ending with the text",
              "title": "Department.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Department - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "department.anyOf",
            "schema": {
              "description": "Department - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Department.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Department - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "department.not.anyOf",
            "schema": {
              "description": "Department - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Department.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Department - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "accessLevel.lessThan",
            "schema": {
              "description": "Access level - Filter for entries with values less than the specified value",
              "title": "Accesslevel.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.lessThanOrEqual",
            "schema": {
              "description": "Access level - Filter for entries with values less than or equal to the specified value",
              "title": "Accesslevel.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.greaterThan",
            "schema": {
              "description": "Access level - Filter for entries with values greater than the specified value",
              "title": "Accesslevel.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.greaterThanOrEqual",
            "schema": {
              "description": "Access level - Filter for entries with values greater than or equal to the specified value",
              "title": "Accesslevel.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.equal",
            "schema": {
              "description": "Access level - Filter for entries with values exactly equal to the specified value",
              "title": "Accesslevel.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.not.equal",
            "schema": {
              "description": "Access level - Filter for entries with values not equal to the specified value",
              "title": "Accesslevel.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Access level - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "accessLevel.between",
            "schema": {
              "description": "Access level - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Accesslevel.Between",
              "type": "array"
            },
            "required": false,
            "description": "Access level - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "accessLevel.not.between",
            "schema": {
              "description": "Access level - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Accesslevel.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Access level - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_User_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createUser",
        "summary": "Create User",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/users/{userId}": {
      "get": {
        "operationId": "getUserById",
        "summary": "Get User By Id",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "title": "Userid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateUser",
        "summary": "Update User",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "title": "Userid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/users/{userId}/profile": {
      "put": {
        "operationId": "updateUserProfile",
        "summary": "Update User Profile",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "title": "Userid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileSchema"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/users/{userId}/password": {
      "put": {
        "operationId": "updateUserPassword",
        "summary": "Update User Password",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "title": "Userid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordReset"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/users/{userId}/password/reset": {
      "post": {
        "operationId": "resetUserPassword",
        "summary": "Reset User Password",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "title": "Userid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "title": "Password",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "operationId": "getProjects",
        "summary": "Get All Projects Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "leader.username",
            "schema": {
              "description": "Project leader - Filter for username matches",
              "title": "Leader.Username",
              "type": "string"
            },
            "required": false,
            "description": "Project leader - Filter for username matches"
          },
          {
            "in": "query",
            "name": "leader.username.not",
            "schema": {
              "description": "Project leader - Filter for username mismatches",
              "title": "Leader.Username.Not",
              "type": "string"
            },
            "required": false,
            "description": "Project leader - Filter for username mismatches"
          },
          {
            "in": "query",
            "name": "leader.username.anyOf",
            "schema": {
              "description": "Project leader - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Leader.Username.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project leader - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "leader.username.not.anyOf",
            "schema": {
              "description": "Project leader - Filter for entries where at least one reference matches the query",
              "title": "Leader.Username.Not.Anyof",
              "type": "string"
            },
            "required": false,
            "description": "Project leader - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "clinicalCenters",
            "schema": {
              "description": "Clinical Centers - Filter for full text matches",
              "title": "Clinicalcenters",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "clinicalCenters.not",
            "schema": {
              "description": "Clinical Centers - Filter for full text mismatches",
              "title": "Clinicalcenters.Not",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalCenters.contains",
            "schema": {
              "description": "Clinical Centers - Filter for partial text matches",
              "title": "Clinicalcenters.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "clinicalCenters.not.contains",
            "schema": {
              "description": "Clinical Centers - Filter for partial text mismatches",
              "title": "Clinicalcenters.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalCenters.beginsWith",
            "schema": {
              "description": "Clinical Centers - Filter for entries starting with the text",
              "title": "Clinicalcenters.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenters.not.beginsWith",
            "schema": {
              "description": "Clinical Centers - Filter for entries not starting with the text",
              "title": "Clinicalcenters.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenters.endsWith",
            "schema": {
              "description": "Clinical Centers - Filter for entries ending with the text",
              "title": "Clinicalcenters.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenters.not.endsWith",
            "schema": {
              "description": "Clinical Centers - Filter for entries not ending with the text",
              "title": "Clinicalcenters.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenters.anyOf",
            "schema": {
              "description": "Clinical Centers - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalcenters.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "clinicalCenters.not.anyOf",
            "schema": {
              "description": "Clinical Centers - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalcenters.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Clinical Centers - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "description": "Project title - Filter for full text matches",
              "title": "Title",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "title.not",
            "schema": {
              "description": "Project title - Filter for full text mismatches",
              "title": "Title.Not",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "title.contains",
            "schema": {
              "description": "Project title - Filter for partial text matches",
              "title": "Title.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "title.not.contains",
            "schema": {
              "description": "Project title - Filter for partial text mismatches",
              "title": "Title.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "title.beginsWith",
            "schema": {
              "description": "Project title - Filter for entries starting with the text",
              "title": "Title.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "title.not.beginsWith",
            "schema": {
              "description": "Project title - Filter for entries not starting with the text",
              "title": "Title.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "title.endsWith",
            "schema": {
              "description": "Project title - Filter for entries ending with the text",
              "title": "Title.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "title.not.endsWith",
            "schema": {
              "description": "Project title - Filter for entries not ending with the text",
              "title": "Title.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project title - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "title.anyOf",
            "schema": {
              "description": "Project title - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Title.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project title - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "title.not.anyOf",
            "schema": {
              "description": "Project title - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Title.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project title - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "summary",
            "schema": {
              "description": "Project description - Filter for full text matches",
              "title": "Summary",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "summary.not",
            "schema": {
              "description": "Project description - Filter for full text mismatches",
              "title": "Summary.Not",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "summary.contains",
            "schema": {
              "description": "Project description - Filter for partial text matches",
              "title": "Summary.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "summary.not.contains",
            "schema": {
              "description": "Project description - Filter for partial text mismatches",
              "title": "Summary.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "summary.beginsWith",
            "schema": {
              "description": "Project description - Filter for entries starting with the text",
              "title": "Summary.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "summary.not.beginsWith",
            "schema": {
              "description": "Project description - Filter for entries not starting with the text",
              "title": "Summary.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "summary.endsWith",
            "schema": {
              "description": "Project description - Filter for entries ending with the text",
              "title": "Summary.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "summary.not.endsWith",
            "schema": {
              "description": "Project description - Filter for entries not ending with the text",
              "title": "Summary.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project description - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "summary.anyOf",
            "schema": {
              "description": "Project description - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Summary.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project description - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "summary.not.anyOf",
            "schema": {
              "description": "Project description - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Summary.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project description - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber",
            "schema": {
              "description": "Ethics approval number - Filter for full text matches",
              "title": "Ethicsapprovalnumber",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.not",
            "schema": {
              "description": "Ethics approval number - Filter for full text mismatches",
              "title": "Ethicsapprovalnumber.Not",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.contains",
            "schema": {
              "description": "Ethics approval number - Filter for partial text matches",
              "title": "Ethicsapprovalnumber.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.not.contains",
            "schema": {
              "description": "Ethics approval number - Filter for partial text mismatches",
              "title": "Ethicsapprovalnumber.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.beginsWith",
            "schema": {
              "description": "Ethics approval number - Filter for entries starting with the text",
              "title": "Ethicsapprovalnumber.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.not.beginsWith",
            "schema": {
              "description": "Ethics approval number - Filter for entries not starting with the text",
              "title": "Ethicsapprovalnumber.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.endsWith",
            "schema": {
              "description": "Ethics approval number - Filter for entries ending with the text",
              "title": "Ethicsapprovalnumber.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.not.endsWith",
            "schema": {
              "description": "Ethics approval number - Filter for entries not ending with the text",
              "title": "Ethicsapprovalnumber.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.anyOf",
            "schema": {
              "description": "Ethics approval number - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Ethicsapprovalnumber.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "ethicsApprovalNumber.not.anyOf",
            "schema": {
              "description": "Ethics approval number - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Ethicsapprovalnumber.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Ethics approval number - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "planned",
                    "ongoing",
                    "completed",
                    "aborted"
                  ],
                  "title": "ProjectStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Project status - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Project status - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "status.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "planned",
                    "ongoing",
                    "completed",
                    "aborted"
                  ],
                  "title": "ProjectStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Project status - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Project status - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "status.anyOf",
            "schema": {
              "description": "Project status - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "planned",
                  "ongoing",
                  "completed",
                  "aborted"
                ],
                "title": "ProjectStatusChoices",
                "type": "string"
              },
              "title": "Status.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project status - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "members.username",
            "schema": {
              "description": "Project members - Filter for username matches",
              "title": "Members.Username",
              "type": "string"
            },
            "required": false,
            "description": "Project members - Filter for username matches"
          },
          {
            "in": "query",
            "name": "members.username.not",
            "schema": {
              "description": "Project members - Filter for username mismatches",
              "title": "Members.Username.Not",
              "type": "string"
            },
            "required": false,
            "description": "Project members - Filter for username mismatches"
          },
          {
            "in": "query",
            "name": "members.username.anyOf",
            "schema": {
              "description": "Project members - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Members.Username.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project members - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "members.username.not.anyOf",
            "schema": {
              "description": "Project members - Filter for entries where at least one reference matches the query",
              "title": "Members.Username.Not.Anyof",
              "type": "string"
            },
            "required": false,
            "description": "Project members - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Project_"
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createProject",
        "summary": "Create Project",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "operationId": "getProjectById",
        "summary": "Get Project By Id",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateProjectById",
        "summary": "Update Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteProjectById",
        "summary": "Delete Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/history/events": {
      "get": {
        "operationId": "getAllProjectHistoryEvents",
        "summary": "Get All Project History Events",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/history/events/{eventId}": {
      "get": {
        "operationId": "getProjectHistoryEventById",
        "summary": "Get Project History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertProjectToHistoryEvent",
        "summary": "Revert Project To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/members/{memberId}/data-management/grants": {
      "get": {
        "operationId": "getProjectDataManagerGrant",
        "summary": "Get All Project Data Manager Grant",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_ProjectDataManagerGrant_"
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createProjectDataManagerGrant",
        "summary": "Create Project Data Manager Grant",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDataManagerGrantCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/members/{memberId}/data-management/grants/{grantId}": {
      "get": {
        "operationId": "getProjectDataManagerGrantById",
        "summary": "Check Project Data Manager Grant",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "grantId",
            "schema": {
              "title": "Grantid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDataManagerGrant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "revokeProjectDataManagerGrant",
        "summary": "Revoke Project Data Manager Grant",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "grantId",
            "schema": {
              "title": "Grantid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/members/{memberId}/data-management/grants/{grantId}/history/events": {
      "get": {
        "operationId": "getAllProjectDataManagementGrantHistoryEvents",
        "summary": "Get All Project Data Management Grant History Events",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "grantId",
            "schema": {
              "title": "Grantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/members/{memberId}/data-management/grants/{grantId}/history/events/{eventId}": {
      "get": {
        "operationId": "getProjectDataManagementGrantHistoryEventById",
        "summary": "Get Project Data Management Grant History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "grantId",
            "schema": {
              "title": "Grantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/members/{memberId}/data-management/grants/{grantId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertProjectDataManagementGrantToHistoryEvent",
        "summary": "Revert Project Data Management Grant To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "title": "Projectid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": {
              "title": "Memberid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "grantId",
            "schema": {
              "title": "Grantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/interoperability/resources/{resourceId}": {
      "get": {
        "operationId": "exportResource",
        "summary": "Export Resource",
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "schema": {
              "title": "Resourceid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Interoperability"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/interoperability/resources/{resourceId}/description": {
      "get": {
        "operationId": "resolveResourceId",
        "summary": "Resolve Resource Id",
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "schema": {
              "title": "Resourceid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Interoperability"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/interoperability/bundles/{caseId}": {
      "get": {
        "operationId": "exportPatientCaseBundle",
        "summary": "Export Case Bundle",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientCaseBundle"
                }
              }
            }
          }
        },
        "tags": [
          "Interoperability"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/interoperability/bundles": {
      "post": {
        "operationId": "importPatientCaseBundle",
        "summary": "Import Case Bundle",
        "parameters": [
          {
            "in": "query",
            "name": "conflict",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "overwrite",
                    "reassign"
                  ],
                  "title": "ConflictResolution",
                  "type": "string"
                }
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "Interoperability"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientCaseBundle"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases": {
      "get": {
        "operationId": "getPatientCases",
        "summary": "Get All Patient Cases Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "age.lessThan",
            "schema": {
              "description": "Age - Filter for entries with values less than the specified value",
              "title": "Age.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "age.lessThanOrEqual",
            "schema": {
              "description": "Age - Filter for entries with values less than or equal to the specified value",
              "title": "Age.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "age.greaterThan",
            "schema": {
              "description": "Age - Filter for entries with values greater than the specified value",
              "title": "Age.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "age.greaterThanOrEqual",
            "schema": {
              "description": "Age - Filter for entries with values greater than or equal to the specified value",
              "title": "Age.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "age.equal",
            "schema": {
              "description": "Age - Filter for entries with values exactly equal to the specified value",
              "title": "Age.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "age.not.equal",
            "schema": {
              "description": "Age - Filter for entries with values not equal to the specified value",
              "title": "Age.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Age - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "age.between",
            "schema": {
              "description": "Age - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Age.Between",
              "type": "array"
            },
            "required": false,
            "description": "Age - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "age.not.between",
            "schema": {
              "description": "Age - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Age.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Age - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "overallSurvival.not.exists",
            "schema": {
              "description": "Overall survival - Filter for entries without a value",
              "title": "Overallsurvival.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Overall survival - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "overallSurvival.exists",
            "schema": {
              "description": "Overall survival - Filter for entries with a value",
              "title": "Overallsurvival.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "overallSurvival.lessThan",
            "schema": {
              "description": "Overall survival - Filter for entries with values less than the specified value",
              "title": "Overallsurvival.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.lessThanOrEqual",
            "schema": {
              "description": "Overall survival - Filter for entries with values less than or equal to the specified value",
              "title": "Overallsurvival.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.greaterThan",
            "schema": {
              "description": "Overall survival - Filter for entries with values greater than the specified value",
              "title": "Overallsurvival.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.greaterThanOrEqual",
            "schema": {
              "description": "Overall survival - Filter for entries with values greater than or equal to the specified value",
              "title": "Overallsurvival.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.equal",
            "schema": {
              "description": "Overall survival - Filter for entries with values exactly equal to the specified value",
              "title": "Overallsurvival.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.not.equal",
            "schema": {
              "description": "Overall survival - Filter for entries with values not equal to the specified value",
              "title": "Overallsurvival.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "overallSurvival.between",
            "schema": {
              "description": "Overall survival - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Overallsurvival.Between",
              "type": "array"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "overallSurvival.not.between",
            "schema": {
              "description": "Overall survival - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Overallsurvival.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Overall survival - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.not.exists",
            "schema": {
              "description": "Age at diagnosis - Filter for entries without a value",
              "title": "Ageatdiagnosis.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.exists",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with a value",
              "title": "Ageatdiagnosis.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.lessThan",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values less than the specified value",
              "title": "Ageatdiagnosis.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.lessThanOrEqual",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values less than or equal to the specified value",
              "title": "Ageatdiagnosis.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.greaterThan",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values greater than the specified value",
              "title": "Ageatdiagnosis.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.greaterThanOrEqual",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values greater than or equal to the specified value",
              "title": "Ageatdiagnosis.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.equal",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values exactly equal to the specified value",
              "title": "Ageatdiagnosis.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.not.equal",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values not equal to the specified value",
              "title": "Ageatdiagnosis.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.between",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ageatdiagnosis.Between",
              "type": "array"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "ageAtDiagnosis.not.between",
            "schema": {
              "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ageatdiagnosis.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.lessThan",
            "schema": {
              "description": "Data completion rate - Filter for entries with values less than the specified value",
              "title": "Datacompletionrate.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.lessThanOrEqual",
            "schema": {
              "description": "Data completion rate - Filter for entries with values less than or equal to the specified value",
              "title": "Datacompletionrate.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.greaterThan",
            "schema": {
              "description": "Data completion rate - Filter for entries with values greater than the specified value",
              "title": "Datacompletionrate.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.greaterThanOrEqual",
            "schema": {
              "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value",
              "title": "Datacompletionrate.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.equal",
            "schema": {
              "description": "Data completion rate - Filter for entries with values exactly equal to the specified value",
              "title": "Datacompletionrate.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.not.equal",
            "schema": {
              "description": "Data completion rate - Filter for entries with values not equal to the specified value",
              "title": "Datacompletionrate.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.between",
            "schema": {
              "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Datacompletionrate.Between",
              "type": "array"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dataCompletionRate.not.between",
            "schema": {
              "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Datacompletionrate.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "contributors.not.exists",
            "schema": {
              "description": "Data contributors - Filter for entries without a value",
              "title": "Contributors.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Data contributors - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "contributors.exists",
            "schema": {
              "description": "Data contributors - Filter for entries with a value",
              "title": "Contributors.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Data contributors - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "contributors",
            "schema": {
              "description": "Data contributors - Filter for full text matches",
              "title": "Contributors",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "contributors.not",
            "schema": {
              "description": "Data contributors - Filter for full text mismatches",
              "title": "Contributors.Not",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "contributors.contains",
            "schema": {
              "description": "Data contributors - Filter for partial text matches",
              "title": "Contributors.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "contributors.not.contains",
            "schema": {
              "description": "Data contributors - Filter for partial text mismatches",
              "title": "Contributors.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "contributors.beginsWith",
            "schema": {
              "description": "Data contributors - Filter for entries starting with the text",
              "title": "Contributors.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "contributors.not.beginsWith",
            "schema": {
              "description": "Data contributors - Filter for entries not starting with the text",
              "title": "Contributors.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "contributors.endsWith",
            "schema": {
              "description": "Data contributors - Filter for entries ending with the text",
              "title": "Contributors.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "contributors.not.endsWith",
            "schema": {
              "description": "Data contributors - Filter for entries not ending with the text",
              "title": "Contributors.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Data contributors - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "contributors.anyOf",
            "schema": {
              "description": "Data contributors - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Contributors.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Data contributors - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "contributors.not.anyOf",
            "schema": {
              "description": "Data contributors - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Contributors.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Data contributors - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "pseudoidentifier",
            "schema": {
              "description": "Pseudoidentifier - Filter for full text matches",
              "title": "Pseudoidentifier",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.not",
            "schema": {
              "description": "Pseudoidentifier - Filter for full text mismatches",
              "title": "Pseudoidentifier.Not",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.contains",
            "schema": {
              "description": "Pseudoidentifier - Filter for partial text matches",
              "title": "Pseudoidentifier.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.not.contains",
            "schema": {
              "description": "Pseudoidentifier - Filter for partial text mismatches",
              "title": "Pseudoidentifier.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.beginsWith",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries starting with the text",
              "title": "Pseudoidentifier.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.not.beginsWith",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries not starting with the text",
              "title": "Pseudoidentifier.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.endsWith",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries ending with the text",
              "title": "Pseudoidentifier.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.not.endsWith",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries not ending with the text",
              "title": "Pseudoidentifier.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.anyOf",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Pseudoidentifier.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "pseudoidentifier.not.anyOf",
            "schema": {
              "description": "Pseudoidentifier - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Pseudoidentifier.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Pseudoidentifier - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "clinicalCenter",
            "schema": {
              "description": "Medical center - Filter for full text matches",
              "title": "Clinicalcenter",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "clinicalCenter.not",
            "schema": {
              "description": "Medical center - Filter for full text mismatches",
              "title": "Clinicalcenter.Not",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalCenter.contains",
            "schema": {
              "description": "Medical center - Filter for partial text matches",
              "title": "Clinicalcenter.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "clinicalCenter.not.contains",
            "schema": {
              "description": "Medical center - Filter for partial text mismatches",
              "title": "Clinicalcenter.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalCenter.beginsWith",
            "schema": {
              "description": "Medical center - Filter for entries starting with the text",
              "title": "Clinicalcenter.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenter.not.beginsWith",
            "schema": {
              "description": "Medical center - Filter for entries not starting with the text",
              "title": "Clinicalcenter.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenter.endsWith",
            "schema": {
              "description": "Medical center - Filter for entries ending with the text",
              "title": "Clinicalcenter.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenter.not.endsWith",
            "schema": {
              "description": "Medical center - Filter for entries not ending with the text",
              "title": "Clinicalcenter.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Medical center - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalCenter.anyOf",
            "schema": {
              "description": "Medical center - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalcenter.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Medical center - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "clinicalCenter.not.anyOf",
            "schema": {
              "description": "Medical center - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalcenter.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Medical center - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier",
            "schema": {
              "description": "Clinical identifier - Filter for full text matches",
              "title": "Clinicalidentifier",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.not",
            "schema": {
              "description": "Clinical identifier - Filter for full text mismatches",
              "title": "Clinicalidentifier.Not",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.contains",
            "schema": {
              "description": "Clinical identifier - Filter for partial text matches",
              "title": "Clinicalidentifier.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.not.contains",
            "schema": {
              "description": "Clinical identifier - Filter for partial text mismatches",
              "title": "Clinicalidentifier.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.beginsWith",
            "schema": {
              "description": "Clinical identifier - Filter for entries starting with the text",
              "title": "Clinicalidentifier.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.not.beginsWith",
            "schema": {
              "description": "Clinical identifier - Filter for entries not starting with the text",
              "title": "Clinicalidentifier.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.endsWith",
            "schema": {
              "description": "Clinical identifier - Filter for entries ending with the text",
              "title": "Clinicalidentifier.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.not.endsWith",
            "schema": {
              "description": "Clinical identifier - Filter for entries not ending with the text",
              "title": "Clinicalidentifier.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.anyOf",
            "schema": {
              "description": "Clinical identifier - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalidentifier.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "clinicalIdentifier.not.anyOf",
            "schema": {
              "description": "Clinical identifier - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinicalidentifier.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Clinical identifier - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "consentStatus",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "valid",
                    "revoked",
                    "unknown"
                  ],
                  "title": "PatientCaseConsentStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Consent status - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Consent status - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "consentStatus.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "valid",
                    "revoked",
                    "unknown"
                  ],
                  "title": "PatientCaseConsentStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Consent status - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Consent status - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "consentStatus.anyOf",
            "schema": {
              "description": "Consent status - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "valid",
                  "revoked",
                  "unknown"
                ],
                "title": "PatientCaseConsentStatusChoices",
                "type": "string"
              },
              "title": "Consentstatus.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Consent status - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "description": "Gender - Filter for a matching concept code",
              "title": "Gender",
              "type": "string"
            },
            "required": false,
            "description": "Gender - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "gender.not",
            "schema": {
              "description": "Gender - Filter for a mismatching concept code",
              "title": "Gender.Not",
              "type": "string"
            },
            "required": false,
            "description": "Gender - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "gender.anyOf",
            "schema": {
              "description": "Gender - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Gender.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gender - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "gender.not.anyOf",
            "schema": {
              "description": "Gender - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Gender.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gender - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "gender.descendantsOf",
            "schema": {
              "description": "Gender - Filter for all child concepts of a given concepts code",
              "title": "Gender.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Gender - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "race.not.exists",
            "schema": {
              "description": "Race - Filter for entries without a value",
              "title": "Race.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Race - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "race.exists",
            "schema": {
              "description": "Race - Filter for entries with a value",
              "title": "Race.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Race - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "race",
            "schema": {
              "description": "Race - Filter for a matching concept code",
              "title": "Race",
              "type": "string"
            },
            "required": false,
            "description": "Race - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "race.not",
            "schema": {
              "description": "Race - Filter for a mismatching concept code",
              "title": "Race.Not",
              "type": "string"
            },
            "required": false,
            "description": "Race - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "race.anyOf",
            "schema": {
              "description": "Race - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Race.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Race - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "race.not.anyOf",
            "schema": {
              "description": "Race - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Race.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Race - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "race.descendantsOf",
            "schema": {
              "description": "Race - Filter for all child concepts of a given concepts code",
              "title": "Race.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Race - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "sexAtBirth.not.exists",
            "schema": {
              "description": "Birth sex - Filter for entries without a value",
              "title": "Sexatbirth.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Birth sex - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "sexAtBirth.exists",
            "schema": {
              "description": "Birth sex - Filter for entries with a value",
              "title": "Sexatbirth.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Birth sex - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "sexAtBirth",
            "schema": {
              "description": "Birth sex - Filter for a matching concept code",
              "title": "Sexatbirth",
              "type": "string"
            },
            "required": false,
            "description": "Birth sex - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "sexAtBirth.not",
            "schema": {
              "description": "Birth sex - Filter for a mismatching concept code",
              "title": "Sexatbirth.Not",
              "type": "string"
            },
            "required": false,
            "description": "Birth sex - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "sexAtBirth.anyOf",
            "schema": {
              "description": "Birth sex - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Sexatbirth.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Birth sex - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "sexAtBirth.not.anyOf",
            "schema": {
              "description": "Birth sex - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Sexatbirth.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Birth sex - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "sexAtBirth.descendantsOf",
            "schema": {
              "description": "Birth sex - Filter for all child concepts of a given concepts code",
              "title": "Sexatbirth.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Birth sex - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "genderIdentity.not.exists",
            "schema": {
              "description": "Gender identity - Filter for entries without a value",
              "title": "Genderidentity.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gender identity - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "genderIdentity.exists",
            "schema": {
              "description": "Gender identity - Filter for entries with a value",
              "title": "Genderidentity.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gender identity - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "genderIdentity",
            "schema": {
              "description": "Gender identity - Filter for a matching concept code",
              "title": "Genderidentity",
              "type": "string"
            },
            "required": false,
            "description": "Gender identity - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "genderIdentity.not",
            "schema": {
              "description": "Gender identity - Filter for a mismatching concept code",
              "title": "Genderidentity.Not",
              "type": "string"
            },
            "required": false,
            "description": "Gender identity - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "genderIdentity.anyOf",
            "schema": {
              "description": "Gender identity - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genderidentity.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gender identity - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "genderIdentity.not.anyOf",
            "schema": {
              "description": "Gender identity - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genderidentity.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gender identity - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "genderIdentity.descendantsOf",
            "schema": {
              "description": "Gender identity - Filter for all child concepts of a given concepts code",
              "title": "Genderidentity.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Gender identity - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "dateOfBirth.before",
            "schema": {
              "description": "Date of birth - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Dateofbirth.Before",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.after",
            "schema": {
              "description": "Date of birth - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Dateofbirth.After",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.onOrBefore",
            "schema": {
              "description": "Date of birth - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Dateofbirth.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.onOrAfter",
            "schema": {
              "description": "Date of birth - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Dateofbirth.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.on",
            "schema": {
              "description": "Date of birth - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Dateofbirth.On",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.not.on",
            "schema": {
              "description": "Date of birth - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Dateofbirth.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "dateOfBirth.between",
            "schema": {
              "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateofbirth.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dateOfBirth.not.between",
            "schema": {
              "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateofbirth.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "isDeceased",
            "schema": {
              "description": "Is deceased - ('Filter for yes/no statement',)",
              "title": "Isdeceased",
              "type": "boolean"
            },
            "required": false,
            "description": "Is deceased - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "dateOfDeath.not.exists",
            "schema": {
              "description": "Date of death - Filter for entries without a value",
              "title": "Dateofdeath.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Date of death - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.exists",
            "schema": {
              "description": "Date of death - Filter for entries with a value",
              "title": "Dateofdeath.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Date of death - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.before",
            "schema": {
              "description": "Date of death - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Dateofdeath.Before",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.after",
            "schema": {
              "description": "Date of death - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Dateofdeath.After",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.onOrBefore",
            "schema": {
              "description": "Date of death - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Dateofdeath.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.onOrAfter",
            "schema": {
              "description": "Date of death - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Dateofdeath.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.on",
            "schema": {
              "description": "Date of death - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Dateofdeath.On",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.not.on",
            "schema": {
              "description": "Date of death - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Dateofdeath.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "dateOfDeath.between",
            "schema": {
              "description": "Date of death - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateofdeath.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dateOfDeath.not.between",
            "schema": {
              "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateofdeath.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "causeOfDeath.not.exists",
            "schema": {
              "description": "Cause of death - Filter for entries without a value",
              "title": "Causeofdeath.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Cause of death - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "causeOfDeath.exists",
            "schema": {
              "description": "Cause of death - Filter for entries with a value",
              "title": "Causeofdeath.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Cause of death - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "causeOfDeath",
            "schema": {
              "description": "Cause of death - Filter for a matching concept code",
              "title": "Causeofdeath",
              "type": "string"
            },
            "required": false,
            "description": "Cause of death - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "causeOfDeath.not",
            "schema": {
              "description": "Cause of death - Filter for a mismatching concept code",
              "title": "Causeofdeath.Not",
              "type": "string"
            },
            "required": false,
            "description": "Cause of death - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "causeOfDeath.anyOf",
            "schema": {
              "description": "Cause of death - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Causeofdeath.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cause of death - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "causeOfDeath.not.anyOf",
            "schema": {
              "description": "Cause of death - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Causeofdeath.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cause of death - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "causeOfDeath.descendantsOf",
            "schema": {
              "description": "Cause of death - Filter for all child concepts of a given concepts code",
              "title": "Causeofdeath.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Cause of death - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_PatientCase_"
                }
              }
            }
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createPatientCase",
        "summary": "Create Patient Case",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientCaseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/{caseId}": {
      "get": {
        "operationId": "getPatientCaseById",
        "summary": "Get Patient Case By Id",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientCase"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updatePatientCaseById",
        "summary": "Update Patient Case",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientCaseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deletePatientCaseById",
        "summary": "Delete Patient Case",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/pseudo/{pseudoidentifier}": {
      "get": {
        "operationId": "getPatientCaseByPseudoidentifier",
        "summary": "Get Patient Case By Pseudoidentifier",
        "parameters": [
          {
            "in": "path",
            "name": "pseudoidentifier",
            "schema": {
              "title": "Pseudoidentifier",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientCase"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/{caseId}/history/events": {
      "get": {
        "operationId": "getAllPatientCaseHistoryEvents",
        "summary": "Get All Patient Case History Events",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/{caseId}/history/events/{eventId}": {
      "get": {
        "operationId": "getPatientCaseHistoryEventById",
        "summary": "Get Patient Case History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/{caseId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertPatientCaseToHistoryEvent",
        "summary": "Revert Patient Case To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/patient-cases/{caseId}/data-completion/{category}": {
      "get": {
        "operationId": "getPatientCaseDataCompletionStatus",
        "summary": "Get Patient Case Data Completion Status",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "category",
            "schema": {
              "enum": [
                "comorbidities-assessments",
                "family-histories",
                "genomic-signatures",
                "genomic-variants",
                "lifestyles",
                "comorbidities",
                "neoplastic-entities",
                "performance-status",
                "radiotherapies",
                "risk-assessments",
                "stagings",
                "surgeries",
                "systemic-therapies",
                "tumor-markers",
                "vitals",
                "tumor-board-reviews",
                "adverse-events",
                "therapy-responses"
              ],
              "title": "PatientCaseDataCategories",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientCaseDataCompletionStatusSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createPatientCaseDataCompletion",
        "summary": "Create Patient Case Data Completion",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "category",
            "schema": {
              "enum": [
                "comorbidities-assessments",
                "family-histories",
                "genomic-signatures",
                "genomic-variants",
                "lifestyles",
                "comorbidities",
                "neoplastic-entities",
                "performance-status",
                "radiotherapies",
                "risk-assessments",
                "stagings",
                "surgeries",
                "systemic-therapies",
                "tumor-markers",
                "vitals",
                "tumor-board-reviews",
                "adverse-events",
                "therapy-responses"
              ],
              "title": "PatientCaseDataCategories",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deletePatientCaseDataCompletion",
        "summary": "Delete Patient Case Data Completion",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "category",
            "schema": {
              "enum": [
                "comorbidities-assessments",
                "family-histories",
                "genomic-signatures",
                "genomic-variants",
                "lifestyles",
                "comorbidities",
                "neoplastic-entities",
                "performance-status",
                "radiotherapies",
                "risk-assessments",
                "stagings",
                "surgeries",
                "systemic-therapies",
                "tumor-markers",
                "vitals",
                "tumor-board-reviews",
                "adverse-events",
                "therapy-responses"
              ],
              "title": "PatientCaseDataCategories",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/neoplastic-entities": {
      "get": {
        "operationId": "getNeoplasticEntities",
        "summary": "Get All Neoplastic Entities Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "topographyGroup.not.exists",
            "schema": {
              "description": "Topographical group - Filter for entries without a value",
              "title": "Topographygroup.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Topographical group - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "topographyGroup.exists",
            "schema": {
              "description": "Topographical group - Filter for entries with a value",
              "title": "Topographygroup.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Topographical group - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "topographyGroup",
            "schema": {
              "description": "Topographical group - Filter for a matching concept code",
              "title": "Topographygroup",
              "type": "string"
            },
            "required": false,
            "description": "Topographical group - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "topographyGroup.not",
            "schema": {
              "description": "Topographical group - Filter for a mismatching concept code",
              "title": "Topographygroup.Not",
              "type": "string"
            },
            "required": false,
            "description": "Topographical group - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "topographyGroup.anyOf",
            "schema": {
              "description": "Topographical group - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topographygroup.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topographical group - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "topographyGroup.not.anyOf",
            "schema": {
              "description": "Topographical group - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topographygroup.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topographical group - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "topographyGroup.descendantsOf",
            "schema": {
              "description": "Topographical group - Filter for all child concepts of a given concepts code",
              "title": "Topographygroup.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Topographical group - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "relationship",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "primary",
                    "metastatic",
                    "local_recurrence",
                    "regional_recurrence"
                  ],
                  "title": "NeoplasticEntityRelationshipChoices",
                  "type": "string"
                }
              ],
              "description": "Neoplastic relationship - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Neoplastic relationship - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "relationship.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "primary",
                    "metastatic",
                    "local_recurrence",
                    "regional_recurrence"
                  ],
                  "title": "NeoplasticEntityRelationshipChoices",
                  "type": "string"
                }
              ],
              "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "relationship.anyOf",
            "schema": {
              "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "primary",
                  "metastatic",
                  "local_recurrence",
                  "regional_recurrence"
                ],
                "title": "NeoplasticEntityRelationshipChoices",
                "type": "string"
              },
              "title": "Relationship.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not.exists",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries without a value",
              "title": "Relatedprimaryid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.exists",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries with a value",
              "title": "Relatedprimaryid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId",
            "schema": {
              "description": "Related primary neoplasm - Filter for reference matches",
              "title": "Relatedprimaryid",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not",
            "schema": {
              "description": "Related primary neoplasm - Filter for reference mismatches",
              "title": "Relatedprimaryid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.contains",
            "schema": {
              "description": "Related primary neoplasm - Filter for partial text matches",
              "title": "Relatedprimaryid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not.contains",
            "schema": {
              "description": "Related primary neoplasm - Filter for partial text mismatches",
              "title": "Relatedprimaryid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.beginsWith",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries starting with the text",
              "title": "Relatedprimaryid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not.beginsWith",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries not starting with the text",
              "title": "Relatedprimaryid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.endsWith",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries ending with the text",
              "title": "Relatedprimaryid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not.endsWith",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries not ending with the text",
              "title": "Relatedprimaryid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.anyOf",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedprimaryid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "relatedPrimaryId.not.anyOf",
            "schema": {
              "description": "Related primary neoplasm - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedprimaryid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related primary neoplasm - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "assertionDate.before",
            "schema": {
              "description": "Assertion date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Assertiondate.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.after",
            "schema": {
              "description": "Assertion date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Assertiondate.After",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.onOrBefore",
            "schema": {
              "description": "Assertion date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Assertiondate.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.onOrAfter",
            "schema": {
              "description": "Assertion date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Assertiondate.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.on",
            "schema": {
              "description": "Assertion date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Assertiondate.On",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.not.on",
            "schema": {
              "description": "Assertion date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Assertiondate.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "assertionDate.between",
            "schema": {
              "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Assertiondate.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "assertionDate.not.between",
            "schema": {
              "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Assertiondate.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "topography",
            "schema": {
              "description": "Topography - Filter for a matching concept code",
              "title": "Topography",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "topography.not",
            "schema": {
              "description": "Topography - Filter for a mismatching concept code",
              "title": "Topography.Not",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "topography.anyOf",
            "schema": {
              "description": "Topography - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topography.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topography - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "topography.not.anyOf",
            "schema": {
              "description": "Topography - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topography.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topography - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "topography.descendantsOf",
            "schema": {
              "description": "Topography - Filter for all child concepts of a given concepts code",
              "title": "Topography.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "morphology",
            "schema": {
              "description": "Morphology - Filter for a matching concept code",
              "title": "Morphology",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "morphology.not",
            "schema": {
              "description": "Morphology - Filter for a mismatching concept code",
              "title": "Morphology.Not",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "morphology.anyOf",
            "schema": {
              "description": "Morphology - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Morphology.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Morphology - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "morphology.not.anyOf",
            "schema": {
              "description": "Morphology - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Morphology.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Morphology - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "morphology.descendantsOf",
            "schema": {
              "description": "Morphology - Filter for all child concepts of a given concepts code",
              "title": "Morphology.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "differentitation.not.exists",
            "schema": {
              "description": "Differentiation - Filter for entries without a value",
              "title": "Differentitation.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Differentiation - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "differentitation.exists",
            "schema": {
              "description": "Differentiation - Filter for entries with a value",
              "title": "Differentitation.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Differentiation - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "differentitation",
            "schema": {
              "description": "Differentiation - Filter for a matching concept code",
              "title": "Differentitation",
              "type": "string"
            },
            "required": false,
            "description": "Differentiation - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "differentitation.not",
            "schema": {
              "description": "Differentiation - Filter for a mismatching concept code",
              "title": "Differentitation.Not",
              "type": "string"
            },
            "required": false,
            "description": "Differentiation - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "differentitation.anyOf",
            "schema": {
              "description": "Differentiation - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Differentitation.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Differentiation - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "differentitation.not.anyOf",
            "schema": {
              "description": "Differentiation - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Differentitation.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Differentiation - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "differentitation.descendantsOf",
            "schema": {
              "description": "Differentiation - Filter for all child concepts of a given concepts code",
              "title": "Differentitation.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Differentiation - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "laterality.not.exists",
            "schema": {
              "description": "Laterality - Filter for entries without a value",
              "title": "Laterality.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Laterality - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "laterality.exists",
            "schema": {
              "description": "Laterality - Filter for entries with a value",
              "title": "Laterality.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Laterality - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "laterality",
            "schema": {
              "description": "Laterality - Filter for a matching concept code",
              "title": "Laterality",
              "type": "string"
            },
            "required": false,
            "description": "Laterality - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "laterality.not",
            "schema": {
              "description": "Laterality - Filter for a mismatching concept code",
              "title": "Laterality.Not",
              "type": "string"
            },
            "required": false,
            "description": "Laterality - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "laterality.anyOf",
            "schema": {
              "description": "Laterality - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Laterality.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Laterality - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "laterality.not.anyOf",
            "schema": {
              "description": "Laterality - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Laterality.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Laterality - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "laterality.descendantsOf",
            "schema": {
              "description": "Laterality - Filter for all child concepts of a given concepts code",
              "title": "Laterality.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Laterality - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_NeoplasticEntity_"
                }
              }
            }
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createNeoplasticEntity",
        "summary": "Create Neoplastic Entity",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NeoplasticEntityCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/neoplastic-entities/{entityId}": {
      "get": {
        "operationId": "getNeoplasticEntityById",
        "summary": "Get Neoplastic Entity By Id",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NeoplasticEntity"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateNeoplasticEntityById",
        "summary": "Update Neoplastic Entity",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NeoplasticEntityCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteNeoplasticEntityById",
        "summary": "Delete Neoplastic Entity",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/neoplastic-entities/{entityId}/history/events": {
      "get": {
        "operationId": "getAllNeoplasticEntityHistoryEvents",
        "summary": "Get All Neoplastic Entity History Events",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/neoplastic-entities/{entityId}/history/events/{eventId}": {
      "get": {
        "operationId": "getNeoplasticEntityHistoryEventById",
        "summary": "Get Neoplastic Entity History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/neoplastic-entities/{entityId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertNeoplasticEntityToHistoryEvent",
        "summary": "Revert Neoplastic Entity To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "schema": {
              "title": "Entityid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Neoplastic Entities"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/stagings": {
      "get": {
        "operationId": "getStagings",
        "summary": "Get All Stagings Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "stagingDomain",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "tnm",
                    "figo",
                    "binet",
                    "rai",
                    "breslow",
                    "clark",
                    "iss",
                    "riss",
                    "inss",
                    "inrgss",
                    "gleason",
                    "rhabdomyosarcoma",
                    "wilms",
                    "lymphoma"
                  ],
                  "title": "StagingDomain",
                  "type": "string"
                }
              ],
              "description": "Staging domain - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Staging domain - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "stagingDomain.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "tnm",
                    "figo",
                    "binet",
                    "rai",
                    "breslow",
                    "clark",
                    "iss",
                    "riss",
                    "inss",
                    "inrgss",
                    "gleason",
                    "rhabdomyosarcoma",
                    "wilms",
                    "lymphoma"
                  ],
                  "title": "StagingDomain",
                  "type": "string"
                }
              ],
              "description": "Staging domain - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Staging domain - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "stagingDomain.anyOf",
            "schema": {
              "description": "Staging domain - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "tnm",
                  "figo",
                  "binet",
                  "rai",
                  "breslow",
                  "clark",
                  "iss",
                  "riss",
                  "inss",
                  "inrgss",
                  "gleason",
                  "rhabdomyosarcoma",
                  "wilms",
                  "lymphoma"
                ],
                "title": "StagingDomain",
                "type": "string"
              },
              "title": "Stagingdomain.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Staging domain - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "description": "None - Filter for a matching concept code",
              "title": "Stage",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "stage.not",
            "schema": {
              "description": "None - Filter for a mismatching concept code",
              "title": "Stage.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "stage.anyOf",
            "schema": {
              "description": "None - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Stage.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "stage.not.anyOf",
            "schema": {
              "description": "None - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Stage.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "stage.descendantsOf",
            "schema": {
              "description": "None - Filter for all child concepts of a given concepts code",
              "title": "Stage.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Staging date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Staging date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Staging date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Staging date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Staging date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Staging date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Staging date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds",
            "schema": {
              "description": "Staged neoplastic entities - Filter for full text matches",
              "title": "Stagedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.not",
            "schema": {
              "description": "Staged neoplastic entities - Filter for full text mismatches",
              "title": "Stagedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.contains",
            "schema": {
              "description": "Staged neoplastic entities - Filter for partial text matches",
              "title": "Stagedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.not.contains",
            "schema": {
              "description": "Staged neoplastic entities - Filter for partial text mismatches",
              "title": "Stagedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.beginsWith",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries starting with the text",
              "title": "Stagedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries not starting with the text",
              "title": "Stagedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.endsWith",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries ending with the text",
              "title": "Stagedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries not ending with the text",
              "title": "Stagedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.anyOf",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Stagedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "stagedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Staged neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Stagedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Staged neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AnyStaging_"
                }
              }
            }
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createStaging",
        "summary": "Create Staging",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TNMStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/FIGOStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BinetStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RaiStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BreslowDepthCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ClarkStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ISSStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RISSStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/GleasonGradeCreate"
                  },
                  {
                    "$ref": "#/components/schemas/INSSStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/INRGSSStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/WilmsStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"
                  },
                  {
                    "$ref": "#/components/schemas/LymphomaStagingCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/stagings/{stagingId}": {
      "get": {
        "operationId": "getStagingById",
        "summary": "Get Staging By Id",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyStaging"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateStagingById",
        "summary": "Update Staging",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TNMStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/FIGOStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BinetStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RaiStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BreslowDepthCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ClarkStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ISSStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RISSStagingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/GleasonGradeCreate"
                  },
                  {
                    "$ref": "#/components/schemas/INSSStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/INRGSSStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/WilmsStageCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroupCreate"
                  },
                  {
                    "$ref": "#/components/schemas/LymphomaStagingCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteStagingById",
        "summary": "Delete Staging",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/stagings/{stagingId}/history/events": {
      "get": {
        "operationId": "getAllStagingHistoryEvents",
        "summary": "Get All Staging History Events",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEvent_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/stagings/{stagingId}/history/events/{eventId}": {
      "get": {
        "operationId": "getStagingHistoryEventById",
        "summary": "Get Staging History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEvent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/stagings/{stagingId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertStagingToHistoryEvent",
        "summary": "Revert Staging To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "stagingId",
            "schema": {
              "title": "Stagingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Stagings"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/risk-assessments": {
      "get": {
        "operationId": "getRiskAssessments",
        "summary": "Get All Risk Assessments Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "methodology",
            "schema": {
              "description": "Assessment methodology - Filter for a matching concept code",
              "title": "Methodology",
              "type": "string"
            },
            "required": false,
            "description": "Assessment methodology - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "methodology.not",
            "schema": {
              "description": "Assessment methodology - Filter for a mismatching concept code",
              "title": "Methodology.Not",
              "type": "string"
            },
            "required": false,
            "description": "Assessment methodology - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "methodology.anyOf",
            "schema": {
              "description": "Assessment methodology - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Methodology.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessment methodology - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "methodology.not.anyOf",
            "schema": {
              "description": "Assessment methodology - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Methodology.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessment methodology - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "methodology.descendantsOf",
            "schema": {
              "description": "Assessment methodology - Filter for all child concepts of a given concepts code",
              "title": "Methodology.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Assessment methodology - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "risk",
            "schema": {
              "description": "Risk - Filter for a matching concept code",
              "title": "Risk",
              "type": "string"
            },
            "required": false,
            "description": "Risk - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "risk.not",
            "schema": {
              "description": "Risk - Filter for a mismatching concept code",
              "title": "Risk.Not",
              "type": "string"
            },
            "required": false,
            "description": "Risk - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "risk.anyOf",
            "schema": {
              "description": "Risk - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Risk.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Risk - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "risk.not.anyOf",
            "schema": {
              "description": "Risk - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Risk.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Risk - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "risk.descendantsOf",
            "schema": {
              "description": "Risk - Filter for all child concepts of a given concepts code",
              "title": "Risk.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Risk - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "score.not.exists",
            "schema": {
              "description": "Score - Filter for entries without a value",
              "title": "Score.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Score - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "score.exists",
            "schema": {
              "description": "Score - Filter for entries with a value",
              "title": "Score.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Score - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "score.lessThan",
            "schema": {
              "description": "Score - Filter for entries with values less than the specified value",
              "title": "Score.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "score.lessThanOrEqual",
            "schema": {
              "description": "Score - Filter for entries with values less than or equal to the specified value",
              "title": "Score.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.greaterThan",
            "schema": {
              "description": "Score - Filter for entries with values greater than the specified value",
              "title": "Score.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "score.greaterThanOrEqual",
            "schema": {
              "description": "Score - Filter for entries with values greater than or equal to the specified value",
              "title": "Score.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.equal",
            "schema": {
              "description": "Score - Filter for entries with values exactly equal to the specified value",
              "title": "Score.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.not.equal",
            "schema": {
              "description": "Score - Filter for entries with values not equal to the specified value",
              "title": "Score.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Score - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.between",
            "schema": {
              "description": "Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Score.Between",
              "type": "array"
            },
            "required": false,
            "description": "Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "score.not.between",
            "schema": {
              "description": "Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Score.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for full text matches",
              "title": "Assessedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for full text mismatches",
              "title": "Assessedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.contains",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for partial text matches",
              "title": "Assessedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.contains",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for partial text mismatches",
              "title": "Assessedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.beginsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries starting with the text",
              "title": "Assessedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
              "title": "Assessedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.endsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries ending with the text",
              "title": "Assessedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
              "title": "Assessedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.anyOf",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Assessedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Assessedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_RiskAssessment_"
                }
              }
            }
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createRiskAssessment",
        "summary": "Create Risk Assessment",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskAssessmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/risk-assessments/{riskAssessmentId}": {
      "get": {
        "operationId": "getRiskAssessmentById",
        "summary": "Get Risk Assessment By Id",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessment"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateRiskAssessmentById",
        "summary": "Update Risk Assessment",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskAssessmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteRiskAssessmentById",
        "summary": "Delete Risk Assessment",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/risk-assessments/{riskAssessmentId}/history/events": {
      "get": {
        "operationId": "getAllRiskAssessmentHistoryEvents",
        "summary": "Get All Risk Assessment History Events",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/risk-assessments/{riskAssessmentId}/history/events/{eventId}": {
      "get": {
        "operationId": "getRiskAssessmentHistoryEventById",
        "summary": "Get Risk Assessment History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/risk-assessments/{riskAssessmentId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertRiskAssessmentToHistoryEvent",
        "summary": "Revert Risk Assessment To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "riskAssessmentId",
            "schema": {
              "title": "Riskassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Risk Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers": {
      "get": {
        "operationId": "getTumorMarkers",
        "summary": "Get All Tumor Markers Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "analyte",
            "schema": {
              "description": "Analyte - Filter for a matching concept code",
              "title": "Analyte",
              "type": "string"
            },
            "required": false,
            "description": "Analyte - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "analyte.not",
            "schema": {
              "description": "Analyte - Filter for a mismatching concept code",
              "title": "Analyte.Not",
              "type": "string"
            },
            "required": false,
            "description": "Analyte - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "analyte.anyOf",
            "schema": {
              "description": "Analyte - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Analyte.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Analyte - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "analyte.not.anyOf",
            "schema": {
              "description": "Analyte - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Analyte.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Analyte - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "analyte.descendantsOf",
            "schema": {
              "description": "Analyte - Filter for all child concepts of a given concepts code",
              "title": "Analyte.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Analyte - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "massConcentration.not.exists",
            "schema": {
              "description": "Mass concentration - Filter for entries without a value",
              "title": "Massconcentration.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "massConcentration.exists",
            "schema": {
              "description": "Mass concentration - Filter for entries with a value",
              "title": "Massconcentration.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "massConcentration.lessThan",
            "schema": {
              "description": "Mass concentration - Filter for entries with values less than the specified value",
              "title": "Massconcentration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.lessThanOrEqual",
            "schema": {
              "description": "Mass concentration - Filter for entries with values less than or equal to the specified value",
              "title": "Massconcentration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.greaterThan",
            "schema": {
              "description": "Mass concentration - Filter for entries with values greater than the specified value",
              "title": "Massconcentration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.greaterThanOrEqual",
            "schema": {
              "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value",
              "title": "Massconcentration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.equal",
            "schema": {
              "description": "Mass concentration - Filter for entries with values exactly equal to the specified value",
              "title": "Massconcentration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.not.equal",
            "schema": {
              "description": "Mass concentration - Filter for entries with values not equal to the specified value",
              "title": "Massconcentration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "massConcentration.between",
            "schema": {
              "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Massconcentration.Between",
              "type": "array"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "massConcentration.not.between",
            "schema": {
              "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Massconcentration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.not.exists",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries without a value",
              "title": "Arbitraryconcentration.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.exists",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with a value",
              "title": "Arbitraryconcentration.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.lessThan",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values less than the specified value",
              "title": "Arbitraryconcentration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.lessThanOrEqual",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value",
              "title": "Arbitraryconcentration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.greaterThan",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values greater than the specified value",
              "title": "Arbitraryconcentration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.greaterThanOrEqual",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value",
              "title": "Arbitraryconcentration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.equal",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value",
              "title": "Arbitraryconcentration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.not.equal",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value",
              "title": "Arbitraryconcentration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.between",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Arbitraryconcentration.Between",
              "type": "array"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "arbitraryConcentration.not.between",
            "schema": {
              "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Arbitraryconcentration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "substanceConcentration.not.exists",
            "schema": {
              "description": "Substance concentration - Filter for entries without a value",
              "title": "Substanceconcentration.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.exists",
            "schema": {
              "description": "Substance concentration - Filter for entries with a value",
              "title": "Substanceconcentration.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.lessThan",
            "schema": {
              "description": "Substance concentration - Filter for entries with values less than the specified value",
              "title": "Substanceconcentration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.lessThanOrEqual",
            "schema": {
              "description": "Substance concentration - Filter for entries with values less than or equal to the specified value",
              "title": "Substanceconcentration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.greaterThan",
            "schema": {
              "description": "Substance concentration - Filter for entries with values greater than the specified value",
              "title": "Substanceconcentration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.greaterThanOrEqual",
            "schema": {
              "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value",
              "title": "Substanceconcentration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.equal",
            "schema": {
              "description": "Substance concentration - Filter for entries with values exactly equal to the specified value",
              "title": "Substanceconcentration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.not.equal",
            "schema": {
              "description": "Substance concentration - Filter for entries with values not equal to the specified value",
              "title": "Substanceconcentration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "substanceConcentration.between",
            "schema": {
              "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Substanceconcentration.Between",
              "type": "array"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "substanceConcentration.not.between",
            "schema": {
              "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Substanceconcentration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "fraction.not.exists",
            "schema": {
              "description": "Fraction - Filter for entries without a value",
              "title": "Fraction.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Fraction - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "fraction.exists",
            "schema": {
              "description": "Fraction - Filter for entries with a value",
              "title": "Fraction.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Fraction - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "fraction.lessThan",
            "schema": {
              "description": "Fraction - Filter for entries with values less than the specified value",
              "title": "Fraction.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "fraction.lessThanOrEqual",
            "schema": {
              "description": "Fraction - Filter for entries with values less than or equal to the specified value",
              "title": "Fraction.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "fraction.greaterThan",
            "schema": {
              "description": "Fraction - Filter for entries with values greater than the specified value",
              "title": "Fraction.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "fraction.greaterThanOrEqual",
            "schema": {
              "description": "Fraction - Filter for entries with values greater than or equal to the specified value",
              "title": "Fraction.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "fraction.equal",
            "schema": {
              "description": "Fraction - Filter for entries with values exactly equal to the specified value",
              "title": "Fraction.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "fraction.not.equal",
            "schema": {
              "description": "Fraction - Filter for entries with values not equal to the specified value",
              "title": "Fraction.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "fraction.between",
            "schema": {
              "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Fraction.Between",
              "type": "array"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "fraction.not.between",
            "schema": {
              "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Fraction.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Fraction - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.not.exists",
            "schema": {
              "description": "Multiples of the median - Filter for entries without a value",
              "title": "Multipleofmedian.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.exists",
            "schema": {
              "description": "Multiples of the median - Filter for entries with a value",
              "title": "Multipleofmedian.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.lessThan",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values less than the specified value",
              "title": "Multipleofmedian.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.lessThanOrEqual",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value",
              "title": "Multipleofmedian.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.greaterThan",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values greater than the specified value",
              "title": "Multipleofmedian.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.greaterThanOrEqual",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value",
              "title": "Multipleofmedian.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.equal",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value",
              "title": "Multipleofmedian.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.not.equal",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values not equal to the specified value",
              "title": "Multipleofmedian.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.between",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Multipleofmedian.Between",
              "type": "array"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "multipleOfMedian.not.between",
            "schema": {
              "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Multipleofmedian.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "tumorProportionScore.not.exists",
            "schema": {
              "description": "Immune Cells Score (ICS) - Filter for entries without a value",
              "title": "Tumorproportionscore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "tumorProportionScore.exists",
            "schema": {
              "description": "Immune Cells Score (ICS) - Filter for entries with a value",
              "title": "Tumorproportionscore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "tumorProportionScore",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "TC0",
                    "TC1",
                    "TC2",
                    "TC3"
                  ],
                  "title": "TumorMarkerTumorProportionScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "tumorProportionScore.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "TC0",
                    "TC1",
                    "TC2",
                    "TC3"
                  ],
                  "title": "TumorMarkerTumorProportionScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "tumorProportionScore.anyOf",
            "schema": {
              "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "TC0",
                  "TC1",
                  "TC2",
                  "TC3"
                ],
                "title": "TumorMarkerTumorProportionScoreChoices",
                "type": "string"
              },
              "title": "Tumorproportionscore.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "immuneCellScore.not.exists",
            "schema": {
              "description": "Immune Cells Score (ICS) - Filter for entries without a value",
              "title": "Immunecellscore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "immuneCellScore.exists",
            "schema": {
              "description": "Immune Cells Score (ICS) - Filter for entries with a value",
              "title": "Immunecellscore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "immuneCellScore",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "IC0",
                    "IC1",
                    "IC2",
                    "IC3"
                  ],
                  "title": "TumorMarkerImmuneCellScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "immuneCellScore.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "IC0",
                    "IC1",
                    "IC2",
                    "IC3"
                  ],
                  "title": "TumorMarkerImmuneCellScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "immuneCellScore.anyOf",
            "schema": {
              "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "IC0",
                  "IC1",
                  "IC2",
                  "IC3"
                ],
                "title": "TumorMarkerImmuneCellScoreChoices",
                "type": "string"
              },
              "title": "Immunecellscore.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.not.exists",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries without a value",
              "title": "Combinedpositivescore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.exists",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with a value",
              "title": "Combinedpositivescore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.lessThan",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value",
              "title": "Combinedpositivescore.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.lessThanOrEqual",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value",
              "title": "Combinedpositivescore.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.greaterThan",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value",
              "title": "Combinedpositivescore.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.greaterThanOrEqual",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value",
              "title": "Combinedpositivescore.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.equal",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value",
              "title": "Combinedpositivescore.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.not.equal",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value",
              "title": "Combinedpositivescore.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.between",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Combinedpositivescore.Between",
              "type": "array"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "combinedPositiveScore.not.between",
            "schema": {
              "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Combinedpositivescore.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "immunohistochemicalScore.not.exists",
            "schema": {
              "description": "Immunohistochemical Score - Filter for entries without a value",
              "title": "Immunohistochemicalscore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immunohistochemical Score - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "immunohistochemicalScore.exists",
            "schema": {
              "description": "Immunohistochemical Score - Filter for entries with a value",
              "title": "Immunohistochemicalscore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Immunohistochemical Score - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "immunohistochemicalScore",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "0",
                    "1+",
                    "2+",
                    "3+",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerImmunohistochemicalScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immunohistochemical Score - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Immunohistochemical Score - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "immunohistochemicalScore.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "0",
                    "1+",
                    "2+",
                    "3+",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerImmunohistochemicalScoreChoices",
                  "type": "string"
                }
              ],
              "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "immunohistochemicalScore.anyOf",
            "schema": {
              "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "0",
                  "1+",
                  "2+",
                  "3+",
                  "indeterminate"
                ],
                "title": "TumorMarkerImmunohistochemicalScoreChoices",
                "type": "string"
              },
              "title": "Immunohistochemicalscore.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "presence.not.exists",
            "schema": {
              "description": "Presence - Filter for entries without a value",
              "title": "Presence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Presence - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "presence.exists",
            "schema": {
              "description": "Presence - Filter for entries with a value",
              "title": "Presence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Presence - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "presence",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "positive",
                    "negative",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerPresenceChoices",
                  "type": "string"
                }
              ],
              "description": "Presence - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Presence - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "presence.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "positive",
                    "negative",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerPresenceChoices",
                  "type": "string"
                }
              ],
              "description": "Presence - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Presence - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "presence.anyOf",
            "schema": {
              "description": "Presence - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "positive",
                  "negative",
                  "indeterminate"
                ],
                "title": "TumorMarkerPresenceChoices",
                "type": "string"
              },
              "title": "Presence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Presence - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "nuclearExpressionStatus.not.exists",
            "schema": {
              "description": "Nuclear expression status - Filter for entries without a value",
              "title": "Nuclearexpressionstatus.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Nuclear expression status - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "nuclearExpressionStatus.exists",
            "schema": {
              "description": "Nuclear expression status - Filter for entries with a value",
              "title": "Nuclearexpressionstatus.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Nuclear expression status - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "nuclearExpressionStatus",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "intact",
                    "loss",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerNuclearExpressionStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Nuclear expression status - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Nuclear expression status - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "nuclearExpressionStatus.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "intact",
                    "loss",
                    "indeterminate"
                  ],
                  "title": "TumorMarkerNuclearExpressionStatusChoices",
                  "type": "string"
                }
              ],
              "description": "Nuclear expression status - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Nuclear expression status - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "nuclearExpressionStatus.anyOf",
            "schema": {
              "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "intact",
                  "loss",
                  "indeterminate"
                ],
                "title": "TumorMarkerNuclearExpressionStatusChoices",
                "type": "string"
              },
              "title": "Nuclearexpressionstatus.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds",
            "schema": {
              "description": "Related neoplastic entities - Filter for full text matches",
              "title": "Relatedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not",
            "schema": {
              "description": "Related neoplastic entities - Filter for full text mismatches",
              "title": "Relatedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.contains",
            "schema": {
              "description": "Related neoplastic entities - Filter for partial text matches",
              "title": "Relatedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.contains",
            "schema": {
              "description": "Related neoplastic entities - Filter for partial text mismatches",
              "title": "Relatedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.beginsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries starting with the text",
              "title": "Relatedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries not starting with the text",
              "title": "Relatedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.endsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries ending with the text",
              "title": "Relatedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries not ending with the text",
              "title": "Relatedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.anyOf",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_TumorMarker_"
                }
              }
            }
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createTumorMarker",
        "summary": "Create Tumor Marker",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TumorMarkerCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers/{tumorMarkerId}": {
      "get": {
        "operationId": "getTumorMarkerById",
        "summary": "Get Tumor Marker By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TumorMarker"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateTumorMarkerById",
        "summary": "Update Neoplastic Entity",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TumorMarkerCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteTumorMarkerById",
        "summary": "Delete Tumor Marker",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers/{tumorMarkerId}/history/events": {
      "get": {
        "operationId": "getAllTumorMarkerHistoryEvents",
        "summary": "Get All Tumor Marker History Events",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers/{tumorMarkerId}/history/events/{eventId}": {
      "get": {
        "operationId": "getTumorMarkerHistoryEventById",
        "summary": "Get Tumor Marker History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers/{tumorMarkerId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertTumorMarkerToHistoryEvent",
        "summary": "Revert Tumor Marker To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "tumorMarkerId",
            "schema": {
              "title": "Tumormarkerid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-markers/analytes/{analyteCode}/details": {
      "get": {
        "operationId": "getTumorMarkerAnalyteDetailsByCode",
        "summary": "Get Tumor Marker Analyte Details By Code",
        "parameters": [
          {
            "in": "path",
            "name": "analyteCode",
            "schema": {
              "title": "Analytecode",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyteDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Markers"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies": {
      "get": {
        "operationId": "getSystemicTherapies",
        "summary": "Get All Systemic Therapies Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "medications.id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Medications.Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "medications.id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Medications.Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "medications.id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Medications.Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "medications.id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Medications.Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "medications.id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Medications.Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "medications.id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Medications.Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "medications.id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Medications.Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "medications.id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Medications.Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "medications.id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Medications.Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "medications.id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Medications.Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "medications.drug",
            "schema": {
              "description": "Antineoplastic Drug - Filter for a matching concept code",
              "title": "Medications.Drug",
              "type": "string"
            },
            "required": false,
            "description": "Antineoplastic Drug - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "medications.drug.not",
            "schema": {
              "description": "Antineoplastic Drug - Filter for a mismatching concept code",
              "title": "Medications.Drug.Not",
              "type": "string"
            },
            "required": false,
            "description": "Antineoplastic Drug - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "medications.drug.anyOf",
            "schema": {
              "description": "Antineoplastic Drug - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Medications.Drug.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Antineoplastic Drug - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "medications.drug.not.anyOf",
            "schema": {
              "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Medications.Drug.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "medications.drug.descendantsOf",
            "schema": {
              "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code",
              "title": "Medications.Drug.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "medications.route.not.exists",
            "schema": {
              "description": "Route - Filter for entries without a value",
              "title": "Medications.Route.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Route - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.route.exists",
            "schema": {
              "description": "Route - Filter for entries with a value",
              "title": "Medications.Route.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Route - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.route",
            "schema": {
              "description": "Route - Filter for a matching concept code",
              "title": "Medications.Route",
              "type": "string"
            },
            "required": false,
            "description": "Route - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "medications.route.not",
            "schema": {
              "description": "Route - Filter for a mismatching concept code",
              "title": "Medications.Route.Not",
              "type": "string"
            },
            "required": false,
            "description": "Route - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "medications.route.anyOf",
            "schema": {
              "description": "Route - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Medications.Route.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Route - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "medications.route.not.anyOf",
            "schema": {
              "description": "Route - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Medications.Route.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Route - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "medications.route.descendantsOf",
            "schema": {
              "description": "Route - Filter for all child concepts of a given concepts code",
              "title": "Medications.Route.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Route - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "medications.usedOfflabel.not.exists",
            "schema": {
              "description": "Off-label use - Filter for entries without a value",
              "title": "Medications.Usedofflabel.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Off-label use - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.usedOfflabel.exists",
            "schema": {
              "description": "Off-label use - Filter for entries with a value",
              "title": "Medications.Usedofflabel.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Off-label use - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.usedOfflabel",
            "schema": {
              "description": "Off-label use - ('Filter for yes/no statement',)",
              "title": "Medications.Usedofflabel",
              "type": "boolean"
            },
            "required": false,
            "description": "Off-label use - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "medications.withinSoc.not.exists",
            "schema": {
              "description": "Within SOC - Filter for entries without a value",
              "title": "Medications.Withinsoc.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Within SOC - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.withinSoc.exists",
            "schema": {
              "description": "Within SOC - Filter for entries with a value",
              "title": "Medications.Withinsoc.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Within SOC - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.withinSoc",
            "schema": {
              "description": "Within SOC - ('Filter for yes/no statement',)",
              "title": "Medications.Withinsoc",
              "type": "boolean"
            },
            "required": false,
            "description": "Within SOC - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.not.exists",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries without a value",
              "title": "Medications.Dosagemassconcentration.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.exists",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with a value",
              "title": "Medications.Dosagemassconcentration.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.lessThan",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value",
              "title": "Medications.Dosagemassconcentration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.lessThanOrEqual",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosagemassconcentration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.greaterThan",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosagemassconcentration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.greaterThanOrEqual",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosagemassconcentration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.equal",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosagemassconcentration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.not.equal",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosagemassconcentration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.between",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemassconcentration.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageMassConcentration.not.between",
            "schema": {
              "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemassconcentration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.not.exists",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries without a value",
              "title": "Medications.Dosagemass.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.exists",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with a value",
              "title": "Medications.Dosagemass.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.lessThan",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value",
              "title": "Medications.Dosagemass.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.lessThanOrEqual",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosagemass.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.greaterThan",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosagemass.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.greaterThanOrEqual",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosagemass.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.equal",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosagemass.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.not.equal",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosagemass.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.between",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemass.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageMass.not.between",
            "schema": {
              "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemass.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.not.exists",
            "schema": {
              "description": "Dosage - Volume - Filter for entries without a value",
              "title": "Medications.Dosagevolume.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.exists",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with a value",
              "title": "Medications.Dosagevolume.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.lessThan",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values less than the specified value",
              "title": "Medications.Dosagevolume.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.lessThanOrEqual",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosagevolume.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.greaterThan",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosagevolume.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.greaterThanOrEqual",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosagevolume.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.equal",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosagevolume.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.not.equal",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosagevolume.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.between",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagevolume.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageVolume.not.between",
            "schema": {
              "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagevolume.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.not.exists",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries without a value",
              "title": "Medications.Dosagemasssurface.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.exists",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with a value",
              "title": "Medications.Dosagemasssurface.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.lessThan",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value",
              "title": "Medications.Dosagemasssurface.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.lessThanOrEqual",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosagemasssurface.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.greaterThan",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosagemasssurface.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.greaterThanOrEqual",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosagemasssurface.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.equal",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosagemasssurface.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.not.equal",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosagemasssurface.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.between",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemasssurface.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageMassSurface.not.between",
            "schema": {
              "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosagemasssurface.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.not.exists",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries without a value",
              "title": "Medications.Dosageratemassconcentration.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.exists",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with a value",
              "title": "Medications.Dosageratemassconcentration.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.lessThan",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value",
              "title": "Medications.Dosageratemassconcentration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.lessThanOrEqual",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosageratemassconcentration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.greaterThan",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosageratemassconcentration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.greaterThanOrEqual",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosageratemassconcentration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.equal",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosageratemassconcentration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.not.equal",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosageratemassconcentration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.between",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemassconcentration.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassConcentration.not.between",
            "schema": {
              "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemassconcentration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.not.exists",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries without a value",
              "title": "Medications.Dosageratemass.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.exists",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with a value",
              "title": "Medications.Dosageratemass.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.lessThan",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value",
              "title": "Medications.Dosageratemass.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.lessThanOrEqual",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosageratemass.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.greaterThan",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosageratemass.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.greaterThanOrEqual",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosageratemass.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.equal",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosageratemass.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.not.equal",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosageratemass.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.between",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemass.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMass.not.between",
            "schema": {
              "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemass.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.not.exists",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries without a value",
              "title": "Medications.Dosageratevolume.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.exists",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with a value",
              "title": "Medications.Dosageratevolume.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.lessThan",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values less than the specified value",
              "title": "Medications.Dosageratevolume.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.lessThanOrEqual",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosageratevolume.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.greaterThan",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosageratevolume.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.greaterThanOrEqual",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosageratevolume.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.equal",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosageratevolume.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.not.equal",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosageratevolume.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.between",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratevolume.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateVolume.not.between",
            "schema": {
              "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratevolume.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.not.exists",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries without a value",
              "title": "Medications.Dosageratemasssurface.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.exists",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with a value",
              "title": "Medications.Dosageratemasssurface.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.lessThan",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value",
              "title": "Medications.Dosageratemasssurface.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.lessThanOrEqual",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value",
              "title": "Medications.Dosageratemasssurface.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.greaterThan",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value",
              "title": "Medications.Dosageratemasssurface.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.greaterThanOrEqual",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
              "title": "Medications.Dosageratemasssurface.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.equal",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value",
              "title": "Medications.Dosageratemasssurface.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.not.equal",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value",
              "title": "Medications.Dosageratemasssurface.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.between",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemasssurface.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "medications.dosageRateMassSurface.not.between",
            "schema": {
              "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Medications.Dosageratemasssurface.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "duration.lessThan",
            "schema": {
              "description": "None - Filter for entries with values less than the specified value",
              "title": "Duration.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "duration.lessThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values less than or equal to the specified value",
              "title": "Duration.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "duration.greaterThan",
            "schema": {
              "description": "None - Filter for entries with values greater than the specified value",
              "title": "Duration.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "duration.greaterThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values greater than or equal to the specified value",
              "title": "Duration.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "duration.equal",
            "schema": {
              "description": "None - Filter for entries with values exactly equal to the specified value",
              "title": "Duration.Equal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "duration.not.equal",
            "schema": {
              "description": "None - Filter for entries with values not equal to the specified value",
              "title": "Duration.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "duration.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Duration.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "duration.not.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Duration.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "period.overlaps",
            "schema": {
              "description": "Treatment period - Filter for entries overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.not.overlaps",
            "schema": {
              "description": "Treatment period - Filter for entries not overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries not overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.contains",
            "schema": {
              "description": "Treatment period - Filter for entries containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries containing the time period"
          },
          {
            "in": "query",
            "name": "period.not.contains",
            "schema": {
              "description": "Treatment period - Filter for entries not containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries not containing the time period"
          },
          {
            "in": "query",
            "name": "period.containedBy",
            "schema": {
              "description": "Treatment period - Filter for entries whose period are contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries whose period are contined by the time period"
          },
          {
            "in": "query",
            "name": "period.not.containedBy",
            "schema": {
              "description": "Treatment period - Filter for entries whose period are not contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries whose period are not contined by the time period"
          },
          {
            "in": "query",
            "name": "cycles.lessThan",
            "schema": {
              "description": "Cycles - Filter for entries with values less than the specified value",
              "title": "Cycles.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "cycles.lessThanOrEqual",
            "schema": {
              "description": "Cycles - Filter for entries with values less than or equal to the specified value",
              "title": "Cycles.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "cycles.greaterThan",
            "schema": {
              "description": "Cycles - Filter for entries with values greater than the specified value",
              "title": "Cycles.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "cycles.greaterThanOrEqual",
            "schema": {
              "description": "Cycles - Filter for entries with values greater than or equal to the specified value",
              "title": "Cycles.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "cycles.equal",
            "schema": {
              "description": "Cycles - Filter for entries with values exactly equal to the specified value",
              "title": "Cycles.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "cycles.not.equal",
            "schema": {
              "description": "Cycles - Filter for entries with values not equal to the specified value",
              "title": "Cycles.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "cycles.between",
            "schema": {
              "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Cycles.Between",
              "type": "array"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "cycles.not.between",
            "schema": {
              "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Cycles.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Cycles - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "intent",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "SystemicTherapyIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "SystemicTherapyIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.anyOf",
            "schema": {
              "description": "Intent - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SystemicTherapyIntentChoices",
                "type": "string"
              },
              "title": "Intent.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Intent - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.not.exists",
            "schema": {
              "description": "Treatment Role - Filter for entries without a value",
              "title": "Adjunctiverole.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Treatment Role - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.exists",
            "schema": {
              "description": "Treatment Role - Filter for entries with a value",
              "title": "Adjunctiverole.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Treatment Role - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "adjunctiveRole",
            "schema": {
              "description": "Treatment Role - Filter for a matching concept code",
              "title": "Adjunctiverole",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Role - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.not",
            "schema": {
              "description": "Treatment Role - Filter for a mismatching concept code",
              "title": "Adjunctiverole.Not",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Role - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.anyOf",
            "schema": {
              "description": "Treatment Role - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Adjunctiverole.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Treatment Role - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.not.anyOf",
            "schema": {
              "description": "Treatment Role - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Adjunctiverole.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Treatment Role - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "adjunctiveRole.descendantsOf",
            "schema": {
              "description": "Treatment Role - Filter for all child concepts of a given concepts code",
              "title": "Adjunctiverole.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Role - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "isAdjunctive",
            "schema": {
              "description": "Treatment Role - ('Filter for yes/no statement',)",
              "title": "Isadjunctive",
              "type": "boolean"
            },
            "required": false,
            "description": "Treatment Role - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "terminationReason.not.exists",
            "schema": {
              "description": "Termination reason - Filter for entries without a value",
              "title": "Terminationreason.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Termination reason - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "terminationReason.exists",
            "schema": {
              "description": "Termination reason - Filter for entries with a value",
              "title": "Terminationreason.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Termination reason - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "terminationReason",
            "schema": {
              "description": "Termination reason - Filter for a matching concept code",
              "title": "Terminationreason",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "terminationReason.not",
            "schema": {
              "description": "Termination reason - Filter for a mismatching concept code",
              "title": "Terminationreason.Not",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "terminationReason.anyOf",
            "schema": {
              "description": "Termination reason - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Terminationreason.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Termination reason - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "terminationReason.not.anyOf",
            "schema": {
              "description": "Termination reason - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Terminationreason.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Termination reason - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "terminationReason.descendantsOf",
            "schema": {
              "description": "Termination reason - Filter for all child concepts of a given concepts code",
              "title": "Terminationreason.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.exists",
            "schema": {
              "description": "Therapy line - Filter for entries without a value",
              "title": "Therapylineid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "therapyLineId.exists",
            "schema": {
              "description": "Therapy line - Filter for entries with a value",
              "title": "Therapylineid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "therapyLineId",
            "schema": {
              "description": "Therapy line - Filter for reference matches",
              "title": "Therapylineid",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not",
            "schema": {
              "description": "Therapy line - Filter for reference mismatches",
              "title": "Therapylineid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text matches",
              "title": "Therapylineid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text mismatches",
              "title": "Therapylineid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries starting with the text",
              "title": "Therapylineid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not starting with the text",
              "title": "Therapylineid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries ending with the text",
              "title": "Therapylineid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not ending with the text",
              "title": "Therapylineid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text matches",
              "title": "Targetedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text mismatches",
              "title": "Targetedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text matches",
              "title": "Targetedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text mismatches",
              "title": "Targetedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries starting with the text",
              "title": "Targetedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
              "title": "Targetedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries ending with the text",
              "title": "Targetedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
              "title": "Targetedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_SystemicTherapy_"
                }
              }
            }
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createSystemicTherapy",
        "summary": "Create Systemic Therapy",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemicTherapyCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}": {
      "get": {
        "operationId": "getSystemicTherapyById",
        "summary": "Get Systemic Therapy By Id",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemicTherapy"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteSystemicTherapyById",
        "summary": "Delete Systemic Therapy",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateSystemicTherapy",
        "summary": "Update Systemic Therapy",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemicTherapyCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/history/events": {
      "get": {
        "operationId": "getAllSystemicTherapyHistoryEvents",
        "summary": "Get All Systemic Therapy History Events",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/history/events/{eventId}": {
      "get": {
        "operationId": "getSystemicTherapyHistoryEventById",
        "summary": "Get Systemic Therapy History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertSystemicTherapyToHistoryEvent",
        "summary": "Revert Systemic Therapy To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/medications": {
      "get": {
        "operationId": "getSystemicTherapyMedications",
        "summary": "Get Systemic Therapy Medications Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SystemicTherapyMedication"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createSystemicTherapyMedication",
        "summary": "Create Systemic Therapy Medication",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemicTherapyMedicationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}": {
      "get": {
        "operationId": "getSystemicTherapyMedicationById",
        "summary": "Get Systemic Therapy Medication By Id",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemicTherapyMedication"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateSystemicTherapyMedication",
        "summary": "Update Systemic Therapy Medication",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemicTherapyMedicationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteSystemicTherapyMedication",
        "summary": "Delete Systemic Therapy Medication",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}/history/events": {
      "get": {
        "operationId": "getAllSystemicTherapyMedicationHistoryEvents",
        "summary": "Get All Systemic Therapy Medication History Events",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}/history/events/{eventId}": {
      "get": {
        "operationId": "getSystemicTherapyMedicationHistoryEventById",
        "summary": "Get Systemic Therapy Medication History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/systemic-therapies/{systemicTherapyId}/medications/{medicationId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertSystemicTherapyMedicationToHistoryEvent",
        "summary": "Revert Systemic Therapy Medication To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "systemicTherapyId",
            "schema": {
              "title": "Systemictherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "medicationId",
            "schema": {
              "title": "Medicationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Systemic Therapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/surgeries": {
      "get": {
        "operationId": "getSurgeries",
        "summary": "Get All Surgeries Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "procedure",
            "schema": {
              "description": "Surgical procedure - Filter for a matching concept code",
              "title": "Procedure",
              "type": "string"
            },
            "required": false,
            "description": "Surgical procedure - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "procedure.not",
            "schema": {
              "description": "Surgical procedure - Filter for a mismatching concept code",
              "title": "Procedure.Not",
              "type": "string"
            },
            "required": false,
            "description": "Surgical procedure - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "procedure.anyOf",
            "schema": {
              "description": "Surgical procedure - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Procedure.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Surgical procedure - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "procedure.not.anyOf",
            "schema": {
              "description": "Surgical procedure - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Procedure.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Surgical procedure - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "procedure.descendantsOf",
            "schema": {
              "description": "Surgical procedure - Filter for all child concepts of a given concepts code",
              "title": "Procedure.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Surgical procedure - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "intent",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "SurgeryIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "SurgeryIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.anyOf",
            "schema": {
              "description": "Intent - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SurgeryIntentChoices",
                "type": "string"
              },
              "title": "Intent.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Intent - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "bodysite.not.exists",
            "schema": {
              "description": "Anatomical location - Filter for entries without a value",
              "title": "Bodysite.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "bodysite.exists",
            "schema": {
              "description": "Anatomical location - Filter for entries with a value",
              "title": "Bodysite.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "bodysite",
            "schema": {
              "description": "Anatomical location - Filter for a matching concept code",
              "title": "Bodysite",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "bodysite.not",
            "schema": {
              "description": "Anatomical location - Filter for a mismatching concept code",
              "title": "Bodysite.Not",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "bodysite.anyOf",
            "schema": {
              "description": "Anatomical location - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysite.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysite.not.anyOf",
            "schema": {
              "description": "Anatomical location - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysite.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysite.descendantsOf",
            "schema": {
              "description": "Anatomical location - Filter for all child concepts of a given concepts code",
              "title": "Bodysite.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.not.exists",
            "schema": {
              "description": "Anatomical location qualifier - Filter for entries without a value",
              "title": "Bodysitequalifier.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.exists",
            "schema": {
              "description": "Anatomical location qualifier - Filter for entries with a value",
              "title": "Bodysitequalifier.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier",
            "schema": {
              "description": "Anatomical location qualifier - Filter for a matching concept code",
              "title": "Bodysitequalifier",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.not",
            "schema": {
              "description": "Anatomical location qualifier - Filter for a mismatching concept code",
              "title": "Bodysitequalifier.Not",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.anyOf",
            "schema": {
              "description": "Anatomical location qualifier - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysitequalifier.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.not.anyOf",
            "schema": {
              "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysitequalifier.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysiteQualifier.descendantsOf",
            "schema": {
              "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code",
              "title": "Bodysitequalifier.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.not.exists",
            "schema": {
              "description": "Anatomical location laterality - Filter for entries without a value",
              "title": "Bodysitelaterality.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.exists",
            "schema": {
              "description": "Anatomical location laterality - Filter for entries with a value",
              "title": "Bodysitelaterality.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality",
            "schema": {
              "description": "Anatomical location laterality - Filter for a matching concept code",
              "title": "Bodysitelaterality",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.not",
            "schema": {
              "description": "Anatomical location laterality - Filter for a mismatching concept code",
              "title": "Bodysitelaterality.Not",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.anyOf",
            "schema": {
              "description": "Anatomical location laterality - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysitelaterality.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.not.anyOf",
            "schema": {
              "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Bodysitelaterality.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "bodysiteLaterality.descendantsOf",
            "schema": {
              "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code",
              "title": "Bodysitelaterality.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "outcome.not.exists",
            "schema": {
              "description": "Outcome - Filter for entries without a value",
              "title": "Outcome.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Outcome - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "outcome.exists",
            "schema": {
              "description": "Outcome - Filter for entries with a value",
              "title": "Outcome.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Outcome - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "outcome",
            "schema": {
              "description": "Outcome - Filter for a matching concept code",
              "title": "Outcome",
              "type": "string"
            },
            "required": false,
            "description": "Outcome - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "outcome.not",
            "schema": {
              "description": "Outcome - Filter for a mismatching concept code",
              "title": "Outcome.Not",
              "type": "string"
            },
            "required": false,
            "description": "Outcome - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "outcome.anyOf",
            "schema": {
              "description": "Outcome - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Outcome.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Outcome - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "outcome.not.anyOf",
            "schema": {
              "description": "Outcome - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Outcome.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Outcome - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "outcome.descendantsOf",
            "schema": {
              "description": "Outcome - Filter for all child concepts of a given concepts code",
              "title": "Outcome.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Outcome - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.exists",
            "schema": {
              "description": "Therapy line - Filter for entries without a value",
              "title": "Therapylineid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "therapyLineId.exists",
            "schema": {
              "description": "Therapy line - Filter for entries with a value",
              "title": "Therapylineid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "therapyLineId",
            "schema": {
              "description": "Therapy line - Filter for reference matches",
              "title": "Therapylineid",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not",
            "schema": {
              "description": "Therapy line - Filter for reference mismatches",
              "title": "Therapylineid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text matches",
              "title": "Therapylineid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text mismatches",
              "title": "Therapylineid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries starting with the text",
              "title": "Therapylineid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not starting with the text",
              "title": "Therapylineid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries ending with the text",
              "title": "Therapylineid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not ending with the text",
              "title": "Therapylineid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text matches",
              "title": "Targetedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text mismatches",
              "title": "Targetedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text matches",
              "title": "Targetedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text mismatches",
              "title": "Targetedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries starting with the text",
              "title": "Targetedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
              "title": "Targetedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries ending with the text",
              "title": "Targetedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
              "title": "Targetedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Surgery_"
                }
              }
            }
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createSurgery",
        "summary": "Create Surgery",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurgeryCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/surgeries/{surgeryId}": {
      "get": {
        "operationId": "getSurgeryById",
        "summary": "Get Surgery By Id",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Surgery"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateSurgeryById",
        "summary": "Update Surgery",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurgeryCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteSurgeryById",
        "summary": "Delete Surgery",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/surgeries/{surgeryId}/history/events": {
      "get": {
        "operationId": "getAllSurgeryHistoryEvents",
        "summary": "Get All Surgery History Events",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/surgeries/{surgeryId}/history/events/{eventId}": {
      "get": {
        "operationId": "getSurgeryHistoryEventById",
        "summary": "Get Surgery History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/surgeries/{surgeryId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertSurgeryToHistoryEvent",
        "summary": "Revert Surgery To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "surgeryId",
            "schema": {
              "title": "Surgeryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Surgeries"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies": {
      "get": {
        "operationId": "getRadiotherapies",
        "summary": "Get All Radiotherapies Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "dosages.id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Dosages.Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "dosages.id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Dosages.Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "dosages.id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Dosages.Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "dosages.id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Dosages.Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "dosages.id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Dosages.Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "dosages.id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Dosages.Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "dosages.id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Dosages.Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "dosages.id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Dosages.Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "dosages.id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "dosages.id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "dosages.fractions.not.exists",
            "schema": {
              "description": "Total fractions - Filter for entries without a value",
              "title": "Dosages.Fractions.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Total fractions - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.exists",
            "schema": {
              "description": "Total fractions - Filter for entries with a value",
              "title": "Dosages.Fractions.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.lessThan",
            "schema": {
              "description": "Total fractions - Filter for entries with values less than the specified value",
              "title": "Dosages.Fractions.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.lessThanOrEqual",
            "schema": {
              "description": "Total fractions - Filter for entries with values less than or equal to the specified value",
              "title": "Dosages.Fractions.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.greaterThan",
            "schema": {
              "description": "Total fractions - Filter for entries with values greater than the specified value",
              "title": "Dosages.Fractions.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.greaterThanOrEqual",
            "schema": {
              "description": "Total fractions - Filter for entries with values greater than or equal to the specified value",
              "title": "Dosages.Fractions.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.equal",
            "schema": {
              "description": "Total fractions - Filter for entries with values exactly equal to the specified value",
              "title": "Dosages.Fractions.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.not.equal",
            "schema": {
              "description": "Total fractions - Filter for entries with values not equal to the specified value",
              "title": "Dosages.Fractions.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.fractions.between",
            "schema": {
              "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Dosages.Fractions.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dosages.fractions.not.between",
            "schema": {
              "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Dosages.Fractions.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total fractions - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dosages.dose.not.exists",
            "schema": {
              "description": "Total radiation dose - Filter for entries without a value",
              "title": "Dosages.Dose.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dosages.dose.exists",
            "schema": {
              "description": "Total radiation dose - Filter for entries with a value",
              "title": "Dosages.Dose.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dosages.dose.lessThan",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values less than the specified value",
              "title": "Dosages.Dose.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.lessThanOrEqual",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value",
              "title": "Dosages.Dose.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.greaterThan",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values greater than the specified value",
              "title": "Dosages.Dose.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.greaterThanOrEqual",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value",
              "title": "Dosages.Dose.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.equal",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value",
              "title": "Dosages.Dose.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.not.equal",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values not equal to the specified value",
              "title": "Dosages.Dose.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "dosages.dose.between",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Dosages.Dose.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dosages.dose.not.between",
            "schema": {
              "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Dosages.Dose.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolume",
            "schema": {
              "description": "Irradiated volume - Filter for a matching concept code",
              "title": "Dosages.Irradiatedvolume",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolume.not",
            "schema": {
              "description": "Irradiated volume - Filter for a mismatching concept code",
              "title": "Dosages.Irradiatedvolume.Not",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolume.anyOf",
            "schema": {
              "description": "Irradiated volume - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolume.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolume.not.anyOf",
            "schema": {
              "description": "Irradiated volume - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolume.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolume.descendantsOf",
            "schema": {
              "description": "Irradiated volume - Filter for all child concepts of a given concepts code",
              "title": "Dosages.Irradiatedvolume.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.not.exists",
            "schema": {
              "description": "Irradiated volume morphology - Filter for entries without a value",
              "title": "Dosages.Irradiatedvolumemorphology.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.exists",
            "schema": {
              "description": "Irradiated volume morphology - Filter for entries with a value",
              "title": "Dosages.Irradiatedvolumemorphology.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology",
            "schema": {
              "description": "Irradiated volume morphology - Filter for a matching concept code",
              "title": "Dosages.Irradiatedvolumemorphology",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.not",
            "schema": {
              "description": "Irradiated volume morphology - Filter for a mismatching concept code",
              "title": "Dosages.Irradiatedvolumemorphology.Not",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.anyOf",
            "schema": {
              "description": "Irradiated volume morphology - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolumemorphology.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.not.anyOf",
            "schema": {
              "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeMorphology.descendantsOf",
            "schema": {
              "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code",
              "title": "Dosages.Irradiatedvolumemorphology.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.not.exists",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for entries without a value",
              "title": "Dosages.Irradiatedvolumequalifier.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.exists",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for entries with a value",
              "title": "Dosages.Irradiatedvolumequalifier.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for a matching concept code",
              "title": "Dosages.Irradiatedvolumequalifier",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.not",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for a mismatching concept code",
              "title": "Dosages.Irradiatedvolumequalifier.Not",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.anyOf",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolumequalifier.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.not.anyOf",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "dosages.irradiatedVolumeQualifier.descendantsOf",
            "schema": {
              "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code",
              "title": "Dosages.Irradiatedvolumequalifier.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "settings.id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Settings.Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "settings.id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Settings.Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "settings.id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Settings.Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "settings.id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Settings.Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "settings.id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Settings.Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "settings.id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Settings.Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "settings.id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Settings.Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "settings.id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Settings.Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "settings.id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Settings.Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "settings.id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Settings.Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "settings.modality",
            "schema": {
              "description": "Modality - Filter for a matching concept code",
              "title": "Settings.Modality",
              "type": "string"
            },
            "required": false,
            "description": "Modality - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "settings.modality.not",
            "schema": {
              "description": "Modality - Filter for a mismatching concept code",
              "title": "Settings.Modality.Not",
              "type": "string"
            },
            "required": false,
            "description": "Modality - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "settings.modality.anyOf",
            "schema": {
              "description": "Modality - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Settings.Modality.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Modality - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "settings.modality.not.anyOf",
            "schema": {
              "description": "Modality - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Settings.Modality.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Modality - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "settings.modality.descendantsOf",
            "schema": {
              "description": "Modality - Filter for all child concepts of a given concepts code",
              "title": "Settings.Modality.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Modality - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "settings.technique",
            "schema": {
              "description": "Technique - Filter for a matching concept code",
              "title": "Settings.Technique",
              "type": "string"
            },
            "required": false,
            "description": "Technique - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "settings.technique.not",
            "schema": {
              "description": "Technique - Filter for a mismatching concept code",
              "title": "Settings.Technique.Not",
              "type": "string"
            },
            "required": false,
            "description": "Technique - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "settings.technique.anyOf",
            "schema": {
              "description": "Technique - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Settings.Technique.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Technique - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "settings.technique.not.anyOf",
            "schema": {
              "description": "Technique - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Settings.Technique.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Technique - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "settings.technique.descendantsOf",
            "schema": {
              "description": "Technique - Filter for all child concepts of a given concepts code",
              "title": "Settings.Technique.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Technique - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "period.overlaps",
            "schema": {
              "description": "Treatment period - Filter for entries overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.not.overlaps",
            "schema": {
              "description": "Treatment period - Filter for entries not overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries not overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.contains",
            "schema": {
              "description": "Treatment period - Filter for entries containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries containing the time period"
          },
          {
            "in": "query",
            "name": "period.not.contains",
            "schema": {
              "description": "Treatment period - Filter for entries not containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries not containing the time period"
          },
          {
            "in": "query",
            "name": "period.containedBy",
            "schema": {
              "description": "Treatment period - Filter for entries whose period are contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries whose period are contined by the time period"
          },
          {
            "in": "query",
            "name": "period.not.containedBy",
            "schema": {
              "description": "Treatment period - Filter for entries whose period are not contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Treatment period - Filter for entries whose period are not contined by the time period"
          },
          {
            "in": "query",
            "name": "sessions.lessThan",
            "schema": {
              "description": "Total sessions - Filter for entries with values less than the specified value",
              "title": "Sessions.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "sessions.lessThanOrEqual",
            "schema": {
              "description": "Total sessions - Filter for entries with values less than or equal to the specified value",
              "title": "Sessions.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "sessions.greaterThan",
            "schema": {
              "description": "Total sessions - Filter for entries with values greater than the specified value",
              "title": "Sessions.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "sessions.greaterThanOrEqual",
            "schema": {
              "description": "Total sessions - Filter for entries with values greater than or equal to the specified value",
              "title": "Sessions.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "sessions.equal",
            "schema": {
              "description": "Total sessions - Filter for entries with values exactly equal to the specified value",
              "title": "Sessions.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "sessions.not.equal",
            "schema": {
              "description": "Total sessions - Filter for entries with values not equal to the specified value",
              "title": "Sessions.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "sessions.between",
            "schema": {
              "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Sessions.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "sessions.not.between",
            "schema": {
              "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Sessions.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Total sessions - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "intent",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "RadiotherapyIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "RadiotherapyIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.anyOf",
            "schema": {
              "description": "Intent - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "RadiotherapyIntentChoices",
                "type": "string"
              },
              "title": "Intent.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Intent - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "terminationReason.not.exists",
            "schema": {
              "description": "Termination reason - Filter for entries without a value",
              "title": "Terminationreason.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Termination reason - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "terminationReason.exists",
            "schema": {
              "description": "Termination reason - Filter for entries with a value",
              "title": "Terminationreason.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Termination reason - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "terminationReason",
            "schema": {
              "description": "Termination reason - Filter for a matching concept code",
              "title": "Terminationreason",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "terminationReason.not",
            "schema": {
              "description": "Termination reason - Filter for a mismatching concept code",
              "title": "Terminationreason.Not",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "terminationReason.anyOf",
            "schema": {
              "description": "Termination reason - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Terminationreason.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Termination reason - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "terminationReason.not.anyOf",
            "schema": {
              "description": "Termination reason - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Terminationreason.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Termination reason - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "terminationReason.descendantsOf",
            "schema": {
              "description": "Termination reason - Filter for all child concepts of a given concepts code",
              "title": "Terminationreason.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Termination reason - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.exists",
            "schema": {
              "description": "Therapy line - Filter for entries without a value",
              "title": "Therapylineid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "therapyLineId.exists",
            "schema": {
              "description": "Therapy line - Filter for entries with a value",
              "title": "Therapylineid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Therapy line - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "therapyLineId",
            "schema": {
              "description": "Therapy line - Filter for reference matches",
              "title": "Therapylineid",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not",
            "schema": {
              "description": "Therapy line - Filter for reference mismatches",
              "title": "Therapylineid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text matches",
              "title": "Therapylineid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.contains",
            "schema": {
              "description": "Therapy line - Filter for partial text mismatches",
              "title": "Therapylineid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "therapyLineId.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries starting with the text",
              "title": "Therapylineid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.beginsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not starting with the text",
              "title": "Therapylineid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries ending with the text",
              "title": "Therapylineid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.endsWith",
            "schema": {
              "description": "Therapy line - Filter for entries not ending with the text",
              "title": "Therapylineid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Therapy line - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "therapyLineId.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "therapyLineId.not.anyOf",
            "schema": {
              "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Therapylineid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text matches",
              "title": "Targetedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for full text mismatches",
              "title": "Targetedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text matches",
              "title": "Targetedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.contains",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for partial text mismatches",
              "title": "Targetedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries starting with the text",
              "title": "Targetedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
              "title": "Targetedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries ending with the text",
              "title": "Targetedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
              "title": "Targetedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "targetedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Targetedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Radiotherapy_"
                }
              }
            }
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createRadiotherapy",
        "summary": "Create Radiotherapy",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapyCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}": {
      "get": {
        "operationId": "getRadiotherapyById",
        "summary": "Get Radiotherapy By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Radiotherapy"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteRadiotherapyById",
        "summary": "Delete Radiotherapy",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateRadiotherapy",
        "summary": "Update Radiotherapy",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapyCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/history/events": {
      "get": {
        "operationId": "getAllRadiotherapyHistoryEvents",
        "summary": "Get All Radiotherapy History Events",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/history/events/{eventId}": {
      "get": {
        "operationId": "getRadiotherapyHistoryEventById",
        "summary": "Get Radiotherapy History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertRadiotherapyToHistoryEvent",
        "summary": "Revert Radiotherapy To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/dosages": {
      "get": {
        "operationId": "getRadiotherapyDosages",
        "summary": "Get Radiotherapy Dosages Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RadiotherapyDosage"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createRadiotherapyDosage",
        "summary": "Create Radiotherapy Dosage",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapyDosageCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}": {
      "get": {
        "operationId": "getRadiotherapyDosageById",
        "summary": "Get Radiotherapy Dosage By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RadiotherapyDosage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateRadiotherapyDosage",
        "summary": "Update Radiotherapy Dosage",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapyDosageCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteRadiotherapyDosage",
        "summary": "Delete Radiotherapy Dosage",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}/history/events": {
      "get": {
        "operationId": "getAllRadiotherapyDosageHistoryEvents",
        "summary": "Get All Radiotherapy Dosage History Events",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}/history/events/{eventId}": {
      "get": {
        "operationId": "getRadiotherapyDosageHistoryEventById",
        "summary": "Get Radiotherapy Dosage History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/dosages/{dosageId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertRadiotherapyDosageToHistoryEvent",
        "summary": "Revert Radiotherapy Dosage To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dosageId",
            "schema": {
              "title": "Dosageid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/settings": {
      "get": {
        "operationId": "getRadiotherapySettings",
        "summary": "Get Radiotherapy Settings Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RadiotherapySetting"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createRadiotherapySetting",
        "summary": "Create Radiotherapy Setting",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapySettingCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/settings/{settingId}": {
      "get": {
        "operationId": "getRadiotherapySettingById",
        "summary": "Get Radiotherapy Setting By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RadiotherapySetting"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateRadiotherapySetting",
        "summary": "Update Radiotherapy Setting",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadiotherapySettingCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteRadiotherapySetting",
        "summary": "Delete Radiotherapy Setting",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/settings/{settingId}/history/events": {
      "get": {
        "operationId": "getAllRadiotherapySettingHistoryEvents",
        "summary": "Get All Radiotherapy Setting History Events",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/settings/{settingId}/history/events/{eventId}": {
      "get": {
        "operationId": "getRadiotherapySettingHistoryEventById",
        "summary": "Get Radiotherapy Setting History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/radiotherapies/{radiotherapyId}/settings/{settingId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertRadiotherapySettingToHistoryEvent",
        "summary": "Revert Radiotherapy Setting To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "radiotherapyId",
            "schema": {
              "title": "Radiotherapyid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "settingId",
            "schema": {
              "title": "Settingid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Radiotherapies"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines": {
      "get": {
        "operationId": "getTherapyLines",
        "summary": "Get All Therapy Lines Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "period.not.exists",
            "schema": {
              "description": "Period - Filter for entries without a value",
              "title": "Period.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Period - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "period.exists",
            "schema": {
              "description": "Period - Filter for entries with a value",
              "title": "Period.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Period - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "period.overlaps",
            "schema": {
              "description": "Period - Filter for entries overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.not.overlaps",
            "schema": {
              "description": "Period - Filter for entries not overlapping with the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Overlaps",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries not overlapping with the time period"
          },
          {
            "in": "query",
            "name": "period.contains",
            "schema": {
              "description": "Period - Filter for entries containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries containing the time period"
          },
          {
            "in": "query",
            "name": "period.not.contains",
            "schema": {
              "description": "Period - Filter for entries not containing the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Contains",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries not containing the time period"
          },
          {
            "in": "query",
            "name": "period.containedBy",
            "schema": {
              "description": "Period - Filter for entries whose period are contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries whose period are contined by the time period"
          },
          {
            "in": "query",
            "name": "period.not.containedBy",
            "schema": {
              "description": "Period - Filter for entries whose period are not contined by the time period",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Period.Not.Containedby",
              "type": "array"
            },
            "required": false,
            "description": "Period - Filter for entries whose period are not contined by the time period"
          },
          {
            "in": "query",
            "name": "label",
            "schema": {
              "description": "Label - Filter for full text matches",
              "title": "Label",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "label.not",
            "schema": {
              "description": "Label - Filter for full text mismatches",
              "title": "Label.Not",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "label.contains",
            "schema": {
              "description": "Label - Filter for partial text matches",
              "title": "Label.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "label.not.contains",
            "schema": {
              "description": "Label - Filter for partial text mismatches",
              "title": "Label.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "label.beginsWith",
            "schema": {
              "description": "Label - Filter for entries starting with the text",
              "title": "Label.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "label.not.beginsWith",
            "schema": {
              "description": "Label - Filter for entries not starting with the text",
              "title": "Label.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "label.endsWith",
            "schema": {
              "description": "Label - Filter for entries ending with the text",
              "title": "Label.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "label.not.endsWith",
            "schema": {
              "description": "Label - Filter for entries not ending with the text",
              "title": "Label.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Label - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "label.anyOf",
            "schema": {
              "description": "Label - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Label.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Label - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "label.not.anyOf",
            "schema": {
              "description": "Label - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Label.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Label - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.not.exists",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries without a value",
              "title": "Progressionfreesurvival.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.exists",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with a value",
              "title": "Progressionfreesurvival.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.lessThan",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values less than the specified value",
              "title": "Progressionfreesurvival.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.lessThanOrEqual",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value",
              "title": "Progressionfreesurvival.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.greaterThan",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values greater than the specified value",
              "title": "Progressionfreesurvival.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.greaterThanOrEqual",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value",
              "title": "Progressionfreesurvival.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.equal",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value",
              "title": "Progressionfreesurvival.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.not.equal",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values not equal to the specified value",
              "title": "Progressionfreesurvival.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.between",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Progressionfreesurvival.Between",
              "type": "array"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "progressionFreeSurvival.not.between",
            "schema": {
              "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Progressionfreesurvival.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "ordinal.lessThan",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values less than the specified value",
              "title": "Ordinal.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.lessThanOrEqual",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values less than or equal to the specified value",
              "title": "Ordinal.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.greaterThan",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values greater than the specified value",
              "title": "Ordinal.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.greaterThanOrEqual",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value",
              "title": "Ordinal.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.equal",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values exactly equal to the specified value",
              "title": "Ordinal.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.not.equal",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values not equal to the specified value",
              "title": "Ordinal.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "ordinal.between",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ordinal.Between",
              "type": "array"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "ordinal.not.between",
            "schema": {
              "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ordinal.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "intent",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "TherapyLineIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "curative",
                    "palliative"
                  ],
                  "title": "TherapyLineIntentChoices",
                  "type": "string"
                }
              ],
              "description": "Intent - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "intent.anyOf",
            "schema": {
              "description": "Intent - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "TherapyLineIntentChoices",
                "type": "string"
              },
              "title": "Intent.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Intent - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "progressionDate.not.exists",
            "schema": {
              "description": "Begin of progression - Filter for entries without a value",
              "title": "Progressiondate.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "progressionDate.exists",
            "schema": {
              "description": "Begin of progression - Filter for entries with a value",
              "title": "Progressiondate.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "progressionDate.before",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Progressiondate.Before",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.after",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Progressiondate.After",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.onOrBefore",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Progressiondate.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.onOrAfter",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Progressiondate.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.on",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Progressiondate.On",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.not.on",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Progressiondate.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "progressionDate.between",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Progressiondate.Between",
              "type": "array"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "progressionDate.not.between",
            "schema": {
              "description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Progressiondate.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_TherapyLine_"
                }
              }
            }
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createTherapyLine",
        "summary": "Create Therapy Line",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TherapyLineCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines/{therapyLineId}": {
      "get": {
        "operationId": "getTherapyLineById",
        "summary": "Get Therapy Line By Id",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TherapyLine"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateTherapyLine",
        "summary": "Update Therapy Line",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TherapyLineCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteTherapyLine",
        "summary": "Delete Therapy Line",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines/{therapyLineId}/history/events": {
      "get": {
        "operationId": "getAllTherapyLineHistoryEvents",
        "summary": "Get All Therapy Line History Events",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines/{therapyLineId}/history/events/{eventId}": {
      "get": {
        "operationId": "getTherapyLineHistoryEventById",
        "summary": "Get Therapy Line History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines/{therapyLineId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertTherapyLineToHistoryEvent",
        "summary": "Revert Therapy Line To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "therapyLineId",
            "schema": {
              "title": "Therapylineid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/therapy-lines/{caseId}/re-assignments": {
      "get": {
        "operationId": "getReassignedPatientCaseTherapyLines",
        "summary": "Get Reassigned Patient Case Therapy Lines",
        "parameters": [
          {
            "in": "path",
            "name": "caseId",
            "schema": {
              "title": "Caseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TherapyLine"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Therapy Lines"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events": {
      "get": {
        "operationId": "getAdverseEvents",
        "summary": "Get All Adverse Events Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "suspectedCauses.id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Suspectedcauses.Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Suspectedcauses.Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Suspectedcauses.Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Suspectedcauses.Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Suspectedcauses.Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Suspectedcauses.Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Suspectedcauses.Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Suspectedcauses.Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not.exists",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries without a value",
              "title": "Suspectedcauses.Systemictherapyid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.exists",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries with a value",
              "title": "Suspectedcauses.Systemictherapyid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId",
            "schema": {
              "description": "Suspected systemic therapy - Filter for reference matches",
              "title": "Suspectedcauses.Systemictherapyid",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not",
            "schema": {
              "description": "Suspected systemic therapy - Filter for reference mismatches",
              "title": "Suspectedcauses.Systemictherapyid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.contains",
            "schema": {
              "description": "Suspected systemic therapy - Filter for partial text matches",
              "title": "Suspectedcauses.Systemictherapyid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not.contains",
            "schema": {
              "description": "Suspected systemic therapy - Filter for partial text mismatches",
              "title": "Suspectedcauses.Systemictherapyid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.beginsWith",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries starting with the text",
              "title": "Suspectedcauses.Systemictherapyid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not.beginsWith",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries not starting with the text",
              "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.endsWith",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries ending with the text",
              "title": "Suspectedcauses.Systemictherapyid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not.endsWith",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries not ending with the text",
              "title": "Suspectedcauses.Systemictherapyid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.anyOf",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Systemictherapyid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.systemicTherapyId.not.anyOf",
            "schema": {
              "description": "Suspected systemic therapy - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Systemictherapyid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected systemic therapy - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not.exists",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries without a value",
              "title": "Suspectedcauses.Medicationid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.exists",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries with a value",
              "title": "Suspectedcauses.Medicationid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for reference matches",
              "title": "Suspectedcauses.Medicationid",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for reference mismatches",
              "title": "Suspectedcauses.Medicationid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.contains",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for partial text matches",
              "title": "Suspectedcauses.Medicationid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not.contains",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for partial text mismatches",
              "title": "Suspectedcauses.Medicationid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.beginsWith",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries starting with the text",
              "title": "Suspectedcauses.Medicationid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not.beginsWith",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries not starting with the text",
              "title": "Suspectedcauses.Medicationid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.endsWith",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries ending with the text",
              "title": "Suspectedcauses.Medicationid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not.endsWith",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries not ending with the text",
              "title": "Suspectedcauses.Medicationid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.anyOf",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Medicationid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.medicationId.not.anyOf",
            "schema": {
              "description": "Suspected systemic therapy medication - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Medicationid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected systemic therapy medication - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not.exists",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries without a value",
              "title": "Suspectedcauses.Radiotherapyid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.exists",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries with a value",
              "title": "Suspectedcauses.Radiotherapyid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId",
            "schema": {
              "description": "Suspected radiotherapy - Filter for reference matches",
              "title": "Suspectedcauses.Radiotherapyid",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not",
            "schema": {
              "description": "Suspected radiotherapy - Filter for reference mismatches",
              "title": "Suspectedcauses.Radiotherapyid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.contains",
            "schema": {
              "description": "Suspected radiotherapy - Filter for partial text matches",
              "title": "Suspectedcauses.Radiotherapyid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not.contains",
            "schema": {
              "description": "Suspected radiotherapy - Filter for partial text mismatches",
              "title": "Suspectedcauses.Radiotherapyid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.beginsWith",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries starting with the text",
              "title": "Suspectedcauses.Radiotherapyid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not.beginsWith",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries not starting with the text",
              "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.endsWith",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries ending with the text",
              "title": "Suspectedcauses.Radiotherapyid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not.endsWith",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries not ending with the text",
              "title": "Suspectedcauses.Radiotherapyid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.anyOf",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Radiotherapyid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.radiotherapyId.not.anyOf",
            "schema": {
              "description": "Suspected radiotherapy - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Radiotherapyid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected radiotherapy - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not.exists",
            "schema": {
              "description": "Suspected surgery - Filter for entries without a value",
              "title": "Suspectedcauses.Surgeryid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.exists",
            "schema": {
              "description": "Suspected surgery - Filter for entries with a value",
              "title": "Suspectedcauses.Surgeryid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId",
            "schema": {
              "description": "Suspected surgery - Filter for reference matches",
              "title": "Suspectedcauses.Surgeryid",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not",
            "schema": {
              "description": "Suspected surgery - Filter for reference mismatches",
              "title": "Suspectedcauses.Surgeryid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.contains",
            "schema": {
              "description": "Suspected surgery - Filter for partial text matches",
              "title": "Suspectedcauses.Surgeryid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not.contains",
            "schema": {
              "description": "Suspected surgery - Filter for partial text mismatches",
              "title": "Suspectedcauses.Surgeryid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.beginsWith",
            "schema": {
              "description": "Suspected surgery - Filter for entries starting with the text",
              "title": "Suspectedcauses.Surgeryid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not.beginsWith",
            "schema": {
              "description": "Suspected surgery - Filter for entries not starting with the text",
              "title": "Suspectedcauses.Surgeryid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.endsWith",
            "schema": {
              "description": "Suspected surgery - Filter for entries ending with the text",
              "title": "Suspectedcauses.Surgeryid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not.endsWith",
            "schema": {
              "description": "Suspected surgery - Filter for entries not ending with the text",
              "title": "Suspectedcauses.Surgeryid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.anyOf",
            "schema": {
              "description": "Suspected surgery - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Surgeryid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.surgeryId.not.anyOf",
            "schema": {
              "description": "Suspected surgery - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Suspectedcauses.Surgeryid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Suspected surgery - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "suspectedCauses.causality.not.exists",
            "schema": {
              "description": "Causality - Filter for entries without a value",
              "title": "Suspectedcauses.Causality.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Causality - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.causality.exists",
            "schema": {
              "description": "Causality - Filter for entries with a value",
              "title": "Suspectedcauses.Causality.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Causality - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "suspectedCauses.causality",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "unrelated",
                    "unlikely-related",
                    "possibly-related",
                    "probably-related",
                    "definitely-related",
                    "conditionally-related"
                  ],
                  "title": "AdverseEventSuspectedCauseCausalityChoices",
                  "type": "string"
                }
              ],
              "description": "Causality - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Causality - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "suspectedCauses.causality.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "unrelated",
                    "unlikely-related",
                    "possibly-related",
                    "probably-related",
                    "definitely-related",
                    "conditionally-related"
                  ],
                  "title": "AdverseEventSuspectedCauseCausalityChoices",
                  "type": "string"
                }
              ],
              "description": "Causality - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Causality - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "suspectedCauses.causality.anyOf",
            "schema": {
              "description": "Causality - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "unrelated",
                  "unlikely-related",
                  "possibly-related",
                  "probably-related",
                  "definitely-related",
                  "conditionally-related"
                ],
                "title": "AdverseEventSuspectedCauseCausalityChoices",
                "type": "string"
              },
              "title": "Suspectedcauses.Causality.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Causality - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "mitigations.id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Mitigations.Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "mitigations.id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Mitigations.Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "mitigations.id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Mitigations.Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "mitigations.id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Mitigations.Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "mitigations.id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Mitigations.Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "mitigations.id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Mitigations.Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "mitigations.id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Mitigations.Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "mitigations.id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Mitigations.Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "mitigations.id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "mitigations.id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "mitigations.category",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "adjustment",
                    "pharmacological",
                    "procedure"
                  ],
                  "title": "AdverseEventMitigationCategoryChoices",
                  "type": "string"
                }
              ],
              "description": "Mitigation category - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Mitigation category - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "mitigations.category.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "adjustment",
                    "pharmacological",
                    "procedure"
                  ],
                  "title": "AdverseEventMitigationCategoryChoices",
                  "type": "string"
                }
              ],
              "description": "Mitigation category - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Mitigation category - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "mitigations.category.anyOf",
            "schema": {
              "description": "Mitigation category - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "adjustment",
                  "pharmacological",
                  "procedure"
                ],
                "title": "AdverseEventMitigationCategoryChoices",
                "type": "string"
              },
              "title": "Mitigations.Category.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Mitigation category - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.not.exists",
            "schema": {
              "description": "Treatment Adjustment - Filter for entries without a value",
              "title": "Mitigations.Adjustment.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.exists",
            "schema": {
              "description": "Treatment Adjustment - Filter for entries with a value",
              "title": "Mitigations.Adjustment.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment",
            "schema": {
              "description": "Treatment Adjustment - Filter for a matching concept code",
              "title": "Mitigations.Adjustment",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.not",
            "schema": {
              "description": "Treatment Adjustment - Filter for a mismatching concept code",
              "title": "Mitigations.Adjustment.Not",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.anyOf",
            "schema": {
              "description": "Treatment Adjustment - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Adjustment.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.not.anyOf",
            "schema": {
              "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Adjustment.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.adjustment.descendantsOf",
            "schema": {
              "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code",
              "title": "Mitigations.Adjustment.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "mitigations.drug.not.exists",
            "schema": {
              "description": "Pharmacological drug - Filter for entries without a value",
              "title": "Mitigations.Drug.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "mitigations.drug.exists",
            "schema": {
              "description": "Pharmacological drug - Filter for entries with a value",
              "title": "Mitigations.Drug.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "mitigations.drug",
            "schema": {
              "description": "Pharmacological drug - Filter for a matching concept code",
              "title": "Mitigations.Drug",
              "type": "string"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.drug.not",
            "schema": {
              "description": "Pharmacological drug - Filter for a mismatching concept code",
              "title": "Mitigations.Drug.Not",
              "type": "string"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.drug.anyOf",
            "schema": {
              "description": "Pharmacological drug - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Drug.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.drug.not.anyOf",
            "schema": {
              "description": "Pharmacological drug - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Drug.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.drug.descendantsOf",
            "schema": {
              "description": "Pharmacological drug - Filter for all child concepts of a given concepts code",
              "title": "Mitigations.Drug.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Pharmacological drug - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.not.exists",
            "schema": {
              "description": "Procedure - Filter for entries without a value",
              "title": "Mitigations.Procedure.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Procedure - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.exists",
            "schema": {
              "description": "Procedure - Filter for entries with a value",
              "title": "Mitigations.Procedure.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Procedure - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "mitigations.procedure",
            "schema": {
              "description": "Procedure - Filter for a matching concept code",
              "title": "Mitigations.Procedure",
              "type": "string"
            },
            "required": false,
            "description": "Procedure - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.not",
            "schema": {
              "description": "Procedure - Filter for a mismatching concept code",
              "title": "Mitigations.Procedure.Not",
              "type": "string"
            },
            "required": false,
            "description": "Procedure - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.anyOf",
            "schema": {
              "description": "Procedure - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Procedure.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Procedure - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.not.anyOf",
            "schema": {
              "description": "Procedure - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Procedure.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Procedure - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.procedure.descendantsOf",
            "schema": {
              "description": "Procedure - Filter for all child concepts of a given concepts code",
              "title": "Mitigations.Procedure.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Procedure - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "mitigations.management.not.exists",
            "schema": {
              "description": "Management - Filter for entries without a value",
              "title": "Mitigations.Management.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Management - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "mitigations.management.exists",
            "schema": {
              "description": "Management - Filter for entries with a value",
              "title": "Mitigations.Management.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Management - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "mitigations.management",
            "schema": {
              "description": "Management - Filter for a matching concept code",
              "title": "Mitigations.Management",
              "type": "string"
            },
            "required": false,
            "description": "Management - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.management.not",
            "schema": {
              "description": "Management - Filter for a mismatching concept code",
              "title": "Mitigations.Management.Not",
              "type": "string"
            },
            "required": false,
            "description": "Management - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "mitigations.management.anyOf",
            "schema": {
              "description": "Management - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Management.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Management - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.management.not.anyOf",
            "schema": {
              "description": "Management - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Mitigations.Management.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Management - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "mitigations.management.descendantsOf",
            "schema": {
              "description": "Management - Filter for all child concepts of a given concepts code",
              "title": "Mitigations.Management.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Management - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Event date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Event date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Event date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Event date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Event date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Event date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Event date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Event date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Event date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "description": "Adverse event - Filter for a matching concept code",
              "title": "Event",
              "type": "string"
            },
            "required": false,
            "description": "Adverse event - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "event.not",
            "schema": {
              "description": "Adverse event - Filter for a mismatching concept code",
              "title": "Event.Not",
              "type": "string"
            },
            "required": false,
            "description": "Adverse event - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "event.anyOf",
            "schema": {
              "description": "Adverse event - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Event.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Adverse event - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "event.not.anyOf",
            "schema": {
              "description": "Adverse event - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Event.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Adverse event - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "event.descendantsOf",
            "schema": {
              "description": "Adverse event - Filter for all child concepts of a given concepts code",
              "title": "Event.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Adverse event - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "grade.lessThan",
            "schema": {
              "description": "Grade - Filter for entries with values less than the specified value",
              "title": "Grade.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "grade.lessThanOrEqual",
            "schema": {
              "description": "Grade - Filter for entries with values less than or equal to the specified value",
              "title": "Grade.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "grade.greaterThan",
            "schema": {
              "description": "Grade - Filter for entries with values greater than the specified value",
              "title": "Grade.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "grade.greaterThanOrEqual",
            "schema": {
              "description": "Grade - Filter for entries with values greater than or equal to the specified value",
              "title": "Grade.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "grade.equal",
            "schema": {
              "description": "Grade - Filter for entries with values exactly equal to the specified value",
              "title": "Grade.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "grade.not.equal",
            "schema": {
              "description": "Grade - Filter for entries with values not equal to the specified value",
              "title": "Grade.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Grade - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "grade.between",
            "schema": {
              "description": "Grade - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Grade.Between",
              "type": "array"
            },
            "required": false,
            "description": "Grade - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "grade.not.between",
            "schema": {
              "description": "Grade - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Grade.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Grade - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "outcome",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "resolved",
                    "resolved-with-sequelae",
                    "recovering",
                    "ongoing",
                    "fatal",
                    "unknown"
                  ],
                  "title": "AdverseEventOutcomeChoices",
                  "type": "string"
                }
              ],
              "description": "Date resolved - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Date resolved - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "outcome.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "resolved",
                    "resolved-with-sequelae",
                    "recovering",
                    "ongoing",
                    "fatal",
                    "unknown"
                  ],
                  "title": "AdverseEventOutcomeChoices",
                  "type": "string"
                }
              ],
              "description": "Date resolved - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Date resolved - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "outcome.anyOf",
            "schema": {
              "description": "Date resolved - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "resolved",
                  "resolved-with-sequelae",
                  "recovering",
                  "ongoing",
                  "fatal",
                  "unknown"
                ],
                "title": "AdverseEventOutcomeChoices",
                "type": "string"
              },
              "title": "Outcome.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Date resolved - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "dateResolved.not.exists",
            "schema": {
              "description": "Date resolved - Filter for entries without a value",
              "title": "Dateresolved.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Date resolved - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dateResolved.exists",
            "schema": {
              "description": "Date resolved - Filter for entries with a value",
              "title": "Dateresolved.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dateResolved.before",
            "schema": {
              "description": "Date resolved - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Dateresolved.Before",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.after",
            "schema": {
              "description": "Date resolved - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Dateresolved.After",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.onOrBefore",
            "schema": {
              "description": "Date resolved - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Dateresolved.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.onOrAfter",
            "schema": {
              "description": "Date resolved - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Dateresolved.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.on",
            "schema": {
              "description": "Date resolved - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Dateresolved.On",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.not.on",
            "schema": {
              "description": "Date resolved - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Dateresolved.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "dateResolved.between",
            "schema": {
              "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateresolved.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dateResolved.not.between",
            "schema": {
              "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Dateresolved.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AdverseEvent_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createAdverseEvent",
        "summary": "Create Adverse Event",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}": {
      "get": {
        "operationId": "getAdverseEventById",
        "summary": "Get Adverse Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdverseEvent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteAdverseEventById",
        "summary": "Delete Adverse Event",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateAdverseEvent",
        "summary": "Update Adverse Event",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/history/events": {
      "get": {
        "operationId": "getAllAdverseEventHistoryEvents",
        "summary": "Get All Adverse Event History Events",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/history/events/{eventId}": {
      "get": {
        "operationId": "getAdverseEventHistoryEventById",
        "summary": "Get Adverse Event History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertAdverseEventToHistoryEvent",
        "summary": "Revert Adverse Event To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/suspected-causes": {
      "get": {
        "operationId": "getAdverseEventSuspectedCauses",
        "summary": "Get Adverse Event Suspected Causes Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AdverseEventSuspectedCause"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createAdverseEventSuspectedCause",
        "summary": "Create Adverse Event Suspected Cause",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventSuspectedCauseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}": {
      "get": {
        "operationId": "getAdverseEventSuspectedCauseById",
        "summary": "Get Adverse Event Suspected Cause By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdverseEventSuspectedCause"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateAdverseEventSuspectedCause",
        "summary": "Update Adverse Event Suspected Cause",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventSuspectedCauseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteAdverseEventSuspectedCause",
        "summary": "Delete Adverse Event Suspected Cause",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}/history/events": {
      "get": {
        "operationId": "getAllAdverseEventSuspectedCauseHistoryEvents",
        "summary": "Get All Adverse Event Suspected Cause History Events",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}/history/events/{eventId}": {
      "get": {
        "operationId": "getAdverseEventSuspectedCauseHistoryEventById",
        "summary": "Get Adverse Event Suspected Cause History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/suspected-causes/{causeId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertAdverseEventSuspectedCauseToHistoryEvent",
        "summary": "Revert Adverse Event Suspected Cause To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "causeId",
            "schema": {
              "title": "Causeid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/mitigations": {
      "get": {
        "operationId": "getAdverseEventMitigations",
        "summary": "Get Adverse Event Mitigations Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AdverseEventMitigation"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createAdverseEventMitigation",
        "summary": "Create Adverse Event Mitigation",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventMitigationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}": {
      "get": {
        "operationId": "getAdverseEventMitigationById",
        "summary": "Get Adverse Event Mitigation By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdverseEventMitigation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateAdverseEventMitigation",
        "summary": "Update Adverse Event Mitigation",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdverseEventMitigationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteAdverseEventMitigation",
        "summary": "Delete Adverse Event Mitigation",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}/history/events": {
      "get": {
        "operationId": "getAllAdverseEventMitigationHistoryEvents",
        "summary": "Get All Adverse Event Mitigation History Events",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}/history/events/{eventId}": {
      "get": {
        "operationId": "getAdverseEventMitigationHistoryEventById",
        "summary": "Get Adverse Event Mitigation History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/adverse-events/{adverseEventId}/mitigations/{mitigationId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertAdverseEventMitigationToHistoryEvent",
        "summary": "Revert Adverse Event Mitigation To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "adverseEventId",
            "schema": {
              "title": "Adverseeventid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mitigationId",
            "schema": {
              "title": "Mitigationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Adverse Events"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/treatment-responses": {
      "get": {
        "operationId": "getTreatmentResponses",
        "summary": "Get All Treatment Responses Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "recist",
            "schema": {
              "description": "RECIST - Filter for a matching concept code",
              "title": "Recist",
              "type": "string"
            },
            "required": false,
            "description": "RECIST - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "recist.not",
            "schema": {
              "description": "RECIST - Filter for a mismatching concept code",
              "title": "Recist.Not",
              "type": "string"
            },
            "required": false,
            "description": "RECIST - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "recist.anyOf",
            "schema": {
              "description": "RECIST - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recist.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RECIST - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "recist.not.anyOf",
            "schema": {
              "description": "RECIST - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recist.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RECIST - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "recist.descendantsOf",
            "schema": {
              "description": "RECIST - Filter for all child concepts of a given concepts code",
              "title": "Recist.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "RECIST - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "recistInterpreted.not.exists",
            "schema": {
              "description": "RECIST Interpreted? - Filter for entries without a value",
              "title": "Recistinterpreted.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RECIST Interpreted? - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "recistInterpreted.exists",
            "schema": {
              "description": "RECIST Interpreted? - Filter for entries with a value",
              "title": "Recistinterpreted.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RECIST Interpreted? - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "recistInterpreted",
            "schema": {
              "description": "RECIST Interpreted? - ('Filter for yes/no statement',)",
              "title": "Recistinterpreted",
              "type": "boolean"
            },
            "required": false,
            "description": "RECIST Interpreted? - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "methodology",
            "schema": {
              "description": "Assessment method - Filter for a matching concept code",
              "title": "Methodology",
              "type": "string"
            },
            "required": false,
            "description": "Assessment method - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "methodology.not",
            "schema": {
              "description": "Assessment method - Filter for a mismatching concept code",
              "title": "Methodology.Not",
              "type": "string"
            },
            "required": false,
            "description": "Assessment method - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "methodology.anyOf",
            "schema": {
              "description": "Assessment method - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Methodology.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessment method - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "methodology.not.anyOf",
            "schema": {
              "description": "Assessment method - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Methodology.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessment method - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "methodology.descendantsOf",
            "schema": {
              "description": "Assessment method - Filter for all child concepts of a given concepts code",
              "title": "Methodology.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Assessment method - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for full text matches",
              "title": "Assessedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for full text mismatches",
              "title": "Assessedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.contains",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for partial text matches",
              "title": "Assessedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.contains",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for partial text mismatches",
              "title": "Assessedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.beginsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries starting with the text",
              "title": "Assessedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
              "title": "Assessedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.endsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries ending with the text",
              "title": "Assessedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
              "title": "Assessedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.anyOf",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Assessedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "assessedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Assessedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "assessedBodysites.not.exists",
            "schema": {
              "description": "Assessed anatomical location - Filter for entries without a value",
              "title": "Assessedbodysites.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "assessedBodysites.exists",
            "schema": {
              "description": "Assessed anatomical location - Filter for entries with a value",
              "title": "Assessedbodysites.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "assessedBodysites",
            "schema": {
              "description": "Assessed anatomical location - Filter for a matching concept code",
              "title": "Assessedbodysites",
              "type": "string"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "assessedBodysites.not",
            "schema": {
              "description": "Assessed anatomical location - Filter for a mismatching concept code",
              "title": "Assessedbodysites.Not",
              "type": "string"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "assessedBodysites.anyOf",
            "schema": {
              "description": "Assessed anatomical location - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Assessedbodysites.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "assessedBodysites.not.anyOf",
            "schema": {
              "description": "Assessed anatomical location - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Assessedbodysites.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "assessedBodysites.descendantsOf",
            "schema": {
              "description": "Assessed anatomical location - Filter for all child concepts of a given concepts code",
              "title": "Assessedbodysites.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "assessedBodysites.allOf",
            "schema": {
              "description": "Assessed anatomical location - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Assessedbodysites.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "assessedBodysites.not.allOf",
            "schema": {
              "description": "Assessed anatomical location - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Assessedbodysites.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Assessed anatomical location - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_TreatmentResponse_"
                }
              }
            }
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createTreatmentResponse",
        "summary": "Create Treatment Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreatmentResponseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/treatment-responses/{treatmentRresponseId}": {
      "get": {
        "operationId": "getTreatmentResponseById",
        "summary": "Get Treatment Response By Id",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreatmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateTreatmentResponse",
        "summary": "Update Treatment Response",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreatmentResponseCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteTreatmentResponse",
        "summary": "Delete Treatment Response",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/treatment-responses/{treatmentRresponseId}/history/events": {
      "get": {
        "operationId": "getAllTreatmentResponseHistoryEvents",
        "summary": "Get All Treatment Response History Events",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/treatment-responses/{treatmentRresponseId}/history/events/{eventId}": {
      "get": {
        "operationId": "getTreatmentResponseHistoryEventById",
        "summary": "Get Treatment Response History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/treatment-responses/{treatmentRresponseId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertTreatmentResponseToHistoryEvent",
        "summary": "Revert Treatment Response To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "treatmentRresponseId",
            "schema": {
              "title": "Treatmentrresponseid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Treatment Responses"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-boards": {
      "get": {
        "operationId": "getTumorBoards",
        "summary": "Get All Tumor Boards Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds",
            "schema": {
              "description": "Related neoplastic entities - Filter for full text matches",
              "title": "Relatedentitiesids",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not",
            "schema": {
              "description": "Related neoplastic entities - Filter for full text mismatches",
              "title": "Relatedentitiesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.contains",
            "schema": {
              "description": "Related neoplastic entities - Filter for partial text matches",
              "title": "Relatedentitiesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.contains",
            "schema": {
              "description": "Related neoplastic entities - Filter for partial text mismatches",
              "title": "Relatedentitiesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.beginsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries starting with the text",
              "title": "Relatedentitiesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.beginsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries not starting with the text",
              "title": "Relatedentitiesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.endsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries ending with the text",
              "title": "Relatedentitiesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.endsWith",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries not ending with the text",
              "title": "Relatedentitiesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.anyOf",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedentitiesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "relatedEntitiesIds.not.anyOf",
            "schema": {
              "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Relatedentitiesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "recommendations.not.exists",
            "schema": {
              "description": "Recommendations - Filter for entries without a value",
              "title": "Recommendations.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Recommendations - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "recommendations.exists",
            "schema": {
              "description": "Recommendations - Filter for entries with a value",
              "title": "Recommendations.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Recommendations - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "recommendations",
            "schema": {
              "description": "Recommendations - Filter for a matching concept code",
              "title": "Recommendations",
              "type": "string"
            },
            "required": false,
            "description": "Recommendations - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "recommendations.not",
            "schema": {
              "description": "Recommendations - Filter for a mismatching concept code",
              "title": "Recommendations.Not",
              "type": "string"
            },
            "required": false,
            "description": "Recommendations - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "recommendations.anyOf",
            "schema": {
              "description": "Recommendations - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recommendations.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Recommendations - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "recommendations.not.anyOf",
            "schema": {
              "description": "Recommendations - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recommendations.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Recommendations - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "recommendations.descendantsOf",
            "schema": {
              "description": "Recommendations - Filter for all child concepts of a given concepts code",
              "title": "Recommendations.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Recommendations - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "recommendations.allOf",
            "schema": {
              "description": "Recommendations - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Recommendations.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Recommendations - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "recommendations.not.allOf",
            "schema": {
              "description": "Recommendations - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Recommendations.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Recommendations - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AnyTumorBoard_"
                }
              }
            }
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createTumorBoard",
        "summary": "Create Tumor Board",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/UnspecifiedTumorBoardCreate"
                  },
                  {
                    "$ref": "#/components/schemas/MolecularTumorBoardCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-boards/{tumorBoardId}": {
      "get": {
        "operationId": "getTumorBoardById",
        "summary": "Get Tumor Board By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyTumorBoard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateTumorBoardById",
        "summary": "Update Tumor Board",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/UnspecifiedTumorBoardCreate"
                  },
                  {
                    "$ref": "#/components/schemas/MolecularTumorBoardCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteTumorBoardById",
        "summary": "Delete Tumor Board",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-boards/{tumorBoardId}/history/events": {
      "get": {
        "operationId": "getAllTumorBoardHistoryEvents",
        "summary": "Get All Tumor Board History Events",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEvent_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-boards/{tumorBoardId}/history/events/{eventId}": {
      "get": {
        "operationId": "getTumorBoardHistoryEventById",
        "summary": "Get Tumor Board History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEvent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/tumor-boards/{tumorBoardId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertTumorBoardToHistoryEvent",
        "summary": "Revert Tumor Board To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations": {
      "get": {
        "operationId": "getMolecularTherapeuticRecommendations",
        "summary": "Get Molecular Tumor Board Therapeutic Recommendations Matching The Query",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MolecularTherapeuticRecommendation"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createMolecularTherapeuticRecommendation",
        "summary": "Create Molecular Tumor Board Therapeutic Recommendation",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}": {
      "get": {
        "operationId": "getMOlecularTherapeuticRecommendationById",
        "summary": "Get Molecular Tumor Board Therapeutic Recommendation By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MolecularTherapeuticRecommendation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateMolecularTherapeuticRecommendation",
        "summary": "Update Molecular Tumor Board Therapeutic Recommendation",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MolecularTherapeuticRecommendationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteMolecularTherapeuticRecommendation",
        "summary": "Delete Molecular Tumor Board Therapeutic Recommendation",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}/history/events": {
      "get": {
        "operationId": "getAllMolecularTherapeuticRecommendationHistoryEvents",
        "summary": "Get All Molecular Tumor Board Therapeutic History Events",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEvent_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}/history/events/{eventId}": {
      "get": {
        "operationId": "getMolecularTherapeuticRecommendationHistoryEventById",
        "summary": "Get Molecular Tumor Board Therapeutic History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEvent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/molecular-tumor-boards/{tumorBoardId}/therapeutic-recommendations/{recommendationId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertMolecularTherapeuticRecommendationToHistoryEvent",
        "summary": "Revert Molecular Tumor Board Therapeutic To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "tumorBoardId",
            "schema": {
              "title": "Tumorboardid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "recommendationId",
            "schema": {
              "title": "Recommendationid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Tumor Boards"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/performance-status": {
      "get": {
        "operationId": "getPerformanceStatus",
        "summary": "Get All Performance Status Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "ecogInterpretation.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Ecoginterpretation.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "ecogInterpretation.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Ecoginterpretation.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "ecogInterpretation",
            "schema": {
              "description": "None - Filter for a matching concept code",
              "title": "Ecoginterpretation",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "ecogInterpretation.not",
            "schema": {
              "description": "None - Filter for a mismatching concept code",
              "title": "Ecoginterpretation.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "ecogInterpretation.anyOf",
            "schema": {
              "description": "None - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Ecoginterpretation.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "ecogInterpretation.not.anyOf",
            "schema": {
              "description": "None - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Ecoginterpretation.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "ecogInterpretation.descendantsOf",
            "schema": {
              "description": "None - Filter for all child concepts of a given concepts code",
              "title": "Ecoginterpretation.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Karnofskyinterpretation.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Karnofskyinterpretation.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation",
            "schema": {
              "description": "None - Filter for a matching concept code",
              "title": "Karnofskyinterpretation",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.not",
            "schema": {
              "description": "None - Filter for a mismatching concept code",
              "title": "Karnofskyinterpretation.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.anyOf",
            "schema": {
              "description": "None - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Karnofskyinterpretation.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.not.anyOf",
            "schema": {
              "description": "None - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Karnofskyinterpretation.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "karnofskyInterpretation.descendantsOf",
            "schema": {
              "description": "None - Filter for all child concepts of a given concepts code",
              "title": "Karnofskyinterpretation.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "ecogScore.not.exists",
            "schema": {
              "description": "ECOG Score - Filter for entries without a value",
              "title": "Ecogscore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "ecogScore.exists",
            "schema": {
              "description": "ECOG Score - Filter for entries with a value",
              "title": "Ecogscore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "ecogScore.lessThan",
            "schema": {
              "description": "ECOG Score - Filter for entries with values less than the specified value",
              "title": "Ecogscore.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.lessThanOrEqual",
            "schema": {
              "description": "ECOG Score - Filter for entries with values less than or equal to the specified value",
              "title": "Ecogscore.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.greaterThan",
            "schema": {
              "description": "ECOG Score - Filter for entries with values greater than the specified value",
              "title": "Ecogscore.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.greaterThanOrEqual",
            "schema": {
              "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value",
              "title": "Ecogscore.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.equal",
            "schema": {
              "description": "ECOG Score - Filter for entries with values exactly equal to the specified value",
              "title": "Ecogscore.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.not.equal",
            "schema": {
              "description": "ECOG Score - Filter for entries with values not equal to the specified value",
              "title": "Ecogscore.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "ecogScore.between",
            "schema": {
              "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ecogscore.Between",
              "type": "array"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "ecogScore.not.between",
            "schema": {
              "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Ecogscore.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "karnofskyScore.not.exists",
            "schema": {
              "description": "Karnofsky Score - Filter for entries without a value",
              "title": "Karnofskyscore.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.exists",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with a value",
              "title": "Karnofskyscore.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.lessThan",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values less than the specified value",
              "title": "Karnofskyscore.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.lessThanOrEqual",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value",
              "title": "Karnofskyscore.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.greaterThan",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values greater than the specified value",
              "title": "Karnofskyscore.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.greaterThanOrEqual",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value",
              "title": "Karnofskyscore.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.equal",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value",
              "title": "Karnofskyscore.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.not.equal",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values not equal to the specified value",
              "title": "Karnofskyscore.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "karnofskyScore.between",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Karnofskyscore.Between",
              "type": "array"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "karnofskyScore.not.between",
            "schema": {
              "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Karnofskyscore.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_PerformanceStatus_"
                }
              }
            }
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createPerformanceStatus",
        "summary": "Create Performance Status",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformanceStatusCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/performance-status/{performanceStatusId}": {
      "get": {
        "operationId": "getPerformanceStatusById",
        "summary": "Get Performance Status By Id",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceStatus"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updatePerformanceStatusById",
        "summary": "Update Performance Status",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformanceStatusCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deletePerformanceStatus",
        "summary": "Delete Performance Status",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/performance-status/{performanceStatusId}/history/events": {
      "get": {
        "operationId": "getAllPerformanceStatusHistoryEvents",
        "summary": "Get All Performance Status History Events",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/performance-status/{performanceStatusId}/history/events/{eventId}": {
      "get": {
        "operationId": "getPerformanceStatusHistoryEventById",
        "summary": "Get Performance Status History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/performance-status/{performanceStatusId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertPerformanceStatusToHistoryEvent",
        "summary": "Revert Performance Status To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "performanceStatusId",
            "schema": {
              "title": "Performancestatusid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Performance Status"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-variants": {
      "get": {
        "operationId": "getGenomicVariants",
        "summary": "Get All Genomic Variants Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "isPathogenic.not.exists",
            "schema": {
              "description": "Is Pathogenic - Filter for entries without a value",
              "title": "Ispathogenic.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Is Pathogenic - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "isPathogenic.exists",
            "schema": {
              "description": "Is Pathogenic - Filter for entries with a value",
              "title": "Ispathogenic.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Is Pathogenic - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "isPathogenic",
            "schema": {
              "description": "Is Pathogenic - ('Filter for yes/no statement',)",
              "title": "Ispathogenic",
              "type": "boolean"
            },
            "required": false,
            "description": "Is Pathogenic - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "isVUS.not.exists",
            "schema": {
              "description": "Is VUS - Filter for entries without a value",
              "title": "Isvus.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Is VUS - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "isVUS.exists",
            "schema": {
              "description": "Is VUS - Filter for entries with a value",
              "title": "Isvus.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Is VUS - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "isVUS",
            "schema": {
              "description": "Is VUS - ('Filter for yes/no statement',)",
              "title": "Isvus",
              "type": "boolean"
            },
            "required": false,
            "description": "Is VUS - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not.exists",
            "schema": {
              "description": "DNA HGVS - Filter for entries without a value",
              "title": "Dnahgvs.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dnaHgvs.exists",
            "schema": {
              "description": "DNA HGVS - Filter for entries with a value",
              "title": "Dnahgvs.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dnaHgvs",
            "schema": {
              "description": "DNA HGVS - Filter for full text matches",
              "title": "Dnahgvs",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not",
            "schema": {
              "description": "DNA HGVS - Filter for full text mismatches",
              "title": "Dnahgvs.Not",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "dnaHgvs.contains",
            "schema": {
              "description": "DNA HGVS - Filter for partial text matches",
              "title": "Dnahgvs.Contains",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not.contains",
            "schema": {
              "description": "DNA HGVS - Filter for partial text mismatches",
              "title": "Dnahgvs.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "dnaHgvs.beginsWith",
            "schema": {
              "description": "DNA HGVS - Filter for entries starting with the text",
              "title": "Dnahgvs.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not.beginsWith",
            "schema": {
              "description": "DNA HGVS - Filter for entries not starting with the text",
              "title": "Dnahgvs.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "dnaHgvs.endsWith",
            "schema": {
              "description": "DNA HGVS - Filter for entries ending with the text",
              "title": "Dnahgvs.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not.endsWith",
            "schema": {
              "description": "DNA HGVS - Filter for entries not ending with the text",
              "title": "Dnahgvs.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "dnaHgvs.anyOf",
            "schema": {
              "description": "DNA HGVS - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Dnahgvs.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "dnaHgvs.not.anyOf",
            "schema": {
              "description": "DNA HGVS - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Dnahgvs.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "DNA HGVS - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not.exists",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries without a value",
              "title": "Dnareferencesequence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.exists",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries with a value",
              "title": "Dnareferencesequence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for full text matches",
              "title": "Dnareferencesequence",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for full text mismatches",
              "title": "Dnareferencesequence.Not",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.contains",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for partial text matches",
              "title": "Dnareferencesequence.Contains",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not.contains",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for partial text mismatches",
              "title": "Dnareferencesequence.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.beginsWith",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries starting with the text",
              "title": "Dnareferencesequence.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not.beginsWith",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries not starting with the text",
              "title": "Dnareferencesequence.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.endsWith",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries ending with the text",
              "title": "Dnareferencesequence.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not.endsWith",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries not ending with the text",
              "title": "Dnareferencesequence.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.anyOf",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Dnareferencesequence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "dnaReferenceSequence.not.anyOf",
            "schema": {
              "description": "DNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Dnareferencesequence.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "DNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.not.exists",
            "schema": {
              "description": "DNA change position - Filter for entries without a value",
              "title": "Dnachangeposition.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change position - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.exists",
            "schema": {
              "description": "DNA change position - Filter for entries with a value",
              "title": "Dnachangeposition.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.lessThan",
            "schema": {
              "description": "DNA change position - Filter for entries with values less than the specified value",
              "title": "Dnachangeposition.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.lessThanOrEqual",
            "schema": {
              "description": "DNA change position - Filter for entries with values less than or equal to the specified value",
              "title": "Dnachangeposition.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.greaterThan",
            "schema": {
              "description": "DNA change position - Filter for entries with values greater than the specified value",
              "title": "Dnachangeposition.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.greaterThanOrEqual",
            "schema": {
              "description": "DNA change position - Filter for entries with values greater than or equal to the specified value",
              "title": "Dnachangeposition.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.equal",
            "schema": {
              "description": "DNA change position - Filter for entries with values exactly equal to the specified value",
              "title": "Dnachangeposition.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.not.equal",
            "schema": {
              "description": "DNA change position - Filter for entries with values not equal to the specified value",
              "title": "Dnachangeposition.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.between",
            "schema": {
              "description": "DNA change position - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Dnachangeposition.Between",
              "type": "array"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dnaChangePosition.not.between",
            "schema": {
              "description": "DNA change position - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Dnachangeposition.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "DNA change position - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "dnaChangePositionRange.not.exists",
            "schema": {
              "description": "DNA change range - Filter for entries without a value",
              "title": "Dnachangepositionrange.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change range - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dnaChangePositionRange.exists",
            "schema": {
              "description": "DNA change range - Filter for entries with a value",
              "title": "Dnachangepositionrange.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change range - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dnaChangeType.not.exists",
            "schema": {
              "description": "DNA change type - Filter for entries without a value",
              "title": "Dnachangetype.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change type - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "dnaChangeType.exists",
            "schema": {
              "description": "DNA change type - Filter for entries with a value",
              "title": "Dnachangetype.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "DNA change type - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "dnaChangeType",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "substitution",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "inversion",
                    "unchanged",
                    "repetition",
                    "translocation",
                    "transposition",
                    "methylation-gain",
                    "methylation-loss",
                    "methylation-unchanged"
                  ],
                  "title": "DNAChangeType",
                  "type": "string"
                }
              ],
              "description": "DNA change type - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "DNA change type - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "dnaChangeType.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "substitution",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "inversion",
                    "unchanged",
                    "repetition",
                    "translocation",
                    "transposition",
                    "methylation-gain",
                    "methylation-loss",
                    "methylation-unchanged"
                  ],
                  "title": "DNAChangeType",
                  "type": "string"
                }
              ],
              "description": "DNA change type - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "DNA change type - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "dnaChangeType.anyOf",
            "schema": {
              "description": "DNA change type - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition",
                  "translocation",
                  "transposition",
                  "methylation-gain",
                  "methylation-loss",
                  "methylation-unchanged"
                ],
                "title": "DNAChangeType",
                "type": "string"
              },
              "title": "Dnachangetype.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "DNA change type - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not.exists",
            "schema": {
              "description": "RNA HGVS - Filter for entries without a value",
              "title": "Rnahgvs.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "rnaHgvs.exists",
            "schema": {
              "description": "RNA HGVS - Filter for entries with a value",
              "title": "Rnahgvs.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "rnaHgvs",
            "schema": {
              "description": "RNA HGVS - Filter for full text matches",
              "title": "Rnahgvs",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not",
            "schema": {
              "description": "RNA HGVS - Filter for full text mismatches",
              "title": "Rnahgvs.Not",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "rnaHgvs.contains",
            "schema": {
              "description": "RNA HGVS - Filter for partial text matches",
              "title": "Rnahgvs.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not.contains",
            "schema": {
              "description": "RNA HGVS - Filter for partial text mismatches",
              "title": "Rnahgvs.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "rnaHgvs.beginsWith",
            "schema": {
              "description": "RNA HGVS - Filter for entries starting with the text",
              "title": "Rnahgvs.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not.beginsWith",
            "schema": {
              "description": "RNA HGVS - Filter for entries not starting with the text",
              "title": "Rnahgvs.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "rnaHgvs.endsWith",
            "schema": {
              "description": "RNA HGVS - Filter for entries ending with the text",
              "title": "Rnahgvs.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not.endsWith",
            "schema": {
              "description": "RNA HGVS - Filter for entries not ending with the text",
              "title": "Rnahgvs.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "rnaHgvs.anyOf",
            "schema": {
              "description": "RNA HGVS - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnahgvs.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "rnaHgvs.not.anyOf",
            "schema": {
              "description": "RNA HGVS - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnahgvs.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA HGVS - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not.exists",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries without a value",
              "title": "Rnareferencesequence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.exists",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries with a value",
              "title": "Rnareferencesequence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for full text matches",
              "title": "Rnareferencesequence",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for full text mismatches",
              "title": "Rnareferencesequence.Not",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.contains",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for partial text matches",
              "title": "Rnareferencesequence.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not.contains",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for partial text mismatches",
              "title": "Rnareferencesequence.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.beginsWith",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries starting with the text",
              "title": "Rnareferencesequence.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not.beginsWith",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries not starting with the text",
              "title": "Rnareferencesequence.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.endsWith",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries ending with the text",
              "title": "Rnareferencesequence.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not.endsWith",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries not ending with the text",
              "title": "Rnareferencesequence.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.anyOf",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnareferencesequence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "rnaReferenceSequence.not.anyOf",
            "schema": {
              "description": "RNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnareferencesequence.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not.exists",
            "schema": {
              "description": "RNA change position - Filter for entries without a value",
              "title": "Rnachangeposition.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA change position - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.exists",
            "schema": {
              "description": "RNA change position - Filter for entries with a value",
              "title": "Rnachangeposition.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA change position - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "rnaChangePosition",
            "schema": {
              "description": "RNA change position - Filter for full text matches",
              "title": "Rnachangeposition",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not",
            "schema": {
              "description": "RNA change position - Filter for full text mismatches",
              "title": "Rnachangeposition.Not",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.contains",
            "schema": {
              "description": "RNA change position - Filter for partial text matches",
              "title": "Rnachangeposition.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not.contains",
            "schema": {
              "description": "RNA change position - Filter for partial text mismatches",
              "title": "Rnachangeposition.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.beginsWith",
            "schema": {
              "description": "RNA change position - Filter for entries starting with the text",
              "title": "Rnachangeposition.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not.beginsWith",
            "schema": {
              "description": "RNA change position - Filter for entries not starting with the text",
              "title": "Rnachangeposition.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.endsWith",
            "schema": {
              "description": "RNA change position - Filter for entries ending with the text",
              "title": "Rnachangeposition.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not.endsWith",
            "schema": {
              "description": "RNA change position - Filter for entries not ending with the text",
              "title": "Rnachangeposition.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "RNA change position - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.anyOf",
            "schema": {
              "description": "RNA change position - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnachangeposition.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA change position - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "rnaChangePosition.not.anyOf",
            "schema": {
              "description": "RNA change position - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Rnachangeposition.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA change position - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "rnaChangeType.not.exists",
            "schema": {
              "description": "RNA change type - Filter for entries without a value",
              "title": "Rnachangetype.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA change type - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "rnaChangeType.exists",
            "schema": {
              "description": "RNA change type - Filter for entries with a value",
              "title": "Rnachangetype.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "RNA change type - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "rnaChangeType",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "substitution",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "inversion",
                    "unchanged",
                    "repetition"
                  ],
                  "title": "RNAChangeType",
                  "type": "string"
                }
              ],
              "description": "RNA change type - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "RNA change type - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "rnaChangeType.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "substitution",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "inversion",
                    "unchanged",
                    "repetition"
                  ],
                  "title": "RNAChangeType",
                  "type": "string"
                }
              ],
              "description": "RNA change type - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "RNA change type - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "rnaChangeType.anyOf",
            "schema": {
              "description": "RNA change type - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition"
                ],
                "title": "RNAChangeType",
                "type": "string"
              },
              "title": "Rnachangetype.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "RNA change type - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not.exists",
            "schema": {
              "description": "Protein HGVS - Filter for entries without a value",
              "title": "Proteinhgvs.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "proteinHgvs.exists",
            "schema": {
              "description": "Protein HGVS - Filter for entries with a value",
              "title": "Proteinhgvs.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "proteinHgvs",
            "schema": {
              "description": "Protein HGVS - Filter for full text matches",
              "title": "Proteinhgvs",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not",
            "schema": {
              "description": "Protein HGVS - Filter for full text mismatches",
              "title": "Proteinhgvs.Not",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "proteinHgvs.contains",
            "schema": {
              "description": "Protein HGVS - Filter for partial text matches",
              "title": "Proteinhgvs.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not.contains",
            "schema": {
              "description": "Protein HGVS - Filter for partial text mismatches",
              "title": "Proteinhgvs.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "proteinHgvs.beginsWith",
            "schema": {
              "description": "Protein HGVS - Filter for entries starting with the text",
              "title": "Proteinhgvs.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not.beginsWith",
            "schema": {
              "description": "Protein HGVS - Filter for entries not starting with the text",
              "title": "Proteinhgvs.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "proteinHgvs.endsWith",
            "schema": {
              "description": "Protein HGVS - Filter for entries ending with the text",
              "title": "Proteinhgvs.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not.endsWith",
            "schema": {
              "description": "Protein HGVS - Filter for entries not ending with the text",
              "title": "Proteinhgvs.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "proteinHgvs.anyOf",
            "schema": {
              "description": "Protein HGVS - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Proteinhgvs.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "proteinHgvs.not.anyOf",
            "schema": {
              "description": "Protein HGVS - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Proteinhgvs.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Protein HGVS - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not.exists",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries without a value",
              "title": "Proteinreferencesequence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.exists",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries with a value",
              "title": "Proteinreferencesequence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for full text matches",
              "title": "Proteinreferencesequence",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for full text mismatches",
              "title": "Proteinreferencesequence.Not",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.contains",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for partial text matches",
              "title": "Proteinreferencesequence.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not.contains",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for partial text mismatches",
              "title": "Proteinreferencesequence.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.beginsWith",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries starting with the text",
              "title": "Proteinreferencesequence.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not.beginsWith",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries not starting with the text",
              "title": "Proteinreferencesequence.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.endsWith",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries ending with the text",
              "title": "Proteinreferencesequence.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not.endsWith",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries not ending with the text",
              "title": "Proteinreferencesequence.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.anyOf",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Proteinreferencesequence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "proteinReferenceSequence.not.anyOf",
            "schema": {
              "description": "Protein HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Proteinreferencesequence.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Protein HGVS RefSeq - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "proteinChangeType.not.exists",
            "schema": {
              "description": "Protein change type - Filter for entries without a value",
              "title": "Proteinchangetype.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein change type - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "proteinChangeType.exists",
            "schema": {
              "description": "Protein change type - Filter for entries with a value",
              "title": "Proteinchangetype.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Protein change type - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "proteinChangeType",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "missense",
                    "nonsense",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "frameshift",
                    "extension",
                    "silent",
                    "no-protein",
                    "unknown",
                    "repetition"
                  ],
                  "title": "ProteinChangeType",
                  "type": "string"
                }
              ],
              "description": "Protein change type - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Protein change type - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "proteinChangeType.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "missense",
                    "nonsense",
                    "deletion-insertion",
                    "insertion",
                    "deletion",
                    "duplication",
                    "frameshift",
                    "extension",
                    "silent",
                    "no-protein",
                    "unknown",
                    "repetition"
                  ],
                  "title": "ProteinChangeType",
                  "type": "string"
                }
              ],
              "description": "Protein change type - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Protein change type - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "proteinChangeType.anyOf",
            "schema": {
              "description": "Protein change type - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "missense",
                  "nonsense",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "frameshift",
                  "extension",
                  "silent",
                  "no-protein",
                  "unknown",
                  "repetition"
                ],
                "title": "ProteinChangeType",
                "type": "string"
              },
              "title": "Proteinchangetype.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Protein change type - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.not.exists",
            "schema": {
              "description": "Variant length - Filter for entries without a value",
              "title": "Nucleotideslength.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Variant length - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.exists",
            "schema": {
              "description": "Variant length - Filter for entries with a value",
              "title": "Nucleotideslength.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Variant length - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.lessThan",
            "schema": {
              "description": "Variant length - Filter for entries with values less than the specified value",
              "title": "Nucleotideslength.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.lessThanOrEqual",
            "schema": {
              "description": "Variant length - Filter for entries with values less than or equal to the specified value",
              "title": "Nucleotideslength.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.greaterThan",
            "schema": {
              "description": "Variant length - Filter for entries with values greater than the specified value",
              "title": "Nucleotideslength.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.greaterThanOrEqual",
            "schema": {
              "description": "Variant length - Filter for entries with values greater than or equal to the specified value",
              "title": "Nucleotideslength.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.equal",
            "schema": {
              "description": "Variant length - Filter for entries with values exactly equal to the specified value",
              "title": "Nucleotideslength.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.not.equal",
            "schema": {
              "description": "Variant length - Filter for entries with values not equal to the specified value",
              "title": "Nucleotideslength.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.between",
            "schema": {
              "description": "Variant length - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Nucleotideslength.Between",
              "type": "array"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "nucleotidesLength.not.between",
            "schema": {
              "description": "Variant length - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Nucleotideslength.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Variant length - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "regions.not.exists",
            "schema": {
              "description": "Gene regions - Filter for entries without a value",
              "title": "Regions.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gene regions - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "regions.exists",
            "schema": {
              "description": "Gene regions - Filter for entries with a value",
              "title": "Regions.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gene regions - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "regions",
            "schema": {
              "description": "Gene regions - Filter for full text matches",
              "title": "Regions",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "regions.not",
            "schema": {
              "description": "Gene regions - Filter for full text mismatches",
              "title": "Regions.Not",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "regions.contains",
            "schema": {
              "description": "Gene regions - Filter for partial text matches",
              "title": "Regions.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "regions.not.contains",
            "schema": {
              "description": "Gene regions - Filter for partial text mismatches",
              "title": "Regions.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "regions.beginsWith",
            "schema": {
              "description": "Gene regions - Filter for entries starting with the text",
              "title": "Regions.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "regions.not.beginsWith",
            "schema": {
              "description": "Gene regions - Filter for entries not starting with the text",
              "title": "Regions.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "regions.endsWith",
            "schema": {
              "description": "Gene regions - Filter for entries ending with the text",
              "title": "Regions.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "regions.not.endsWith",
            "schema": {
              "description": "Gene regions - Filter for entries not ending with the text",
              "title": "Regions.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene regions - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "regions.anyOf",
            "schema": {
              "description": "Gene regions - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Regions.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene regions - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "regions.not.anyOf",
            "schema": {
              "description": "Gene regions - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Regions.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene regions - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "genePanel.not.exists",
            "schema": {
              "description": "Gene panel - Filter for entries without a value",
              "title": "Genepanel.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gene panel - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "genePanel.exists",
            "schema": {
              "description": "Gene panel - Filter for entries with a value",
              "title": "Genepanel.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Gene panel - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "genePanel",
            "schema": {
              "description": "Gene panel - Filter for full text matches",
              "title": "Genepanel",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "genePanel.not",
            "schema": {
              "description": "Gene panel - Filter for full text mismatches",
              "title": "Genepanel.Not",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "genePanel.contains",
            "schema": {
              "description": "Gene panel - Filter for partial text matches",
              "title": "Genepanel.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "genePanel.not.contains",
            "schema": {
              "description": "Gene panel - Filter for partial text mismatches",
              "title": "Genepanel.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "genePanel.beginsWith",
            "schema": {
              "description": "Gene panel - Filter for entries starting with the text",
              "title": "Genepanel.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "genePanel.not.beginsWith",
            "schema": {
              "description": "Gene panel - Filter for entries not starting with the text",
              "title": "Genepanel.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "genePanel.endsWith",
            "schema": {
              "description": "Gene panel - Filter for entries ending with the text",
              "title": "Genepanel.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "genePanel.not.endsWith",
            "schema": {
              "description": "Gene panel - Filter for entries not ending with the text",
              "title": "Genepanel.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Gene panel - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "genePanel.anyOf",
            "schema": {
              "description": "Gene panel - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Genepanel.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene panel - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "genePanel.not.anyOf",
            "schema": {
              "description": "Gene panel - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Genepanel.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene panel - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "assessment.not.exists",
            "schema": {
              "description": "Assessment - Filter for entries without a value",
              "title": "Assessment.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Assessment - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "assessment.exists",
            "schema": {
              "description": "Assessment - Filter for entries with a value",
              "title": "Assessment.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Assessment - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "assessment",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "present",
                    "absent",
                    "no-call",
                    "indeterminate"
                  ],
                  "title": "GenomicVariantAssessmentChoices",
                  "type": "string"
                }
              ],
              "description": "Assessment - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Assessment - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "assessment.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "present",
                    "absent",
                    "no-call",
                    "indeterminate"
                  ],
                  "title": "GenomicVariantAssessmentChoices",
                  "type": "string"
                }
              ],
              "description": "Assessment - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Assessment - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "assessment.anyOf",
            "schema": {
              "description": "Assessment - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "present",
                  "absent",
                  "no-call",
                  "indeterminate"
                ],
                "title": "GenomicVariantAssessmentChoices",
                "type": "string"
              },
              "title": "Assessment.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Assessment - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "confidence.not.exists",
            "schema": {
              "description": "Confidence - Filter for entries without a value",
              "title": "Confidence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Confidence - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "confidence.exists",
            "schema": {
              "description": "Confidence - Filter for entries with a value",
              "title": "Confidence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Confidence - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "confidence",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "low",
                    "high",
                    "indeterminate"
                  ],
                  "title": "GenomicVariantConfidenceChoices",
                  "type": "string"
                }
              ],
              "description": "Confidence - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Confidence - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "confidence.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "low",
                    "high",
                    "indeterminate"
                  ],
                  "title": "GenomicVariantConfidenceChoices",
                  "type": "string"
                }
              ],
              "description": "Confidence - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Confidence - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "confidence.anyOf",
            "schema": {
              "description": "Confidence - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "low",
                  "high",
                  "indeterminate"
                ],
                "title": "GenomicVariantConfidenceChoices",
                "type": "string"
              },
              "title": "Confidence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Confidence - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "analysisMethod.not.exists",
            "schema": {
              "description": "Analysis method - Filter for entries without a value",
              "title": "Analysismethod.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Analysis method - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "analysisMethod.exists",
            "schema": {
              "description": "Analysis method - Filter for entries with a value",
              "title": "Analysismethod.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Analysis method - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "analysisMethod",
            "schema": {
              "description": "Analysis method - Filter for a matching concept code",
              "title": "Analysismethod",
              "type": "string"
            },
            "required": false,
            "description": "Analysis method - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "analysisMethod.not",
            "schema": {
              "description": "Analysis method - Filter for a mismatching concept code",
              "title": "Analysismethod.Not",
              "type": "string"
            },
            "required": false,
            "description": "Analysis method - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "analysisMethod.anyOf",
            "schema": {
              "description": "Analysis method - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Analysismethod.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Analysis method - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "analysisMethod.not.anyOf",
            "schema": {
              "description": "Analysis method - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Analysismethod.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Analysis method - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "analysisMethod.descendantsOf",
            "schema": {
              "description": "Analysis method - Filter for all child concepts of a given concepts code",
              "title": "Analysismethod.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Analysis method - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "clinicalRelevance.not.exists",
            "schema": {
              "description": "Clinical relevance - Filter for entries without a value",
              "title": "Clinicalrelevance.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Clinical relevance - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "clinicalRelevance.exists",
            "schema": {
              "description": "Clinical relevance - Filter for entries with a value",
              "title": "Clinicalrelevance.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Clinical relevance - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "clinicalRelevance",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "pathogenic",
                    "likely_pathogenic",
                    "uncertain_significance",
                    "ambiguous",
                    "likely_benign",
                    "benign"
                  ],
                  "title": "GenomicVariantClinicalRelevanceChoices",
                  "type": "string"
                }
              ],
              "description": "Clinical relevance - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Clinical relevance - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "clinicalRelevance.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "pathogenic",
                    "likely_pathogenic",
                    "uncertain_significance",
                    "ambiguous",
                    "likely_benign",
                    "benign"
                  ],
                  "title": "GenomicVariantClinicalRelevanceChoices",
                  "type": "string"
                }
              ],
              "description": "Clinical relevance - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Clinical relevance - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "clinicalRelevance.anyOf",
            "schema": {
              "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "pathogenic",
                  "likely_pathogenic",
                  "uncertain_significance",
                  "ambiguous",
                  "likely_benign",
                  "benign"
                ],
                "title": "GenomicVariantClinicalRelevanceChoices",
                "type": "string"
              },
              "title": "Clinicalrelevance.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.not.exists",
            "schema": {
              "description": "Genome assembly version - Filter for entries without a value",
              "title": "Genomeassemblyversion.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Genome assembly version - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.exists",
            "schema": {
              "description": "Genome assembly version - Filter for entries with a value",
              "title": "Genomeassemblyversion.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Genome assembly version - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion",
            "schema": {
              "description": "Genome assembly version - Filter for a matching concept code",
              "title": "Genomeassemblyversion",
              "type": "string"
            },
            "required": false,
            "description": "Genome assembly version - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.not",
            "schema": {
              "description": "Genome assembly version - Filter for a mismatching concept code",
              "title": "Genomeassemblyversion.Not",
              "type": "string"
            },
            "required": false,
            "description": "Genome assembly version - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.anyOf",
            "schema": {
              "description": "Genome assembly version - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genomeassemblyversion.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Genome assembly version - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.not.anyOf",
            "schema": {
              "description": "Genome assembly version - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genomeassemblyversion.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Genome assembly version - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "genomeAssemblyVersion.descendantsOf",
            "schema": {
              "description": "Genome assembly version - Filter for all child concepts of a given concepts code",
              "title": "Genomeassemblyversion.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Genome assembly version - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "molecularConsequence.not.exists",
            "schema": {
              "description": "Molecular consequence - Filter for entries without a value",
              "title": "Molecularconsequence.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Molecular consequence - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "molecularConsequence.exists",
            "schema": {
              "description": "Molecular consequence - Filter for entries with a value",
              "title": "Molecularconsequence.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Molecular consequence - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "molecularConsequence",
            "schema": {
              "description": "Molecular consequence - Filter for a matching concept code",
              "title": "Molecularconsequence",
              "type": "string"
            },
            "required": false,
            "description": "Molecular consequence - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "molecularConsequence.not",
            "schema": {
              "description": "Molecular consequence - Filter for a mismatching concept code",
              "title": "Molecularconsequence.Not",
              "type": "string"
            },
            "required": false,
            "description": "Molecular consequence - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "molecularConsequence.anyOf",
            "schema": {
              "description": "Molecular consequence - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Molecularconsequence.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Molecular consequence - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "molecularConsequence.not.anyOf",
            "schema": {
              "description": "Molecular consequence - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Molecularconsequence.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Molecular consequence - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "molecularConsequence.descendantsOf",
            "schema": {
              "description": "Molecular consequence - Filter for all child concepts of a given concepts code",
              "title": "Molecularconsequence.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Molecular consequence - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "copyNumber.not.exists",
            "schema": {
              "description": "Copy number - Filter for entries without a value",
              "title": "Copynumber.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Copy number - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "copyNumber.exists",
            "schema": {
              "description": "Copy number - Filter for entries with a value",
              "title": "Copynumber.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Copy number - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "copyNumber.lessThan",
            "schema": {
              "description": "Copy number - Filter for entries with values less than the specified value",
              "title": "Copynumber.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.lessThanOrEqual",
            "schema": {
              "description": "Copy number - Filter for entries with values less than or equal to the specified value",
              "title": "Copynumber.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.greaterThan",
            "schema": {
              "description": "Copy number - Filter for entries with values greater than the specified value",
              "title": "Copynumber.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.greaterThanOrEqual",
            "schema": {
              "description": "Copy number - Filter for entries with values greater than or equal to the specified value",
              "title": "Copynumber.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.equal",
            "schema": {
              "description": "Copy number - Filter for entries with values exactly equal to the specified value",
              "title": "Copynumber.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.not.equal",
            "schema": {
              "description": "Copy number - Filter for entries with values not equal to the specified value",
              "title": "Copynumber.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "copyNumber.between",
            "schema": {
              "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Copynumber.Between",
              "type": "array"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "copyNumber.not.between",
            "schema": {
              "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Copynumber.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Copy number - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "alleleFrequency.not.exists",
            "schema": {
              "description": "Allele frequency - Filter for entries without a value",
              "title": "Allelefrequency.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.exists",
            "schema": {
              "description": "Allele frequency - Filter for entries with a value",
              "title": "Allelefrequency.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.lessThan",
            "schema": {
              "description": "Allele frequency - Filter for entries with values less than the specified value",
              "title": "Allelefrequency.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.lessThanOrEqual",
            "schema": {
              "description": "Allele frequency - Filter for entries with values less than or equal to the specified value",
              "title": "Allelefrequency.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.greaterThan",
            "schema": {
              "description": "Allele frequency - Filter for entries with values greater than the specified value",
              "title": "Allelefrequency.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.greaterThanOrEqual",
            "schema": {
              "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value",
              "title": "Allelefrequency.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.equal",
            "schema": {
              "description": "Allele frequency - Filter for entries with values exactly equal to the specified value",
              "title": "Allelefrequency.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.not.equal",
            "schema": {
              "description": "Allele frequency - Filter for entries with values not equal to the specified value",
              "title": "Allelefrequency.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleFrequency.between",
            "schema": {
              "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Allelefrequency.Between",
              "type": "array"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "alleleFrequency.not.between",
            "schema": {
              "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Allelefrequency.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "alleleDepth.not.exists",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries without a value",
              "title": "Alleledepth.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "alleleDepth.exists",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with a value",
              "title": "Alleledepth.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "alleleDepth.lessThan",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values less than the specified value",
              "title": "Alleledepth.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.lessThanOrEqual",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value",
              "title": "Alleledepth.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.greaterThan",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values greater than the specified value",
              "title": "Alleledepth.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.greaterThanOrEqual",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value",
              "title": "Alleledepth.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.equal",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value",
              "title": "Alleledepth.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.not.equal",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value",
              "title": "Alleledepth.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "alleleDepth.between",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Alleledepth.Between",
              "type": "array"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "alleleDepth.not.between",
            "schema": {
              "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Alleledepth.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "zygosity.not.exists",
            "schema": {
              "description": "Zygosity - Filter for entries without a value",
              "title": "Zygosity.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Zygosity - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "zygosity.exists",
            "schema": {
              "description": "Zygosity - Filter for entries with a value",
              "title": "Zygosity.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Zygosity - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "zygosity",
            "schema": {
              "description": "Zygosity - Filter for a matching concept code",
              "title": "Zygosity",
              "type": "string"
            },
            "required": false,
            "description": "Zygosity - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "zygosity.not",
            "schema": {
              "description": "Zygosity - Filter for a mismatching concept code",
              "title": "Zygosity.Not",
              "type": "string"
            },
            "required": false,
            "description": "Zygosity - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "zygosity.anyOf",
            "schema": {
              "description": "Zygosity - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Zygosity.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Zygosity - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "zygosity.not.anyOf",
            "schema": {
              "description": "Zygosity - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Zygosity.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Zygosity - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "zygosity.descendantsOf",
            "schema": {
              "description": "Zygosity - Filter for all child concepts of a given concepts code",
              "title": "Zygosity.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Zygosity - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "inheritance.not.exists",
            "schema": {
              "description": "Inheritance - Filter for entries without a value",
              "title": "Inheritance.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Inheritance - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "inheritance.exists",
            "schema": {
              "description": "Inheritance - Filter for entries with a value",
              "title": "Inheritance.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Inheritance - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "inheritance",
            "schema": {
              "description": "Inheritance - Filter for a matching concept code",
              "title": "Inheritance",
              "type": "string"
            },
            "required": false,
            "description": "Inheritance - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "inheritance.not",
            "schema": {
              "description": "Inheritance - Filter for a mismatching concept code",
              "title": "Inheritance.Not",
              "type": "string"
            },
            "required": false,
            "description": "Inheritance - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "inheritance.anyOf",
            "schema": {
              "description": "Inheritance - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Inheritance.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Inheritance - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "inheritance.not.anyOf",
            "schema": {
              "description": "Inheritance - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Inheritance.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Inheritance - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "inheritance.descendantsOf",
            "schema": {
              "description": "Inheritance - Filter for all child concepts of a given concepts code",
              "title": "Inheritance.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Inheritance - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "coordinateSystem.not.exists",
            "schema": {
              "description": "Coordinate system - Filter for entries without a value",
              "title": "Coordinatesystem.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Coordinate system - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "coordinateSystem.exists",
            "schema": {
              "description": "Coordinate system - Filter for entries with a value",
              "title": "Coordinatesystem.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Coordinate system - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "coordinateSystem",
            "schema": {
              "description": "Coordinate system - Filter for a matching concept code",
              "title": "Coordinatesystem",
              "type": "string"
            },
            "required": false,
            "description": "Coordinate system - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "coordinateSystem.not",
            "schema": {
              "description": "Coordinate system - Filter for a mismatching concept code",
              "title": "Coordinatesystem.Not",
              "type": "string"
            },
            "required": false,
            "description": "Coordinate system - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "coordinateSystem.anyOf",
            "schema": {
              "description": "Coordinate system - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Coordinatesystem.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Coordinate system - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "coordinateSystem.not.anyOf",
            "schema": {
              "description": "Coordinate system - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Coordinatesystem.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Coordinate system - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "coordinateSystem.descendantsOf",
            "schema": {
              "description": "Coordinate system - Filter for all child concepts of a given concepts code",
              "title": "Coordinatesystem.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Coordinate system - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "clinvar.not.exists",
            "schema": {
              "description": "ClinVar accession number - Filter for entries without a value",
              "title": "Clinvar.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "clinvar.exists",
            "schema": {
              "description": "ClinVar accession number - Filter for entries with a value",
              "title": "Clinvar.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "clinvar",
            "schema": {
              "description": "ClinVar accession number - Filter for full text matches",
              "title": "Clinvar",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "clinvar.not",
            "schema": {
              "description": "ClinVar accession number - Filter for full text mismatches",
              "title": "Clinvar.Not",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "clinvar.contains",
            "schema": {
              "description": "ClinVar accession number - Filter for partial text matches",
              "title": "Clinvar.Contains",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "clinvar.not.contains",
            "schema": {
              "description": "ClinVar accession number - Filter for partial text mismatches",
              "title": "Clinvar.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "clinvar.beginsWith",
            "schema": {
              "description": "ClinVar accession number - Filter for entries starting with the text",
              "title": "Clinvar.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "clinvar.not.beginsWith",
            "schema": {
              "description": "ClinVar accession number - Filter for entries not starting with the text",
              "title": "Clinvar.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "clinvar.endsWith",
            "schema": {
              "description": "ClinVar accession number - Filter for entries ending with the text",
              "title": "Clinvar.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "clinvar.not.endsWith",
            "schema": {
              "description": "ClinVar accession number - Filter for entries not ending with the text",
              "title": "Clinvar.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "clinvar.anyOf",
            "schema": {
              "description": "ClinVar accession number - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinvar.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "clinvar.not.anyOf",
            "schema": {
              "description": "ClinVar accession number - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Clinvar.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "ClinVar accession number - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "genes",
            "schema": {
              "description": "Gene(s) - Filter for a matching concept code",
              "title": "Genes",
              "type": "string"
            },
            "required": false,
            "description": "Gene(s) - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "genes.not",
            "schema": {
              "description": "Gene(s) - Filter for a mismatching concept code",
              "title": "Genes.Not",
              "type": "string"
            },
            "required": false,
            "description": "Gene(s) - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "genes.anyOf",
            "schema": {
              "description": "Gene(s) - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genes.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene(s) - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "genes.not.anyOf",
            "schema": {
              "description": "Gene(s) - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Genes.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Gene(s) - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "genes.descendantsOf",
            "schema": {
              "description": "Gene(s) - Filter for all child concepts of a given concepts code",
              "title": "Genes.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Gene(s) - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "genes.allOf",
            "schema": {
              "description": "Gene(s) - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Genes.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Gene(s) - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "genes.not.allOf",
            "schema": {
              "description": "Gene(s) - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Genes.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Gene(s) - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_GenomicVariant_"
                }
              }
            }
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createGenomicVariant",
        "summary": "Create Genomic Variant",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenomicVariantCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-variants/{genomicVariantId}": {
      "get": {
        "operationId": "getGenomicVariantById",
        "summary": "Get Genomic Variant By Id",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenomicVariant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateGenomicVariant",
        "summary": "Update Genomic Variant",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenomicVariantCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteGenomicVariant",
        "summary": "Delete Genomic Variant",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-variants/{genomicVariantId}/history/events": {
      "get": {
        "operationId": "getAllGenomicVariantHistoryEvents",
        "summary": "Get All Genomic Variant History Events",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-variants/{genomicVariantId}/history/events/{eventId}": {
      "get": {
        "operationId": "getGenomicVariantHistoryEventById",
        "summary": "Get Genomic Variant History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-variants/{genomicVariantId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertGenomicVariantToHistoryEvent",
        "summary": "Revert Genomic Variant To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "genomicVariantId",
            "schema": {
              "title": "Genomicvariantid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Variants"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-signatures": {
      "get": {
        "operationId": "getGenomicSignatures",
        "summary": "Get All Genomic Signatures Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "tumor_mutational_burden",
                    "loss_of_heterozygosity",
                    "microsatellite_instability",
                    "homologous_recombination_deficiency",
                    "tumor_neoantigen_burden",
                    "aneuploid_score"
                  ],
                  "title": "GenomicSignatureTypes",
                  "type": "string"
                }
              ],
              "description": "None - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "None - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "category.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "tumor_mutational_burden",
                    "loss_of_heterozygosity",
                    "microsatellite_instability",
                    "homologous_recombination_deficiency",
                    "tumor_neoantigen_burden",
                    "aneuploid_score"
                  ],
                  "title": "GenomicSignatureTypes",
                  "type": "string"
                }
              ],
              "description": "None - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "None - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "category.anyOf",
            "schema": {
              "description": "None - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "tumor_mutational_burden",
                  "loss_of_heterozygosity",
                  "microsatellite_instability",
                  "homologous_recombination_deficiency",
                  "tumor_neoantigen_burden",
                  "aneuploid_score"
                ],
                "title": "GenomicSignatureTypes",
                "type": "string"
              },
              "title": "Category.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AnyGenomicSignature_"
                }
              }
            }
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createGenomicSignature",
        "summary": "Create Genomic Signature",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TumorMutationalBurdenCreate"
                  },
                  {
                    "$ref": "#/components/schemas/MicrosatelliteInstabilityCreate"
                  },
                  {
                    "$ref": "#/components/schemas/LossOfHeterozygosityCreate"
                  },
                  {
                    "$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreate"
                  },
                  {
                    "$ref": "#/components/schemas/TumorNeoantigenBurdenCreate"
                  },
                  {
                    "$ref": "#/components/schemas/AneuploidScoreCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-signatures/{genomicSignatureId}": {
      "get": {
        "operationId": "getGenomicSignatureById",
        "summary": "Get Genomic Signature By Id",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyGenomicSignature"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateGenomicSignatureById",
        "summary": "Update Genomic Signature",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TumorMutationalBurdenCreate"
                  },
                  {
                    "$ref": "#/components/schemas/MicrosatelliteInstabilityCreate"
                  },
                  {
                    "$ref": "#/components/schemas/LossOfHeterozygosityCreate"
                  },
                  {
                    "$ref": "#/components/schemas/HomologousRecombinationDeficiencyCreate"
                  },
                  {
                    "$ref": "#/components/schemas/TumorNeoantigenBurdenCreate"
                  },
                  {
                    "$ref": "#/components/schemas/AneuploidScoreCreate"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteGenomicSignatureById",
        "summary": "Delete Genomic Signature",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-signatures/{genomicSignatureId}/history/events": {
      "get": {
        "operationId": "getAllGenomicSignatureHistoryEvents",
        "summary": "Get All Genomic Signature History Events",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEvent_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-signatures/{genomicSignatureId}/history/events/{eventId}": {
      "get": {
        "operationId": "getGenomicSignatureHistoryEventById",
        "summary": "Get Genomic Signature History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEvent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/genomic-signatures/{genomicSignatureId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertGenomicSignatureToHistoryEvent",
        "summary": "Revert Genomic Signature To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "genomicSignatureId",
            "schema": {
              "title": "Genomicsignatureid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Genomic Signatures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/lifestyles": {
      "get": {
        "operationId": "getLifestyles",
        "summary": "Get All Lifestyles Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "smokingStatus.not.exists",
            "schema": {
              "description": "Alcohol consumption - Filter for entries without a value",
              "title": "Smokingstatus.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "smokingStatus.exists",
            "schema": {
              "description": "Alcohol consumption - Filter for entries with a value",
              "title": "Smokingstatus.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "smokingStatus",
            "schema": {
              "description": "Alcohol consumption - Filter for a matching concept code",
              "title": "Smokingstatus",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "smokingStatus.not",
            "schema": {
              "description": "Alcohol consumption - Filter for a mismatching concept code",
              "title": "Smokingstatus.Not",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "smokingStatus.anyOf",
            "schema": {
              "description": "Alcohol consumption - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Smokingstatus.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "smokingStatus.not.anyOf",
            "schema": {
              "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Smokingstatus.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "smokingStatus.descendantsOf",
            "schema": {
              "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
              "title": "Smokingstatus.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "smokingPackyears.not.exists",
            "schema": {
              "description": "Smoking packyears - Filter for entries without a value",
              "title": "Smokingpackyears.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.exists",
            "schema": {
              "description": "Smoking packyears - Filter for entries with a value",
              "title": "Smokingpackyears.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.lessThan",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values less than the specified value",
              "title": "Smokingpackyears.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.lessThanOrEqual",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value",
              "title": "Smokingpackyears.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.greaterThan",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values greater than the specified value",
              "title": "Smokingpackyears.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.greaterThanOrEqual",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value",
              "title": "Smokingpackyears.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.equal",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value",
              "title": "Smokingpackyears.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.not.equal",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values not equal to the specified value",
              "title": "Smokingpackyears.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingPackyears.between",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Smokingpackyears.Between",
              "type": "array"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "smokingPackyears.not.between",
            "schema": {
              "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Smokingpackyears.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "smokingQuited.not.exists",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries without a value",
              "title": "Smokingquited.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "smokingQuited.exists",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with a value",
              "title": "Smokingquited.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "smokingQuited.lessThan",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values less than the specified value",
              "title": "Smokingquited.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.lessThanOrEqual",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value",
              "title": "Smokingquited.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.greaterThan",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values greater than the specified value",
              "title": "Smokingquited.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.greaterThanOrEqual",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value",
              "title": "Smokingquited.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.equal",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value",
              "title": "Smokingquited.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.not.equal",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value",
              "title": "Smokingquited.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "smokingQuited.between",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Smokingquited.Between",
              "type": "array"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "smokingQuited.not.between",
            "schema": {
              "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Smokingquited.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.not.exists",
            "schema": {
              "description": "Alcohol consumption - Filter for entries without a value",
              "title": "Alcoholconsumption.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.exists",
            "schema": {
              "description": "Alcohol consumption - Filter for entries with a value",
              "title": "Alcoholconsumption.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "alcoholConsumption",
            "schema": {
              "description": "Alcohol consumption - Filter for a matching concept code",
              "title": "Alcoholconsumption",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.not",
            "schema": {
              "description": "Alcohol consumption - Filter for a mismatching concept code",
              "title": "Alcoholconsumption.Not",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.anyOf",
            "schema": {
              "description": "Alcohol consumption - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Alcoholconsumption.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.not.anyOf",
            "schema": {
              "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Alcoholconsumption.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "alcoholConsumption.descendantsOf",
            "schema": {
              "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
              "title": "Alcoholconsumption.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Alcohol consumption - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "nightSleep.not.exists",
            "schema": {
              "description": "Night sleep - Filter for entries without a value",
              "title": "Nightsleep.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Night sleep - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "nightSleep.exists",
            "schema": {
              "description": "Night sleep - Filter for entries with a value",
              "title": "Nightsleep.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "nightSleep.lessThan",
            "schema": {
              "description": "Night sleep - Filter for entries with values less than the specified value",
              "title": "Nightsleep.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.lessThanOrEqual",
            "schema": {
              "description": "Night sleep - Filter for entries with values less than or equal to the specified value",
              "title": "Nightsleep.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.greaterThan",
            "schema": {
              "description": "Night sleep - Filter for entries with values greater than the specified value",
              "title": "Nightsleep.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.greaterThanOrEqual",
            "schema": {
              "description": "Night sleep - Filter for entries with values greater than or equal to the specified value",
              "title": "Nightsleep.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.equal",
            "schema": {
              "description": "Night sleep - Filter for entries with values exactly equal to the specified value",
              "title": "Nightsleep.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.not.equal",
            "schema": {
              "description": "Night sleep - Filter for entries with values not equal to the specified value",
              "title": "Nightsleep.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "nightSleep.between",
            "schema": {
              "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Nightsleep.Between",
              "type": "array"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "nightSleep.not.between",
            "schema": {
              "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Nightsleep.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Night sleep - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.not.exists",
            "schema": {
              "description": "Recreational drugs - Filter for entries without a value",
              "title": "Recreationaldrugs.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Recreational drugs - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.exists",
            "schema": {
              "description": "Recreational drugs - Filter for entries with a value",
              "title": "Recreationaldrugs.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Recreational drugs - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "recreationalDrugs",
            "schema": {
              "description": "Recreational drugs - Filter for a matching concept code",
              "title": "Recreationaldrugs",
              "type": "string"
            },
            "required": false,
            "description": "Recreational drugs - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.not",
            "schema": {
              "description": "Recreational drugs - Filter for a mismatching concept code",
              "title": "Recreationaldrugs.Not",
              "type": "string"
            },
            "required": false,
            "description": "Recreational drugs - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.anyOf",
            "schema": {
              "description": "Recreational drugs - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recreationaldrugs.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Recreational drugs - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.not.anyOf",
            "schema": {
              "description": "Recreational drugs - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Recreationaldrugs.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Recreational drugs - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.descendantsOf",
            "schema": {
              "description": "Recreational drugs - Filter for all child concepts of a given concepts code",
              "title": "Recreationaldrugs.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Recreational drugs - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.allOf",
            "schema": {
              "description": "Recreational drugs - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Recreationaldrugs.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Recreational drugs - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "recreationalDrugs.not.allOf",
            "schema": {
              "description": "Recreational drugs - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Recreationaldrugs.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Recreational drugs - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "exposures.not.exists",
            "schema": {
              "description": "Exposures - Filter for entries without a value",
              "title": "Exposures.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Exposures - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "exposures.exists",
            "schema": {
              "description": "Exposures - Filter for entries with a value",
              "title": "Exposures.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Exposures - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "exposures",
            "schema": {
              "description": "Exposures - Filter for a matching concept code",
              "title": "Exposures",
              "type": "string"
            },
            "required": false,
            "description": "Exposures - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "exposures.not",
            "schema": {
              "description": "Exposures - Filter for a mismatching concept code",
              "title": "Exposures.Not",
              "type": "string"
            },
            "required": false,
            "description": "Exposures - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "exposures.anyOf",
            "schema": {
              "description": "Exposures - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Exposures.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Exposures - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "exposures.not.anyOf",
            "schema": {
              "description": "Exposures - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Exposures.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Exposures - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "exposures.descendantsOf",
            "schema": {
              "description": "Exposures - Filter for all child concepts of a given concepts code",
              "title": "Exposures.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Exposures - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "exposures.allOf",
            "schema": {
              "description": "Exposures - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Exposures.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Exposures - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "exposures.not.allOf",
            "schema": {
              "description": "Exposures - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Exposures.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Exposures - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Lifestyle_"
                }
              }
            }
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createLifestyle",
        "summary": "Create Lifestyle",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LifestyleCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/lifestyles/{lifestyleId}": {
      "get": {
        "operationId": "getLifestyleById",
        "summary": "Get Lifestyle By Id",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lifestyle"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateLifestyleById",
        "summary": "Update Lifestyle",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LifestyleCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteLifestyleById",
        "summary": "Delete Lifestyle",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/lifestyles/{lifestyleId}/history/events": {
      "get": {
        "operationId": "getAllLifestyleHistoryEvents",
        "summary": "Get All Lifestyle History Events",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/lifestyles/{lifestyleId}/history/events/{eventId}": {
      "get": {
        "operationId": "getLifestyleHistoryEventById",
        "summary": "Get Lifestyle History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/lifestyles/{lifestyleId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertLifestyleToHistoryEvent",
        "summary": "Revert Lifestyle To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "lifestyleId",
            "schema": {
              "title": "Lifestyleid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Lifestyles"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/family-histories": {
      "get": {
        "operationId": "getFamilyHistories",
        "summary": "Get All Family Member Histories Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "relationship",
            "schema": {
              "description": "Relationship - Filter for a matching concept code",
              "title": "Relationship",
              "type": "string"
            },
            "required": false,
            "description": "Relationship - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "relationship.not",
            "schema": {
              "description": "Relationship - Filter for a mismatching concept code",
              "title": "Relationship.Not",
              "type": "string"
            },
            "required": false,
            "description": "Relationship - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "relationship.anyOf",
            "schema": {
              "description": "Relationship - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Relationship.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Relationship - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "relationship.not.anyOf",
            "schema": {
              "description": "Relationship - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Relationship.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Relationship - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "relationship.descendantsOf",
            "schema": {
              "description": "Relationship - Filter for all child concepts of a given concepts code",
              "title": "Relationship.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Relationship - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "hadCancer",
            "schema": {
              "description": "Had cancer - ('Filter for yes/no statement',)",
              "title": "Hadcancer",
              "type": "boolean"
            },
            "required": false,
            "description": "Had cancer - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "contributedToDeath.not.exists",
            "schema": {
              "description": "Contributed to death - Filter for entries without a value",
              "title": "Contributedtodeath.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Contributed to death - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "contributedToDeath.exists",
            "schema": {
              "description": "Contributed to death - Filter for entries with a value",
              "title": "Contributedtodeath.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Contributed to death - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "contributedToDeath",
            "schema": {
              "description": "Contributed to death - ('Filter for yes/no statement',)",
              "title": "Contributedtodeath",
              "type": "boolean"
            },
            "required": false,
            "description": "Contributed to death - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "onsetAge.not.exists",
            "schema": {
              "description": "Onset age - Filter for entries without a value",
              "title": "Onsetage.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Onset age - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "onsetAge.exists",
            "schema": {
              "description": "Onset age - Filter for entries with a value",
              "title": "Onsetage.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Onset age - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "onsetAge.lessThan",
            "schema": {
              "description": "Onset age - Filter for entries with values less than the specified value",
              "title": "Onsetage.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.lessThanOrEqual",
            "schema": {
              "description": "Onset age - Filter for entries with values less than or equal to the specified value",
              "title": "Onsetage.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.greaterThan",
            "schema": {
              "description": "Onset age - Filter for entries with values greater than the specified value",
              "title": "Onsetage.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.greaterThanOrEqual",
            "schema": {
              "description": "Onset age - Filter for entries with values greater than or equal to the specified value",
              "title": "Onsetage.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.equal",
            "schema": {
              "description": "Onset age - Filter for entries with values exactly equal to the specified value",
              "title": "Onsetage.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.not.equal",
            "schema": {
              "description": "Onset age - Filter for entries with values not equal to the specified value",
              "title": "Onsetage.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "onsetAge.between",
            "schema": {
              "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Onsetage.Between",
              "type": "array"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "onsetAge.not.between",
            "schema": {
              "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Onsetage.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Onset age - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "topography.not.exists",
            "schema": {
              "description": "Topography - Filter for entries without a value",
              "title": "Topography.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Topography - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "topography.exists",
            "schema": {
              "description": "Topography - Filter for entries with a value",
              "title": "Topography.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Topography - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "topography",
            "schema": {
              "description": "Topography - Filter for a matching concept code",
              "title": "Topography",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "topography.not",
            "schema": {
              "description": "Topography - Filter for a mismatching concept code",
              "title": "Topography.Not",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "topography.anyOf",
            "schema": {
              "description": "Topography - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topography.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topography - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "topography.not.anyOf",
            "schema": {
              "description": "Topography - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Topography.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Topography - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "topography.descendantsOf",
            "schema": {
              "description": "Topography - Filter for all child concepts of a given concepts code",
              "title": "Topography.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Topography - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "morphology.not.exists",
            "schema": {
              "description": "Morphology - Filter for entries without a value",
              "title": "Morphology.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Morphology - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "morphology.exists",
            "schema": {
              "description": "Morphology - Filter for entries with a value",
              "title": "Morphology.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Morphology - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "morphology",
            "schema": {
              "description": "Morphology - Filter for a matching concept code",
              "title": "Morphology",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "morphology.not",
            "schema": {
              "description": "Morphology - Filter for a mismatching concept code",
              "title": "Morphology.Not",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "morphology.anyOf",
            "schema": {
              "description": "Morphology - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Morphology.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Morphology - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "morphology.not.anyOf",
            "schema": {
              "description": "Morphology - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Morphology.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Morphology - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "morphology.descendantsOf",
            "schema": {
              "description": "Morphology - Filter for all child concepts of a given concepts code",
              "title": "Morphology.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Morphology - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_FamilyHistory_"
                }
              }
            }
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createFamilyHistory",
        "summary": "Create Family History",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FamilyHistoryCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/family-histories/{familyHistoryId}": {
      "get": {
        "operationId": "getFamilyHistoryById",
        "summary": "Get Family History By Id",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FamilyHistory"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteFamilyHistoryById",
        "summary": "Delete Family History",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateFamilyHistory",
        "summary": "Update Family History",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FamilyHistoryCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/family-histories/{familyHistoryId}/history/events": {
      "get": {
        "operationId": "getAllFamilyHistoryHistoryEvents",
        "summary": "Get All Family History History Events",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/family-histories/{familyHistoryId}/history/events/{eventId}": {
      "get": {
        "operationId": "getFamilyHistoryHistoryEventById",
        "summary": "Get Family History History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/family-histories/{familyHistoryId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertFamilyHistoryToHistoryEvent",
        "summary": "Revert Family History To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "familyHistoryId",
            "schema": {
              "title": "Familyhistoryid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Family Histories"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments": {
      "get": {
        "operationId": "getComorbiditiesAssessments",
        "summary": "Get All Comorbidities Assessments Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "score.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Score.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "score.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Score.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "score.lessThan",
            "schema": {
              "description": "None - Filter for entries with values less than the specified value",
              "title": "Score.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "score.lessThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values less than or equal to the specified value",
              "title": "Score.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.greaterThan",
            "schema": {
              "description": "None - Filter for entries with values greater than the specified value",
              "title": "Score.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "score.greaterThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values greater than or equal to the specified value",
              "title": "Score.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.equal",
            "schema": {
              "description": "None - Filter for entries with values exactly equal to the specified value",
              "title": "Score.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.not.equal",
            "schema": {
              "description": "None - Filter for entries with values not equal to the specified value",
              "title": "Score.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "None - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "score.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Score.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "score.not.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Score.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "indexConditionId",
            "schema": {
              "description": "Index neoplastic entity - Filter for reference matches",
              "title": "Indexconditionid",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "indexConditionId.not",
            "schema": {
              "description": "Index neoplastic entity - Filter for reference mismatches",
              "title": "Indexconditionid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "indexConditionId.contains",
            "schema": {
              "description": "Index neoplastic entity - Filter for partial text matches",
              "title": "Indexconditionid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "indexConditionId.not.contains",
            "schema": {
              "description": "Index neoplastic entity - Filter for partial text mismatches",
              "title": "Indexconditionid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "indexConditionId.beginsWith",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries starting with the text",
              "title": "Indexconditionid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "indexConditionId.not.beginsWith",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries not starting with the text",
              "title": "Indexconditionid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "indexConditionId.endsWith",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries ending with the text",
              "title": "Indexconditionid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "indexConditionId.not.endsWith",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries not ending with the text",
              "title": "Indexconditionid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "indexConditionId.anyOf",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Indexconditionid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "indexConditionId.not.anyOf",
            "schema": {
              "description": "Index neoplastic entity - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Indexconditionid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Index neoplastic entity - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "panel.not.exists",
            "schema": {
              "description": "Panel - Filter for entries without a value",
              "title": "Panel.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Panel - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "panel.exists",
            "schema": {
              "description": "Panel - Filter for entries with a value",
              "title": "Panel.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Panel - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "panel",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "Charlson",
                    "Elixhauser",
                    "NCI"
                  ],
                  "title": "ComorbiditiesAssessmentPanelChoices",
                  "type": "string"
                }
              ],
              "description": "Panel - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "Panel - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "panel.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "Charlson",
                    "Elixhauser",
                    "NCI"
                  ],
                  "title": "ComorbiditiesAssessmentPanelChoices",
                  "type": "string"
                }
              ],
              "description": "Panel - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "Panel - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "panel.anyOf",
            "schema": {
              "description": "Panel - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "Charlson",
                  "Elixhauser",
                  "NCI"
                ],
                "title": "ComorbiditiesAssessmentPanelChoices",
                "type": "string"
              },
              "title": "Panel.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Panel - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "presentConditions.not.exists",
            "schema": {
              "description": "Present comorbid conditions - Filter for entries without a value",
              "title": "Presentconditions.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "presentConditions.exists",
            "schema": {
              "description": "Present comorbid conditions - Filter for entries with a value",
              "title": "Presentconditions.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "presentConditions",
            "schema": {
              "description": "Present comorbid conditions - Filter for a matching concept code",
              "title": "Presentconditions",
              "type": "string"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "presentConditions.not",
            "schema": {
              "description": "Present comorbid conditions - Filter for a mismatching concept code",
              "title": "Presentconditions.Not",
              "type": "string"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "presentConditions.anyOf",
            "schema": {
              "description": "Present comorbid conditions - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Presentconditions.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "presentConditions.not.anyOf",
            "schema": {
              "description": "Present comorbid conditions - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Presentconditions.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "presentConditions.descendantsOf",
            "schema": {
              "description": "Present comorbid conditions - Filter for all child concepts of a given concepts code",
              "title": "Presentconditions.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "presentConditions.allOf",
            "schema": {
              "description": "Present comorbid conditions - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Presentconditions.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "presentConditions.not.allOf",
            "schema": {
              "description": "Present comorbid conditions - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Presentconditions.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Present comorbid conditions - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "absentConditions.not.exists",
            "schema": {
              "description": "Absent comorbid conditions - Filter for entries without a value",
              "title": "Absentconditions.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "absentConditions.exists",
            "schema": {
              "description": "Absent comorbid conditions - Filter for entries with a value",
              "title": "Absentconditions.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "absentConditions",
            "schema": {
              "description": "Absent comorbid conditions - Filter for a matching concept code",
              "title": "Absentconditions",
              "type": "string"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for a matching concept code"
          },
          {
            "in": "query",
            "name": "absentConditions.not",
            "schema": {
              "description": "Absent comorbid conditions - Filter for a mismatching concept code",
              "title": "Absentconditions.Not",
              "type": "string"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for a mismatching concept code"
          },
          {
            "in": "query",
            "name": "absentConditions.anyOf",
            "schema": {
              "description": "Absent comorbid conditions - Filter for a matching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Absentconditions.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for a matching set of concept codes"
          },
          {
            "in": "query",
            "name": "absentConditions.not.anyOf",
            "schema": {
              "description": "Absent comorbid conditions - Filter for a mismmatching set of concept codes",
              "items": {
                "type": "string"
              },
              "title": "Absentconditions.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for a mismmatching set of concept codes"
          },
          {
            "in": "query",
            "name": "absentConditions.descendantsOf",
            "schema": {
              "description": "Absent comorbid conditions - Filter for all child concepts of a given concepts code",
              "title": "Absentconditions.Descendantsof",
              "type": "string"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for all child concepts of a given concepts code"
          },
          {
            "in": "query",
            "name": "absentConditions.allOf",
            "schema": {
              "description": "Absent comorbid conditions - Filter for entries matching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Absentconditions.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for entries matching all of the concepts"
          },
          {
            "in": "query",
            "name": "absentConditions.not.allOf",
            "schema": {
              "description": "Absent comorbid conditions - Filter for entries mismatching all of the concepts",
              "items": {
                "type": "string"
              },
              "title": "Absentconditions.Not.Allof",
              "type": "array"
            },
            "required": false,
            "description": "Absent comorbid conditions - Filter for entries mismatching all of the concepts"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_ComorbiditiesAssessment_"
                }
              }
            }
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createComorbiditiesAssessment",
        "summary": "Create Comorbidities Assessment",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComorbiditiesAssessmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/{comorbiditiesAssessmentId}": {
      "get": {
        "operationId": "getComorbiditiesAssessmentById",
        "summary": "Get Comorbidities Assessment By Id",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComorbiditiesAssessment"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteComorbiditiesAssessment",
        "summary": "Delete Comorbidities Assessment",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateComorbiditiesAssessment",
        "summary": "Update Comorbidities Assessment",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComorbiditiesAssessmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/{comorbiditiesAssessmentId}/history/events": {
      "get": {
        "operationId": "getAllComorbiditiesAssessmentHistoryEvents",
        "summary": "Get All Comorbidities Assessment History Events",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/{comorbiditiesAssessmentId}/history/events/{eventId}": {
      "get": {
        "operationId": "getComorbiditiesAssessmentHistoryEventById",
        "summary": "Get Comorbidities Assessment History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/{comorbiditiesAssessmentId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertComorbiditiesAssessmentToHistoryEvent",
        "summary": "Revert Comorbidities Assessment To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "comorbiditiesAssessmentId",
            "schema": {
              "title": "Comorbiditiesassessmentid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/meta/panels": {
      "get": {
        "operationId": "getComorbiditiesPanels",
        "summary": "Get All Comorbidities Panels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComorbiditiesPanel"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/comorbidities-assessments/meta/panels/{panel}": {
      "get": {
        "operationId": "getComorbiditiesPanelsByName",
        "summary": "Get Comorbidities Panel By Name",
        "parameters": [
          {
            "in": "path",
            "name": "panel",
            "schema": {
              "title": "Panel",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComorbiditiesPanel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Comorbidities Assessments"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/vitals": {
      "get": {
        "operationId": "getVitals",
        "summary": "Get All Vitals Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "body_mass_index.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Body Mass Index.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "body_mass_index.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Body Mass Index.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "body_mass_index.lessThan",
            "schema": {
              "description": "None - Filter for entries with values less than the specified value",
              "title": "Body Mass Index.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.lessThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values less than or equal to the specified value",
              "title": "Body Mass Index.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.greaterThan",
            "schema": {
              "description": "None - Filter for entries with values greater than the specified value",
              "title": "Body Mass Index.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.greaterThanOrEqual",
            "schema": {
              "description": "None - Filter for entries with values greater than or equal to the specified value",
              "title": "Body Mass Index.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.equal",
            "schema": {
              "description": "None - Filter for entries with values exactly equal to the specified value",
              "title": "Body Mass Index.Equal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.not.equal",
            "schema": {
              "description": "None - Filter for entries with values not equal to the specified value",
              "title": "Body Mass Index.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "None - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "body_mass_index.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Body Mass Index.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "body_mass_index.not.between",
            "schema": {
              "description": "None - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Body Mass Index.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "caseId",
            "schema": {
              "description": "Patient case - Filter for reference matches",
              "title": "Caseid",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "caseId.not",
            "schema": {
              "description": "Patient case - Filter for reference mismatches",
              "title": "Caseid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "caseId.contains",
            "schema": {
              "description": "Patient case - Filter for partial text matches",
              "title": "Caseid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "caseId.not.contains",
            "schema": {
              "description": "Patient case - Filter for partial text mismatches",
              "title": "Caseid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "caseId.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries starting with the text",
              "title": "Caseid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.beginsWith",
            "schema": {
              "description": "Patient case - Filter for entries not starting with the text",
              "title": "Caseid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "caseId.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries ending with the text",
              "title": "Caseid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.not.endsWith",
            "schema": {
              "description": "Patient case - Filter for entries not ending with the text",
              "title": "Caseid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Patient case - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "caseId.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "caseId.not.anyOf",
            "schema": {
              "description": "Patient case - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Caseid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Patient case - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "date.before",
            "schema": {
              "description": "Assessment date - Filter for entries with dates before the specified value",
              "format": "date",
              "title": "Date.Before",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates before the specified value"
          },
          {
            "in": "query",
            "name": "date.after",
            "schema": {
              "description": "Assessment date - Filter for entries with dates after the specified value",
              "format": "date",
              "title": "Date.After",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates after the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrBefore",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or before the specified value",
              "format": "date",
              "title": "Date.Onorbefore",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or before the specified value"
          },
          {
            "in": "query",
            "name": "date.onOrAfter",
            "schema": {
              "description": "Assessment date - Filter for entries with dates on or after the specified value",
              "format": "date",
              "title": "Date.Onorafter",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates on or after the specified value"
          },
          {
            "in": "query",
            "name": "date.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
              "format": "date",
              "title": "Date.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value"
          },
          {
            "in": "query",
            "name": "date.not.on",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not matching the specified value",
              "format": "date",
              "title": "Date.Not.On",
              "type": "string"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not matching the specified value"
          },
          {
            "in": "query",
            "name": "date.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "date.not.between",
            "schema": {
              "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "format": "date",
                  "type": "string"
                }
              ],
              "title": "Date.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "height.not.exists",
            "schema": {
              "description": "Height - Filter for entries without a value",
              "title": "Height.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Height - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "height.exists",
            "schema": {
              "description": "Height - Filter for entries with a value",
              "title": "Height.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Height - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "height.lessThan",
            "schema": {
              "description": "Height - Filter for entries with values less than the specified value",
              "title": "Height.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "height.lessThanOrEqual",
            "schema": {
              "description": "Height - Filter for entries with values less than or equal to the specified value",
              "title": "Height.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "height.greaterThan",
            "schema": {
              "description": "Height - Filter for entries with values greater than the specified value",
              "title": "Height.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "height.greaterThanOrEqual",
            "schema": {
              "description": "Height - Filter for entries with values greater than or equal to the specified value",
              "title": "Height.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "height.equal",
            "schema": {
              "description": "Height - Filter for entries with values exactly equal to the specified value",
              "title": "Height.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "height.not.equal",
            "schema": {
              "description": "Height - Filter for entries with values not equal to the specified value",
              "title": "Height.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Height - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "height.between",
            "schema": {
              "description": "Height - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Height.Between",
              "type": "array"
            },
            "required": false,
            "description": "Height - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "height.not.between",
            "schema": {
              "description": "Height - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Height.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Height - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "weight.not.exists",
            "schema": {
              "description": "Weight - Filter for entries without a value",
              "title": "Weight.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Weight - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "weight.exists",
            "schema": {
              "description": "Weight - Filter for entries with a value",
              "title": "Weight.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Weight - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "weight.lessThan",
            "schema": {
              "description": "Weight - Filter for entries with values less than the specified value",
              "title": "Weight.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "weight.lessThanOrEqual",
            "schema": {
              "description": "Weight - Filter for entries with values less than or equal to the specified value",
              "title": "Weight.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "weight.greaterThan",
            "schema": {
              "description": "Weight - Filter for entries with values greater than the specified value",
              "title": "Weight.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "weight.greaterThanOrEqual",
            "schema": {
              "description": "Weight - Filter for entries with values greater than or equal to the specified value",
              "title": "Weight.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "weight.equal",
            "schema": {
              "description": "Weight - Filter for entries with values exactly equal to the specified value",
              "title": "Weight.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "weight.not.equal",
            "schema": {
              "description": "Weight - Filter for entries with values not equal to the specified value",
              "title": "Weight.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Weight - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "weight.between",
            "schema": {
              "description": "Weight - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Weight.Between",
              "type": "array"
            },
            "required": false,
            "description": "Weight - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "weight.not.between",
            "schema": {
              "description": "Weight - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Weight.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Weight - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.not.exists",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries without a value",
              "title": "Bloodpressuresystolic.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.exists",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with a value",
              "title": "Bloodpressuresystolic.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.lessThan",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values less than the specified value",
              "title": "Bloodpressuresystolic.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.lessThanOrEqual",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value",
              "title": "Bloodpressuresystolic.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.greaterThan",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values greater than the specified value",
              "title": "Bloodpressuresystolic.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.greaterThanOrEqual",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value",
              "title": "Bloodpressuresystolic.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.equal",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value",
              "title": "Bloodpressuresystolic.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.not.equal",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value",
              "title": "Bloodpressuresystolic.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.between",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Bloodpressuresystolic.Between",
              "type": "array"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "bloodPressureSystolic.not.between",
            "schema": {
              "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Bloodpressuresystolic.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.not.exists",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries without a value",
              "title": "Bloodpressurediastolic.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.exists",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with a value",
              "title": "Bloodpressurediastolic.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.lessThan",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values less than the specified value",
              "title": "Bloodpressurediastolic.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.lessThanOrEqual",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value",
              "title": "Bloodpressurediastolic.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.greaterThan",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value",
              "title": "Bloodpressurediastolic.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.greaterThanOrEqual",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value",
              "title": "Bloodpressurediastolic.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.equal",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value",
              "title": "Bloodpressurediastolic.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.not.equal",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value",
              "title": "Bloodpressurediastolic.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.between",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Bloodpressurediastolic.Between",
              "type": "array"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "bloodPressureDiastolic.not.between",
            "schema": {
              "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Bloodpressurediastolic.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "temperature.not.exists",
            "schema": {
              "description": "Temperature - Filter for entries without a value",
              "title": "Temperature.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Temperature - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "temperature.exists",
            "schema": {
              "description": "Temperature - Filter for entries with a value",
              "title": "Temperature.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Temperature - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "temperature.lessThan",
            "schema": {
              "description": "Temperature - Filter for entries with values less than the specified value",
              "title": "Temperature.Lessthan",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "temperature.lessThanOrEqual",
            "schema": {
              "description": "Temperature - Filter for entries with values less than or equal to the specified value",
              "title": "Temperature.Lessthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "temperature.greaterThan",
            "schema": {
              "description": "Temperature - Filter for entries with values greater than the specified value",
              "title": "Temperature.Greaterthan",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "temperature.greaterThanOrEqual",
            "schema": {
              "description": "Temperature - Filter for entries with values greater than or equal to the specified value",
              "title": "Temperature.Greaterthanorequal",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "temperature.equal",
            "schema": {
              "description": "Temperature - Filter for entries with values exactly equal to the specified value",
              "title": "Temperature.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "temperature.not.equal",
            "schema": {
              "description": "Temperature - Filter for entries with values not equal to the specified value",
              "title": "Temperature.Not.Equal",
              "type": "number"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "temperature.between",
            "schema": {
              "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Temperature.Between",
              "type": "array"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "temperature.not.between",
            "schema": {
              "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "title": "Temperature.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Temperature - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Vitals_"
                }
              }
            }
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createVitals",
        "summary": "Create Vitals",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VitalsCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/vitals/{vitalsId}": {
      "get": {
        "operationId": "getVitalsById",
        "summary": "Get Vitals By Id",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vitals"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateVitalsById",
        "summary": "Update Vitals",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VitalsCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteVitalsById",
        "summary": "Delete Vitals",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/vitals/{vitalsId}/history/events": {
      "get": {
        "operationId": "getAllVitalsHistoryEvents",
        "summary": "Get All Vitals History Events",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/vitals/{vitalsId}/history/events/{eventId}": {
      "get": {
        "operationId": "getVitalsHistoryEventById",
        "summary": "Get Vitals History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/vitals/{vitalsId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertVitalsToHistoryEvent",
        "summary": "Revert Vitals To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "vitalsId",
            "schema": {
              "title": "Vitalsid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Vitals"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/measures/{measureName}/units": {
      "get": {
        "operationId": "getMeasureUnits",
        "summary": "Get Measure Units",
        "parameters": [
          {
            "in": "path",
            "name": "measureName",
            "schema": {
              "title": "Measurename",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Measures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/measures/{measureName}/units/default": {
      "get": {
        "operationId": "getMeasureDefaultUnits",
        "summary": "Get Measure Default Units",
        "parameters": [
          {
            "in": "path",
            "name": "measureName",
            "schema": {
              "title": "Measurename",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Measures"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/measures/{measureName}/units/conversion": {
      "post": {
        "operationId": "convertUnits",
        "summary": "Convert Units",
        "parameters": [
          {
            "in": "path",
            "name": "measureName",
            "schema": {
              "title": "Measurename",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Measure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Measures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasureConversion"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/terminologies/{terminologyName}/concepts": {
      "get": {
        "operationId": "getTerminologyConcepts",
        "summary": "Get Terminology Concepts",
        "parameters": [
          {
            "in": "path",
            "name": "terminologyName",
            "schema": {
              "title": "Terminologyname",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "title": "Query",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "codes",
            "schema": {
              "items": {
                "type": "string"
              },
              "title": "Codes",
              "type": "array"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_CodedConcept_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Terminology"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts": {
      "get": {
        "operationId": "getCohorts",
        "summary": "Get All Cohorts Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "population.lessThan",
            "schema": {
              "description": "Population - Filter for entries with values less than the specified value",
              "title": "Population.Lessthan",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values less than the specified value"
          },
          {
            "in": "query",
            "name": "population.lessThanOrEqual",
            "schema": {
              "description": "Population - Filter for entries with values less than or equal to the specified value",
              "title": "Population.Lessthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values less than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "population.greaterThan",
            "schema": {
              "description": "Population - Filter for entries with values greater than the specified value",
              "title": "Population.Greaterthan",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values greater than the specified value"
          },
          {
            "in": "query",
            "name": "population.greaterThanOrEqual",
            "schema": {
              "description": "Population - Filter for entries with values greater than or equal to the specified value",
              "title": "Population.Greaterthanorequal",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values greater than or equal to the specified value"
          },
          {
            "in": "query",
            "name": "population.equal",
            "schema": {
              "description": "Population - Filter for entries with values exactly equal to the specified value",
              "title": "Population.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values exactly equal to the specified value"
          },
          {
            "in": "query",
            "name": "population.not.equal",
            "schema": {
              "description": "Population - Filter for entries with values not equal to the specified value",
              "title": "Population.Not.Equal",
              "type": "integer"
            },
            "required": false,
            "description": "Population - Filter for entries with values not equal to the specified value"
          },
          {
            "in": "query",
            "name": "population.between",
            "schema": {
              "description": "Population - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Population.Between",
              "type": "array"
            },
            "required": false,
            "description": "Population - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "population.not.between",
            "schema": {
              "description": "Population - Filter for entries with values between two specified values (inclusive)",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Population.Not.Between",
              "type": "array"
            },
            "required": false,
            "description": "Population - Filter for entries with values between two specified values (inclusive)"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "description": "Cohort name - Filter for full text matches",
              "title": "Name",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "name.not",
            "schema": {
              "description": "Cohort name - Filter for full text mismatches",
              "title": "Name.Not",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "name.contains",
            "schema": {
              "description": "Cohort name - Filter for partial text matches",
              "title": "Name.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "name.not.contains",
            "schema": {
              "description": "Cohort name - Filter for partial text mismatches",
              "title": "Name.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "name.beginsWith",
            "schema": {
              "description": "Cohort name - Filter for entries starting with the text",
              "title": "Name.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "name.not.beginsWith",
            "schema": {
              "description": "Cohort name - Filter for entries not starting with the text",
              "title": "Name.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "name.endsWith",
            "schema": {
              "description": "Cohort name - Filter for entries ending with the text",
              "title": "Name.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "name.not.endsWith",
            "schema": {
              "description": "Cohort name - Filter for entries not ending with the text",
              "title": "Name.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Cohort name - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "name.anyOf",
            "schema": {
              "description": "Cohort name - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Name.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cohort name - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "name.not.anyOf",
            "schema": {
              "description": "Cohort name - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Name.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cohort name - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "includeCriteria.not.exists",
            "schema": {
              "description": "Inclusion criteria - Filter for entries without a value",
              "title": "Includecriteria.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Inclusion criteria - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "includeCriteria.exists",
            "schema": {
              "description": "Inclusion criteria - Filter for entries with a value",
              "title": "Includecriteria.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Inclusion criteria - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "excludeCriteria.not.exists",
            "schema": {
              "description": "Exclusion criteria - Filter for entries without a value",
              "title": "Excludecriteria.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Exclusion criteria - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "excludeCriteria.exists",
            "schema": {
              "description": "Exclusion criteria - Filter for entries with a value",
              "title": "Excludecriteria.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Exclusion criteria - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "isPublic",
            "schema": {
              "description": "Is public? - ('Filter for yes/no statement',)",
              "title": "Ispublic",
              "type": "boolean"
            },
            "required": false,
            "description": "Is public? - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "projectId.not.exists",
            "schema": {
              "description": "Project - Filter for entries without a value",
              "title": "Projectid.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Project - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "projectId.exists",
            "schema": {
              "description": "Project - Filter for entries with a value",
              "title": "Projectid.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "Project - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "description": "Project - Filter for reference matches",
              "title": "Projectid",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for reference matches"
          },
          {
            "in": "query",
            "name": "projectId.not",
            "schema": {
              "description": "Project - Filter for reference mismatches",
              "title": "Projectid.Not",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for reference mismatches"
          },
          {
            "in": "query",
            "name": "projectId.contains",
            "schema": {
              "description": "Project - Filter for partial text matches",
              "title": "Projectid.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "projectId.not.contains",
            "schema": {
              "description": "Project - Filter for partial text mismatches",
              "title": "Projectid.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "projectId.beginsWith",
            "schema": {
              "description": "Project - Filter for entries starting with the text",
              "title": "Projectid.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "projectId.not.beginsWith",
            "schema": {
              "description": "Project - Filter for entries not starting with the text",
              "title": "Projectid.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "projectId.endsWith",
            "schema": {
              "description": "Project - Filter for entries ending with the text",
              "title": "Projectid.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "projectId.not.endsWith",
            "schema": {
              "description": "Project - Filter for entries not ending with the text",
              "title": "Projectid.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Project - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "projectId.anyOf",
            "schema": {
              "description": "Project - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Projectid.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "projectId.not.anyOf",
            "schema": {
              "description": "Project - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Projectid.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Project - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "casesIds",
            "schema": {
              "description": "Cases - Filter for full text matches",
              "title": "Casesids",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "casesIds.not",
            "schema": {
              "description": "Cases - Filter for full text mismatches",
              "title": "Casesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "casesIds.contains",
            "schema": {
              "description": "Cases - Filter for partial text matches",
              "title": "Casesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "casesIds.not.contains",
            "schema": {
              "description": "Cases - Filter for partial text mismatches",
              "title": "Casesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "casesIds.beginsWith",
            "schema": {
              "description": "Cases - Filter for entries starting with the text",
              "title": "Casesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "casesIds.not.beginsWith",
            "schema": {
              "description": "Cases - Filter for entries not starting with the text",
              "title": "Casesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "casesIds.endsWith",
            "schema": {
              "description": "Cases - Filter for entries ending with the text",
              "title": "Casesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "casesIds.not.endsWith",
            "schema": {
              "description": "Cases - Filter for entries not ending with the text",
              "title": "Casesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Cases - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "casesIds.anyOf",
            "schema": {
              "description": "Cases - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Casesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cases - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "casesIds.not.anyOf",
            "schema": {
              "description": "Cases - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Casesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Cases - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "manualChoicesIds",
            "schema": {
              "description": "Manually added cases - Filter for full text matches",
              "title": "Manualchoicesids",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.not",
            "schema": {
              "description": "Manually added cases - Filter for full text mismatches",
              "title": "Manualchoicesids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.contains",
            "schema": {
              "description": "Manually added cases - Filter for partial text matches",
              "title": "Manualchoicesids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.not.contains",
            "schema": {
              "description": "Manually added cases - Filter for partial text mismatches",
              "title": "Manualchoicesids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.beginsWith",
            "schema": {
              "description": "Manually added cases - Filter for entries starting with the text",
              "title": "Manualchoicesids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.not.beginsWith",
            "schema": {
              "description": "Manually added cases - Filter for entries not starting with the text",
              "title": "Manualchoicesids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.endsWith",
            "schema": {
              "description": "Manually added cases - Filter for entries ending with the text",
              "title": "Manualchoicesids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.not.endsWith",
            "schema": {
              "description": "Manually added cases - Filter for entries not ending with the text",
              "title": "Manualchoicesids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.anyOf",
            "schema": {
              "description": "Manually added cases - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Manualchoicesids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "manualChoicesIds.not.anyOf",
            "schema": {
              "description": "Manually added cases - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Manualchoicesids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Manually added cases - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "frozenSetIds",
            "schema": {
              "description": "Frozen cases - Filter for full text matches",
              "title": "Frozensetids",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "frozenSetIds.not",
            "schema": {
              "description": "Frozen cases - Filter for full text mismatches",
              "title": "Frozensetids.Not",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "frozenSetIds.contains",
            "schema": {
              "description": "Frozen cases - Filter for partial text matches",
              "title": "Frozensetids.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "frozenSetIds.not.contains",
            "schema": {
              "description": "Frozen cases - Filter for partial text mismatches",
              "title": "Frozensetids.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "frozenSetIds.beginsWith",
            "schema": {
              "description": "Frozen cases - Filter for entries starting with the text",
              "title": "Frozensetids.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "frozenSetIds.not.beginsWith",
            "schema": {
              "description": "Frozen cases - Filter for entries not starting with the text",
              "title": "Frozensetids.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "frozenSetIds.endsWith",
            "schema": {
              "description": "Frozen cases - Filter for entries ending with the text",
              "title": "Frozensetids.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "frozenSetIds.not.endsWith",
            "schema": {
              "description": "Frozen cases - Filter for entries not ending with the text",
              "title": "Frozensetids.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "frozenSetIds.anyOf",
            "schema": {
              "description": "Frozen cases - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Frozensetids.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "frozenSetIds.not.anyOf",
            "schema": {
              "description": "Frozen cases - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Frozensetids.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Frozen cases - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for a particular cohort creator by its username",
              "title": "Createdby"
            },
            "required": false,
            "description": "Filter for a particular cohort creator by its username"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Cohort_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createCohort",
        "summary": "Create Cohort",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CohortCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}": {
      "get": {
        "operationId": "getCohortById",
        "summary": "Get Cohort By Id",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteCohortById",
        "summary": "Delete Cohort",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateCohort",
        "summary": "Update Cohort",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CohortCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/cases": {
      "get": {
        "operationId": "getCohortCases",
        "summary": "Get Cohort Cases",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "anonymized",
            "schema": {
              "default": true,
              "title": "Anonymized",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_PatientCase_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/contributors": {
      "get": {
        "operationId": "getCohortContributors",
        "summary": "Get Cohort Contributions",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CohortContribution"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/history/events": {
      "get": {
        "operationId": "getAllCohortHistoryEvents",
        "summary": "Get All Cohort History Events",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/history/events/{eventId}": {
      "get": {
        "operationId": "getCohortHistoryEventById",
        "summary": "Get Cohort History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertCohortToHistoryEvent",
        "summary": "Revert Cohort To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/dataset/export": {
      "post": {
        "operationId": "exportCohortDataset",
        "summary": "Export Cohort Dataset",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/DatasetRule"
                },
                "title": "Rules",
                "type": "array"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/dataset": {
      "post": {
        "operationId": "getCohortDatasetDynamically",
        "summary": "Construct Cohort Dataset",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Any_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/DatasetRule"
                },
                "title": "Rules",
                "type": "array"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/datasets/{datasetId}": {
      "get": {
        "operationId": "getCohortDataset",
        "summary": "Get Cohort Dataset",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Any_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/traits/{trait}/average": {
      "get": {
        "operationId": "getCohortTraitAverage",
        "summary": "Get Cohort Trait Average",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "trait",
            "schema": {
              "title": "Trait",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CohortTraitAverage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/traits/{trait}/median": {
      "get": {
        "operationId": "getCohortTraitMedian",
        "summary": "Get Cohort Trait Median",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "trait",
            "schema": {
              "title": "Trait",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CohortTraitMedian"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/traits/{trait}/counts": {
      "get": {
        "operationId": "getCohortTraitCounts",
        "summary": "Get Cohort Trait Counts",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "trait",
            "schema": {
              "title": "Trait",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CohortTraitCounts"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/overall-survival-curve": {
      "get": {
        "operationId": "getCohortOverallSurvivalCurve",
        "summary": "Get Cohort Overall Survival Curve",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KapplerMeierCurve"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/genomics": {
      "get": {
        "operationId": "getCohortGenomics",
        "summary": "Get Cohort Genomics",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/progression-free-survival-curve/{therapyLine}": {
      "get": {
        "operationId": "getCohortProgressionFreeSurvivalCurve",
        "summary": "Get Cohort Progression Free Survival Curve",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "therapyLine",
            "schema": {
              "title": "Therapyline",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KapplerMeierCurve"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/progression-free-survival/{therapyLine}/drug-combinations": {
      "get": {
        "operationId": "getCohortProgressionFreeSurvivalCurveByDrugCombinations",
        "summary": "Get Cohort Progression Free Survival Curve By Drug Combinations",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "therapyLine",
            "schema": {
              "title": "Therapyline",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/cohorts/{cohortId}/progression-free-survival/{therapyLine}/therapy-classifications": {
      "get": {
        "operationId": "getCohortProgressionFreeSurvivalCurveByTherapyClassifications",
        "summary": "Get Cohort Progression Free Survival Curve By Therapy Classifications",
        "parameters": [
          {
            "in": "path",
            "name": "cohortId",
            "schema": {
              "title": "Cohortid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "therapyLine",
            "schema": {
              "title": "Therapyline",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Cohorts"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/dashboard/stats": {
      "get": {
        "operationId": "getFullCohortStatistics",
        "summary": "Get Full Cohort Statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPlatformStatisticsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/dashboard/primary-site-stats": {
      "get": {
        "operationId": "getPrimarySiteStatistics",
        "summary": "Get Primary Site Statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EntityStatisticsSchema"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/dashboard/cases-over-time": {
      "get": {
        "operationId": "getCasesOverTime",
        "summary": "Get Cases Over Time",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CasesPerMonthSchema"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/datasets": {
      "get": {
        "operationId": "getDatasets",
        "summary": "Get All Datasets Matching The Query",
        "parameters": [
          {
            "in": "query",
            "name": "rules.resource",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "PatientCase",
                    "NeoplasticEntity",
                    "TNMStaging",
                    "FIGOStaging",
                    "BinetStaging",
                    "RaiStaging",
                    "BreslowDepth",
                    "ClarkStaging",
                    "ISSStaging",
                    "RISSStaging",
                    "GleasonGrade",
                    "INSSStage",
                    "INRGSSStage",
                    "WilmsStage",
                    "RhabdomyosarcomaClinicalGroup",
                    "LymphomaStaging",
                    "TumorMarker",
                    "RiskAssessment",
                    "TherapyLine",
                    "SystemicTherapy",
                    "SystemicTherapyMedication",
                    "Surgery",
                    "Radiotherapy",
                    "RadiotherapyDosage",
                    "RadiotherapySetting",
                    "AdverseEvent",
                    "AdverseEventSuspectedCause",
                    "AdverseEventMitigation",
                    "TreatmentResponse",
                    "UnspecifiedTumorBoard",
                    "MolecularTumorBoard",
                    "MolecularTherapeuticRecommendation",
                    "PerformanceStatus",
                    "Lifestyle",
                    "FamilyHistory",
                    "Vitals",
                    "ComorbiditiesAssessment",
                    "GenomicVariant",
                    "TumorMutationalBurden",
                    "MicrosatelliteInstability",
                    "LossOfHeterozygosity",
                    "HomologousRecombinationDeficiency",
                    "TumorNeoantigenBurden",
                    "AneuploidScore"
                  ],
                  "title": "DataResource",
                  "type": "string"
                }
              ],
              "description": "None - ('Filter for single value choice',)"
            },
            "required": false,
            "description": "None - ('Filter for single value choice',)"
          },
          {
            "in": "query",
            "name": "rules.resource.not",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "PatientCase",
                    "NeoplasticEntity",
                    "TNMStaging",
                    "FIGOStaging",
                    "BinetStaging",
                    "RaiStaging",
                    "BreslowDepth",
                    "ClarkStaging",
                    "ISSStaging",
                    "RISSStaging",
                    "GleasonGrade",
                    "INSSStage",
                    "INRGSSStage",
                    "WilmsStage",
                    "RhabdomyosarcomaClinicalGroup",
                    "LymphomaStaging",
                    "TumorMarker",
                    "RiskAssessment",
                    "TherapyLine",
                    "SystemicTherapy",
                    "SystemicTherapyMedication",
                    "Surgery",
                    "Radiotherapy",
                    "RadiotherapyDosage",
                    "RadiotherapySetting",
                    "AdverseEvent",
                    "AdverseEventSuspectedCause",
                    "AdverseEventMitigation",
                    "TreatmentResponse",
                    "UnspecifiedTumorBoard",
                    "MolecularTumorBoard",
                    "MolecularTherapeuticRecommendation",
                    "PerformanceStatus",
                    "Lifestyle",
                    "FamilyHistory",
                    "Vitals",
                    "ComorbiditiesAssessment",
                    "GenomicVariant",
                    "TumorMutationalBurden",
                    "MicrosatelliteInstability",
                    "LossOfHeterozygosity",
                    "HomologousRecombinationDeficiency",
                    "TumorNeoantigenBurden",
                    "AneuploidScore"
                  ],
                  "title": "DataResource",
                  "type": "string"
                }
              ],
              "description": "None - ('Filter for all but a single value choice',)"
            },
            "required": false,
            "description": "None - ('Filter for all but a single value choice',)"
          },
          {
            "in": "query",
            "name": "rules.resource.anyOf",
            "schema": {
              "description": "None - ('Filter for excluding a subset of value choices',)",
              "items": {
                "enum": [
                  "PatientCase",
                  "NeoplasticEntity",
                  "TNMStaging",
                  "FIGOStaging",
                  "BinetStaging",
                  "RaiStaging",
                  "BreslowDepth",
                  "ClarkStaging",
                  "ISSStaging",
                  "RISSStaging",
                  "GleasonGrade",
                  "INSSStage",
                  "INRGSSStage",
                  "WilmsStage",
                  "RhabdomyosarcomaClinicalGroup",
                  "LymphomaStaging",
                  "TumorMarker",
                  "RiskAssessment",
                  "TherapyLine",
                  "SystemicTherapy",
                  "SystemicTherapyMedication",
                  "Surgery",
                  "Radiotherapy",
                  "RadiotherapyDosage",
                  "RadiotherapySetting",
                  "AdverseEvent",
                  "AdverseEventSuspectedCause",
                  "AdverseEventMitigation",
                  "TreatmentResponse",
                  "UnspecifiedTumorBoard",
                  "MolecularTumorBoard",
                  "MolecularTherapeuticRecommendation",
                  "PerformanceStatus",
                  "Lifestyle",
                  "FamilyHistory",
                  "Vitals",
                  "ComorbiditiesAssessment",
                  "GenomicVariant",
                  "TumorMutationalBurden",
                  "MicrosatelliteInstability",
                  "LossOfHeterozygosity",
                  "HomologousRecombinationDeficiency",
                  "TumorNeoantigenBurden",
                  "AneuploidScore"
                ],
                "title": "DataResource",
                "type": "string"
              },
              "title": "Rules.Resource.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - ('Filter for excluding a subset of value choices',)"
          },
          {
            "in": "query",
            "name": "rules.field",
            "schema": {
              "description": "None - Filter for full text matches",
              "title": "Rules.Field",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "rules.field.not",
            "schema": {
              "description": "None - Filter for full text mismatches",
              "title": "Rules.Field.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "rules.field.contains",
            "schema": {
              "description": "None - Filter for partial text matches",
              "title": "Rules.Field.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "rules.field.not.contains",
            "schema": {
              "description": "None - Filter for partial text mismatches",
              "title": "Rules.Field.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "rules.field.beginsWith",
            "schema": {
              "description": "None - Filter for entries starting with the text",
              "title": "Rules.Field.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "rules.field.not.beginsWith",
            "schema": {
              "description": "None - Filter for entries not starting with the text",
              "title": "Rules.Field.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "rules.field.endsWith",
            "schema": {
              "description": "None - Filter for entries ending with the text",
              "title": "Rules.Field.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "rules.field.not.endsWith",
            "schema": {
              "description": "None - Filter for entries not ending with the text",
              "title": "Rules.Field.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "rules.field.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Rules.Field.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "rules.field.not.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Rules.Field.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "rules.transform.not.exists",
            "schema": {
              "description": "None - Filter for entries without a value",
              "title": "Rules.Transform.Not.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries without a value"
          },
          {
            "in": "query",
            "name": "rules.transform.exists",
            "schema": {
              "description": "None - Filter for entries with a value",
              "title": "Rules.Transform.Exists",
              "type": "boolean"
            },
            "required": false,
            "description": "None - Filter for entries with a value"
          },
          {
            "in": "query",
            "name": "rules.transform",
            "schema": {
              "description": "None - Filter for full text matches",
              "title": "Rules.Transform",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "rules.transform.not",
            "schema": {
              "description": "None - Filter for full text mismatches",
              "title": "Rules.Transform.Not",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "rules.transform.contains",
            "schema": {
              "description": "None - Filter for partial text matches",
              "title": "Rules.Transform.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "rules.transform.not.contains",
            "schema": {
              "description": "None - Filter for partial text mismatches",
              "title": "Rules.Transform.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "rules.transform.beginsWith",
            "schema": {
              "description": "None - Filter for entries starting with the text",
              "title": "Rules.Transform.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "rules.transform.not.beginsWith",
            "schema": {
              "description": "None - Filter for entries not starting with the text",
              "title": "Rules.Transform.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "rules.transform.endsWith",
            "schema": {
              "description": "None - Filter for entries ending with the text",
              "title": "Rules.Transform.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "rules.transform.not.endsWith",
            "schema": {
              "description": "None - Filter for entries not ending with the text",
              "title": "Rules.Transform.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "None - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "rules.transform.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Rules.Transform.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "rules.transform.not.anyOf",
            "schema": {
              "description": "None - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Rules.Transform.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "None - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Id - Filter for full text matches",
              "title": "Id",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "id.not",
            "schema": {
              "description": "Id - Filter for full text mismatches",
              "title": "Id.Not",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "id.contains",
            "schema": {
              "description": "Id - Filter for partial text matches",
              "title": "Id.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "id.not.contains",
            "schema": {
              "description": "Id - Filter for partial text mismatches",
              "title": "Id.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "id.beginsWith",
            "schema": {
              "description": "Id - Filter for entries starting with the text",
              "title": "Id.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "id.not.beginsWith",
            "schema": {
              "description": "Id - Filter for entries not starting with the text",
              "title": "Id.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "id.endsWith",
            "schema": {
              "description": "Id - Filter for entries ending with the text",
              "title": "Id.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "id.not.endsWith",
            "schema": {
              "description": "Id - Filter for entries not ending with the text",
              "title": "Id.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Id - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "id.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "id.not.anyOf",
            "schema": {
              "description": "Id - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Id.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Id - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "description": "Dataset name - Filter for full text matches",
              "title": "Name",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for full text matches"
          },
          {
            "in": "query",
            "name": "name.not",
            "schema": {
              "description": "Dataset name - Filter for full text mismatches",
              "title": "Name.Not",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for full text mismatches"
          },
          {
            "in": "query",
            "name": "name.contains",
            "schema": {
              "description": "Dataset name - Filter for partial text matches",
              "title": "Name.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for partial text matches"
          },
          {
            "in": "query",
            "name": "name.not.contains",
            "schema": {
              "description": "Dataset name - Filter for partial text mismatches",
              "title": "Name.Not.Contains",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for partial text mismatches"
          },
          {
            "in": "query",
            "name": "name.beginsWith",
            "schema": {
              "description": "Dataset name - Filter for entries starting with the text",
              "title": "Name.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for entries starting with the text"
          },
          {
            "in": "query",
            "name": "name.not.beginsWith",
            "schema": {
              "description": "Dataset name - Filter for entries not starting with the text",
              "title": "Name.Not.Beginswith",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for entries not starting with the text"
          },
          {
            "in": "query",
            "name": "name.endsWith",
            "schema": {
              "description": "Dataset name - Filter for entries ending with the text",
              "title": "Name.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for entries ending with the text"
          },
          {
            "in": "query",
            "name": "name.not.endsWith",
            "schema": {
              "description": "Dataset name - Filter for entries not ending with the text",
              "title": "Name.Not.Endswith",
              "type": "string"
            },
            "required": false,
            "description": "Dataset name - Filter for entries not ending with the text"
          },
          {
            "in": "query",
            "name": "name.anyOf",
            "schema": {
              "description": "Dataset name - Filter for entries where at least one reference matches the query",
              "items": {
                "type": "string"
              },
              "title": "Name.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Dataset name - Filter for entries where at least one reference matches the query"
          },
          {
            "in": "query",
            "name": "name.not.anyOf",
            "schema": {
              "description": "Dataset name - Filter for entries where at least one reference mismatches the query",
              "items": {
                "type": "string"
              },
              "title": "Name.Not.Anyof",
              "type": "array"
            },
            "required": false,
            "description": "Dataset name - Filter for entries where at least one reference mismatches the query"
          },
          {
            "in": "query",
            "name": "isPublic",
            "schema": {
              "description": "Is public? - ('Filter for yes/no statement',)",
              "title": "Ispublic",
              "type": "boolean"
            },
            "required": false,
            "description": "Is public? - ('Filter for yes/no statement',)"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for a particular cohort creator by its username",
              "title": "Createdby"
            },
            "required": false,
            "description": "Filter for a particular cohort creator by its username"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_Dataset_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "post": {
        "operationId": "createDataset",
        "summary": "Create Dataset",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/datasets/{datasetId}": {
      "get": {
        "operationId": "getDatasetById",
        "summary": "Get Dataset By Id",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteDatasetById",
        "summary": "Delete Dataset",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateDataset",
        "summary": "Update Dataset",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/datasets/{datasetId}/history/events": {
      "get": {
        "operationId": "getAllDatasetHistoryEvents",
        "summary": "Get All Dataset History Events",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_HistoryEventWithSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/datasets/{datasetId}/history/events/{eventId}": {
      "get": {
        "operationId": "getDatasetHistoryEventById",
        "summary": "Get Dataset History Event By Id",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryEventWithSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/datasets/{datasetId}/history/events/{eventId}/reversion": {
      "put": {
        "operationId": "revertDatasetToHistoryEvent",
        "summary": "Revert Dataset To History Event",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "schema": {
              "title": "Datasetid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "title": "Eventid",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifiedResource"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Datasets"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    },
    "/api/others/default-clinical-center": {
      "get": {
        "operationId": "getDefaultClinicalCenter",
        "summary": "Get Default Clinical Center",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response",
                  "type": "string"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented"
          }
        },
        "tags": [
          "Patient Cases"
        ],
        "security": [
          {
            "XSessionTokenAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Input": {
        "properties": {
          "limit": {
            "default": 100,
            "minimum": 1,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "minimum": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "title": "Input",
        "type": "object"
      },
      "AuthenticationMeta": {
        "properties": {
          "sessionToken": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sessiontoken"
          },
          "accessToken": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accesstoken"
          },
          "isAuthenticated": {
            "title": "Isauthenticated",
            "type": "boolean"
          }
        },
        "required": [
          "isAuthenticated"
        ],
        "title": "AuthenticationMeta",
        "type": "object"
      },
      "UserCredentials": {
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "title": "UserCredentials",
        "type": "object"
      },
      "AccessRoles": {
        "enum": [
          "External",
          "Viewer",
          "Data Contributor",
          "Data Analyst",
          "Project Manager",
          "Platform Manager",
          "System Administrator"
        ],
        "title": "AccessRoles",
        "type": "string"
      },
      "UserFilters": {
        "properties": {
          "fullName": {
            "description": "Full name - Filter for full text matches",
            "title": "Fullname",
            "type": "string"
          },
          "fullName.not": {
            "description": "Full name - Filter for full text mismatches",
            "title": "Fullname.Not",
            "type": "string"
          },
          "fullName.contains": {
            "description": "Full name - Filter for partial text matches",
            "title": "Fullname.Contains",
            "type": "string"
          },
          "fullName.not.contains": {
            "description": "Full name - Filter for partial text mismatches",
            "title": "Fullname.Not.Contains",
            "type": "string"
          },
          "fullName.beginsWith": {
            "description": "Full name - Filter for entries starting with the text",
            "title": "Fullname.Beginswith",
            "type": "string"
          },
          "fullName.not.beginsWith": {
            "description": "Full name - Filter for entries not starting with the text",
            "title": "Fullname.Not.Beginswith",
            "type": "string"
          },
          "fullName.endsWith": {
            "description": "Full name - Filter for entries ending with the text",
            "title": "Fullname.Endswith",
            "type": "string"
          },
          "fullName.not.endsWith": {
            "description": "Full name - Filter for entries not ending with the text",
            "title": "Fullname.Not.Endswith",
            "type": "string"
          },
          "fullName.anyOf": {
            "description": "Full name - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Fullname.Anyof",
            "type": "array"
          },
          "fullName.not.anyOf": {
            "description": "Full name - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Fullname.Not.Anyof",
            "type": "array"
          },
          "role": {
            "allOf": [
              {
                "enum": [
                  "External",
                  "Viewer",
                  "Data Contributor",
                  "Data Analyst",
                  "Project Manager",
                  "Platform Manager",
                  "System Administrator"
                ],
                "title": "AccessRoles",
                "type": "string"
              }
            ],
            "description": "User role - ('Filter for single value choice',)"
          },
          "role.not": {
            "allOf": [
              {
                "enum": [
                  "External",
                  "Viewer",
                  "Data Contributor",
                  "Data Analyst",
                  "Project Manager",
                  "Platform Manager",
                  "System Administrator"
                ],
                "title": "AccessRoles",
                "type": "string"
              }
            ],
            "description": "User role - ('Filter for all but a single value choice',)"
          },
          "role.anyOf": {
            "description": "User role - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "External",
                "Viewer",
                "Data Contributor",
                "Data Analyst",
                "Project Manager",
                "Platform Manager",
                "System Administrator"
              ],
              "title": "AccessRoles",
              "type": "string"
            },
            "title": "Role.Anyof",
            "type": "array"
          },
          "canViewCases": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canviewcases",
            "type": "boolean"
          },
          "canViewProjects": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canviewprojects",
            "type": "boolean"
          },
          "canViewCohorts": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canviewcohorts",
            "type": "boolean"
          },
          "canViewUsers": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canviewusers",
            "type": "boolean"
          },
          "canViewDatasets": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canviewdatasets",
            "type": "boolean"
          },
          "canImportData": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canimportdata",
            "type": "boolean"
          },
          "canManageCases": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canmanagecases",
            "type": "boolean"
          },
          "canManageCohorts": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canmanagecohorts",
            "type": "boolean"
          },
          "canManageDatasets": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canmanagedatasets",
            "type": "boolean"
          },
          "canAnalyzeData": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Cananalyzedata",
            "type": "boolean"
          },
          "canExportData": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canexportdata",
            "type": "boolean"
          },
          "canManageProjects": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canmanageprojects",
            "type": "boolean"
          },
          "canAccessSensitiveData": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canaccesssensitivedata",
            "type": "boolean"
          },
          "canAuditLogs": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canauditlogs",
            "type": "boolean"
          },
          "canManageUsers": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Canmanageusers",
            "type": "boolean"
          },
          "isSystemAdmin": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Issystemadmin",
            "type": "boolean"
          },
          "isProvided": {
            "description": "None - ('Filter for yes/no statement',)",
            "title": "Isprovided",
            "type": "boolean"
          },
          "provider.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Provider.Not.Exists",
            "type": "boolean"
          },
          "provider.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Provider.Exists",
            "type": "boolean"
          },
          "provider": {
            "description": "None - Filter for full text matches",
            "title": "Provider",
            "type": "string"
          },
          "provider.not": {
            "description": "None - Filter for full text mismatches",
            "title": "Provider.Not",
            "type": "string"
          },
          "provider.contains": {
            "description": "None - Filter for partial text matches",
            "title": "Provider.Contains",
            "type": "string"
          },
          "provider.not.contains": {
            "description": "None - Filter for partial text mismatches",
            "title": "Provider.Not.Contains",
            "type": "string"
          },
          "provider.beginsWith": {
            "description": "None - Filter for entries starting with the text",
            "title": "Provider.Beginswith",
            "type": "string"
          },
          "provider.not.beginsWith": {
            "description": "None - Filter for entries not starting with the text",
            "title": "Provider.Not.Beginswith",
            "type": "string"
          },
          "provider.endsWith": {
            "description": "None - Filter for entries ending with the text",
            "title": "Provider.Endswith",
            "type": "string"
          },
          "provider.not.endsWith": {
            "description": "None - Filter for entries not ending with the text",
            "title": "Provider.Not.Endswith",
            "type": "string"
          },
          "provider.anyOf": {
            "description": "None - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Provider.Anyof",
            "type": "array"
          },
          "provider.not.anyOf": {
            "description": "None - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Provider.Not.Anyof",
            "type": "array"
          },
          "lastLogin.not.exists": {
            "description": "Last Login - Filter for entries without a value",
            "title": "Lastlogin.Not.Exists",
            "type": "boolean"
          },
          "lastLogin.exists": {
            "description": "Last Login - Filter for entries with a value",
            "title": "Lastlogin.Exists",
            "type": "boolean"
          },
          "lastLogin.before": {
            "description": "Last Login - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Lastlogin.Before",
            "type": "string"
          },
          "lastLogin.after": {
            "description": "Last Login - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Lastlogin.After",
            "type": "string"
          },
          "lastLogin.onOrBefore": {
            "description": "Last Login - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Lastlogin.Onorbefore",
            "type": "string"
          },
          "lastLogin.onOrAfter": {
            "description": "Last Login - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Lastlogin.Onorafter",
            "type": "string"
          },
          "lastLogin.on": {
            "description": "Last Login - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Lastlogin.On",
            "type": "string"
          },
          "lastLogin.not.on": {
            "description": "Last Login - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Lastlogin.Not.On",
            "type": "string"
          },
          "lastLogin.between": {
            "description": "Last Login - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Lastlogin.Between",
            "type": "array"
          },
          "lastLogin.not.between": {
            "description": "Last Login - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Lastlogin.Not.Between",
            "type": "array"
          },
          "username": {
            "description": "Username - Filter for full text matches",
            "title": "Username",
            "type": "string"
          },
          "username.not": {
            "description": "Username - Filter for full text mismatches",
            "title": "Username.Not",
            "type": "string"
          },
          "username.contains": {
            "description": "Username - Filter for partial text matches",
            "title": "Username.Contains",
            "type": "string"
          },
          "username.not.contains": {
            "description": "Username - Filter for partial text mismatches",
            "title": "Username.Not.Contains",
            "type": "string"
          },
          "username.beginsWith": {
            "description": "Username - Filter for entries starting with the text",
            "title": "Username.Beginswith",
            "type": "string"
          },
          "username.not.beginsWith": {
            "description": "Username - Filter for entries not starting with the text",
            "title": "Username.Not.Beginswith",
            "type": "string"
          },
          "username.endsWith": {
            "description": "Username - Filter for entries ending with the text",
            "title": "Username.Endswith",
            "type": "string"
          },
          "username.not.endsWith": {
            "description": "Username - Filter for entries not ending with the text",
            "title": "Username.Not.Endswith",
            "type": "string"
          },
          "username.anyOf": {
            "description": "Username - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Username.Anyof",
            "type": "array"
          },
          "username.not.anyOf": {
            "description": "Username - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Username.Not.Anyof",
            "type": "array"
          },
          "firstName.not.exists": {
            "description": "First Name - Filter for entries without a value",
            "title": "Firstname.Not.Exists",
            "type": "boolean"
          },
          "firstName.exists": {
            "description": "First Name - Filter for entries with a value",
            "title": "Firstname.Exists",
            "type": "boolean"
          },
          "firstName": {
            "description": "First Name - Filter for full text matches",
            "title": "Firstname",
            "type": "string"
          },
          "firstName.not": {
            "description": "First Name - Filter for full text mismatches",
            "title": "Firstname.Not",
            "type": "string"
          },
          "firstName.contains": {
            "description": "First Name - Filter for partial text matches",
            "title": "Firstname.Contains",
            "type": "string"
          },
          "firstName.not.contains": {
            "description": "First Name - Filter for partial text mismatches",
            "title": "Firstname.Not.Contains",
            "type": "string"
          },
          "firstName.beginsWith": {
            "description": "First Name - Filter for entries starting with the text",
            "title": "Firstname.Beginswith",
            "type": "string"
          },
          "firstName.not.beginsWith": {
            "description": "First Name - Filter for entries not starting with the text",
            "title": "Firstname.Not.Beginswith",
            "type": "string"
          },
          "firstName.endsWith": {
            "description": "First Name - Filter for entries ending with the text",
            "title": "Firstname.Endswith",
            "type": "string"
          },
          "firstName.not.endsWith": {
            "description": "First Name - Filter for entries not ending with the text",
            "title": "Firstname.Not.Endswith",
            "type": "string"
          },
          "firstName.anyOf": {
            "description": "First Name - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Firstname.Anyof",
            "type": "array"
          },
          "firstName.not.anyOf": {
            "description": "First Name - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Firstname.Not.Anyof",
            "type": "array"
          },
          "lastName.not.exists": {
            "description": "Last Name - Filter for entries without a value",
            "title": "Lastname.Not.Exists",
            "type": "boolean"
          },
          "lastName.exists": {
            "description": "Last Name - Filter for entries with a value",
            "title": "Lastname.Exists",
            "type": "boolean"
          },
          "lastName": {
            "description": "Last Name - Filter for full text matches",
            "title": "Lastname",
            "type": "string"
          },
          "lastName.not": {
            "description": "Last Name - Filter for full text mismatches",
            "title": "Lastname.Not",
            "type": "string"
          },
          "lastName.contains": {
            "description": "Last Name - Filter for partial text matches",
            "title": "Lastname.Contains",
            "type": "string"
          },
          "lastName.not.contains": {
            "description": "Last Name - Filter for partial text mismatches",
            "title": "Lastname.Not.Contains",
            "type": "string"
          },
          "lastName.beginsWith": {
            "description": "Last Name - Filter for entries starting with the text",
            "title": "Lastname.Beginswith",
            "type": "string"
          },
          "lastName.not.beginsWith": {
            "description": "Last Name - Filter for entries not starting with the text",
            "title": "Lastname.Not.Beginswith",
            "type": "string"
          },
          "lastName.endsWith": {
            "description": "Last Name - Filter for entries ending with the text",
            "title": "Lastname.Endswith",
            "type": "string"
          },
          "lastName.not.endsWith": {
            "description": "Last Name - Filter for entries not ending with the text",
            "title": "Lastname.Not.Endswith",
            "type": "string"
          },
          "lastName.anyOf": {
            "description": "Last Name - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Lastname.Anyof",
            "type": "array"
          },
          "lastName.not.anyOf": {
            "description": "Last Name - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Lastname.Not.Anyof",
            "type": "array"
          },
          "email.not.exists": {
            "description": "Email Address - Filter for entries without a value",
            "title": "Email.Not.Exists",
            "type": "boolean"
          },
          "email.exists": {
            "description": "Email Address - Filter for entries with a value",
            "title": "Email.Exists",
            "type": "boolean"
          },
          "email": {
            "description": "Email Address - Filter for full text matches",
            "title": "Email",
            "type": "string"
          },
          "email.not": {
            "description": "Email Address - Filter for full text mismatches",
            "title": "Email.Not",
            "type": "string"
          },
          "email.contains": {
            "description": "Email Address - Filter for partial text matches",
            "title": "Email.Contains",
            "type": "string"
          },
          "email.not.contains": {
            "description": "Email Address - Filter for partial text mismatches",
            "title": "Email.Not.Contains",
            "type": "string"
          },
          "email.beginsWith": {
            "description": "Email Address - Filter for entries starting with the text",
            "title": "Email.Beginswith",
            "type": "string"
          },
          "email.not.beginsWith": {
            "description": "Email Address - Filter for entries not starting with the text",
            "title": "Email.Not.Beginswith",
            "type": "string"
          },
          "email.endsWith": {
            "description": "Email Address - Filter for entries ending with the text",
            "title": "Email.Endswith",
            "type": "string"
          },
          "email.not.endsWith": {
            "description": "Email Address - Filter for entries not ending with the text",
            "title": "Email.Not.Endswith",
            "type": "string"
          },
          "email.anyOf": {
            "description": "Email Address - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Email.Anyof",
            "type": "array"
          },
          "email.not.anyOf": {
            "description": "Email Address - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Email.Not.Anyof",
            "type": "array"
          },
          "isActive": {
            "description": "Active - ('Filter for yes/no statement',)",
            "title": "Isactive",
            "type": "boolean"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "title.not.exists": {
            "description": "Title - Filter for entries without a value",
            "title": "Title.Not.Exists",
            "type": "boolean"
          },
          "title.exists": {
            "description": "Title - Filter for entries with a value",
            "title": "Title.Exists",
            "type": "boolean"
          },
          "title": {
            "description": "Title - Filter for full text matches",
            "title": "Title",
            "type": "string"
          },
          "title.not": {
            "description": "Title - Filter for full text mismatches",
            "title": "Title.Not",
            "type": "string"
          },
          "title.contains": {
            "description": "Title - Filter for partial text matches",
            "title": "Title.Contains",
            "type": "string"
          },
          "title.not.contains": {
            "description": "Title - Filter for partial text mismatches",
            "title": "Title.Not.Contains",
            "type": "string"
          },
          "title.beginsWith": {
            "description": "Title - Filter for entries starting with the text",
            "title": "Title.Beginswith",
            "type": "string"
          },
          "title.not.beginsWith": {
            "description": "Title - Filter for entries not starting with the text",
            "title": "Title.Not.Beginswith",
            "type": "string"
          },
          "title.endsWith": {
            "description": "Title - Filter for entries ending with the text",
            "title": "Title.Endswith",
            "type": "string"
          },
          "title.not.endsWith": {
            "description": "Title - Filter for entries not ending with the text",
            "title": "Title.Not.Endswith",
            "type": "string"
          },
          "title.anyOf": {
            "description": "Title - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Title.Anyof",
            "type": "array"
          },
          "title.not.anyOf": {
            "description": "Title - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Title.Not.Anyof",
            "type": "array"
          },
          "organization.not.exists": {
            "description": "Organization - Filter for entries without a value",
            "title": "Organization.Not.Exists",
            "type": "boolean"
          },
          "organization.exists": {
            "description": "Organization - Filter for entries with a value",
            "title": "Organization.Exists",
            "type": "boolean"
          },
          "organization": {
            "description": "Organization - Filter for full text matches",
            "title": "Organization",
            "type": "string"
          },
          "organization.not": {
            "description": "Organization - Filter for full text mismatches",
            "title": "Organization.Not",
            "type": "string"
          },
          "organization.contains": {
            "description": "Organization - Filter for partial text matches",
            "title": "Organization.Contains",
            "type": "string"
          },
          "organization.not.contains": {
            "description": "Organization - Filter for partial text mismatches",
            "title": "Organization.Not.Contains",
            "type": "string"
          },
          "organization.beginsWith": {
            "description": "Organization - Filter for entries starting with the text",
            "title": "Organization.Beginswith",
            "type": "string"
          },
          "organization.not.beginsWith": {
            "description": "Organization - Filter for entries not starting with the text",
            "title": "Organization.Not.Beginswith",
            "type": "string"
          },
          "organization.endsWith": {
            "description": "Organization - Filter for entries ending with the text",
            "title": "Organization.Endswith",
            "type": "string"
          },
          "organization.not.endsWith": {
            "description": "Organization - Filter for entries not ending with the text",
            "title": "Organization.Not.Endswith",
            "type": "string"
          },
          "organization.anyOf": {
            "description": "Organization - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Organization.Anyof",
            "type": "array"
          },
          "organization.not.anyOf": {
            "description": "Organization - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Organization.Not.Anyof",
            "type": "array"
          },
          "department.not.exists": {
            "description": "Department - Filter for entries without a value",
            "title": "Department.Not.Exists",
            "type": "boolean"
          },
          "department.exists": {
            "description": "Department - Filter for entries with a value",
            "title": "Department.Exists",
            "type": "boolean"
          },
          "department": {
            "description": "Department - Filter for full text matches",
            "title": "Department",
            "type": "string"
          },
          "department.not": {
            "description": "Department - Filter for full text mismatches",
            "title": "Department.Not",
            "type": "string"
          },
          "department.contains": {
            "description": "Department - Filter for partial text matches",
            "title": "Department.Contains",
            "type": "string"
          },
          "department.not.contains": {
            "description": "Department - Filter for partial text mismatches",
            "title": "Department.Not.Contains",
            "type": "string"
          },
          "department.beginsWith": {
            "description": "Department - Filter for entries starting with the text",
            "title": "Department.Beginswith",
            "type": "string"
          },
          "department.not.beginsWith": {
            "description": "Department - Filter for entries not starting with the text",
            "title": "Department.Not.Beginswith",
            "type": "string"
          },
          "department.endsWith": {
            "description": "Department - Filter for entries ending with the text",
            "title": "Department.Endswith",
            "type": "string"
          },
          "department.not.endsWith": {
            "description": "Department - Filter for entries not ending with the text",
            "title": "Department.Not.Endswith",
            "type": "string"
          },
          "department.anyOf": {
            "description": "Department - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Department.Anyof",
            "type": "array"
          },
          "department.not.anyOf": {
            "description": "Department - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Department.Not.Anyof",
            "type": "array"
          },
          "accessLevel.lessThan": {
            "description": "Access level - Filter for entries with values less than the specified value",
            "title": "Accesslevel.Lessthan",
            "type": "integer"
          },
          "accessLevel.lessThanOrEqual": {
            "description": "Access level - Filter for entries with values less than or equal to the specified value",
            "title": "Accesslevel.Lessthanorequal",
            "type": "integer"
          },
          "accessLevel.greaterThan": {
            "description": "Access level - Filter for entries with values greater than the specified value",
            "title": "Accesslevel.Greaterthan",
            "type": "integer"
          },
          "accessLevel.greaterThanOrEqual": {
            "description": "Access level - Filter for entries with values greater than or equal to the specified value",
            "title": "Accesslevel.Greaterthanorequal",
            "type": "integer"
          },
          "accessLevel.equal": {
            "description": "Access level - Filter for entries with values exactly equal to the specified value",
            "title": "Accesslevel.Equal",
            "type": "integer"
          },
          "accessLevel.not.equal": {
            "description": "Access level - Filter for entries with values not equal to the specified value",
            "title": "Accesslevel.Not.Equal",
            "type": "integer"
          },
          "accessLevel.between": {
            "description": "Access level - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Accesslevel.Between",
            "type": "array"
          },
          "accessLevel.not.between": {
            "description": "Access level - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Accesslevel.Not.Between",
            "type": "array"
          }
        },
        "title": "UserFilters",
        "type": "object"
      },
      "Paginated_User_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[User]",
        "type": "object"
      },
      "User": {
        "properties": {
          "fullName": {
            "description": "User full name",
            "title": "Full name",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/AccessRoles",
            "description": "User role based on its access level",
            "title": "User role"
          },
          "canViewCases": {
            "title": "Canviewcases",
            "type": "boolean"
          },
          "canViewProjects": {
            "title": "Canviewprojects",
            "type": "boolean"
          },
          "canViewCohorts": {
            "title": "Canviewcohorts",
            "type": "boolean"
          },
          "canViewUsers": {
            "title": "Canviewusers",
            "type": "boolean"
          },
          "canViewDatasets": {
            "title": "Canviewdatasets",
            "type": "boolean"
          },
          "canImportData": {
            "title": "Canimportdata",
            "type": "boolean"
          },
          "canManageCases": {
            "title": "Canmanagecases",
            "type": "boolean"
          },
          "canManageCohorts": {
            "title": "Canmanagecohorts",
            "type": "boolean"
          },
          "canManageDatasets": {
            "title": "Canmanagedatasets",
            "type": "boolean"
          },
          "canAnalyzeData": {
            "title": "Cananalyzedata",
            "type": "boolean"
          },
          "canExportData": {
            "title": "Canexportdata",
            "type": "boolean"
          },
          "canManageProjects": {
            "title": "Canmanageprojects",
            "type": "boolean"
          },
          "canAccessSensitiveData": {
            "title": "Canaccesssensitivedata",
            "type": "boolean"
          },
          "canAuditLogs": {
            "title": "Canauditlogs",
            "type": "boolean"
          },
          "canManageUsers": {
            "title": "Canmanageusers",
            "type": "boolean"
          },
          "isSystemAdmin": {
            "title": "Issystemadmin",
            "type": "boolean"
          },
          "isProvided": {
            "title": "Isprovided",
            "type": "boolean"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "lastLogin": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Last Login",
            "x-expanded": false
          },
          "username": {
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "maxLength": 150,
            "title": "Username",
            "type": "string",
            "x-expanded": false
          },
          "firstName": {
            "anyOf": [
              {
                "maxLength": 150,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "First Name",
            "x-expanded": false
          },
          "lastName": {
            "anyOf": [
              {
                "maxLength": 150,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Last Name",
            "x-expanded": false
          },
          "email": {
            "anyOf": [
              {
                "maxLength": 254,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Email Address",
            "x-expanded": false
          },
          "isActive": {
            "default": true,
            "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
            "title": "Active",
            "type": "boolean",
            "x-expanded": false
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Personal title of the user",
            "title": "Title",
            "x-expanded": false
          },
          "organization": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Organization to which the user belongs to",
            "title": "Organization",
            "x-expanded": false
          },
          "department": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Department within an organization to which the user belongs to",
            "title": "Department",
            "x-expanded": false
          },
          "accessLevel": {
            "default": 0,
            "description": "Level of access of the user in terms of permissions",
            "title": "Access level",
            "type": "integer",
            "x-expanded": false
          }
        },
        "required": [
          "fullName",
          "role",
          "canViewCases",
          "canViewProjects",
          "canViewCohorts",
          "canViewUsers",
          "canViewDatasets",
          "canImportData",
          "canManageCases",
          "canManageCohorts",
          "canManageDatasets",
          "canAnalyzeData",
          "canExportData",
          "canManageProjects",
          "canAccessSensitiveData",
          "canAuditLogs",
          "canManageUsers",
          "isSystemAdmin",
          "isProvided",
          "username",
          "id"
        ],
        "title": "User",
        "type": "object"
      },
      "ModifiedResource": {
        "properties": {
          "id": {
            "description": "Unique identifier of the modified resource",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A human-readable description of the modified resource",
            "title": "Description"
          }
        },
        "required": [
          "id"
        ],
        "title": "ModifiedResource",
        "type": "object"
      },
      "UserCreate": {
        "properties": {
          "lastLogin": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Last Login",
            "x-expanded": false
          },
          "username": {
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "maxLength": 150,
            "title": "Username",
            "type": "string",
            "x-expanded": false
          },
          "firstName": {
            "anyOf": [
              {
                "maxLength": 150,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "First Name",
            "x-expanded": false
          },
          "lastName": {
            "anyOf": [
              {
                "maxLength": 150,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Last Name",
            "x-expanded": false
          },
          "email": {
            "anyOf": [
              {
                "maxLength": 254,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Email Address",
            "x-expanded": false
          },
          "isActive": {
            "default": true,
            "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
            "title": "Active",
            "type": "boolean",
            "x-expanded": false
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Personal title of the user",
            "title": "Title",
            "x-expanded": false
          },
          "organization": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Organization to which the user belongs to",
            "title": "Organization",
            "x-expanded": false
          },
          "department": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Department within an organization to which the user belongs to",
            "title": "Department",
            "x-expanded": false
          },
          "accessLevel": {
            "default": 0,
            "description": "Level of access of the user in terms of permissions",
            "title": "Access level",
            "type": "integer",
            "x-expanded": false
          }
        },
        "required": [
          "username"
        ],
        "title": "UserCreate",
        "type": "object"
      },
      "UserProfileSchema": {
        "properties": {
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "organization": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization"
          },
          "department": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Department"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email"
        ],
        "title": "UserProfileSchema",
        "type": "object"
      },
      "UserPasswordReset": {
        "properties": {
          "oldPassword": {
            "title": "Oldpassword",
            "type": "string"
          },
          "newPassword": {
            "title": "Newpassword",
            "type": "string"
          }
        },
        "required": [
          "oldPassword",
          "newPassword"
        ],
        "title": "UserPasswordReset",
        "type": "object"
      },
      "ProjectFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "leader.username": {
            "description": "Project leader - Filter for username matches",
            "title": "Leader.Username",
            "type": "string"
          },
          "leader.username.not": {
            "description": "Project leader - Filter for username mismatches",
            "title": "Leader.Username.Not",
            "type": "string"
          },
          "leader.username.anyOf": {
            "description": "Project leader - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Leader.Username.Anyof",
            "type": "array"
          },
          "leader.username.not.anyOf": {
            "description": "Project leader - Filter for entries where at least one reference matches the query",
            "title": "Leader.Username.Not.Anyof",
            "type": "string"
          },
          "clinicalCenters": {
            "description": "Clinical Centers - Filter for full text matches",
            "title": "Clinicalcenters",
            "type": "string"
          },
          "clinicalCenters.not": {
            "description": "Clinical Centers - Filter for full text mismatches",
            "title": "Clinicalcenters.Not",
            "type": "string"
          },
          "clinicalCenters.contains": {
            "description": "Clinical Centers - Filter for partial text matches",
            "title": "Clinicalcenters.Contains",
            "type": "string"
          },
          "clinicalCenters.not.contains": {
            "description": "Clinical Centers - Filter for partial text mismatches",
            "title": "Clinicalcenters.Not.Contains",
            "type": "string"
          },
          "clinicalCenters.beginsWith": {
            "description": "Clinical Centers - Filter for entries starting with the text",
            "title": "Clinicalcenters.Beginswith",
            "type": "string"
          },
          "clinicalCenters.not.beginsWith": {
            "description": "Clinical Centers - Filter for entries not starting with the text",
            "title": "Clinicalcenters.Not.Beginswith",
            "type": "string"
          },
          "clinicalCenters.endsWith": {
            "description": "Clinical Centers - Filter for entries ending with the text",
            "title": "Clinicalcenters.Endswith",
            "type": "string"
          },
          "clinicalCenters.not.endsWith": {
            "description": "Clinical Centers - Filter for entries not ending with the text",
            "title": "Clinicalcenters.Not.Endswith",
            "type": "string"
          },
          "clinicalCenters.anyOf": {
            "description": "Clinical Centers - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalcenters.Anyof",
            "type": "array"
          },
          "clinicalCenters.not.anyOf": {
            "description": "Clinical Centers - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalcenters.Not.Anyof",
            "type": "array"
          },
          "title": {
            "description": "Project title - Filter for full text matches",
            "title": "Title",
            "type": "string"
          },
          "title.not": {
            "description": "Project title - Filter for full text mismatches",
            "title": "Title.Not",
            "type": "string"
          },
          "title.contains": {
            "description": "Project title - Filter for partial text matches",
            "title": "Title.Contains",
            "type": "string"
          },
          "title.not.contains": {
            "description": "Project title - Filter for partial text mismatches",
            "title": "Title.Not.Contains",
            "type": "string"
          },
          "title.beginsWith": {
            "description": "Project title - Filter for entries starting with the text",
            "title": "Title.Beginswith",
            "type": "string"
          },
          "title.not.beginsWith": {
            "description": "Project title - Filter for entries not starting with the text",
            "title": "Title.Not.Beginswith",
            "type": "string"
          },
          "title.endsWith": {
            "description": "Project title - Filter for entries ending with the text",
            "title": "Title.Endswith",
            "type": "string"
          },
          "title.not.endsWith": {
            "description": "Project title - Filter for entries not ending with the text",
            "title": "Title.Not.Endswith",
            "type": "string"
          },
          "title.anyOf": {
            "description": "Project title - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Title.Anyof",
            "type": "array"
          },
          "title.not.anyOf": {
            "description": "Project title - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Title.Not.Anyof",
            "type": "array"
          },
          "summary": {
            "description": "Project description - Filter for full text matches",
            "title": "Summary",
            "type": "string"
          },
          "summary.not": {
            "description": "Project description - Filter for full text mismatches",
            "title": "Summary.Not",
            "type": "string"
          },
          "summary.contains": {
            "description": "Project description - Filter for partial text matches",
            "title": "Summary.Contains",
            "type": "string"
          },
          "summary.not.contains": {
            "description": "Project description - Filter for partial text mismatches",
            "title": "Summary.Not.Contains",
            "type": "string"
          },
          "summary.beginsWith": {
            "description": "Project description - Filter for entries starting with the text",
            "title": "Summary.Beginswith",
            "type": "string"
          },
          "summary.not.beginsWith": {
            "description": "Project description - Filter for entries not starting with the text",
            "title": "Summary.Not.Beginswith",
            "type": "string"
          },
          "summary.endsWith": {
            "description": "Project description - Filter for entries ending with the text",
            "title": "Summary.Endswith",
            "type": "string"
          },
          "summary.not.endsWith": {
            "description": "Project description - Filter for entries not ending with the text",
            "title": "Summary.Not.Endswith",
            "type": "string"
          },
          "summary.anyOf": {
            "description": "Project description - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Summary.Anyof",
            "type": "array"
          },
          "summary.not.anyOf": {
            "description": "Project description - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Summary.Not.Anyof",
            "type": "array"
          },
          "ethicsApprovalNumber": {
            "description": "Ethics approval number - Filter for full text matches",
            "title": "Ethicsapprovalnumber",
            "type": "string"
          },
          "ethicsApprovalNumber.not": {
            "description": "Ethics approval number - Filter for full text mismatches",
            "title": "Ethicsapprovalnumber.Not",
            "type": "string"
          },
          "ethicsApprovalNumber.contains": {
            "description": "Ethics approval number - Filter for partial text matches",
            "title": "Ethicsapprovalnumber.Contains",
            "type": "string"
          },
          "ethicsApprovalNumber.not.contains": {
            "description": "Ethics approval number - Filter for partial text mismatches",
            "title": "Ethicsapprovalnumber.Not.Contains",
            "type": "string"
          },
          "ethicsApprovalNumber.beginsWith": {
            "description": "Ethics approval number - Filter for entries starting with the text",
            "title": "Ethicsapprovalnumber.Beginswith",
            "type": "string"
          },
          "ethicsApprovalNumber.not.beginsWith": {
            "description": "Ethics approval number - Filter for entries not starting with the text",
            "title": "Ethicsapprovalnumber.Not.Beginswith",
            "type": "string"
          },
          "ethicsApprovalNumber.endsWith": {
            "description": "Ethics approval number - Filter for entries ending with the text",
            "title": "Ethicsapprovalnumber.Endswith",
            "type": "string"
          },
          "ethicsApprovalNumber.not.endsWith": {
            "description": "Ethics approval number - Filter for entries not ending with the text",
            "title": "Ethicsapprovalnumber.Not.Endswith",
            "type": "string"
          },
          "ethicsApprovalNumber.anyOf": {
            "description": "Ethics approval number - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Ethicsapprovalnumber.Anyof",
            "type": "array"
          },
          "ethicsApprovalNumber.not.anyOf": {
            "description": "Ethics approval number - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Ethicsapprovalnumber.Not.Anyof",
            "type": "array"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "planned",
                  "ongoing",
                  "completed",
                  "aborted"
                ],
                "title": "ProjectStatusChoices",
                "type": "string"
              }
            ],
            "description": "Project status - ('Filter for single value choice',)"
          },
          "status.not": {
            "allOf": [
              {
                "enum": [
                  "planned",
                  "ongoing",
                  "completed",
                  "aborted"
                ],
                "title": "ProjectStatusChoices",
                "type": "string"
              }
            ],
            "description": "Project status - ('Filter for all but a single value choice',)"
          },
          "status.anyOf": {
            "description": "Project status - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "planned",
                "ongoing",
                "completed",
                "aborted"
              ],
              "title": "ProjectStatusChoices",
              "type": "string"
            },
            "title": "Status.Anyof",
            "type": "array"
          },
          "members.username": {
            "description": "Project members - Filter for username matches",
            "title": "Members.Username",
            "type": "string"
          },
          "members.username.not": {
            "description": "Project members - Filter for username mismatches",
            "title": "Members.Username.Not",
            "type": "string"
          },
          "members.username.anyOf": {
            "description": "Project members - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Members.Username.Anyof",
            "type": "array"
          },
          "members.username.not.anyOf": {
            "description": "Project members - Filter for entries where at least one reference matches the query",
            "title": "Members.Username.Not.Anyof",
            "type": "string"
          }
        },
        "title": "ProjectFilters",
        "type": "object"
      },
      "ProjectStatusChoices": {
        "enum": [
          "planned",
          "ongoing",
          "completed",
          "aborted"
        ],
        "title": "ProjectStatusChoices",
        "type": "string"
      },
      "Paginated_Project_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Project]",
        "type": "object"
      },
      "Project": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "leader": {
            "description": "User responsible for the project and its members",
            "title": "Project leader",
            "x-expanded": false
          },
          "clinicalCenters": {
            "description": "",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "title": "Clinical Centers",
            "type": "array",
            "x-expanded": false
          },
          "title": {
            "description": "Title of the project",
            "maxLength": 200,
            "title": "Project title",
            "type": "string",
            "x-expanded": false
          },
          "summary": {
            "description": "Description of the project",
            "title": "Project description",
            "type": "string",
            "x-expanded": false
          },
          "ethicsApprovalNumber": {
            "description": "Ethics approval number of the project",
            "maxLength": 100,
            "title": "Ethics approval number",
            "type": "string",
            "x-expanded": false
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectStatusChoices",
                "maxLength": 20
              }
            ],
            "default": "planned",
            "description": "Status of the project",
            "title": "Project status",
            "x-expanded": false
          },
          "dataConstraints": {
            "description": "Data constraints of the project",
            "title": "Data constraints",
            "type": "object",
            "x-expanded": false
          },
          "members": {
            "default": [],
            "description": "Users that are part of the project",
            "items": {

            },
            "title": "Project members",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "leader",
          "clinicalCenters",
          "title",
          "summary",
          "ethicsApprovalNumber",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Project",
        "type": "object"
      },
      "ProjectCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "leader": {
            "description": "User responsible for the project and its members",
            "title": "Project leader",
            "x-expanded": false
          },
          "clinicalCenters": {
            "description": "",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "title": "Clinical Centers",
            "type": "array",
            "x-expanded": false
          },
          "title": {
            "description": "Title of the project",
            "maxLength": 200,
            "title": "Project title",
            "type": "string",
            "x-expanded": false
          },
          "summary": {
            "description": "Description of the project",
            "title": "Project description",
            "type": "string",
            "x-expanded": false
          },
          "ethicsApprovalNumber": {
            "description": "Ethics approval number of the project",
            "maxLength": 100,
            "title": "Ethics approval number",
            "type": "string",
            "x-expanded": false
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectStatusChoices",
                "maxLength": 20
              }
            ],
            "default": "planned",
            "description": "Status of the project",
            "title": "Project status",
            "x-expanded": false
          },
          "dataConstraints": {
            "description": "Data constraints of the project",
            "title": "Data constraints",
            "type": "object",
            "x-expanded": false
          },
          "members": {
            "default": [],
            "description": "Users that are part of the project",
            "items": {

            },
            "title": "Project members",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "leader",
          "clinicalCenters",
          "title",
          "summary",
          "ethicsApprovalNumber"
        ],
        "title": "ProjectCreate",
        "type": "object"
      },
      "HistoryEventCategory": {
        "enum": [
          "create",
          "update",
          "delete",
          "export",
          "import",
          "download"
        ],
        "title": "HistoryEventCategory",
        "type": "string"
      },
      "HistoryEventWithSchema": {
        "properties": {
          "id": {
            "description": "The unique identifier of the history event",
            "title": "Event ID"
          },
          "category": {
            "$ref": "#/components/schemas/HistoryEventCategory",
            "description": "The type of history event",
            "title": "Category"
          },
          "timestamp": {
            "description": "Timestamp of the history event",
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user that triggered the event, if applicable",
            "title": "User"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Endpoint URL through which the event was triggered, if applicable",
            "title": "Endpoint"
          },
          "snapshot": {
            "additionalProperties": true,
            "description": "Data snapshopt at the time of the event",
            "title": "Data snapshopt",
            "type": "object"
          },
          "differential": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Data changes introduced by the event, if applicable",
            "title": "Data differential"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Context sorrounding the event",
            "title": "Context"
          }
        },
        "required": [
          "id",
          "category",
          "timestamp",
          "snapshot",
          "differential",
          "context"
        ],
        "title": "HistoryEventWithSchema",
        "type": "object"
      },
      "Paginated_HistoryEventWithSchema_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/HistoryEventWithSchema"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[HistoryEvent.bind_schema.\u003Clocals\u003E.HistoryEventWithSchema]",
        "type": "object"
      },
      "Paginated_ProjectDataManagerGrant_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ProjectDataManagerGrant"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[ProjectDataManagerGrant]",
        "type": "object"
      },
      "Period": {
        "properties": {
          "start": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The start date of the time period",
            "title": "Start"
          },
          "end": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The end date of the time period",
            "title": "End"
          }
        },
        "title": "Period",
        "type": "object"
      },
      "ProjectDataManagerGrant": {
        "properties": {
          "isValid": {
            "description": "Whether the authorization grant is valid today",
            "title": "Is valid",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "member": {
            "description": "Manager of the project data",
            "title": "Manager",
            "x-expanded": false
          },
          "projectId": {
            "description": "",
            "format": "uuid",
            "title": "Project",
            "type": "string",
            "x-expanded": false
          },
          "revoked": {
            "default": false,
            "description": "A flag that indicated whether the authorization has been revoked",
            "title": "Revoked",
            "type": "boolean",
            "x-expanded": false
          },
          "validityPeriod": {
            "$ref": "#/components/schemas/Period",
            "description": "Period of validity",
            "title": "Validity period",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "isValid",
          "id",
          "member",
          "projectId",
          "validityPeriod",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "ProjectDataManagerGrant",
        "type": "object"
      },
      "ProjectDataManagerGrantCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "revoked": {
            "default": false,
            "description": "A flag that indicated whether the authorization has been revoked",
            "title": "Revoked",
            "type": "boolean",
            "x-expanded": false
          },
          "validityPeriod": {
            "$ref": "#/components/schemas/Period",
            "description": "Period of validity",
            "title": "Validity period",
            "x-expanded": false
          }
        },
        "required": [
          "validityPeriod"
        ],
        "title": "ProjectDataManagerGrantCreate",
        "type": "object"
      },
      "AdverseEvent": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "suspectedCauses": {
            "description": "Suspected causes of the adverse event",
            "items": {
              "$ref": "#/components/schemas/AdverseEventSuspectedCause"
            },
            "title": "Suspectedcauses",
            "type": "array"
          },
          "mitigations": {
            "description": "Mitigations of the adverse event",
            "items": {
              "$ref": "#/components/schemas/AdverseEventMitigation"
            },
            "title": "Mitigations",
            "type": "array"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who had the adverse event being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the adverse event ocurred.",
            "format": "date",
            "title": "Event date",
            "type": "string",
            "x-expanded": false
          },
          "event": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Classification of the adverse event using CTCAE criteria",
            "title": "Adverse event",
            "x-expanded": false,
            "x-terminology": "AdverseEventTerm"
          },
          "grade": {
            "description": "The grade associated with the severity of an adverse event, using CTCAE criteria.",
            "title": "Grade",
            "type": "integer",
            "x-expanded": false
          },
          "outcome": {
            "$ref": "#/components/schemas/AdverseEventOutcomeChoices",
            "description": "The date when the adverse event ended or returned to baseline.",
            "maxLength": 50,
            "title": "Date resolved",
            "x-expanded": false
          },
          "dateResolved": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The date when the adverse event ended or returned to baseline.",
            "title": "Date resolved",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "suspectedCauses",
          "mitigations",
          "id",
          "caseId",
          "date",
          "event",
          "grade",
          "outcome",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "AdverseEvent",
        "type": "object"
      },
      "AdverseEventMitigation": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "category": {
            "$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices",
            "description": "Type of mitigation employed",
            "maxLength": 50,
            "title": "Mitigation category",
            "x-expanded": false
          },
          "adjustment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)",
            "title": "Treatment Adjustment",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationTreatmentAdjustment"
          },
          "drug": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)",
            "title": "Pharmacological drug",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationDrug"
          },
          "procedure": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)",
            "title": "Procedure",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationProcedure"
          },
          "management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Management type of the adverse event mitigation",
            "title": "Management",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationManagement"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "category",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "AdverseEventMitigation",
        "type": "object"
      },
      "AdverseEventMitigationCategoryChoices": {
        "enum": [
          "adjustment",
          "pharmacological",
          "procedure"
        ],
        "title": "AdverseEventMitigationCategoryChoices",
        "type": "string"
      },
      "AdverseEventOutcomeChoices": {
        "enum": [
          "resolved",
          "resolved-with-sequelae",
          "recovering",
          "ongoing",
          "fatal",
          "unknown"
        ],
        "title": "AdverseEventOutcomeChoices",
        "type": "string"
      },
      "AdverseEventSuspectedCause": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "systemicTherapyId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systemic therapy suspected to be the cause of the adverse event",
            "title": "Suspected systemic therapy",
            "x-expanded": false
          },
          "medicationId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systemic therapy medication suspected to be the cause of the adverse event",
            "title": "Suspected systemic therapy medication",
            "x-expanded": false
          },
          "radiotherapyId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Radiotherapy suspected to be the cause of the adverse event",
            "title": "Suspected radiotherapy",
            "x-expanded": false
          },
          "surgeryId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Surgery suspected to be the cause of the adverse event",
            "title": "Suspected surgery",
            "x-expanded": false
          },
          "causality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Assessment of the potential causality",
            "title": "Causality",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "AdverseEventSuspectedCause",
        "type": "object"
      },
      "AdverseEventSuspectedCauseCausalityChoices": {
        "enum": [
          "unrelated",
          "unlikely-related",
          "possibly-related",
          "probably-related",
          "definitely-related",
          "conditionally-related"
        ],
        "title": "AdverseEventSuspectedCauseCausalityChoices",
        "type": "string"
      },
      "AgeBin": {
        "enum": [
          "\u003C20",
          "20-24",
          "25-30",
          "30-34",
          "35-40",
          "40-44",
          "45-50",
          "50-54",
          "55-60",
          "60-64",
          "65-70",
          "70-74",
          "75-80",
          "80-84",
          "85-90",
          "\u003E90"
        ],
        "title": "AgeBin",
        "type": "string"
      },
      "AneuploidScore": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "aneuploid_score",
            "default": "aneuploid_score",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual aneuploid score (AS) value in total altered arms",
            "title": "Value",
            "type": "integer",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "value",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "AneuploidScore",
        "type": "object"
      },
      "BinetStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "binet",
            "default": "binet",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Binet stage",
            "title": "Binet Stage",
            "x-expanded": false,
            "x-terminology": "BinetStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "BinetStaging",
        "type": "object"
      },
      "BreslowDepth": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "breslow",
            "default": "breslow",
            "title": "Stagingdomain",
            "type": "string"
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "depth": {
            "description": "Breslow depth given in milimeters",
            "title": "Breslow depth",
            "type": "number",
            "x-expanded": false
          },
          "isUlcered": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the primary tumour presents ulceration",
            "title": "Ulcered",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "stage",
          "id",
          "caseId",
          "date",
          "depth",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "BreslowDepth",
        "type": "object"
      },
      "ClarkStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "clark",
            "default": "clark",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Clark level stage",
            "title": "Clark Level Stage",
            "x-expanded": false,
            "x-terminology": "ClarkLevel"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "ClarkStaging",
        "type": "object"
      },
      "CodedConcept": {
        "properties": {
          "code": {
            "description": "Unique code within a coding system that identifies a concept",
            "title": "Code",
            "type": "string"
          },
          "system": {
            "description": "The canonical URL of the code system defining the concept",
            "title": "System",
            "type": "string"
          },
          "display": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Human readable description of the concept",
            "title": "Display"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Release version of the code system, if available",
            "title": "Version"
          },
          "synonyms": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of synonyms or alternative representations of the concept",
            "title": "Synonyms"
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Other properties associated to the concept by the code system or otherwise",
            "title": "Properties"
          }
        },
        "required": [
          "code",
          "system"
        ],
        "title": "CodedConcept",
        "type": "object"
      },
      "ComorbiditiesAssessment": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "score": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Comorbidity score",
            "title": "Score"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's comorbidities are being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "indexConditionId": {
            "description": "The primary neoplastic entity against which comorbidities are assessed",
            "format": "uuid",
            "title": "Index neoplastic entity",
            "type": "string",
            "x-expanded": false
          },
          "panel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices",
                "maxLength": 30
              },
              {
                "type": "null"
              }
            ],
            "description": "Comorbidities panel",
            "title": "Panel",
            "x-expanded": false
          },
          "presentConditions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Present comorbid conditions",
            "title": "Present comorbid conditions",
            "x-expanded": false,
            "x-terminology": "ICD10Condition"
          },
          "absentConditions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Absent comorbid conditions",
            "title": "Absent comorbid conditions",
            "x-expanded": false,
            "x-terminology": "ICD10Condition"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "indexConditionId",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "ComorbiditiesAssessment",
        "type": "object"
      },
      "ComorbiditiesAssessmentPanelChoices": {
        "enum": [
          "Charlson",
          "Elixhauser",
          "NCI"
        ],
        "title": "ComorbiditiesAssessmentPanelChoices",
        "type": "string"
      },
      "DNAChangeType": {
        "enum": [
          "substitution",
          "deletion-insertion",
          "insertion",
          "deletion",
          "duplication",
          "inversion",
          "unchanged",
          "repetition",
          "translocation",
          "transposition",
          "methylation-gain",
          "methylation-loss",
          "methylation-unchanged"
        ],
        "title": "DNAChangeType",
        "type": "string"
      },
      "FIGOStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "figo",
            "default": "figo",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the FIGO stage",
            "title": "FIGO Stage",
            "x-expanded": false,
            "x-terminology": "FIGOStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the FIGO staging",
            "title": "FIGO staging methodology",
            "x-expanded": false,
            "x-terminology": "FIGOStagingMethod"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "FIGOStaging",
        "type": "object"
      },
      "FamilyHistory": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's family's history is being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's family history was assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "relationship": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Relationship to the patient",
            "title": "Relationship",
            "x-expanded": false,
            "x-terminology": "FamilyMemberType"
          },
          "hadCancer": {
            "description": "Whether the family member has a history of cancer",
            "title": "Had cancer",
            "type": "boolean",
            "x-expanded": false
          },
          "contributedToDeath": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the cancer contributed to the cause of death of the family member",
            "title": "Contributed to death",
            "x-expanded": false
          },
          "onsetAge": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Age at which the family member's cancer manifested",
            "title": "Onset age",
            "x-expanded": false
          },
          "topography": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated or actual topography of the family member's cancer",
            "title": "Topography",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "morphology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphology of the family member's cancer (if known)",
            "title": "Morphology",
            "x-expanded": false,
            "x-terminology": "CancerMorphology"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "relationship",
          "hadCancer",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "FamilyHistory",
        "type": "object"
      },
      "GenomicVariant": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "isPathogenic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the genomic variant is considered pathogenic in a clinical setting",
            "title": "Is Pathogenic"
          },
          "isVUS": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the genomic variant is considered a variant of unknown signifiance (VUS)",
            "title": "Is VUS"
          },
          "dnaHgvs": {
            "anyOf": [
              {
                "pattern": "(?:(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g)|(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+))?\\(?((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3}))\\)?:)?c))\\.((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+\u003E(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]\\sand\\s(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|gom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|lom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|met=)",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "DNA HGVS"
          },
          "dnaReferenceSequence": {
            "anyOf": [
              {
                "pattern": "(?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3})|(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA reference sequence identifier used as dna HGVS reference.",
            "title": "DNA HGVS RefSeq"
          },
          "dnaChangePosition": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA-level single-nucleotide position where the variant was found.",
            "title": "DNA change position"
          },
          "dnaChangePositionRange": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Range"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA-level single-nucleotide position where the variant was found.",
            "title": "DNA change range"
          },
          "dnaChangeType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DNAChangeType"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA variant type of variant.",
            "title": "DNA change type"
          },
          "rnaHgvs": {
            "anyOf": [
              {
                "pattern": "(?:((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3})):)?r\\.\\(?((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+\u003E(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\])\\)?",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RNA HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "RNA HGVS"
          },
          "rnaReferenceSequence": {
            "anyOf": [
              {
                "pattern": "(?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3})",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RNA reference sequence identifier used as rna HGVS reference.",
            "title": "RNA HGVS RefSeq"
          },
          "rnaChangePosition": {
            "anyOf": [
              {
                "pattern": "(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RNA-level nucleotide position/range where the variant was found.",
            "title": "RNA change position"
          },
          "rnaChangeType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RNAChangeType"
              },
              {
                "type": "null"
              }
            ],
            "description": "RNA variant type of variant.",
            "title": "RNA change type"
          },
          "proteinHgvs": {
            "anyOf": [
              {
                "pattern": "(?:((?:(?:AP_|NP_|YP_|XP_|WP_)\\d+(?:\\.\\d{1,3})?)|(?:ENSP\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+p\\d{1,3})):)?p\\.\\(?(0\\??|\\?|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))delins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))del|(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))ins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))dup|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:Ter|\\*)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)?fs(?:Ter)?(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+)))*|(?:(?:Met1ext-\\d+)|(?:Ter\\d+(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)extTer\\d+))|\\(?(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))\\)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))=)\\)?",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Protein HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "Protein HGVS"
          },
          "proteinReferenceSequence": {
            "anyOf": [
              {
                "pattern": "(?:(?:AP_|NP_|YP_|XP_|WP_)\\d+(?:\\.\\d{1,3})?)|(?:ENSP\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+p\\d{1,3})",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Protein reference sequence identifier used as protein HGVS reference.",
            "title": "Protein HGVS RefSeq"
          },
          "proteinChangeType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProteinChangeType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Protein variant type of variant.",
            "title": "Protein change type"
          },
          "nucleotidesLength": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Length of the variant in nucleotides",
            "title": "Variant length"
          },
          "regions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Gene regions (exons, introns, UTRs) affected by the variant. Estimated from MANE reference sequences.",
            "title": "Gene regions"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who' genomic variant is described",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the genomic variant was detected and/or reported.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "genePanel": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Commercial or official name of the gene panel tested to identify the variant",
            "title": "Gene panel",
            "x-expanded": false
          },
          "assessment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantAssessmentChoices",
                "maxLength": 15
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.",
            "title": "Assessment",
            "x-expanded": false
          },
          "confidence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantConfidenceChoices",
                "maxLength": 15
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.",
            "title": "Confidence",
            "x-expanded": false
          },
          "analysisMethod": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Analysis method used to detect the variant",
            "title": "Analysis method",
            "x-expanded": false,
            "x-terminology": "StructuralVariantAnalysisMethod"
          },
          "clinicalRelevance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the clinical relevance or pathogenicity of the variant.",
            "title": "Clinical relevance",
            "x-expanded": false
          },
          "genomeAssemblyVersion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reference genome assembly versionused in this analysis.",
            "title": "Genome assembly version",
            "x-expanded": false,
            "x-terminology": "ReferenceGenomeBuild"
          },
          "molecularConsequence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.",
            "title": "Molecular consequence",
            "x-expanded": false,
            "x-terminology": "MolecularConsequence"
          },
          "copyNumber": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.",
            "title": "Copy number",
            "x-expanded": false
          },
          "alleleFrequency": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.",
            "title": "Allele frequency",
            "x-expanded": false
          },
          "alleleDepth": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.",
            "title": "Allele depth (reads)",
            "x-expanded": false
          },
          "zygosity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The observed level of occurrence of the variant in the set of chromosomes.",
            "title": "Zygosity",
            "x-expanded": false,
            "x-terminology": "Zygosity"
          },
          "inheritance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Variant inheritance origin (if known).",
            "title": "Inheritance",
            "x-expanded": false,
            "x-terminology": "VariantInheritance"
          },
          "coordinateSystem": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.",
            "title": "Coordinate system",
            "x-expanded": false,
            "x-terminology": "GenomicCoordinateSystem"
          },
          "clinvar": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Accession number in the ClinVar variant database, given for cross-reference.",
            "title": "ClinVar accession number",
            "x-expanded": false
          },
          "genes": {
            "default": [],
            "description": "Gene(s) affected by this variant",
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Gene(s)",
            "type": "array",
            "x-expanded": false,
            "x-terminology": "Gene"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "GenomicVariant",
        "type": "object"
      },
      "GenomicVariantAssessmentChoices": {
        "enum": [
          "present",
          "absent",
          "no-call",
          "indeterminate"
        ],
        "title": "GenomicVariantAssessmentChoices",
        "type": "string"
      },
      "GenomicVariantClinicalRelevanceChoices": {
        "enum": [
          "pathogenic",
          "likely_pathogenic",
          "uncertain_significance",
          "ambiguous",
          "likely_benign",
          "benign"
        ],
        "title": "GenomicVariantClinicalRelevanceChoices",
        "type": "string"
      },
      "GenomicVariantConfidenceChoices": {
        "enum": [
          "low",
          "high",
          "indeterminate"
        ],
        "title": "GenomicVariantConfidenceChoices",
        "type": "string"
      },
      "GleasonGrade": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "gleason",
            "default": "gleason",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Gleason grade stage",
            "title": "Gleason grade Stage",
            "x-expanded": false,
            "x-terminology": "GleasonGradeGroupStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "GleasonGrade",
        "type": "object"
      },
      "HomologousRecombinationDeficiency": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "homologous_recombination_deficiency",
            "default": "homologous_recombination_deficiency",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Homologous recombination deficiency (HRD) score value",
            "title": "Value",
            "x-expanded": false
          },
          "interpretation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Homologous recombination deficiency (HRD) interpretation",
            "title": "Interpretation",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "HomologousRecombinationDeficiency",
        "type": "object"
      },
      "HomologousRecombinationDeficiencyInterpretationChoices": {
        "enum": [
          "positive",
          "negative",
          "indeterminate"
        ],
        "title": "HomologousRecombinationDeficiencyInterpretationChoices",
        "type": "string"
      },
      "INRGSSStage": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "inrgss",
            "default": "inrgss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the INRGSS stage",
            "title": "INRGSS Stage",
            "x-expanded": false,
            "x-terminology": "NeuroblastomaINRGSSStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "INRGSSStage",
        "type": "object"
      },
      "INSSStage": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "inss",
            "default": "inss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the INSS stage",
            "title": "INSS Stage",
            "x-expanded": false,
            "x-terminology": "NeuroblastomaINSSStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "INSSStage",
        "type": "object"
      },
      "ISSStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "iss",
            "default": "iss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of theISS stage",
            "title": "ISS Stage",
            "x-expanded": false,
            "x-terminology": "MyelomaISSStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "ISSStaging",
        "type": "object"
      },
      "Lifestyle": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "smokingStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Frequency of alcohol consumption",
            "title": "Alcohol consumption",
            "x-expanded": false,
            "x-terminology": "SmokingStatus"
          },
          "smokingPackyears": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Smoking pack-years (if applicable)",
            "title": "Smoking packyears",
            "x-expanded": false
          },
          "smokingQuited": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated time since quitting smoking (if applicable)",
            "title": "Time since quitted smoking",
            "x-default-unit": "year",
            "x-expanded": false,
            "x-measure": "Time"
          },
          "alcoholConsumption": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Frequency of alcohol consumption",
            "title": "Alcohol consumption",
            "x-expanded": false,
            "x-terminology": "AlcoholConsumptionFrequency"
          },
          "nightSleep": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated average sleep time per night",
            "title": "Night sleep",
            "x-default-unit": "hour",
            "x-expanded": false,
            "x-measure": "Time"
          },
          "recreationalDrugs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Any recreational drug(s) used by the patient",
            "title": "Recreational drugs",
            "x-expanded": false,
            "x-terminology": "RecreationalDrug"
          },
          "exposures": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Environmental or occupational exposures to hazards or carcinogenic agents",
            "title": "Exposures",
            "x-expanded": false,
            "x-terminology": "ExposureAgent"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Lifestyle",
        "type": "object"
      },
      "LossOfHeterozygosity": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "loss_of_heterozygosity",
            "default": "loss_of_heterozygosity",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "Loss of heterozygosity (LOH) as a percentage",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "value",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "LossOfHeterozygosity",
        "type": "object"
      },
      "LymphomaStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "lymphoma",
            "default": "lymphoma",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Lymphoma stage",
            "title": "Lymphoma Stage",
            "x-expanded": false,
            "x-terminology": "LymphomaStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the Lymphoma staging",
            "title": "Lymphoma staging methodology",
            "x-expanded": false,
            "x-terminology": "LymphomaStagingMethod"
          },
          "bulky": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.",
            "title": "Bulky disease modifier",
            "x-expanded": false
          },
          "pathological": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the staging was based on clinical or pathologic evidence.",
            "title": "Pathological staging",
            "x-expanded": false
          },
          "modifiers": {
            "default": [],
            "description": "Qualifier acting as modifier for the lymphoma stage",
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Lymphoma stage modifier",
            "type": "array",
            "x-expanded": false,
            "x-terminology": "LymphomaStageValueModifier"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "LymphomaStaging",
        "type": "object"
      },
      "Measure": {
        "description": "Represents a measure value with its unit.\n\nAttributes:\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.",
        "properties": {
          "value": {
            "title": "Value",
            "type": "number"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "title": "Measure",
        "type": "object"
      },
      "MicrosatelliteInstability": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "microsatellite_instability",
            "default": "microsatellite_instability",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Microsatellite instability (MSI) classification",
            "title": "Value",
            "x-expanded": false,
            "x-terminology": "MicrosatelliteInstabilityState"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "value",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "MicrosatelliteInstability",
        "type": "object"
      },
      "MolecularTherapeuticRecommendation": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "expectedEffect": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the expected effect of the drug",
            "title": "Expected medication action",
            "x-expanded": false,
            "x-terminology": "ExpectedDrugAction"
          },
          "clinicalTrial": {
            "anyOf": [
              {
                "maxLength": 15,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment",
            "title": "Recommended clinical trial",
            "x-expanded": false
          },
          "offLabelUse": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the medication(s) recommended were off-label",
            "title": "Off-label use",
            "x-expanded": false
          },
          "withinSoc": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the medication(s) recommended were within standard of care",
            "title": "Within SOC",
            "x-expanded": false
          },
          "drugs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Drugs(s) being recommended",
            "title": "Drug(s)",
            "x-expanded": false,
            "x-terminology": "AntineoplasticAgent"
          },
          "supportingGenomicVariantsIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic variants that support the recommendation",
            "title": "Supporting genomic variants",
            "x-expanded": false
          },
          "supportingGenomicSignaturesIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic signatures that support the recommendation",
            "title": "Supporting genomic signatures",
            "x-expanded": false
          },
          "supportingTumorMarkersIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tumor markers that support the recommendation",
            "title": "Supporting tumor markers",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "MolecularTherapeuticRecommendation",
        "type": "object"
      },
      "MolecularTumorBoard": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "molecular",
            "default": "molecular",
            "title": "Category",
            "type": "string"
          },
          "therapeuticRecommendations": {
            "description": "Therapeutic recommendations of the molecular tumor board",
            "items": {
              "$ref": "#/components/schemas/MolecularTherapeuticRecommendation"
            },
            "title": "Therapeuticrecommendations",
            "type": "array"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient which was discussed at the tumor board",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the tumor board.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "recommendations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommendation(s) provided by the board regarding the patient's care",
            "title": "Recommendations",
            "x-expanded": false,
            "x-terminology": "TumorBoardRecommendation"
          },
          "conductedMolecularComparison": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board",
            "title": "Conducted molecular comparison?",
            "x-expanded": false
          },
          "molecularComparisonMatchId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The neoplastic entity that was matched during the molecular comparison",
            "title": "Molecular comparison match",
            "x-expanded": false
          },
          "conductedCupCharacterization": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.",
            "title": "Conducted CUP characterization?",
            "x-expanded": false
          },
          "characterizedCup": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the cancer of unknown primary (CUP) characterization was successful.",
            "title": "Successful CUP characterization?",
            "x-expanded": false
          },
          "reviewedReports": {
            "description": "",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "title": "Reviewed Reports",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "therapeuticRecommendations",
          "id",
          "caseId",
          "date",
          "reviewedReports",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "MolecularTumorBoard",
        "type": "object"
      },
      "NeoplasticEntity": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "topographyGroup": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Broad anatomical location of the neoplastic entity",
            "title": "Topographical group",
            "x-terminology": "CancerTopographyGroup"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's neoplasm(s) are recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "relationship": {
            "$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices",
            "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.",
            "maxLength": 30,
            "title": "Neoplastic relationship",
            "x-expanded": false
          },
          "relatedPrimaryId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.",
            "title": "Related primary neoplasm",
            "x-expanded": false
          },
          "assertionDate": {
            "description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged",
            "format": "date",
            "title": "Assertion date",
            "type": "string",
            "x-expanded": false
          },
          "topography": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Anatomical location of the neoplasm(s)",
            "title": "Topography",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "morphology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself",
            "title": "Morphology",
            "x-expanded": false,
            "x-terminology": "CancerMorphology"
          },
          "differentitation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphologic differentitation characteristics of the neoplasm(s)",
            "title": "Differentiation",
            "x-expanded": false,
            "x-terminology": "HistologyDifferentiation"
          },
          "laterality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Laterality qualifier for the location of the neoplasm(s)",
            "title": "Laterality",
            "x-expanded": false,
            "x-terminology": "LateralityQualifier"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "relationship",
          "assertionDate",
          "topography",
          "morphology",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "NeoplasticEntity",
        "type": "object"
      },
      "NeoplasticEntityRelationshipChoices": {
        "enum": [
          "primary",
          "metastatic",
          "local_recurrence",
          "regional_recurrence"
        ],
        "title": "NeoplasticEntityRelationshipChoices",
        "type": "string"
      },
      "PatientCaseBundle": {
        "description": "The order of the properties matters for the import tool (based on references tree)",
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "age": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/AgeBin"
              }
            ],
            "description": "Approximate age of the patient in years",
            "title": "Age"
          },
          "overallSurvival": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overall survival of the patient since diagnosis",
            "title": "Overall survival"
          },
          "ageAtDiagnosis": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/AgeBin"
              },
              {
                "type": "null"
              }
            ],
            "description": "Approximate age of the patient in years at the time of the initial diagnosis",
            "title": "Age at diagnosis"
          },
          "dataCompletionRate": {
            "description": "Percentage indicating the completeness of a case in terms of its data.",
            "title": "Data completion rate",
            "type": "number"
          },
          "contributors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Users that have contributed to the case by adding, updating or deleting data. Sorted by number of contributions in descending order.",
            "title": "Data contributors"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "pseudoidentifier": {
            "description": "Pseudoidentifier of the patient",
            "maxLength": 40,
            "title": "Pseudoidentifier",
            "type": "string",
            "x-expanded": false
          },
          "clinicalCenter": {
            "description": "Medical center where the patient data originally resides",
            "maxLength": 200,
            "title": "Medical center",
            "type": "string",
            "x-expanded": false
          },
          "clinicalIdentifier": {
            "description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient",
            "maxLength": 100,
            "title": "Clinical identifier",
            "type": "string",
            "x-expanded": false
          },
          "consentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatientCaseConsentStatusChoices",
                "maxLength": 20
              }
            ],
            "default": "unknown",
            "description": "Status of the general consent by the patient for the use of their data for research purposes",
            "title": "Consent status",
            "x-expanded": false
          },
          "gender": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Gender for administrative purposes",
            "title": "Gender",
            "x-expanded": false,
            "x-terminology": "AdministrativeGender"
          },
          "race": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Race of the patient",
            "title": "Race",
            "x-expanded": false,
            "x-terminology": "Race"
          },
          "sexAtBirth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sex assigned at birth",
            "title": "Birth sex",
            "x-expanded": false,
            "x-terminology": "BirthSex"
          },
          "genderIdentity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Gender identity",
            "x-expanded": false,
            "x-terminology": "GenderIdentity"
          },
          "dateOfBirth": {
            "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
            "format": "date",
            "title": "Date of birth",
            "type": "string",
            "x-expanded": false
          },
          "isDeceased": {
            "description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)",
            "title": "Is deceased",
            "type": "boolean",
            "x-expanded": false
          },
          "dateOfDeath": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
            "title": "Date of death",
            "x-expanded": false
          },
          "causeOfDeath": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the cause of death.",
            "title": "Cause of death",
            "x-expanded": false,
            "x-terminology": "CauseOfDeath"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          },
          "neoplasticEntities": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/NeoplasticEntity"
            },
            "title": "Neoplasticentities",
            "type": "array"
          },
          "stagings": {
            "default": [],
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TNMStaging"
                },
                {
                  "$ref": "#/components/schemas/FIGOStaging"
                },
                {
                  "$ref": "#/components/schemas/BinetStaging"
                },
                {
                  "$ref": "#/components/schemas/RaiStaging"
                },
                {
                  "$ref": "#/components/schemas/BreslowDepth"
                },
                {
                  "$ref": "#/components/schemas/ClarkStaging"
                },
                {
                  "$ref": "#/components/schemas/ISSStaging"
                },
                {
                  "$ref": "#/components/schemas/RISSStaging"
                },
                {
                  "$ref": "#/components/schemas/GleasonGrade"
                },
                {
                  "$ref": "#/components/schemas/INSSStage"
                },
                {
                  "$ref": "#/components/schemas/INRGSSStage"
                },
                {
                  "$ref": "#/components/schemas/WilmsStage"
                },
                {
                  "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroup"
                },
                {
                  "$ref": "#/components/schemas/LymphomaStaging"
                }
              ]
            },
            "title": "Stagings",
            "type": "array"
          },
          "tumorMarkers": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TumorMarker"
            },
            "title": "Tumormarkers",
            "type": "array"
          },
          "riskAssessments": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/RiskAssessment"
            },
            "title": "Riskassessments",
            "type": "array"
          },
          "therapyLines": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TherapyLine"
            },
            "title": "Therapylines",
            "type": "array"
          },
          "systemicTherapies": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/SystemicTherapy"
            },
            "title": "Systemictherapies",
            "type": "array"
          },
          "surgeries": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Surgery"
            },
            "title": "Surgeries",
            "type": "array"
          },
          "radiotherapies": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Radiotherapy"
            },
            "title": "Radiotherapies",
            "type": "array"
          },
          "adverseEvents": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/AdverseEvent"
            },
            "title": "Adverseevents",
            "type": "array"
          },
          "treatmentResponses": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TreatmentResponse"
            },
            "title": "Treatmentresponses",
            "type": "array"
          },
          "performanceStatus": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/PerformanceStatus"
            },
            "title": "Performancestatus",
            "type": "array"
          },
          "comorbidities": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ComorbiditiesAssessment"
            },
            "title": "Comorbidities",
            "type": "array"
          },
          "genomicVariants": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/GenomicVariant"
            },
            "title": "Genomicvariants",
            "type": "array"
          },
          "genomicSignatures": {
            "default": [],
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TumorMutationalBurden"
                },
                {
                  "$ref": "#/components/schemas/MicrosatelliteInstability"
                },
                {
                  "$ref": "#/components/schemas/LossOfHeterozygosity"
                },
                {
                  "$ref": "#/components/schemas/HomologousRecombinationDeficiency"
                },
                {
                  "$ref": "#/components/schemas/TumorNeoantigenBurden"
                },
                {
                  "$ref": "#/components/schemas/AneuploidScore"
                }
              ]
            },
            "title": "Genomicsignatures",
            "type": "array"
          },
          "vitals": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Vitals"
            },
            "title": "Vitals",
            "type": "array"
          },
          "lifestyles": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Lifestyle"
            },
            "title": "Lifestyles",
            "type": "array"
          },
          "familyHistory": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/FamilyHistory"
            },
            "title": "Familyhistory",
            "type": "array"
          },
          "tumorBoards": {
            "default": [],
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UnspecifiedTumorBoard"
                },
                {
                  "$ref": "#/components/schemas/MolecularTumorBoard"
                }
              ]
            },
            "title": "Tumorboards",
            "type": "array"
          },
          "completedDataCategories": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PatientCaseDataCompletionStatusSchema"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/PatientCaseDataCategories"
            },
            "title": "Completeddatacategories",
            "type": "object"
          }
        },
        "required": [
          "age",
          "dataCompletionRate",
          "contributors",
          "id",
          "pseudoidentifier",
          "clinicalCenter",
          "clinicalIdentifier",
          "gender",
          "dateOfBirth",
          "isDeceased",
          "description",
          "createdAt",
          "createdBy",
          "completedDataCategories"
        ],
        "title": "PatientCaseBundle",
        "type": "object"
      },
      "PatientCaseConsentStatusChoices": {
        "enum": [
          "valid",
          "revoked",
          "unknown"
        ],
        "title": "PatientCaseConsentStatusChoices",
        "type": "string"
      },
      "PatientCaseDataCategories": {
        "enum": [
          "comorbidities-assessments",
          "family-histories",
          "genomic-signatures",
          "genomic-variants",
          "lifestyles",
          "comorbidities",
          "neoplastic-entities",
          "performance-status",
          "radiotherapies",
          "risk-assessments",
          "stagings",
          "surgeries",
          "systemic-therapies",
          "tumor-markers",
          "vitals",
          "tumor-board-reviews",
          "adverse-events",
          "therapy-responses"
        ],
        "title": "PatientCaseDataCategories",
        "type": "string"
      },
      "PatientCaseDataCompletionStatusSchema": {
        "properties": {
          "status": {
            "description": "Boolean indicating whether the data category has been marked as completed",
            "title": "Status",
            "type": "boolean"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the person who marked the category as completed",
            "title": "Username"
          },
          "timestamp": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the person who marked the category as completed",
            "title": "Timestamp"
          }
        },
        "required": [
          "status"
        ],
        "title": "PatientCaseDataCompletionStatusSchema",
        "type": "object"
      },
      "PerformanceStatus": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "ecogInterpretation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Official interpretation of the ECOG score"
          },
          "karnofskyInterpretation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Official interpretation of the Karnofsky score"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's performance status is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the performance score was performed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "ecogScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ECOG Performance Status Score",
            "title": "ECOG Score",
            "x-expanded": false
          },
          "karnofskyScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Karnofsky Performance Status Score",
            "title": "Karnofsky Score",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "PerformanceStatus",
        "type": "object"
      },
      "ProteinChangeType": {
        "enum": [
          "missense",
          "nonsense",
          "deletion-insertion",
          "insertion",
          "deletion",
          "duplication",
          "frameshift",
          "extension",
          "silent",
          "no-protein",
          "unknown",
          "repetition"
        ],
        "title": "ProteinChangeType",
        "type": "string"
      },
      "RISSStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "riss",
            "default": "riss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the RISS stage",
            "title": "RISS Stage",
            "x-expanded": false,
            "x-terminology": "MyelomaRISSStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RISSStaging",
        "type": "object"
      },
      "RNAChangeType": {
        "enum": [
          "substitution",
          "deletion-insertion",
          "insertion",
          "deletion",
          "duplication",
          "inversion",
          "unchanged",
          "repetition"
        ],
        "title": "RNAChangeType",
        "type": "string"
      },
      "Radiotherapy": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "dosages": {
            "description": "Radiation doses administered during the radiotherapy",
            "items": {
              "$ref": "#/components/schemas/RadiotherapyDosage"
            },
            "title": "Dosages",
            "type": "array"
          },
          "settings": {
            "description": "Settings of the radiotherapy irradiation procedure",
            "items": {
              "$ref": "#/components/schemas/RadiotherapySetting"
            },
            "title": "Settings",
            "type": "array"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the radiotherapy",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "period": {
            "$ref": "#/components/schemas/Period",
            "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.",
            "title": "Treatment period",
            "x-expanded": false
          },
          "sessions": {
            "description": "The total number of radiotherapy sessions over the treatment period.",
            "title": "Total sessions",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/RadiotherapyIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "terminationReason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Explanation for the premature or planned termination of the radiotherapy",
            "title": "Termination reason",
            "x-expanded": false,
            "x-terminology": "TreatmentTerminationReason"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the radiotherapy is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the radiotherapy",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "dosages",
          "settings",
          "id",
          "caseId",
          "period",
          "sessions",
          "intent",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Radiotherapy",
        "type": "object"
      },
      "RadiotherapyDosage": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "fractions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The total number of radiotherapy fractions delivered over the treatment period.",
            "title": "Total fractions",
            "x-expanded": false
          },
          "dose": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Total radiation dose delivered over the full radiotherapy course",
            "title": "Total radiation dose",
            "x-default-unit": "Gy",
            "x-expanded": false,
            "x-measure": "RadiationDose"
          },
          "irradiatedVolume": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Anatomical location of the irradiated volume",
            "title": "Irradiated volume",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTreatmentLocation"
          },
          "irradiatedVolumeMorphology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphology of the anatomical location of the irradiated volume",
            "title": "Irradiated volume morphology",
            "x-expanded": false,
            "x-terminology": "RadiotherapyVolumeType"
          },
          "irradiatedVolumeQualifier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "General qualifier for the anatomical location of the irradiated volume",
            "title": "Irradiated volume qualifier",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTreatmentLocationQualifier"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "irradiatedVolume",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RadiotherapyDosage",
        "type": "object"
      },
      "RadiotherapyIntentChoices": {
        "enum": [
          "curative",
          "palliative"
        ],
        "title": "RadiotherapyIntentChoices",
        "type": "string"
      },
      "RadiotherapySetting": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "modality": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Modality of external beam or brachytherapy radiation procedures",
            "title": "Modality",
            "x-expanded": false,
            "x-terminology": "RadiotherapyModality"
          },
          "technique": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Technique of external beam or brachytherapy radiation procedures",
            "title": "Technique",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTechnique"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "modality",
          "technique",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RadiotherapySetting",
        "type": "object"
      },
      "RaiStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "rai",
            "default": "rai",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Rai stage",
            "title": "Rai Stage",
            "x-expanded": false,
            "x-terminology": "RaiStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the Rai staging",
            "title": "Rai staging methodology",
            "x-expanded": false,
            "x-terminology": "RaiStagingMethod"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RaiStaging",
        "type": "object"
      },
      "Range": {
        "properties": {
          "start": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "The lower bound of the range",
            "title": "Start"
          },
          "end": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "The upper bound of the range, if not exists, assumed to be unbounded",
            "title": "End"
          }
        },
        "required": [
          "start"
        ],
        "title": "Range",
        "type": "object"
      },
      "RhabdomyosarcomaClinicalGroup": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "rhabdomyosarcoma",
            "default": "rhabdomyosarcoma",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the rhabdomyosarcoma clinical group",
            "title": "Rhabdomyosarcoma clinical group",
            "x-expanded": false,
            "x-terminology": "RhabdomyosarcomaClinicalGroup"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RhabdomyosarcomaClinicalGroup",
        "type": "object"
      },
      "RiskAssessment": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer risk is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the risk assessment was performed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "methodology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Indicates the method or type of risk assessment",
            "title": "Assessment methodology",
            "x-expanded": false,
            "x-terminology": "CancerRiskAssessmentMethod"
          },
          "risk": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Assessed risk",
            "title": "Risk",
            "x-expanded": false,
            "x-terminology": "CancerRiskAssessmentClassification"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Quantitative score used to classify the risk",
            "title": "Score",
            "x-expanded": false
          },
          "assessedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were assessed to estimate the risk.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Assessed neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "methodology",
          "risk",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "RiskAssessment",
        "type": "object"
      },
      "Surgery": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the surgical procedure",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date of the surgical procedure.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "procedure": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The specific surgical procedure that was performed",
            "title": "Surgical procedure",
            "x-expanded": false,
            "x-terminology": "SurgicalProcedure"
          },
          "intent": {
            "$ref": "#/components/schemas/SurgeryIntentChoices",
            "description": "Therapeutic intent of the surgery",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "bodysite": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anatomical location of the surgery",
            "title": "Anatomical location",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "bodysiteQualifier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "General qualifier for the anatomical location of the surgery",
            "title": "Anatomical location qualifier",
            "x-expanded": false,
            "x-terminology": "BodyLocationQualifier"
          },
          "bodysiteLaterality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Laterality for the anatomical location of the surgery",
            "title": "Anatomical location laterality",
            "x-expanded": false,
            "x-terminology": "LateralityQualifier"
          },
          "outcome": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The outcome of the surgery",
            "title": "Outcome",
            "x-expanded": false,
            "x-terminology": "ProcedureOutcome"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the surgery is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the surgery",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "procedure",
          "intent",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Surgery",
        "type": "object"
      },
      "SurgeryIntentChoices": {
        "enum": [
          "curative",
          "palliative"
        ],
        "title": "SurgeryIntentChoices",
        "type": "string"
      },
      "SystemicTherapy": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "medications": {
            "description": "Medications administered during the systemic therapy",
            "items": {
              "$ref": "#/components/schemas/SystemicTherapyMedication"
            },
            "title": "Medications",
            "type": "array"
          },
          "duration": {
            "description": "Duration of treatment in days",
            "title": "Duration",
            "type": "number"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the systemic therapy",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "period": {
            "$ref": "#/components/schemas/Period",
            "description": "Clinically-relevant period during which the therapy was administered to the patient.",
            "title": "Treatment period",
            "x-expanded": false
          },
          "cycles": {
            "description": "The total number of treatment cycles during the treatment period.",
            "title": "Cycles",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/SystemicTherapyIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "adjunctiveRole": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates the role of the adjunctive therapy (if applicable).",
            "title": "Treatment Role",
            "x-expanded": false,
            "x-terminology": "AdjunctiveTherapyRole"
          },
          "isAdjunctive": {
            "description": "Indicates whether it is adjunctive therapy instead of a primary therapy ",
            "title": "Treatment Role",
            "type": "boolean",
            "x-expanded": false
          },
          "terminationReason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Explanation for the premature or planned termination of the systemic therapy",
            "title": "Termination reason",
            "x-expanded": false,
            "x-terminology": "TreatmentTerminationReason"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the systemic therapy is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the systemic therapy",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "medications",
          "duration",
          "id",
          "caseId",
          "period",
          "cycles",
          "intent",
          "isAdjunctive",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "SystemicTherapy",
        "type": "object"
      },
      "SystemicTherapyIntentChoices": {
        "enum": [
          "curative",
          "palliative"
        ],
        "title": "SystemicTherapyIntentChoices",
        "type": "string"
      },
      "SystemicTherapyMedication": {
        "properties": {
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "drug": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Antineoplastic drug/medication administered to the patient",
            "title": "Antineoplastic Drug",
            "x-expanded": false,
            "x-terminology": "AntineoplasticAgent"
          },
          "route": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Drug administration route",
            "title": "Route",
            "x-expanded": false,
            "x-terminology": "DosageRoute"
          },
          "usedOfflabel": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a medication was used off-label at the time of administration",
            "title": "Off-label use",
            "x-expanded": false
          },
          "withinSoc": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.",
            "title": "Within SOC",
            "x-expanded": false
          },
          "dosageMassConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)",
            "title": "Dosage - Mass concentration",
            "x-default-unit": "g/l",
            "x-expanded": false,
            "x-measure": "MassConcentration"
          },
          "dosageMass": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)",
            "title": "Dosage - Fixed Mass",
            "x-default-unit": "g",
            "x-expanded": false,
            "x-measure": "Mass"
          },
          "dosageVolume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)",
            "title": "Dosage - Volume",
            "x-default-unit": "l",
            "x-expanded": false,
            "x-measure": "Volume"
          },
          "dosageMassSurface": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)",
            "title": "Dosage - Mass per body surface",
            "x-default-unit": "g/square_meter",
            "x-expanded": false,
            "x-measure": "MassPerArea"
          },
          "dosageRateMassConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)",
            "title": "Dosage rate - Mass concentration",
            "x-default-unit": "g/l/s",
            "x-expanded": false,
            "x-measure": "MassConcentrationPerTime"
          },
          "dosageRateMass": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)",
            "title": "Dosage rate - Fixed Mass",
            "x-default-unit": "g/s",
            "x-expanded": false,
            "x-measure": "MassPerTime"
          },
          "dosageRateVolume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)",
            "title": "Dosage rate - Volume",
            "x-default-unit": "l/s",
            "x-expanded": false,
            "x-measure": "VolumePerTime"
          },
          "dosageRateMassSurface": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)",
            "title": "Dosage rate - Mass per body surface",
            "x-default-unit": "g/square_meter/s",
            "x-expanded": false,
            "x-measure": "MassPerAreaPerTime"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "drug",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "SystemicTherapyMedication",
        "type": "object"
      },
      "TNMStaging": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "tnm",
            "default": "tnm",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The information determined as a result of making the observation, if the information has a simple value",
            "title": "TNM Stage",
            "x-expanded": false,
            "x-terminology": "TNMStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for TNM staging",
            "title": "TNM Staging methodology",
            "x-expanded": false,
            "x-terminology": "TNMStagingMethod"
          },
          "pathological": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.",
            "title": "Pathological staging",
            "x-expanded": false
          },
          "primarytumor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "T stage (extent of the primary tumor)",
            "title": "T Stage",
            "x-expanded": false,
            "x-terminology": "TNMPrimaryTumorCategory"
          },
          "regionalnodes": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "N stage (degree of spread to regional lymph nodes)",
            "title": "N Stage",
            "x-expanded": false,
            "x-terminology": "TNMRegionalNodesCategory"
          },
          "distantmetastases": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "M stage (presence of distant metastasis)",
            "title": "M Stage",
            "x-expanded": false,
            "x-terminology": "TNMDistantMetastasesCategory"
          },
          "grade": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "G stage (grade of the cancer cells)",
            "title": "G Stage",
            "x-expanded": false,
            "x-terminology": "TNMGradeCategory"
          },
          "residualtumor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "R stage (extent of residual tumor cells after operation)",
            "title": "R Stage",
            "x-expanded": false,
            "x-terminology": "TNMResidualTumorCategory"
          },
          "lymphaticinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "L stage (invasion into lymphatic vessels)",
            "title": "L Stage",
            "x-expanded": false,
            "x-terminology": "TNMLymphaticInvasionCategory"
          },
          "venousinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "V stage (invasion into venous vessels)",
            "title": "V Stage",
            "x-expanded": false,
            "x-terminology": "TNMVenousInvasionCategory"
          },
          "perineuralinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Pn stage (invasion into adjunct nerves)",
            "title": "Pn Stage",
            "x-expanded": false,
            "x-terminology": "TNMPerineuralInvasionCategory"
          },
          "serumtumormarkerlevel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "S stage (serum tumor marker level)",
            "title": "S Stage",
            "x-expanded": false,
            "x-terminology": "TNMSerumTumorMarkerLevelCategory"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TNMStaging",
        "type": "object"
      },
      "TherapyLine": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "period": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Period"
              },
              {
                "type": "null"
              }
            ],
            "description": "Time period of the therapy line",
            "title": "Period"
          },
          "label": {
            "description": "Label categorizing the therapy line",
            "title": "Label",
            "type": "string"
          },
          "progressionFreeSurvival": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Progression-free survival (PFS) of the patient for the therapy line",
            "title": "Progression-free survival in months"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient to whom this therapy line is associated",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "ordinal": {
            "description": "Number indicating the sequence in which this block of treatments were administered to the patient",
            "title": "Line ordinal number",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/TherapyLineIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "progressionDate": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date at which progression was first detected, if applicable",
            "title": "Begin of progression",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "label",
          "id",
          "caseId",
          "ordinal",
          "intent",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TherapyLine",
        "type": "object"
      },
      "TherapyLineIntentChoices": {
        "enum": [
          "curative",
          "palliative"
        ],
        "title": "TherapyLineIntentChoices",
        "type": "string"
      },
      "TreatmentResponse": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's treatment response is asseessed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date of the treatment response assessment",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "recist": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The classification of the treatment response according to RECIST",
            "title": "RECIST",
            "x-expanded": false,
            "x-terminology": "CancerTreatmentResponse"
          },
          "recistInterpreted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report",
            "title": "RECIST Interpreted?",
            "x-expanded": false
          },
          "methodology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Method used to assess and classify the treatment response",
            "title": "Assessment method",
            "x-expanded": false,
            "x-terminology": "CancerTreatmentResponseObservationMethod"
          },
          "assessedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were assesed for treatment response",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Assessed neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "assessedBodysites": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anatomical location assessed to determine the treatment response",
            "title": "Assessed anatomical location",
            "x-expanded": false,
            "x-terminology": "ObservationBodySite"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "recist",
          "methodology",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TreatmentResponse",
        "type": "object"
      },
      "TumorMarker": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient related to the tumor marker result",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the tumor marker was analyzed.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "analyte": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The chemical or biological substance/agent that is analyzed.",
            "title": "Analyte",
            "x-expanded": false,
            "x-terminology": "TumorMarkerAnalyte"
          },
          "massConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Mass concentration of the analyte (if revelant/measured)",
            "title": "Mass concentration",
            "x-default-unit": "g/l",
            "x-expanded": false,
            "x-measure": "MassConcentration"
          },
          "arbitraryConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Arbitrary concentration of the analyte (if revelant/measured)",
            "title": "Arbitrary concentration",
            "x-default-unit": "kIU/l",
            "x-expanded": false,
            "x-measure": "ArbitraryConcentration"
          },
          "substanceConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Substance concentration of the analyte (if revelant/measured)",
            "title": "Substance concentration",
            "x-default-unit": "mol/l",
            "x-expanded": false,
            "x-measure": "SubstanceConcentration"
          },
          "fraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Analyte fraction (if revelant/measured)",
            "title": "Fraction",
            "x-default-unit": "%",
            "x-expanded": false,
            "x-measure": "Fraction"
          },
          "multipleOfMedian": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Multiples of the median analyte (if revelant/measured)",
            "title": "Multiples of the median",
            "x-default-unit": "multiple_of_median",
            "x-expanded": false,
            "x-measure": "MultipleOfMedian"
          },
          "tumorProportionScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the percentage of cells in a tumor that express PD-L1",
            "title": "Immune Cells Score (ICS)",
            "x-expanded": false
          },
          "immuneCellScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the percentage of PD-L1 positive immune cells",
            "title": "Immune Cells Score (ICS)",
            "x-expanded": false
          },
          "combinedPositiveScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100",
            "title": "Combined Positive Score (CPS)",
            "x-default-unit": "%",
            "x-expanded": false,
            "x-measure": "Fraction"
          },
          "immunohistochemicalScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the number of analyte-positive cells in a sample",
            "title": "Immunohistochemical Score",
            "x-expanded": false
          },
          "presence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerPresenceChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether an analyte has tested positive or negative.",
            "title": "Presence",
            "x-expanded": false
          },
          "nuclearExpressionStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the status of expression of the analyte",
            "title": "Nuclear expression status",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "analyte",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TumorMarker",
        "type": "object"
      },
      "TumorMarkerImmuneCellScoreChoices": {
        "enum": [
          "IC0",
          "IC1",
          "IC2",
          "IC3"
        ],
        "title": "TumorMarkerImmuneCellScoreChoices",
        "type": "string"
      },
      "TumorMarkerImmunohistochemicalScoreChoices": {
        "enum": [
          "0",
          "1+",
          "2+",
          "3+",
          "indeterminate"
        ],
        "title": "TumorMarkerImmunohistochemicalScoreChoices",
        "type": "string"
      },
      "TumorMarkerNuclearExpressionStatusChoices": {
        "enum": [
          "intact",
          "loss",
          "indeterminate"
        ],
        "title": "TumorMarkerNuclearExpressionStatusChoices",
        "type": "string"
      },
      "TumorMarkerPresenceChoices": {
        "enum": [
          "positive",
          "negative",
          "indeterminate"
        ],
        "title": "TumorMarkerPresenceChoices",
        "type": "string"
      },
      "TumorMarkerTumorProportionScoreChoices": {
        "enum": [
          "TC0",
          "TC1",
          "TC2",
          "TC3"
        ],
        "title": "TumorMarkerTumorProportionScoreChoices",
        "type": "string"
      },
      "TumorMutationalBurden": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "tumor_mutational_burden",
            "default": "tumor_mutational_burden",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual tumor mutational burden (TMB) value in mutations/Mb",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Cclassification of the tumor mutational burden (TMB) status",
            "title": "Status",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "value",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TumorMutationalBurden",
        "type": "object"
      },
      "TumorMutationalBurdenStatusChoices": {
        "enum": [
          "low",
          "high",
          "intermediate",
          "indeterminate"
        ],
        "title": "TumorMutationalBurdenStatusChoices",
        "type": "string"
      },
      "TumorNeoantigenBurden": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "tumor_neoantigen_burden",
            "default": "tumor_neoantigen_burden",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "value",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "TumorNeoantigenBurden",
        "type": "object"
      },
      "UnspecifiedTumorBoard": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "category": {
            "const": "unspecified",
            "default": "unspecified",
            "title": "Category",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient which was discussed at the tumor board",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the tumor board.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "recommendations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommendation(s) provided by the board regarding the patient's care",
            "title": "Recommendations",
            "x-expanded": false,
            "x-terminology": "TumorBoardRecommendation"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "UnspecifiedTumorBoard",
        "type": "object"
      },
      "Vitals": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "body_mass_index": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bodymass index of the patient"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's vitals are assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the vitals were recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "height": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Height of the patient",
            "title": "Height",
            "x-default-unit": "m",
            "x-expanded": false,
            "x-measure": "Distance"
          },
          "weight": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Weight of the patient",
            "title": "Weight",
            "x-default-unit": "kg",
            "x-expanded": false,
            "x-measure": "Mass"
          },
          "bloodPressureSystolic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systolic blood pressure of the patient",
            "title": "Systolic blood pressure",
            "x-default-unit": "mmHg",
            "x-expanded": false,
            "x-measure": "Pressure"
          },
          "bloodPressureDiastolic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Diastolic blood pressure of the patient",
            "title": "Diastolic blood pressure",
            "x-default-unit": "mmHg",
            "x-expanded": false,
            "x-measure": "Pressure"
          },
          "temperature": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Temperature of the patient",
            "title": "Temperature",
            "x-default-unit": "celsius",
            "x-expanded": false,
            "x-measure": "Temperature"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Vitals",
        "type": "object"
      },
      "WilmsStage": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "stagingDomain": {
            "const": "wilms",
            "default": "wilms",
            "title": "Stagingdomain",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Wilms stage",
            "title": "Wilms Stage",
            "x-expanded": false,
            "x-terminology": "WilmsTumorStage"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "caseId",
          "date",
          "stage",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "WilmsStage",
        "type": "object"
      },
      "ConflictResolution": {
        "enum": [
          "overwrite",
          "reassign"
        ],
        "title": "ConflictResolution",
        "type": "string"
      },
      "PatientCaseFilters": {
        "properties": {
          "age.lessThan": {
            "description": "Age - Filter for entries with values less than the specified value",
            "title": "Age.Lessthan",
            "type": "integer"
          },
          "age.lessThanOrEqual": {
            "description": "Age - Filter for entries with values less than or equal to the specified value",
            "title": "Age.Lessthanorequal",
            "type": "integer"
          },
          "age.greaterThan": {
            "description": "Age - Filter for entries with values greater than the specified value",
            "title": "Age.Greaterthan",
            "type": "integer"
          },
          "age.greaterThanOrEqual": {
            "description": "Age - Filter for entries with values greater than or equal to the specified value",
            "title": "Age.Greaterthanorequal",
            "type": "integer"
          },
          "age.equal": {
            "description": "Age - Filter for entries with values exactly equal to the specified value",
            "title": "Age.Equal",
            "type": "integer"
          },
          "age.not.equal": {
            "description": "Age - Filter for entries with values not equal to the specified value",
            "title": "Age.Not.Equal",
            "type": "integer"
          },
          "age.between": {
            "description": "Age - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Age.Between",
            "type": "array"
          },
          "age.not.between": {
            "description": "Age - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Age.Not.Between",
            "type": "array"
          },
          "overallSurvival.not.exists": {
            "description": "Overall survival - Filter for entries without a value",
            "title": "Overallsurvival.Not.Exists",
            "type": "boolean"
          },
          "overallSurvival.exists": {
            "description": "Overall survival - Filter for entries with a value",
            "title": "Overallsurvival.Exists",
            "type": "boolean"
          },
          "overallSurvival.lessThan": {
            "description": "Overall survival - Filter for entries with values less than the specified value",
            "title": "Overallsurvival.Lessthan",
            "type": "number"
          },
          "overallSurvival.lessThanOrEqual": {
            "description": "Overall survival - Filter for entries with values less than or equal to the specified value",
            "title": "Overallsurvival.Lessthanorequal",
            "type": "number"
          },
          "overallSurvival.greaterThan": {
            "description": "Overall survival - Filter for entries with values greater than the specified value",
            "title": "Overallsurvival.Greaterthan",
            "type": "number"
          },
          "overallSurvival.greaterThanOrEqual": {
            "description": "Overall survival - Filter for entries with values greater than or equal to the specified value",
            "title": "Overallsurvival.Greaterthanorequal",
            "type": "number"
          },
          "overallSurvival.equal": {
            "description": "Overall survival - Filter for entries with values exactly equal to the specified value",
            "title": "Overallsurvival.Equal",
            "type": "number"
          },
          "overallSurvival.not.equal": {
            "description": "Overall survival - Filter for entries with values not equal to the specified value",
            "title": "Overallsurvival.Not.Equal",
            "type": "number"
          },
          "overallSurvival.between": {
            "description": "Overall survival - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Overallsurvival.Between",
            "type": "array"
          },
          "overallSurvival.not.between": {
            "description": "Overall survival - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Overallsurvival.Not.Between",
            "type": "array"
          },
          "ageAtDiagnosis.not.exists": {
            "description": "Age at diagnosis - Filter for entries without a value",
            "title": "Ageatdiagnosis.Not.Exists",
            "type": "boolean"
          },
          "ageAtDiagnosis.exists": {
            "description": "Age at diagnosis - Filter for entries with a value",
            "title": "Ageatdiagnosis.Exists",
            "type": "boolean"
          },
          "ageAtDiagnosis.lessThan": {
            "description": "Age at diagnosis - Filter for entries with values less than the specified value",
            "title": "Ageatdiagnosis.Lessthan",
            "type": "integer"
          },
          "ageAtDiagnosis.lessThanOrEqual": {
            "description": "Age at diagnosis - Filter for entries with values less than or equal to the specified value",
            "title": "Ageatdiagnosis.Lessthanorequal",
            "type": "integer"
          },
          "ageAtDiagnosis.greaterThan": {
            "description": "Age at diagnosis - Filter for entries with values greater than the specified value",
            "title": "Ageatdiagnosis.Greaterthan",
            "type": "integer"
          },
          "ageAtDiagnosis.greaterThanOrEqual": {
            "description": "Age at diagnosis - Filter for entries with values greater than or equal to the specified value",
            "title": "Ageatdiagnosis.Greaterthanorequal",
            "type": "integer"
          },
          "ageAtDiagnosis.equal": {
            "description": "Age at diagnosis - Filter for entries with values exactly equal to the specified value",
            "title": "Ageatdiagnosis.Equal",
            "type": "integer"
          },
          "ageAtDiagnosis.not.equal": {
            "description": "Age at diagnosis - Filter for entries with values not equal to the specified value",
            "title": "Ageatdiagnosis.Not.Equal",
            "type": "integer"
          },
          "ageAtDiagnosis.between": {
            "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ageatdiagnosis.Between",
            "type": "array"
          },
          "ageAtDiagnosis.not.between": {
            "description": "Age at diagnosis - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ageatdiagnosis.Not.Between",
            "type": "array"
          },
          "dataCompletionRate.lessThan": {
            "description": "Data completion rate - Filter for entries with values less than the specified value",
            "title": "Datacompletionrate.Lessthan",
            "type": "number"
          },
          "dataCompletionRate.lessThanOrEqual": {
            "description": "Data completion rate - Filter for entries with values less than or equal to the specified value",
            "title": "Datacompletionrate.Lessthanorequal",
            "type": "number"
          },
          "dataCompletionRate.greaterThan": {
            "description": "Data completion rate - Filter for entries with values greater than the specified value",
            "title": "Datacompletionrate.Greaterthan",
            "type": "number"
          },
          "dataCompletionRate.greaterThanOrEqual": {
            "description": "Data completion rate - Filter for entries with values greater than or equal to the specified value",
            "title": "Datacompletionrate.Greaterthanorequal",
            "type": "number"
          },
          "dataCompletionRate.equal": {
            "description": "Data completion rate - Filter for entries with values exactly equal to the specified value",
            "title": "Datacompletionrate.Equal",
            "type": "number"
          },
          "dataCompletionRate.not.equal": {
            "description": "Data completion rate - Filter for entries with values not equal to the specified value",
            "title": "Datacompletionrate.Not.Equal",
            "type": "number"
          },
          "dataCompletionRate.between": {
            "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Datacompletionrate.Between",
            "type": "array"
          },
          "dataCompletionRate.not.between": {
            "description": "Data completion rate - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Datacompletionrate.Not.Between",
            "type": "array"
          },
          "contributors.not.exists": {
            "description": "Data contributors - Filter for entries without a value",
            "title": "Contributors.Not.Exists",
            "type": "boolean"
          },
          "contributors.exists": {
            "description": "Data contributors - Filter for entries with a value",
            "title": "Contributors.Exists",
            "type": "boolean"
          },
          "contributors": {
            "description": "Data contributors - Filter for full text matches",
            "title": "Contributors",
            "type": "string"
          },
          "contributors.not": {
            "description": "Data contributors - Filter for full text mismatches",
            "title": "Contributors.Not",
            "type": "string"
          },
          "contributors.contains": {
            "description": "Data contributors - Filter for partial text matches",
            "title": "Contributors.Contains",
            "type": "string"
          },
          "contributors.not.contains": {
            "description": "Data contributors - Filter for partial text mismatches",
            "title": "Contributors.Not.Contains",
            "type": "string"
          },
          "contributors.beginsWith": {
            "description": "Data contributors - Filter for entries starting with the text",
            "title": "Contributors.Beginswith",
            "type": "string"
          },
          "contributors.not.beginsWith": {
            "description": "Data contributors - Filter for entries not starting with the text",
            "title": "Contributors.Not.Beginswith",
            "type": "string"
          },
          "contributors.endsWith": {
            "description": "Data contributors - Filter for entries ending with the text",
            "title": "Contributors.Endswith",
            "type": "string"
          },
          "contributors.not.endsWith": {
            "description": "Data contributors - Filter for entries not ending with the text",
            "title": "Contributors.Not.Endswith",
            "type": "string"
          },
          "contributors.anyOf": {
            "description": "Data contributors - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Contributors.Anyof",
            "type": "array"
          },
          "contributors.not.anyOf": {
            "description": "Data contributors - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Contributors.Not.Anyof",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "pseudoidentifier": {
            "description": "Pseudoidentifier - Filter for full text matches",
            "title": "Pseudoidentifier",
            "type": "string"
          },
          "pseudoidentifier.not": {
            "description": "Pseudoidentifier - Filter for full text mismatches",
            "title": "Pseudoidentifier.Not",
            "type": "string"
          },
          "pseudoidentifier.contains": {
            "description": "Pseudoidentifier - Filter for partial text matches",
            "title": "Pseudoidentifier.Contains",
            "type": "string"
          },
          "pseudoidentifier.not.contains": {
            "description": "Pseudoidentifier - Filter for partial text mismatches",
            "title": "Pseudoidentifier.Not.Contains",
            "type": "string"
          },
          "pseudoidentifier.beginsWith": {
            "description": "Pseudoidentifier - Filter for entries starting with the text",
            "title": "Pseudoidentifier.Beginswith",
            "type": "string"
          },
          "pseudoidentifier.not.beginsWith": {
            "description": "Pseudoidentifier - Filter for entries not starting with the text",
            "title": "Pseudoidentifier.Not.Beginswith",
            "type": "string"
          },
          "pseudoidentifier.endsWith": {
            "description": "Pseudoidentifier - Filter for entries ending with the text",
            "title": "Pseudoidentifier.Endswith",
            "type": "string"
          },
          "pseudoidentifier.not.endsWith": {
            "description": "Pseudoidentifier - Filter for entries not ending with the text",
            "title": "Pseudoidentifier.Not.Endswith",
            "type": "string"
          },
          "pseudoidentifier.anyOf": {
            "description": "Pseudoidentifier - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Pseudoidentifier.Anyof",
            "type": "array"
          },
          "pseudoidentifier.not.anyOf": {
            "description": "Pseudoidentifier - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Pseudoidentifier.Not.Anyof",
            "type": "array"
          },
          "clinicalCenter": {
            "description": "Medical center - Filter for full text matches",
            "title": "Clinicalcenter",
            "type": "string"
          },
          "clinicalCenter.not": {
            "description": "Medical center - Filter for full text mismatches",
            "title": "Clinicalcenter.Not",
            "type": "string"
          },
          "clinicalCenter.contains": {
            "description": "Medical center - Filter for partial text matches",
            "title": "Clinicalcenter.Contains",
            "type": "string"
          },
          "clinicalCenter.not.contains": {
            "description": "Medical center - Filter for partial text mismatches",
            "title": "Clinicalcenter.Not.Contains",
            "type": "string"
          },
          "clinicalCenter.beginsWith": {
            "description": "Medical center - Filter for entries starting with the text",
            "title": "Clinicalcenter.Beginswith",
            "type": "string"
          },
          "clinicalCenter.not.beginsWith": {
            "description": "Medical center - Filter for entries not starting with the text",
            "title": "Clinicalcenter.Not.Beginswith",
            "type": "string"
          },
          "clinicalCenter.endsWith": {
            "description": "Medical center - Filter for entries ending with the text",
            "title": "Clinicalcenter.Endswith",
            "type": "string"
          },
          "clinicalCenter.not.endsWith": {
            "description": "Medical center - Filter for entries not ending with the text",
            "title": "Clinicalcenter.Not.Endswith",
            "type": "string"
          },
          "clinicalCenter.anyOf": {
            "description": "Medical center - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalcenter.Anyof",
            "type": "array"
          },
          "clinicalCenter.not.anyOf": {
            "description": "Medical center - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalcenter.Not.Anyof",
            "type": "array"
          },
          "clinicalIdentifier": {
            "description": "Clinical identifier - Filter for full text matches",
            "title": "Clinicalidentifier",
            "type": "string"
          },
          "clinicalIdentifier.not": {
            "description": "Clinical identifier - Filter for full text mismatches",
            "title": "Clinicalidentifier.Not",
            "type": "string"
          },
          "clinicalIdentifier.contains": {
            "description": "Clinical identifier - Filter for partial text matches",
            "title": "Clinicalidentifier.Contains",
            "type": "string"
          },
          "clinicalIdentifier.not.contains": {
            "description": "Clinical identifier - Filter for partial text mismatches",
            "title": "Clinicalidentifier.Not.Contains",
            "type": "string"
          },
          "clinicalIdentifier.beginsWith": {
            "description": "Clinical identifier - Filter for entries starting with the text",
            "title": "Clinicalidentifier.Beginswith",
            "type": "string"
          },
          "clinicalIdentifier.not.beginsWith": {
            "description": "Clinical identifier - Filter for entries not starting with the text",
            "title": "Clinicalidentifier.Not.Beginswith",
            "type": "string"
          },
          "clinicalIdentifier.endsWith": {
            "description": "Clinical identifier - Filter for entries ending with the text",
            "title": "Clinicalidentifier.Endswith",
            "type": "string"
          },
          "clinicalIdentifier.not.endsWith": {
            "description": "Clinical identifier - Filter for entries not ending with the text",
            "title": "Clinicalidentifier.Not.Endswith",
            "type": "string"
          },
          "clinicalIdentifier.anyOf": {
            "description": "Clinical identifier - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalidentifier.Anyof",
            "type": "array"
          },
          "clinicalIdentifier.not.anyOf": {
            "description": "Clinical identifier - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinicalidentifier.Not.Anyof",
            "type": "array"
          },
          "consentStatus": {
            "allOf": [
              {
                "enum": [
                  "valid",
                  "revoked",
                  "unknown"
                ],
                "title": "PatientCaseConsentStatusChoices",
                "type": "string"
              }
            ],
            "description": "Consent status - ('Filter for single value choice',)"
          },
          "consentStatus.not": {
            "allOf": [
              {
                "enum": [
                  "valid",
                  "revoked",
                  "unknown"
                ],
                "title": "PatientCaseConsentStatusChoices",
                "type": "string"
              }
            ],
            "description": "Consent status - ('Filter for all but a single value choice',)"
          },
          "consentStatus.anyOf": {
            "description": "Consent status - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "valid",
                "revoked",
                "unknown"
              ],
              "title": "PatientCaseConsentStatusChoices",
              "type": "string"
            },
            "title": "Consentstatus.Anyof",
            "type": "array"
          },
          "gender": {
            "description": "Gender - Filter for a matching concept code",
            "title": "Gender",
            "type": "string"
          },
          "gender.not": {
            "description": "Gender - Filter for a mismatching concept code",
            "title": "Gender.Not",
            "type": "string"
          },
          "gender.anyOf": {
            "description": "Gender - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Gender.Anyof",
            "type": "array"
          },
          "gender.not.anyOf": {
            "description": "Gender - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Gender.Not.Anyof",
            "type": "array"
          },
          "gender.descendantsOf": {
            "description": "Gender - Filter for all child concepts of a given concepts code",
            "title": "Gender.Descendantsof",
            "type": "string"
          },
          "race.not.exists": {
            "description": "Race - Filter for entries without a value",
            "title": "Race.Not.Exists",
            "type": "boolean"
          },
          "race.exists": {
            "description": "Race - Filter for entries with a value",
            "title": "Race.Exists",
            "type": "boolean"
          },
          "race": {
            "description": "Race - Filter for a matching concept code",
            "title": "Race",
            "type": "string"
          },
          "race.not": {
            "description": "Race - Filter for a mismatching concept code",
            "title": "Race.Not",
            "type": "string"
          },
          "race.anyOf": {
            "description": "Race - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Race.Anyof",
            "type": "array"
          },
          "race.not.anyOf": {
            "description": "Race - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Race.Not.Anyof",
            "type": "array"
          },
          "race.descendantsOf": {
            "description": "Race - Filter for all child concepts of a given concepts code",
            "title": "Race.Descendantsof",
            "type": "string"
          },
          "sexAtBirth.not.exists": {
            "description": "Birth sex - Filter for entries without a value",
            "title": "Sexatbirth.Not.Exists",
            "type": "boolean"
          },
          "sexAtBirth.exists": {
            "description": "Birth sex - Filter for entries with a value",
            "title": "Sexatbirth.Exists",
            "type": "boolean"
          },
          "sexAtBirth": {
            "description": "Birth sex - Filter for a matching concept code",
            "title": "Sexatbirth",
            "type": "string"
          },
          "sexAtBirth.not": {
            "description": "Birth sex - Filter for a mismatching concept code",
            "title": "Sexatbirth.Not",
            "type": "string"
          },
          "sexAtBirth.anyOf": {
            "description": "Birth sex - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Sexatbirth.Anyof",
            "type": "array"
          },
          "sexAtBirth.not.anyOf": {
            "description": "Birth sex - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Sexatbirth.Not.Anyof",
            "type": "array"
          },
          "sexAtBirth.descendantsOf": {
            "description": "Birth sex - Filter for all child concepts of a given concepts code",
            "title": "Sexatbirth.Descendantsof",
            "type": "string"
          },
          "genderIdentity.not.exists": {
            "description": "Gender identity - Filter for entries without a value",
            "title": "Genderidentity.Not.Exists",
            "type": "boolean"
          },
          "genderIdentity.exists": {
            "description": "Gender identity - Filter for entries with a value",
            "title": "Genderidentity.Exists",
            "type": "boolean"
          },
          "genderIdentity": {
            "description": "Gender identity - Filter for a matching concept code",
            "title": "Genderidentity",
            "type": "string"
          },
          "genderIdentity.not": {
            "description": "Gender identity - Filter for a mismatching concept code",
            "title": "Genderidentity.Not",
            "type": "string"
          },
          "genderIdentity.anyOf": {
            "description": "Gender identity - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genderidentity.Anyof",
            "type": "array"
          },
          "genderIdentity.not.anyOf": {
            "description": "Gender identity - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genderidentity.Not.Anyof",
            "type": "array"
          },
          "genderIdentity.descendantsOf": {
            "description": "Gender identity - Filter for all child concepts of a given concepts code",
            "title": "Genderidentity.Descendantsof",
            "type": "string"
          },
          "dateOfBirth.before": {
            "description": "Date of birth - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Dateofbirth.Before",
            "type": "string"
          },
          "dateOfBirth.after": {
            "description": "Date of birth - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Dateofbirth.After",
            "type": "string"
          },
          "dateOfBirth.onOrBefore": {
            "description": "Date of birth - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Dateofbirth.Onorbefore",
            "type": "string"
          },
          "dateOfBirth.onOrAfter": {
            "description": "Date of birth - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Dateofbirth.Onorafter",
            "type": "string"
          },
          "dateOfBirth.on": {
            "description": "Date of birth - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Dateofbirth.On",
            "type": "string"
          },
          "dateOfBirth.not.on": {
            "description": "Date of birth - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Dateofbirth.Not.On",
            "type": "string"
          },
          "dateOfBirth.between": {
            "description": "Date of birth - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateofbirth.Between",
            "type": "array"
          },
          "dateOfBirth.not.between": {
            "description": "Date of birth - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateofbirth.Not.Between",
            "type": "array"
          },
          "isDeceased": {
            "description": "Is deceased - ('Filter for yes/no statement',)",
            "title": "Isdeceased",
            "type": "boolean"
          },
          "dateOfDeath.not.exists": {
            "description": "Date of death - Filter for entries without a value",
            "title": "Dateofdeath.Not.Exists",
            "type": "boolean"
          },
          "dateOfDeath.exists": {
            "description": "Date of death - Filter for entries with a value",
            "title": "Dateofdeath.Exists",
            "type": "boolean"
          },
          "dateOfDeath.before": {
            "description": "Date of death - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Dateofdeath.Before",
            "type": "string"
          },
          "dateOfDeath.after": {
            "description": "Date of death - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Dateofdeath.After",
            "type": "string"
          },
          "dateOfDeath.onOrBefore": {
            "description": "Date of death - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Dateofdeath.Onorbefore",
            "type": "string"
          },
          "dateOfDeath.onOrAfter": {
            "description": "Date of death - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Dateofdeath.Onorafter",
            "type": "string"
          },
          "dateOfDeath.on": {
            "description": "Date of death - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Dateofdeath.On",
            "type": "string"
          },
          "dateOfDeath.not.on": {
            "description": "Date of death - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Dateofdeath.Not.On",
            "type": "string"
          },
          "dateOfDeath.between": {
            "description": "Date of death - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateofdeath.Between",
            "type": "array"
          },
          "dateOfDeath.not.between": {
            "description": "Date of death - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateofdeath.Not.Between",
            "type": "array"
          },
          "causeOfDeath.not.exists": {
            "description": "Cause of death - Filter for entries without a value",
            "title": "Causeofdeath.Not.Exists",
            "type": "boolean"
          },
          "causeOfDeath.exists": {
            "description": "Cause of death - Filter for entries with a value",
            "title": "Causeofdeath.Exists",
            "type": "boolean"
          },
          "causeOfDeath": {
            "description": "Cause of death - Filter for a matching concept code",
            "title": "Causeofdeath",
            "type": "string"
          },
          "causeOfDeath.not": {
            "description": "Cause of death - Filter for a mismatching concept code",
            "title": "Causeofdeath.Not",
            "type": "string"
          },
          "causeOfDeath.anyOf": {
            "description": "Cause of death - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Causeofdeath.Anyof",
            "type": "array"
          },
          "causeOfDeath.not.anyOf": {
            "description": "Cause of death - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Causeofdeath.Not.Anyof",
            "type": "array"
          },
          "causeOfDeath.descendantsOf": {
            "description": "Cause of death - Filter for all child concepts of a given concepts code",
            "title": "Causeofdeath.Descendantsof",
            "type": "string"
          }
        },
        "title": "PatientCaseFilters",
        "type": "object"
      },
      "Paginated_PatientCase_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PatientCase"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[PatientCase]",
        "type": "object"
      },
      "PatientCase": {
        "properties": {
          "anonymized": {
            "default": false,
            "description": "Whether the data has been anonymized",
            "title": "Is anonymized",
            "type": "boolean"
          },
          "age": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/AgeBin"
              }
            ],
            "description": "Approximate age of the patient in years",
            "title": "Age"
          },
          "overallSurvival": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overall survival of the patient since diagnosis",
            "title": "Overall survival"
          },
          "ageAtDiagnosis": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/AgeBin"
              },
              {
                "type": "null"
              }
            ],
            "description": "Approximate age of the patient in years at the time of the initial diagnosis",
            "title": "Age at diagnosis"
          },
          "dataCompletionRate": {
            "description": "Percentage indicating the completeness of a case in terms of its data.",
            "title": "Data completion rate",
            "type": "number"
          },
          "contributors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Users that have contributed to the case by adding, updating or deleting data. Sorted by number of contributions in descending order.",
            "title": "Data contributors"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "pseudoidentifier": {
            "description": "Pseudoidentifier of the patient",
            "maxLength": 40,
            "title": "Pseudoidentifier",
            "type": "string",
            "x-expanded": false
          },
          "clinicalCenter": {
            "description": "Medical center where the patient data originally resides",
            "maxLength": 200,
            "title": "Medical center",
            "type": "string",
            "x-expanded": false
          },
          "clinicalIdentifier": {
            "description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient",
            "maxLength": 100,
            "title": "Clinical identifier",
            "type": "string",
            "x-expanded": false
          },
          "consentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatientCaseConsentStatusChoices",
                "maxLength": 20
              }
            ],
            "default": "unknown",
            "description": "Status of the general consent by the patient for the use of their data for research purposes",
            "title": "Consent status",
            "x-expanded": false
          },
          "gender": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Gender for administrative purposes",
            "title": "Gender",
            "x-expanded": false,
            "x-terminology": "AdministrativeGender"
          },
          "race": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Race of the patient",
            "title": "Race",
            "x-expanded": false,
            "x-terminology": "Race"
          },
          "sexAtBirth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sex assigned at birth",
            "title": "Birth sex",
            "x-expanded": false,
            "x-terminology": "BirthSex"
          },
          "genderIdentity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Gender identity",
            "x-expanded": false,
            "x-terminology": "GenderIdentity"
          },
          "dateOfBirth": {
            "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
            "format": "date",
            "title": "Date of birth",
            "type": "string",
            "x-expanded": false
          },
          "isDeceased": {
            "description": "Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)",
            "title": "Is deceased",
            "type": "boolean",
            "x-expanded": false
          },
          "dateOfDeath": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
            "title": "Date of death",
            "x-expanded": false
          },
          "causeOfDeath": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the cause of death.",
            "title": "Cause of death",
            "x-expanded": false,
            "x-terminology": "CauseOfDeath"
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "age",
          "dataCompletionRate",
          "contributors",
          "id",
          "pseudoidentifier",
          "clinicalCenter",
          "clinicalIdentifier",
          "gender",
          "dateOfBirth",
          "isDeceased",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "PatientCase",
        "type": "object"
      },
      "PatientCaseCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "clinicalCenter": {
            "description": "Medical center where the patient data originally resides",
            "maxLength": 200,
            "title": "Medical center",
            "type": "string",
            "x-expanded": false
          },
          "clinicalIdentifier": {
            "description": "Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient",
            "maxLength": 100,
            "title": "Clinical identifier",
            "type": "string",
            "x-expanded": false
          },
          "consentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatientCaseConsentStatusChoices",
                "maxLength": 20
              }
            ],
            "default": "unknown",
            "description": "Status of the general consent by the patient for the use of their data for research purposes",
            "title": "Consent status",
            "x-expanded": false
          },
          "gender": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Gender for administrative purposes",
            "title": "Gender",
            "x-expanded": false,
            "x-terminology": "AdministrativeGender"
          },
          "race": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Race of the patient",
            "title": "Race",
            "x-expanded": false,
            "x-terminology": "Race"
          },
          "sexAtBirth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sex assigned at birth",
            "title": "Birth sex",
            "x-expanded": false,
            "x-terminology": "BirthSex"
          },
          "genderIdentity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "",
            "title": "Gender identity",
            "x-expanded": false,
            "x-terminology": "GenderIdentity"
          },
          "dateOfBirth": {
            "description": "Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
            "format": "date",
            "title": "Date of birth",
            "type": "string",
            "x-expanded": false
          },
          "dateOfDeath": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
            "title": "Date of death",
            "x-expanded": false
          },
          "causeOfDeath": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the cause of death.",
            "title": "Cause of death",
            "x-expanded": false,
            "x-terminology": "CauseOfDeath"
          }
        },
        "required": [
          "clinicalCenter",
          "clinicalIdentifier",
          "gender",
          "dateOfBirth"
        ],
        "title": "PatientCaseCreate",
        "type": "object"
      },
      "NeoplasticEntityFilters": {
        "properties": {
          "topographyGroup.not.exists": {
            "description": "Topographical group - Filter for entries without a value",
            "title": "Topographygroup.Not.Exists",
            "type": "boolean"
          },
          "topographyGroup.exists": {
            "description": "Topographical group - Filter for entries with a value",
            "title": "Topographygroup.Exists",
            "type": "boolean"
          },
          "topographyGroup": {
            "description": "Topographical group - Filter for a matching concept code",
            "title": "Topographygroup",
            "type": "string"
          },
          "topographyGroup.not": {
            "description": "Topographical group - Filter for a mismatching concept code",
            "title": "Topographygroup.Not",
            "type": "string"
          },
          "topographyGroup.anyOf": {
            "description": "Topographical group - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topographygroup.Anyof",
            "type": "array"
          },
          "topographyGroup.not.anyOf": {
            "description": "Topographical group - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topographygroup.Not.Anyof",
            "type": "array"
          },
          "topographyGroup.descendantsOf": {
            "description": "Topographical group - Filter for all child concepts of a given concepts code",
            "title": "Topographygroup.Descendantsof",
            "type": "string"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "relationship": {
            "allOf": [
              {
                "enum": [
                  "primary",
                  "metastatic",
                  "local_recurrence",
                  "regional_recurrence"
                ],
                "title": "NeoplasticEntityRelationshipChoices",
                "type": "string"
              }
            ],
            "description": "Neoplastic relationship - ('Filter for single value choice',)"
          },
          "relationship.not": {
            "allOf": [
              {
                "enum": [
                  "primary",
                  "metastatic",
                  "local_recurrence",
                  "regional_recurrence"
                ],
                "title": "NeoplasticEntityRelationshipChoices",
                "type": "string"
              }
            ],
            "description": "Neoplastic relationship - ('Filter for all but a single value choice',)"
          },
          "relationship.anyOf": {
            "description": "Neoplastic relationship - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "primary",
                "metastatic",
                "local_recurrence",
                "regional_recurrence"
              ],
              "title": "NeoplasticEntityRelationshipChoices",
              "type": "string"
            },
            "title": "Relationship.Anyof",
            "type": "array"
          },
          "relatedPrimaryId.not.exists": {
            "description": "Related primary neoplasm - Filter for entries without a value",
            "title": "Relatedprimaryid.Not.Exists",
            "type": "boolean"
          },
          "relatedPrimaryId.exists": {
            "description": "Related primary neoplasm - Filter for entries with a value",
            "title": "Relatedprimaryid.Exists",
            "type": "boolean"
          },
          "relatedPrimaryId": {
            "description": "Related primary neoplasm - Filter for reference matches",
            "title": "Relatedprimaryid",
            "type": "string"
          },
          "relatedPrimaryId.not": {
            "description": "Related primary neoplasm - Filter for reference mismatches",
            "title": "Relatedprimaryid.Not",
            "type": "string"
          },
          "relatedPrimaryId.contains": {
            "description": "Related primary neoplasm - Filter for partial text matches",
            "title": "Relatedprimaryid.Contains",
            "type": "string"
          },
          "relatedPrimaryId.not.contains": {
            "description": "Related primary neoplasm - Filter for partial text mismatches",
            "title": "Relatedprimaryid.Not.Contains",
            "type": "string"
          },
          "relatedPrimaryId.beginsWith": {
            "description": "Related primary neoplasm - Filter for entries starting with the text",
            "title": "Relatedprimaryid.Beginswith",
            "type": "string"
          },
          "relatedPrimaryId.not.beginsWith": {
            "description": "Related primary neoplasm - Filter for entries not starting with the text",
            "title": "Relatedprimaryid.Not.Beginswith",
            "type": "string"
          },
          "relatedPrimaryId.endsWith": {
            "description": "Related primary neoplasm - Filter for entries ending with the text",
            "title": "Relatedprimaryid.Endswith",
            "type": "string"
          },
          "relatedPrimaryId.not.endsWith": {
            "description": "Related primary neoplasm - Filter for entries not ending with the text",
            "title": "Relatedprimaryid.Not.Endswith",
            "type": "string"
          },
          "relatedPrimaryId.anyOf": {
            "description": "Related primary neoplasm - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedprimaryid.Anyof",
            "type": "array"
          },
          "relatedPrimaryId.not.anyOf": {
            "description": "Related primary neoplasm - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedprimaryid.Not.Anyof",
            "type": "array"
          },
          "assertionDate.before": {
            "description": "Assertion date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Assertiondate.Before",
            "type": "string"
          },
          "assertionDate.after": {
            "description": "Assertion date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Assertiondate.After",
            "type": "string"
          },
          "assertionDate.onOrBefore": {
            "description": "Assertion date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Assertiondate.Onorbefore",
            "type": "string"
          },
          "assertionDate.onOrAfter": {
            "description": "Assertion date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Assertiondate.Onorafter",
            "type": "string"
          },
          "assertionDate.on": {
            "description": "Assertion date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Assertiondate.On",
            "type": "string"
          },
          "assertionDate.not.on": {
            "description": "Assertion date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Assertiondate.Not.On",
            "type": "string"
          },
          "assertionDate.between": {
            "description": "Assertion date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Assertiondate.Between",
            "type": "array"
          },
          "assertionDate.not.between": {
            "description": "Assertion date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Assertiondate.Not.Between",
            "type": "array"
          },
          "topography": {
            "description": "Topography - Filter for a matching concept code",
            "title": "Topography",
            "type": "string"
          },
          "topography.not": {
            "description": "Topography - Filter for a mismatching concept code",
            "title": "Topography.Not",
            "type": "string"
          },
          "topography.anyOf": {
            "description": "Topography - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topography.Anyof",
            "type": "array"
          },
          "topography.not.anyOf": {
            "description": "Topography - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topography.Not.Anyof",
            "type": "array"
          },
          "topography.descendantsOf": {
            "description": "Topography - Filter for all child concepts of a given concepts code",
            "title": "Topography.Descendantsof",
            "type": "string"
          },
          "morphology": {
            "description": "Morphology - Filter for a matching concept code",
            "title": "Morphology",
            "type": "string"
          },
          "morphology.not": {
            "description": "Morphology - Filter for a mismatching concept code",
            "title": "Morphology.Not",
            "type": "string"
          },
          "morphology.anyOf": {
            "description": "Morphology - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Morphology.Anyof",
            "type": "array"
          },
          "morphology.not.anyOf": {
            "description": "Morphology - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Morphology.Not.Anyof",
            "type": "array"
          },
          "morphology.descendantsOf": {
            "description": "Morphology - Filter for all child concepts of a given concepts code",
            "title": "Morphology.Descendantsof",
            "type": "string"
          },
          "differentitation.not.exists": {
            "description": "Differentiation - Filter for entries without a value",
            "title": "Differentitation.Not.Exists",
            "type": "boolean"
          },
          "differentitation.exists": {
            "description": "Differentiation - Filter for entries with a value",
            "title": "Differentitation.Exists",
            "type": "boolean"
          },
          "differentitation": {
            "description": "Differentiation - Filter for a matching concept code",
            "title": "Differentitation",
            "type": "string"
          },
          "differentitation.not": {
            "description": "Differentiation - Filter for a mismatching concept code",
            "title": "Differentitation.Not",
            "type": "string"
          },
          "differentitation.anyOf": {
            "description": "Differentiation - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Differentitation.Anyof",
            "type": "array"
          },
          "differentitation.not.anyOf": {
            "description": "Differentiation - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Differentitation.Not.Anyof",
            "type": "array"
          },
          "differentitation.descendantsOf": {
            "description": "Differentiation - Filter for all child concepts of a given concepts code",
            "title": "Differentitation.Descendantsof",
            "type": "string"
          },
          "laterality.not.exists": {
            "description": "Laterality - Filter for entries without a value",
            "title": "Laterality.Not.Exists",
            "type": "boolean"
          },
          "laterality.exists": {
            "description": "Laterality - Filter for entries with a value",
            "title": "Laterality.Exists",
            "type": "boolean"
          },
          "laterality": {
            "description": "Laterality - Filter for a matching concept code",
            "title": "Laterality",
            "type": "string"
          },
          "laterality.not": {
            "description": "Laterality - Filter for a mismatching concept code",
            "title": "Laterality.Not",
            "type": "string"
          },
          "laterality.anyOf": {
            "description": "Laterality - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Laterality.Anyof",
            "type": "array"
          },
          "laterality.not.anyOf": {
            "description": "Laterality - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Laterality.Not.Anyof",
            "type": "array"
          },
          "laterality.descendantsOf": {
            "description": "Laterality - Filter for all child concepts of a given concepts code",
            "title": "Laterality.Descendantsof",
            "type": "string"
          }
        },
        "title": "NeoplasticEntityFilters",
        "type": "object"
      },
      "Paginated_NeoplasticEntity_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/NeoplasticEntity"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[NeoplasticEntity]",
        "type": "object"
      },
      "NeoplasticEntityCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's neoplasm(s) are recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "relationship": {
            "$ref": "#/components/schemas/NeoplasticEntityRelationshipChoices",
            "description": "Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.",
            "maxLength": 30,
            "title": "Neoplastic relationship",
            "x-expanded": false
          },
          "relatedPrimaryId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reference to the primary neoplasm of which the neoplasm(s) originated from.",
            "title": "Related primary neoplasm",
            "x-expanded": false
          },
          "assertionDate": {
            "description": "The date on which the existence of the neoplasm(s) was first asserted or acknowledged",
            "format": "date",
            "title": "Assertion date",
            "type": "string",
            "x-expanded": false
          },
          "topography": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Anatomical location of the neoplasm(s)",
            "title": "Topography",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "morphology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself",
            "title": "Morphology",
            "x-expanded": false,
            "x-terminology": "CancerMorphology"
          },
          "differentitation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphologic differentitation characteristics of the neoplasm(s)",
            "title": "Differentiation",
            "x-expanded": false,
            "x-terminology": "HistologyDifferentiation"
          },
          "laterality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Laterality qualifier for the location of the neoplasm(s)",
            "title": "Laterality",
            "x-expanded": false,
            "x-terminology": "LateralityQualifier"
          }
        },
        "required": [
          "caseId",
          "relationship",
          "assertionDate",
          "topography",
          "morphology"
        ],
        "title": "NeoplasticEntityCreate",
        "type": "object"
      },
      "StagingDomain": {
        "enum": [
          "tnm",
          "figo",
          "binet",
          "rai",
          "breslow",
          "clark",
          "iss",
          "riss",
          "inss",
          "inrgss",
          "gleason",
          "rhabdomyosarcoma",
          "wilms",
          "lymphoma"
        ],
        "title": "StagingDomain",
        "type": "string"
      },
      "StagingFilters": {
        "properties": {
          "stagingDomain": {
            "allOf": [
              {
                "enum": [
                  "tnm",
                  "figo",
                  "binet",
                  "rai",
                  "breslow",
                  "clark",
                  "iss",
                  "riss",
                  "inss",
                  "inrgss",
                  "gleason",
                  "rhabdomyosarcoma",
                  "wilms",
                  "lymphoma"
                ],
                "title": "StagingDomain",
                "type": "string"
              }
            ],
            "description": "Staging domain - ('Filter for single value choice',)"
          },
          "stagingDomain.not": {
            "allOf": [
              {
                "enum": [
                  "tnm",
                  "figo",
                  "binet",
                  "rai",
                  "breslow",
                  "clark",
                  "iss",
                  "riss",
                  "inss",
                  "inrgss",
                  "gleason",
                  "rhabdomyosarcoma",
                  "wilms",
                  "lymphoma"
                ],
                "title": "StagingDomain",
                "type": "string"
              }
            ],
            "description": "Staging domain - ('Filter for all but a single value choice',)"
          },
          "stagingDomain.anyOf": {
            "description": "Staging domain - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "tnm",
                "figo",
                "binet",
                "rai",
                "breslow",
                "clark",
                "iss",
                "riss",
                "inss",
                "inrgss",
                "gleason",
                "rhabdomyosarcoma",
                "wilms",
                "lymphoma"
              ],
              "title": "StagingDomain",
              "type": "string"
            },
            "title": "Stagingdomain.Anyof",
            "type": "array"
          },
          "stage": {
            "description": "None - Filter for a matching concept code",
            "title": "Stage",
            "type": "string"
          },
          "stage.not": {
            "description": "None - Filter for a mismatching concept code",
            "title": "Stage.Not",
            "type": "string"
          },
          "stage.anyOf": {
            "description": "None - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Stage.Anyof",
            "type": "array"
          },
          "stage.not.anyOf": {
            "description": "None - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Stage.Not.Anyof",
            "type": "array"
          },
          "stage.descendantsOf": {
            "description": "None - Filter for all child concepts of a given concepts code",
            "title": "Stage.Descendantsof",
            "type": "string"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Staging date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Staging date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Staging date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Staging date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Staging date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Staging date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Staging date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Staging date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "stagedEntitiesIds": {
            "description": "Staged neoplastic entities - Filter for full text matches",
            "title": "Stagedentitiesids",
            "type": "string"
          },
          "stagedEntitiesIds.not": {
            "description": "Staged neoplastic entities - Filter for full text mismatches",
            "title": "Stagedentitiesids.Not",
            "type": "string"
          },
          "stagedEntitiesIds.contains": {
            "description": "Staged neoplastic entities - Filter for partial text matches",
            "title": "Stagedentitiesids.Contains",
            "type": "string"
          },
          "stagedEntitiesIds.not.contains": {
            "description": "Staged neoplastic entities - Filter for partial text mismatches",
            "title": "Stagedentitiesids.Not.Contains",
            "type": "string"
          },
          "stagedEntitiesIds.beginsWith": {
            "description": "Staged neoplastic entities - Filter for entries starting with the text",
            "title": "Stagedentitiesids.Beginswith",
            "type": "string"
          },
          "stagedEntitiesIds.not.beginsWith": {
            "description": "Staged neoplastic entities - Filter for entries not starting with the text",
            "title": "Stagedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "stagedEntitiesIds.endsWith": {
            "description": "Staged neoplastic entities - Filter for entries ending with the text",
            "title": "Stagedentitiesids.Endswith",
            "type": "string"
          },
          "stagedEntitiesIds.not.endsWith": {
            "description": "Staged neoplastic entities - Filter for entries not ending with the text",
            "title": "Stagedentitiesids.Not.Endswith",
            "type": "string"
          },
          "stagedEntitiesIds.anyOf": {
            "description": "Staged neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Stagedentitiesids.Anyof",
            "type": "array"
          },
          "stagedEntitiesIds.not.anyOf": {
            "description": "Staged neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Stagedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "StagingFilters",
        "type": "object"
      },
      "AnyStaging": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TNMStaging"
          },
          {
            "$ref": "#/components/schemas/FIGOStaging"
          },
          {
            "$ref": "#/components/schemas/BinetStaging"
          },
          {
            "$ref": "#/components/schemas/RaiStaging"
          },
          {
            "$ref": "#/components/schemas/BreslowDepth"
          },
          {
            "$ref": "#/components/schemas/ClarkStaging"
          },
          {
            "$ref": "#/components/schemas/ISSStaging"
          },
          {
            "$ref": "#/components/schemas/RISSStaging"
          },
          {
            "$ref": "#/components/schemas/GleasonGrade"
          },
          {
            "$ref": "#/components/schemas/INSSStage"
          },
          {
            "$ref": "#/components/schemas/INRGSSStage"
          },
          {
            "$ref": "#/components/schemas/WilmsStage"
          },
          {
            "$ref": "#/components/schemas/RhabdomyosarcomaClinicalGroup"
          },
          {
            "$ref": "#/components/schemas/LymphomaStaging"
          }
        ]
      },
      "Paginated_AnyStaging_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AnyStaging"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[AnyStaging]",
        "type": "object"
      },
      "BinetStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "binet",
            "default": "binet",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Binet stage",
            "title": "Binet Stage",
            "x-expanded": false,
            "x-terminology": "BinetStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "BinetStagingCreate",
        "type": "object"
      },
      "BreslowDepthCreate": {
        "properties": {
          "stagingDomain": {
            "const": "breslow",
            "default": "breslow",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "depth": {
            "description": "Breslow depth given in milimeters",
            "title": "Breslow depth",
            "type": "number",
            "x-expanded": false
          },
          "isUlcered": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the primary tumour presents ulceration",
            "title": "Ulcered",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "depth"
        ],
        "title": "BreslowDepthCreate",
        "type": "object"
      },
      "ClarkStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "clark",
            "default": "clark",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Clark level stage",
            "title": "Clark Level Stage",
            "x-expanded": false,
            "x-terminology": "ClarkLevel"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "ClarkStagingCreate",
        "type": "object"
      },
      "FIGOStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "figo",
            "default": "figo",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the FIGO stage",
            "title": "FIGO Stage",
            "x-expanded": false,
            "x-terminology": "FIGOStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the FIGO staging",
            "title": "FIGO staging methodology",
            "x-expanded": false,
            "x-terminology": "FIGOStagingMethod"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "FIGOStagingCreate",
        "type": "object"
      },
      "GleasonGradeCreate": {
        "properties": {
          "stagingDomain": {
            "const": "gleason",
            "default": "gleason",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Gleason grade stage",
            "title": "Gleason grade Stage",
            "x-expanded": false,
            "x-terminology": "GleasonGradeGroupStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "GleasonGradeCreate",
        "type": "object"
      },
      "INRGSSStageCreate": {
        "properties": {
          "stagingDomain": {
            "const": "inrgss",
            "default": "inrgss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the INRGSS stage",
            "title": "INRGSS Stage",
            "x-expanded": false,
            "x-terminology": "NeuroblastomaINRGSSStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "INRGSSStageCreate",
        "type": "object"
      },
      "INSSStageCreate": {
        "properties": {
          "stagingDomain": {
            "const": "inss",
            "default": "inss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the INSS stage",
            "title": "INSS Stage",
            "x-expanded": false,
            "x-terminology": "NeuroblastomaINSSStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "INSSStageCreate",
        "type": "object"
      },
      "ISSStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "iss",
            "default": "iss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of theISS stage",
            "title": "ISS Stage",
            "x-expanded": false,
            "x-terminology": "MyelomaISSStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "ISSStagingCreate",
        "type": "object"
      },
      "LymphomaStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "lymphoma",
            "default": "lymphoma",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Lymphoma stage",
            "title": "Lymphoma Stage",
            "x-expanded": false,
            "x-terminology": "LymphomaStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the Lymphoma staging",
            "title": "Lymphoma staging methodology",
            "x-expanded": false,
            "x-terminology": "LymphomaStagingMethod"
          },
          "bulky": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bulky modifier indicating if the lymphoma has the presence of bulky disease.",
            "title": "Bulky disease modifier",
            "x-expanded": false
          },
          "pathological": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the staging was based on clinical or pathologic evidence.",
            "title": "Pathological staging",
            "x-expanded": false
          },
          "modifiers": {
            "default": [],
            "description": "Qualifier acting as modifier for the lymphoma stage",
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Lymphoma stage modifier",
            "type": "array",
            "x-expanded": false,
            "x-terminology": "LymphomaStageValueModifier"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "LymphomaStagingCreate",
        "type": "object"
      },
      "RISSStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "riss",
            "default": "riss",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the RISS stage",
            "title": "RISS Stage",
            "x-expanded": false,
            "x-terminology": "MyelomaRISSStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "RISSStagingCreate",
        "type": "object"
      },
      "RaiStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "rai",
            "default": "rai",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Rai stage",
            "title": "Rai Stage",
            "x-expanded": false,
            "x-terminology": "RaiStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for the Rai staging",
            "title": "Rai staging methodology",
            "x-expanded": false,
            "x-terminology": "RaiStagingMethod"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "RaiStagingCreate",
        "type": "object"
      },
      "RhabdomyosarcomaClinicalGroupCreate": {
        "properties": {
          "stagingDomain": {
            "const": "rhabdomyosarcoma",
            "default": "rhabdomyosarcoma",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the rhabdomyosarcoma clinical group",
            "title": "Rhabdomyosarcoma clinical group",
            "x-expanded": false,
            "x-terminology": "RhabdomyosarcomaClinicalGroup"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "RhabdomyosarcomaClinicalGroupCreate",
        "type": "object"
      },
      "TNMStagingCreate": {
        "properties": {
          "stagingDomain": {
            "const": "tnm",
            "default": "tnm",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The information determined as a result of making the observation, if the information has a simple value",
            "title": "TNM Stage",
            "x-expanded": false,
            "x-terminology": "TNMStage"
          },
          "methodology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Methodology used for TNM staging",
            "title": "TNM Staging methodology",
            "x-expanded": false,
            "x-terminology": "TNMStagingMethod"
          },
          "pathological": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the staging was based on pathological (true) or clinical (false) evidence.",
            "title": "Pathological staging",
            "x-expanded": false
          },
          "primarytumor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "T stage (extent of the primary tumor)",
            "title": "T Stage",
            "x-expanded": false,
            "x-terminology": "TNMPrimaryTumorCategory"
          },
          "regionalnodes": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "N stage (degree of spread to regional lymph nodes)",
            "title": "N Stage",
            "x-expanded": false,
            "x-terminology": "TNMRegionalNodesCategory"
          },
          "distantmetastases": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "M stage (presence of distant metastasis)",
            "title": "M Stage",
            "x-expanded": false,
            "x-terminology": "TNMDistantMetastasesCategory"
          },
          "grade": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "G stage (grade of the cancer cells)",
            "title": "G Stage",
            "x-expanded": false,
            "x-terminology": "TNMGradeCategory"
          },
          "residualtumor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "R stage (extent of residual tumor cells after operation)",
            "title": "R Stage",
            "x-expanded": false,
            "x-terminology": "TNMResidualTumorCategory"
          },
          "lymphaticinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "L stage (invasion into lymphatic vessels)",
            "title": "L Stage",
            "x-expanded": false,
            "x-terminology": "TNMLymphaticInvasionCategory"
          },
          "venousinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "V stage (invasion into venous vessels)",
            "title": "V Stage",
            "x-expanded": false,
            "x-terminology": "TNMVenousInvasionCategory"
          },
          "perineuralinvasion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Pn stage (invasion into adjunct nerves)",
            "title": "Pn Stage",
            "x-expanded": false,
            "x-terminology": "TNMPerineuralInvasionCategory"
          },
          "serumtumormarkerlevel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "S stage (serum tumor marker level)",
            "title": "S Stage",
            "x-expanded": false,
            "x-terminology": "TNMSerumTumorMarkerLevelCategory"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "TNMStagingCreate",
        "type": "object"
      },
      "WilmsStageCreate": {
        "properties": {
          "stagingDomain": {
            "const": "wilms",
            "default": "wilms",
            "title": "Stagingdomain",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer is staged",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the staging was performed and recorded.",
            "format": "date",
            "title": "Staging date",
            "type": "string",
            "x-expanded": false
          },
          "stagedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the staging.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Staged neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "stage": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The value of the Wilms stage",
            "title": "Wilms Stage",
            "x-expanded": false,
            "x-terminology": "WilmsTumorStage"
          }
        },
        "required": [
          "caseId",
          "date",
          "stage"
        ],
        "title": "WilmsStageCreate",
        "type": "object"
      },
      "HistoryEvent": {
        "properties": {
          "id": {
            "description": "The unique identifier of the history event",
            "title": "Event ID"
          },
          "category": {
            "$ref": "#/components/schemas/HistoryEventCategory",
            "description": "The type of history event",
            "title": "Category"
          },
          "timestamp": {
            "description": "Timestamp of the history event",
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user that triggered the event, if applicable",
            "title": "User"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Endpoint URL through which the event was triggered, if applicable",
            "title": "Endpoint"
          },
          "snapshot": {
            "additionalProperties": true,
            "description": "Data snapshopt at the time of the event",
            "title": "Data snapshopt",
            "type": "object"
          },
          "differential": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Data changes introduced by the event, if applicable",
            "title": "Data differential"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Context sorrounding the event",
            "title": "Context"
          }
        },
        "required": [
          "id",
          "category",
          "timestamp",
          "snapshot",
          "differential",
          "context"
        ],
        "title": "HistoryEvent",
        "type": "object"
      },
      "Paginated_HistoryEvent_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/HistoryEvent"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[HistoryEvent]",
        "type": "object"
      },
      "RiskAssessmentFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "methodology": {
            "description": "Assessment methodology - Filter for a matching concept code",
            "title": "Methodology",
            "type": "string"
          },
          "methodology.not": {
            "description": "Assessment methodology - Filter for a mismatching concept code",
            "title": "Methodology.Not",
            "type": "string"
          },
          "methodology.anyOf": {
            "description": "Assessment methodology - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Methodology.Anyof",
            "type": "array"
          },
          "methodology.not.anyOf": {
            "description": "Assessment methodology - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Methodology.Not.Anyof",
            "type": "array"
          },
          "methodology.descendantsOf": {
            "description": "Assessment methodology - Filter for all child concepts of a given concepts code",
            "title": "Methodology.Descendantsof",
            "type": "string"
          },
          "risk": {
            "description": "Risk - Filter for a matching concept code",
            "title": "Risk",
            "type": "string"
          },
          "risk.not": {
            "description": "Risk - Filter for a mismatching concept code",
            "title": "Risk.Not",
            "type": "string"
          },
          "risk.anyOf": {
            "description": "Risk - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Risk.Anyof",
            "type": "array"
          },
          "risk.not.anyOf": {
            "description": "Risk - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Risk.Not.Anyof",
            "type": "array"
          },
          "risk.descendantsOf": {
            "description": "Risk - Filter for all child concepts of a given concepts code",
            "title": "Risk.Descendantsof",
            "type": "string"
          },
          "score.not.exists": {
            "description": "Score - Filter for entries without a value",
            "title": "Score.Not.Exists",
            "type": "boolean"
          },
          "score.exists": {
            "description": "Score - Filter for entries with a value",
            "title": "Score.Exists",
            "type": "boolean"
          },
          "score.lessThan": {
            "description": "Score - Filter for entries with values less than the specified value",
            "title": "Score.Lessthan",
            "type": "number"
          },
          "score.lessThanOrEqual": {
            "description": "Score - Filter for entries with values less than or equal to the specified value",
            "title": "Score.Lessthanorequal",
            "type": "number"
          },
          "score.greaterThan": {
            "description": "Score - Filter for entries with values greater than the specified value",
            "title": "Score.Greaterthan",
            "type": "number"
          },
          "score.greaterThanOrEqual": {
            "description": "Score - Filter for entries with values greater than or equal to the specified value",
            "title": "Score.Greaterthanorequal",
            "type": "number"
          },
          "score.equal": {
            "description": "Score - Filter for entries with values exactly equal to the specified value",
            "title": "Score.Equal",
            "type": "number"
          },
          "score.not.equal": {
            "description": "Score - Filter for entries with values not equal to the specified value",
            "title": "Score.Not.Equal",
            "type": "number"
          },
          "score.between": {
            "description": "Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Score.Between",
            "type": "array"
          },
          "score.not.between": {
            "description": "Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Score.Not.Between",
            "type": "array"
          },
          "assessedEntitiesIds": {
            "description": "Assessed neoplastic entities - Filter for full text matches",
            "title": "Assessedentitiesids",
            "type": "string"
          },
          "assessedEntitiesIds.not": {
            "description": "Assessed neoplastic entities - Filter for full text mismatches",
            "title": "Assessedentitiesids.Not",
            "type": "string"
          },
          "assessedEntitiesIds.contains": {
            "description": "Assessed neoplastic entities - Filter for partial text matches",
            "title": "Assessedentitiesids.Contains",
            "type": "string"
          },
          "assessedEntitiesIds.not.contains": {
            "description": "Assessed neoplastic entities - Filter for partial text mismatches",
            "title": "Assessedentitiesids.Not.Contains",
            "type": "string"
          },
          "assessedEntitiesIds.beginsWith": {
            "description": "Assessed neoplastic entities - Filter for entries starting with the text",
            "title": "Assessedentitiesids.Beginswith",
            "type": "string"
          },
          "assessedEntitiesIds.not.beginsWith": {
            "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
            "title": "Assessedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "assessedEntitiesIds.endsWith": {
            "description": "Assessed neoplastic entities - Filter for entries ending with the text",
            "title": "Assessedentitiesids.Endswith",
            "type": "string"
          },
          "assessedEntitiesIds.not.endsWith": {
            "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
            "title": "Assessedentitiesids.Not.Endswith",
            "type": "string"
          },
          "assessedEntitiesIds.anyOf": {
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Assessedentitiesids.Anyof",
            "type": "array"
          },
          "assessedEntitiesIds.not.anyOf": {
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Assessedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "RiskAssessmentFilters",
        "type": "object"
      },
      "Paginated_RiskAssessment_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/RiskAssessment"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[RiskAssessment]",
        "type": "object"
      },
      "RiskAssessmentCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's cancer risk is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the risk assessment was performed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "methodology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Indicates the method or type of risk assessment",
            "title": "Assessment methodology",
            "x-expanded": false,
            "x-terminology": "CancerRiskAssessmentMethod"
          },
          "risk": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Assessed risk",
            "title": "Risk",
            "x-expanded": false,
            "x-terminology": "CancerRiskAssessmentClassification"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Quantitative score used to classify the risk",
            "title": "Score",
            "x-expanded": false
          },
          "assessedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were assessed to estimate the risk.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Assessed neoplastic entities",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "methodology",
          "risk"
        ],
        "title": "RiskAssessmentCreate",
        "type": "object"
      },
      "TumorMarkerFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "analyte": {
            "description": "Analyte - Filter for a matching concept code",
            "title": "Analyte",
            "type": "string"
          },
          "analyte.not": {
            "description": "Analyte - Filter for a mismatching concept code",
            "title": "Analyte.Not",
            "type": "string"
          },
          "analyte.anyOf": {
            "description": "Analyte - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Analyte.Anyof",
            "type": "array"
          },
          "analyte.not.anyOf": {
            "description": "Analyte - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Analyte.Not.Anyof",
            "type": "array"
          },
          "analyte.descendantsOf": {
            "description": "Analyte - Filter for all child concepts of a given concepts code",
            "title": "Analyte.Descendantsof",
            "type": "string"
          },
          "massConcentration.not.exists": {
            "description": "Mass concentration - Filter for entries without a value",
            "title": "Massconcentration.Not.Exists",
            "type": "boolean"
          },
          "massConcentration.exists": {
            "description": "Mass concentration - Filter for entries with a value",
            "title": "Massconcentration.Exists",
            "type": "boolean"
          },
          "massConcentration.lessThan": {
            "description": "Mass concentration - Filter for entries with values less than the specified value",
            "title": "Massconcentration.Lessthan",
            "type": "number"
          },
          "massConcentration.lessThanOrEqual": {
            "description": "Mass concentration - Filter for entries with values less than or equal to the specified value",
            "title": "Massconcentration.Lessthanorequal",
            "type": "number"
          },
          "massConcentration.greaterThan": {
            "description": "Mass concentration - Filter for entries with values greater than the specified value",
            "title": "Massconcentration.Greaterthan",
            "type": "number"
          },
          "massConcentration.greaterThanOrEqual": {
            "description": "Mass concentration - Filter for entries with values greater than or equal to the specified value",
            "title": "Massconcentration.Greaterthanorequal",
            "type": "number"
          },
          "massConcentration.equal": {
            "description": "Mass concentration - Filter for entries with values exactly equal to the specified value",
            "title": "Massconcentration.Equal",
            "type": "number"
          },
          "massConcentration.not.equal": {
            "description": "Mass concentration - Filter for entries with values not equal to the specified value",
            "title": "Massconcentration.Not.Equal",
            "type": "number"
          },
          "massConcentration.between": {
            "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Massconcentration.Between",
            "type": "array"
          },
          "massConcentration.not.between": {
            "description": "Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Massconcentration.Not.Between",
            "type": "array"
          },
          "arbitraryConcentration.not.exists": {
            "description": "Arbitrary concentration - Filter for entries without a value",
            "title": "Arbitraryconcentration.Not.Exists",
            "type": "boolean"
          },
          "arbitraryConcentration.exists": {
            "description": "Arbitrary concentration - Filter for entries with a value",
            "title": "Arbitraryconcentration.Exists",
            "type": "boolean"
          },
          "arbitraryConcentration.lessThan": {
            "description": "Arbitrary concentration - Filter for entries with values less than the specified value",
            "title": "Arbitraryconcentration.Lessthan",
            "type": "number"
          },
          "arbitraryConcentration.lessThanOrEqual": {
            "description": "Arbitrary concentration - Filter for entries with values less than or equal to the specified value",
            "title": "Arbitraryconcentration.Lessthanorequal",
            "type": "number"
          },
          "arbitraryConcentration.greaterThan": {
            "description": "Arbitrary concentration - Filter for entries with values greater than the specified value",
            "title": "Arbitraryconcentration.Greaterthan",
            "type": "number"
          },
          "arbitraryConcentration.greaterThanOrEqual": {
            "description": "Arbitrary concentration - Filter for entries with values greater than or equal to the specified value",
            "title": "Arbitraryconcentration.Greaterthanorequal",
            "type": "number"
          },
          "arbitraryConcentration.equal": {
            "description": "Arbitrary concentration - Filter for entries with values exactly equal to the specified value",
            "title": "Arbitraryconcentration.Equal",
            "type": "number"
          },
          "arbitraryConcentration.not.equal": {
            "description": "Arbitrary concentration - Filter for entries with values not equal to the specified value",
            "title": "Arbitraryconcentration.Not.Equal",
            "type": "number"
          },
          "arbitraryConcentration.between": {
            "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Arbitraryconcentration.Between",
            "type": "array"
          },
          "arbitraryConcentration.not.between": {
            "description": "Arbitrary concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Arbitraryconcentration.Not.Between",
            "type": "array"
          },
          "substanceConcentration.not.exists": {
            "description": "Substance concentration - Filter for entries without a value",
            "title": "Substanceconcentration.Not.Exists",
            "type": "boolean"
          },
          "substanceConcentration.exists": {
            "description": "Substance concentration - Filter for entries with a value",
            "title": "Substanceconcentration.Exists",
            "type": "boolean"
          },
          "substanceConcentration.lessThan": {
            "description": "Substance concentration - Filter for entries with values less than the specified value",
            "title": "Substanceconcentration.Lessthan",
            "type": "number"
          },
          "substanceConcentration.lessThanOrEqual": {
            "description": "Substance concentration - Filter for entries with values less than or equal to the specified value",
            "title": "Substanceconcentration.Lessthanorequal",
            "type": "number"
          },
          "substanceConcentration.greaterThan": {
            "description": "Substance concentration - Filter for entries with values greater than the specified value",
            "title": "Substanceconcentration.Greaterthan",
            "type": "number"
          },
          "substanceConcentration.greaterThanOrEqual": {
            "description": "Substance concentration - Filter for entries with values greater than or equal to the specified value",
            "title": "Substanceconcentration.Greaterthanorequal",
            "type": "number"
          },
          "substanceConcentration.equal": {
            "description": "Substance concentration - Filter for entries with values exactly equal to the specified value",
            "title": "Substanceconcentration.Equal",
            "type": "number"
          },
          "substanceConcentration.not.equal": {
            "description": "Substance concentration - Filter for entries with values not equal to the specified value",
            "title": "Substanceconcentration.Not.Equal",
            "type": "number"
          },
          "substanceConcentration.between": {
            "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Substanceconcentration.Between",
            "type": "array"
          },
          "substanceConcentration.not.between": {
            "description": "Substance concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Substanceconcentration.Not.Between",
            "type": "array"
          },
          "fraction.not.exists": {
            "description": "Fraction - Filter for entries without a value",
            "title": "Fraction.Not.Exists",
            "type": "boolean"
          },
          "fraction.exists": {
            "description": "Fraction - Filter for entries with a value",
            "title": "Fraction.Exists",
            "type": "boolean"
          },
          "fraction.lessThan": {
            "description": "Fraction - Filter for entries with values less than the specified value",
            "title": "Fraction.Lessthan",
            "type": "number"
          },
          "fraction.lessThanOrEqual": {
            "description": "Fraction - Filter for entries with values less than or equal to the specified value",
            "title": "Fraction.Lessthanorequal",
            "type": "number"
          },
          "fraction.greaterThan": {
            "description": "Fraction - Filter for entries with values greater than the specified value",
            "title": "Fraction.Greaterthan",
            "type": "number"
          },
          "fraction.greaterThanOrEqual": {
            "description": "Fraction - Filter for entries with values greater than or equal to the specified value",
            "title": "Fraction.Greaterthanorequal",
            "type": "number"
          },
          "fraction.equal": {
            "description": "Fraction - Filter for entries with values exactly equal to the specified value",
            "title": "Fraction.Equal",
            "type": "number"
          },
          "fraction.not.equal": {
            "description": "Fraction - Filter for entries with values not equal to the specified value",
            "title": "Fraction.Not.Equal",
            "type": "number"
          },
          "fraction.between": {
            "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Fraction.Between",
            "type": "array"
          },
          "fraction.not.between": {
            "description": "Fraction - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Fraction.Not.Between",
            "type": "array"
          },
          "multipleOfMedian.not.exists": {
            "description": "Multiples of the median - Filter for entries without a value",
            "title": "Multipleofmedian.Not.Exists",
            "type": "boolean"
          },
          "multipleOfMedian.exists": {
            "description": "Multiples of the median - Filter for entries with a value",
            "title": "Multipleofmedian.Exists",
            "type": "boolean"
          },
          "multipleOfMedian.lessThan": {
            "description": "Multiples of the median - Filter for entries with values less than the specified value",
            "title": "Multipleofmedian.Lessthan",
            "type": "number"
          },
          "multipleOfMedian.lessThanOrEqual": {
            "description": "Multiples of the median - Filter for entries with values less than or equal to the specified value",
            "title": "Multipleofmedian.Lessthanorequal",
            "type": "number"
          },
          "multipleOfMedian.greaterThan": {
            "description": "Multiples of the median - Filter for entries with values greater than the specified value",
            "title": "Multipleofmedian.Greaterthan",
            "type": "number"
          },
          "multipleOfMedian.greaterThanOrEqual": {
            "description": "Multiples of the median - Filter for entries with values greater than or equal to the specified value",
            "title": "Multipleofmedian.Greaterthanorequal",
            "type": "number"
          },
          "multipleOfMedian.equal": {
            "description": "Multiples of the median - Filter for entries with values exactly equal to the specified value",
            "title": "Multipleofmedian.Equal",
            "type": "number"
          },
          "multipleOfMedian.not.equal": {
            "description": "Multiples of the median - Filter for entries with values not equal to the specified value",
            "title": "Multipleofmedian.Not.Equal",
            "type": "number"
          },
          "multipleOfMedian.between": {
            "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Multipleofmedian.Between",
            "type": "array"
          },
          "multipleOfMedian.not.between": {
            "description": "Multiples of the median - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Multipleofmedian.Not.Between",
            "type": "array"
          },
          "tumorProportionScore.not.exists": {
            "description": "Immune Cells Score (ICS) - Filter for entries without a value",
            "title": "Tumorproportionscore.Not.Exists",
            "type": "boolean"
          },
          "tumorProportionScore.exists": {
            "description": "Immune Cells Score (ICS) - Filter for entries with a value",
            "title": "Tumorproportionscore.Exists",
            "type": "boolean"
          },
          "tumorProportionScore": {
            "allOf": [
              {
                "enum": [
                  "TC0",
                  "TC1",
                  "TC2",
                  "TC3"
                ],
                "title": "TumorMarkerTumorProportionScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
          },
          "tumorProportionScore.not": {
            "allOf": [
              {
                "enum": [
                  "TC0",
                  "TC1",
                  "TC2",
                  "TC3"
                ],
                "title": "TumorMarkerTumorProportionScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
          },
          "tumorProportionScore.anyOf": {
            "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "TC0",
                "TC1",
                "TC2",
                "TC3"
              ],
              "title": "TumorMarkerTumorProportionScoreChoices",
              "type": "string"
            },
            "title": "Tumorproportionscore.Anyof",
            "type": "array"
          },
          "immuneCellScore.not.exists": {
            "description": "Immune Cells Score (ICS) - Filter for entries without a value",
            "title": "Immunecellscore.Not.Exists",
            "type": "boolean"
          },
          "immuneCellScore.exists": {
            "description": "Immune Cells Score (ICS) - Filter for entries with a value",
            "title": "Immunecellscore.Exists",
            "type": "boolean"
          },
          "immuneCellScore": {
            "allOf": [
              {
                "enum": [
                  "IC0",
                  "IC1",
                  "IC2",
                  "IC3"
                ],
                "title": "TumorMarkerImmuneCellScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immune Cells Score (ICS) - ('Filter for single value choice',)"
          },
          "immuneCellScore.not": {
            "allOf": [
              {
                "enum": [
                  "IC0",
                  "IC1",
                  "IC2",
                  "IC3"
                ],
                "title": "TumorMarkerImmuneCellScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immune Cells Score (ICS) - ('Filter for all but a single value choice',)"
          },
          "immuneCellScore.anyOf": {
            "description": "Immune Cells Score (ICS) - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "IC0",
                "IC1",
                "IC2",
                "IC3"
              ],
              "title": "TumorMarkerImmuneCellScoreChoices",
              "type": "string"
            },
            "title": "Immunecellscore.Anyof",
            "type": "array"
          },
          "combinedPositiveScore.not.exists": {
            "description": "Combined Positive Score (CPS) - Filter for entries without a value",
            "title": "Combinedpositivescore.Not.Exists",
            "type": "boolean"
          },
          "combinedPositiveScore.exists": {
            "description": "Combined Positive Score (CPS) - Filter for entries with a value",
            "title": "Combinedpositivescore.Exists",
            "type": "boolean"
          },
          "combinedPositiveScore.lessThan": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values less than the specified value",
            "title": "Combinedpositivescore.Lessthan",
            "type": "number"
          },
          "combinedPositiveScore.lessThanOrEqual": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values less than or equal to the specified value",
            "title": "Combinedpositivescore.Lessthanorequal",
            "type": "number"
          },
          "combinedPositiveScore.greaterThan": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values greater than the specified value",
            "title": "Combinedpositivescore.Greaterthan",
            "type": "number"
          },
          "combinedPositiveScore.greaterThanOrEqual": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values greater than or equal to the specified value",
            "title": "Combinedpositivescore.Greaterthanorequal",
            "type": "number"
          },
          "combinedPositiveScore.equal": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values exactly equal to the specified value",
            "title": "Combinedpositivescore.Equal",
            "type": "number"
          },
          "combinedPositiveScore.not.equal": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values not equal to the specified value",
            "title": "Combinedpositivescore.Not.Equal",
            "type": "number"
          },
          "combinedPositiveScore.between": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Combinedpositivescore.Between",
            "type": "array"
          },
          "combinedPositiveScore.not.between": {
            "description": "Combined Positive Score (CPS) - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Combinedpositivescore.Not.Between",
            "type": "array"
          },
          "immunohistochemicalScore.not.exists": {
            "description": "Immunohistochemical Score - Filter for entries without a value",
            "title": "Immunohistochemicalscore.Not.Exists",
            "type": "boolean"
          },
          "immunohistochemicalScore.exists": {
            "description": "Immunohistochemical Score - Filter for entries with a value",
            "title": "Immunohistochemicalscore.Exists",
            "type": "boolean"
          },
          "immunohistochemicalScore": {
            "allOf": [
              {
                "enum": [
                  "0",
                  "1+",
                  "2+",
                  "3+",
                  "indeterminate"
                ],
                "title": "TumorMarkerImmunohistochemicalScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immunohistochemical Score - ('Filter for single value choice',)"
          },
          "immunohistochemicalScore.not": {
            "allOf": [
              {
                "enum": [
                  "0",
                  "1+",
                  "2+",
                  "3+",
                  "indeterminate"
                ],
                "title": "TumorMarkerImmunohistochemicalScoreChoices",
                "type": "string"
              }
            ],
            "description": "Immunohistochemical Score - ('Filter for all but a single value choice',)"
          },
          "immunohistochemicalScore.anyOf": {
            "description": "Immunohistochemical Score - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "0",
                "1+",
                "2+",
                "3+",
                "indeterminate"
              ],
              "title": "TumorMarkerImmunohistochemicalScoreChoices",
              "type": "string"
            },
            "title": "Immunohistochemicalscore.Anyof",
            "type": "array"
          },
          "presence.not.exists": {
            "description": "Presence - Filter for entries without a value",
            "title": "Presence.Not.Exists",
            "type": "boolean"
          },
          "presence.exists": {
            "description": "Presence - Filter for entries with a value",
            "title": "Presence.Exists",
            "type": "boolean"
          },
          "presence": {
            "allOf": [
              {
                "enum": [
                  "positive",
                  "negative",
                  "indeterminate"
                ],
                "title": "TumorMarkerPresenceChoices",
                "type": "string"
              }
            ],
            "description": "Presence - ('Filter for single value choice',)"
          },
          "presence.not": {
            "allOf": [
              {
                "enum": [
                  "positive",
                  "negative",
                  "indeterminate"
                ],
                "title": "TumorMarkerPresenceChoices",
                "type": "string"
              }
            ],
            "description": "Presence - ('Filter for all but a single value choice',)"
          },
          "presence.anyOf": {
            "description": "Presence - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "positive",
                "negative",
                "indeterminate"
              ],
              "title": "TumorMarkerPresenceChoices",
              "type": "string"
            },
            "title": "Presence.Anyof",
            "type": "array"
          },
          "nuclearExpressionStatus.not.exists": {
            "description": "Nuclear expression status - Filter for entries without a value",
            "title": "Nuclearexpressionstatus.Not.Exists",
            "type": "boolean"
          },
          "nuclearExpressionStatus.exists": {
            "description": "Nuclear expression status - Filter for entries with a value",
            "title": "Nuclearexpressionstatus.Exists",
            "type": "boolean"
          },
          "nuclearExpressionStatus": {
            "allOf": [
              {
                "enum": [
                  "intact",
                  "loss",
                  "indeterminate"
                ],
                "title": "TumorMarkerNuclearExpressionStatusChoices",
                "type": "string"
              }
            ],
            "description": "Nuclear expression status - ('Filter for single value choice',)"
          },
          "nuclearExpressionStatus.not": {
            "allOf": [
              {
                "enum": [
                  "intact",
                  "loss",
                  "indeterminate"
                ],
                "title": "TumorMarkerNuclearExpressionStatusChoices",
                "type": "string"
              }
            ],
            "description": "Nuclear expression status - ('Filter for all but a single value choice',)"
          },
          "nuclearExpressionStatus.anyOf": {
            "description": "Nuclear expression status - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "intact",
                "loss",
                "indeterminate"
              ],
              "title": "TumorMarkerNuclearExpressionStatusChoices",
              "type": "string"
            },
            "title": "Nuclearexpressionstatus.Anyof",
            "type": "array"
          },
          "relatedEntitiesIds": {
            "description": "Related neoplastic entities - Filter for full text matches",
            "title": "Relatedentitiesids",
            "type": "string"
          },
          "relatedEntitiesIds.not": {
            "description": "Related neoplastic entities - Filter for full text mismatches",
            "title": "Relatedentitiesids.Not",
            "type": "string"
          },
          "relatedEntitiesIds.contains": {
            "description": "Related neoplastic entities - Filter for partial text matches",
            "title": "Relatedentitiesids.Contains",
            "type": "string"
          },
          "relatedEntitiesIds.not.contains": {
            "description": "Related neoplastic entities - Filter for partial text mismatches",
            "title": "Relatedentitiesids.Not.Contains",
            "type": "string"
          },
          "relatedEntitiesIds.beginsWith": {
            "description": "Related neoplastic entities - Filter for entries starting with the text",
            "title": "Relatedentitiesids.Beginswith",
            "type": "string"
          },
          "relatedEntitiesIds.not.beginsWith": {
            "description": "Related neoplastic entities - Filter for entries not starting with the text",
            "title": "Relatedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "relatedEntitiesIds.endsWith": {
            "description": "Related neoplastic entities - Filter for entries ending with the text",
            "title": "Relatedentitiesids.Endswith",
            "type": "string"
          },
          "relatedEntitiesIds.not.endsWith": {
            "description": "Related neoplastic entities - Filter for entries not ending with the text",
            "title": "Relatedentitiesids.Not.Endswith",
            "type": "string"
          },
          "relatedEntitiesIds.anyOf": {
            "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedentitiesids.Anyof",
            "type": "array"
          },
          "relatedEntitiesIds.not.anyOf": {
            "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "TumorMarkerFilters",
        "type": "object"
      },
      "Paginated_TumorMarker_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/TumorMarker"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[TumorMarker]",
        "type": "object"
      },
      "TumorMarkerCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient related to the tumor marker result",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the tumor marker was analyzed.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "analyte": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The chemical or biological substance/agent that is analyzed.",
            "title": "Analyte",
            "x-expanded": false,
            "x-terminology": "TumorMarkerAnalyte"
          },
          "massConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Mass concentration of the analyte (if revelant/measured)",
            "title": "Mass concentration",
            "x-default-unit": "g/l",
            "x-expanded": false,
            "x-measure": "MassConcentration"
          },
          "arbitraryConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Arbitrary concentration of the analyte (if revelant/measured)",
            "title": "Arbitrary concentration",
            "x-default-unit": "kIU/l",
            "x-expanded": false,
            "x-measure": "ArbitraryConcentration"
          },
          "substanceConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Substance concentration of the analyte (if revelant/measured)",
            "title": "Substance concentration",
            "x-default-unit": "mol/l",
            "x-expanded": false,
            "x-measure": "SubstanceConcentration"
          },
          "fraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Analyte fraction (if revelant/measured)",
            "title": "Fraction",
            "x-default-unit": "%",
            "x-expanded": false,
            "x-measure": "Fraction"
          },
          "multipleOfMedian": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Multiples of the median analyte (if revelant/measured)",
            "title": "Multiples of the median",
            "x-default-unit": "multiple_of_median",
            "x-expanded": false,
            "x-measure": "MultipleOfMedian"
          },
          "tumorProportionScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerTumorProportionScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the percentage of cells in a tumor that express PD-L1",
            "title": "Immune Cells Score (ICS)",
            "x-expanded": false
          },
          "immuneCellScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerImmuneCellScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the percentage of PD-L1 positive immune cells",
            "title": "Immune Cells Score (ICS)",
            "x-expanded": false
          },
          "combinedPositiveScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100",
            "title": "Combined Positive Score (CPS)",
            "x-default-unit": "%",
            "x-expanded": false,
            "x-measure": "Fraction"
          },
          "immunohistochemicalScore": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerImmunohistochemicalScoreChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the number of analyte-positive cells in a sample",
            "title": "Immunohistochemical Score",
            "x-expanded": false
          },
          "presence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerPresenceChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether an analyte has tested positive or negative.",
            "title": "Presence",
            "x-expanded": false
          },
          "nuclearExpressionStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMarkerNuclearExpressionStatusChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Categorization of the status of expression of the analyte",
            "title": "Nuclear expression status",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that are related or the focus of the tumor marker analysis.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "analyte"
        ],
        "title": "TumorMarkerCreate",
        "type": "object"
      },
      "AnalyteDetails": {
        "properties": {
          "acronym": {
            "title": "Acronym",
            "type": "string"
          },
          "display": {
            "title": "Display",
            "type": "string"
          },
          "valueTypes": {
            "items": {
              "$ref": "#/components/schemas/AnalyteResultType"
            },
            "title": "Valuetypes",
            "type": "array"
          }
        },
        "required": [
          "acronym",
          "display",
          "valueTypes"
        ],
        "title": "AnalyteDetails",
        "type": "object"
      },
      "AnalyteResultType": {
        "enum": [
          "MassConcentration",
          "ArbitraryConcentration",
          "SubstanceConcentration",
          "MultipleOfMedian",
          "Fraction",
          "Presence",
          "CombinedPositiveScore",
          "ImmuneCellsScore",
          "TumorProportionScore",
          "ImmunoHistoChemicalScore",
          "NuclearExpressionStatus"
        ],
        "title": "AnalyteResultType",
        "type": "string"
      },
      "SystemicTherapyFilters": {
        "properties": {
          "medications.id": {
            "description": "Id - Filter for full text matches",
            "title": "Medications.Id",
            "type": "string"
          },
          "medications.id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Medications.Id.Not",
            "type": "string"
          },
          "medications.id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Medications.Id.Contains",
            "type": "string"
          },
          "medications.id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Medications.Id.Not.Contains",
            "type": "string"
          },
          "medications.id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Medications.Id.Beginswith",
            "type": "string"
          },
          "medications.id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Medications.Id.Not.Beginswith",
            "type": "string"
          },
          "medications.id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Medications.Id.Endswith",
            "type": "string"
          },
          "medications.id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Medications.Id.Not.Endswith",
            "type": "string"
          },
          "medications.id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Medications.Id.Anyof",
            "type": "array"
          },
          "medications.id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Medications.Id.Not.Anyof",
            "type": "array"
          },
          "medications.drug": {
            "description": "Antineoplastic Drug - Filter for a matching concept code",
            "title": "Medications.Drug",
            "type": "string"
          },
          "medications.drug.not": {
            "description": "Antineoplastic Drug - Filter for a mismatching concept code",
            "title": "Medications.Drug.Not",
            "type": "string"
          },
          "medications.drug.anyOf": {
            "description": "Antineoplastic Drug - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Medications.Drug.Anyof",
            "type": "array"
          },
          "medications.drug.not.anyOf": {
            "description": "Antineoplastic Drug - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Medications.Drug.Not.Anyof",
            "type": "array"
          },
          "medications.drug.descendantsOf": {
            "description": "Antineoplastic Drug - Filter for all child concepts of a given concepts code",
            "title": "Medications.Drug.Descendantsof",
            "type": "string"
          },
          "medications.route.not.exists": {
            "description": "Route - Filter for entries without a value",
            "title": "Medications.Route.Not.Exists",
            "type": "boolean"
          },
          "medications.route.exists": {
            "description": "Route - Filter for entries with a value",
            "title": "Medications.Route.Exists",
            "type": "boolean"
          },
          "medications.route": {
            "description": "Route - Filter for a matching concept code",
            "title": "Medications.Route",
            "type": "string"
          },
          "medications.route.not": {
            "description": "Route - Filter for a mismatching concept code",
            "title": "Medications.Route.Not",
            "type": "string"
          },
          "medications.route.anyOf": {
            "description": "Route - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Medications.Route.Anyof",
            "type": "array"
          },
          "medications.route.not.anyOf": {
            "description": "Route - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Medications.Route.Not.Anyof",
            "type": "array"
          },
          "medications.route.descendantsOf": {
            "description": "Route - Filter for all child concepts of a given concepts code",
            "title": "Medications.Route.Descendantsof",
            "type": "string"
          },
          "medications.usedOfflabel.not.exists": {
            "description": "Off-label use - Filter for entries without a value",
            "title": "Medications.Usedofflabel.Not.Exists",
            "type": "boolean"
          },
          "medications.usedOfflabel.exists": {
            "description": "Off-label use - Filter for entries with a value",
            "title": "Medications.Usedofflabel.Exists",
            "type": "boolean"
          },
          "medications.usedOfflabel": {
            "description": "Off-label use - ('Filter for yes/no statement',)",
            "title": "Medications.Usedofflabel",
            "type": "boolean"
          },
          "medications.withinSoc.not.exists": {
            "description": "Within SOC - Filter for entries without a value",
            "title": "Medications.Withinsoc.Not.Exists",
            "type": "boolean"
          },
          "medications.withinSoc.exists": {
            "description": "Within SOC - Filter for entries with a value",
            "title": "Medications.Withinsoc.Exists",
            "type": "boolean"
          },
          "medications.withinSoc": {
            "description": "Within SOC - ('Filter for yes/no statement',)",
            "title": "Medications.Withinsoc",
            "type": "boolean"
          },
          "medications.dosageMassConcentration.not.exists": {
            "description": "Dosage - Mass concentration - Filter for entries without a value",
            "title": "Medications.Dosagemassconcentration.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageMassConcentration.exists": {
            "description": "Dosage - Mass concentration - Filter for entries with a value",
            "title": "Medications.Dosagemassconcentration.Exists",
            "type": "boolean"
          },
          "medications.dosageMassConcentration.lessThan": {
            "description": "Dosage - Mass concentration - Filter for entries with values less than the specified value",
            "title": "Medications.Dosagemassconcentration.Lessthan",
            "type": "number"
          },
          "medications.dosageMassConcentration.lessThanOrEqual": {
            "description": "Dosage - Mass concentration - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosagemassconcentration.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageMassConcentration.greaterThan": {
            "description": "Dosage - Mass concentration - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosagemassconcentration.Greaterthan",
            "type": "number"
          },
          "medications.dosageMassConcentration.greaterThanOrEqual": {
            "description": "Dosage - Mass concentration - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosagemassconcentration.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageMassConcentration.equal": {
            "description": "Dosage - Mass concentration - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosagemassconcentration.Equal",
            "type": "number"
          },
          "medications.dosageMassConcentration.not.equal": {
            "description": "Dosage - Mass concentration - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosagemassconcentration.Not.Equal",
            "type": "number"
          },
          "medications.dosageMassConcentration.between": {
            "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemassconcentration.Between",
            "type": "array"
          },
          "medications.dosageMassConcentration.not.between": {
            "description": "Dosage - Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemassconcentration.Not.Between",
            "type": "array"
          },
          "medications.dosageMass.not.exists": {
            "description": "Dosage - Fixed Mass - Filter for entries without a value",
            "title": "Medications.Dosagemass.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageMass.exists": {
            "description": "Dosage - Fixed Mass - Filter for entries with a value",
            "title": "Medications.Dosagemass.Exists",
            "type": "boolean"
          },
          "medications.dosageMass.lessThan": {
            "description": "Dosage - Fixed Mass - Filter for entries with values less than the specified value",
            "title": "Medications.Dosagemass.Lessthan",
            "type": "number"
          },
          "medications.dosageMass.lessThanOrEqual": {
            "description": "Dosage - Fixed Mass - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosagemass.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageMass.greaterThan": {
            "description": "Dosage - Fixed Mass - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosagemass.Greaterthan",
            "type": "number"
          },
          "medications.dosageMass.greaterThanOrEqual": {
            "description": "Dosage - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosagemass.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageMass.equal": {
            "description": "Dosage - Fixed Mass - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosagemass.Equal",
            "type": "number"
          },
          "medications.dosageMass.not.equal": {
            "description": "Dosage - Fixed Mass - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosagemass.Not.Equal",
            "type": "number"
          },
          "medications.dosageMass.between": {
            "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemass.Between",
            "type": "array"
          },
          "medications.dosageMass.not.between": {
            "description": "Dosage - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemass.Not.Between",
            "type": "array"
          },
          "medications.dosageVolume.not.exists": {
            "description": "Dosage - Volume - Filter for entries without a value",
            "title": "Medications.Dosagevolume.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageVolume.exists": {
            "description": "Dosage - Volume - Filter for entries with a value",
            "title": "Medications.Dosagevolume.Exists",
            "type": "boolean"
          },
          "medications.dosageVolume.lessThan": {
            "description": "Dosage - Volume - Filter for entries with values less than the specified value",
            "title": "Medications.Dosagevolume.Lessthan",
            "type": "number"
          },
          "medications.dosageVolume.lessThanOrEqual": {
            "description": "Dosage - Volume - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosagevolume.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageVolume.greaterThan": {
            "description": "Dosage - Volume - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosagevolume.Greaterthan",
            "type": "number"
          },
          "medications.dosageVolume.greaterThanOrEqual": {
            "description": "Dosage - Volume - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosagevolume.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageVolume.equal": {
            "description": "Dosage - Volume - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosagevolume.Equal",
            "type": "number"
          },
          "medications.dosageVolume.not.equal": {
            "description": "Dosage - Volume - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosagevolume.Not.Equal",
            "type": "number"
          },
          "medications.dosageVolume.between": {
            "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagevolume.Between",
            "type": "array"
          },
          "medications.dosageVolume.not.between": {
            "description": "Dosage - Volume - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagevolume.Not.Between",
            "type": "array"
          },
          "medications.dosageMassSurface.not.exists": {
            "description": "Dosage - Mass per body surface - Filter for entries without a value",
            "title": "Medications.Dosagemasssurface.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageMassSurface.exists": {
            "description": "Dosage - Mass per body surface - Filter for entries with a value",
            "title": "Medications.Dosagemasssurface.Exists",
            "type": "boolean"
          },
          "medications.dosageMassSurface.lessThan": {
            "description": "Dosage - Mass per body surface - Filter for entries with values less than the specified value",
            "title": "Medications.Dosagemasssurface.Lessthan",
            "type": "number"
          },
          "medications.dosageMassSurface.lessThanOrEqual": {
            "description": "Dosage - Mass per body surface - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosagemasssurface.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageMassSurface.greaterThan": {
            "description": "Dosage - Mass per body surface - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosagemasssurface.Greaterthan",
            "type": "number"
          },
          "medications.dosageMassSurface.greaterThanOrEqual": {
            "description": "Dosage - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosagemasssurface.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageMassSurface.equal": {
            "description": "Dosage - Mass per body surface - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosagemasssurface.Equal",
            "type": "number"
          },
          "medications.dosageMassSurface.not.equal": {
            "description": "Dosage - Mass per body surface - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosagemasssurface.Not.Equal",
            "type": "number"
          },
          "medications.dosageMassSurface.between": {
            "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemasssurface.Between",
            "type": "array"
          },
          "medications.dosageMassSurface.not.between": {
            "description": "Dosage - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosagemasssurface.Not.Between",
            "type": "array"
          },
          "medications.dosageRateMassConcentration.not.exists": {
            "description": "Dosage rate - Mass concentration - Filter for entries without a value",
            "title": "Medications.Dosageratemassconcentration.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMassConcentration.exists": {
            "description": "Dosage rate - Mass concentration - Filter for entries with a value",
            "title": "Medications.Dosageratemassconcentration.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMassConcentration.lessThan": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values less than the specified value",
            "title": "Medications.Dosageratemassconcentration.Lessthan",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.lessThanOrEqual": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosageratemassconcentration.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.greaterThan": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosageratemassconcentration.Greaterthan",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.greaterThanOrEqual": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosageratemassconcentration.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.equal": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosageratemassconcentration.Equal",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.not.equal": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosageratemassconcentration.Not.Equal",
            "type": "number"
          },
          "medications.dosageRateMassConcentration.between": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemassconcentration.Between",
            "type": "array"
          },
          "medications.dosageRateMassConcentration.not.between": {
            "description": "Dosage rate - Mass concentration - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemassconcentration.Not.Between",
            "type": "array"
          },
          "medications.dosageRateMass.not.exists": {
            "description": "Dosage rate - Fixed Mass - Filter for entries without a value",
            "title": "Medications.Dosageratemass.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMass.exists": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with a value",
            "title": "Medications.Dosageratemass.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMass.lessThan": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values less than the specified value",
            "title": "Medications.Dosageratemass.Lessthan",
            "type": "number"
          },
          "medications.dosageRateMass.lessThanOrEqual": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosageratemass.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageRateMass.greaterThan": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosageratemass.Greaterthan",
            "type": "number"
          },
          "medications.dosageRateMass.greaterThanOrEqual": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosageratemass.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageRateMass.equal": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosageratemass.Equal",
            "type": "number"
          },
          "medications.dosageRateMass.not.equal": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosageratemass.Not.Equal",
            "type": "number"
          },
          "medications.dosageRateMass.between": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemass.Between",
            "type": "array"
          },
          "medications.dosageRateMass.not.between": {
            "description": "Dosage rate - Fixed Mass - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemass.Not.Between",
            "type": "array"
          },
          "medications.dosageRateVolume.not.exists": {
            "description": "Dosage rate - Volume - Filter for entries without a value",
            "title": "Medications.Dosageratevolume.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageRateVolume.exists": {
            "description": "Dosage rate - Volume - Filter for entries with a value",
            "title": "Medications.Dosageratevolume.Exists",
            "type": "boolean"
          },
          "medications.dosageRateVolume.lessThan": {
            "description": "Dosage rate - Volume - Filter for entries with values less than the specified value",
            "title": "Medications.Dosageratevolume.Lessthan",
            "type": "number"
          },
          "medications.dosageRateVolume.lessThanOrEqual": {
            "description": "Dosage rate - Volume - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosageratevolume.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageRateVolume.greaterThan": {
            "description": "Dosage rate - Volume - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosageratevolume.Greaterthan",
            "type": "number"
          },
          "medications.dosageRateVolume.greaterThanOrEqual": {
            "description": "Dosage rate - Volume - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosageratevolume.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageRateVolume.equal": {
            "description": "Dosage rate - Volume - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosageratevolume.Equal",
            "type": "number"
          },
          "medications.dosageRateVolume.not.equal": {
            "description": "Dosage rate - Volume - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosageratevolume.Not.Equal",
            "type": "number"
          },
          "medications.dosageRateVolume.between": {
            "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratevolume.Between",
            "type": "array"
          },
          "medications.dosageRateVolume.not.between": {
            "description": "Dosage rate - Volume - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratevolume.Not.Between",
            "type": "array"
          },
          "medications.dosageRateMassSurface.not.exists": {
            "description": "Dosage rate - Mass per body surface - Filter for entries without a value",
            "title": "Medications.Dosageratemasssurface.Not.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMassSurface.exists": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with a value",
            "title": "Medications.Dosageratemasssurface.Exists",
            "type": "boolean"
          },
          "medications.dosageRateMassSurface.lessThan": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values less than the specified value",
            "title": "Medications.Dosageratemasssurface.Lessthan",
            "type": "number"
          },
          "medications.dosageRateMassSurface.lessThanOrEqual": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values less than or equal to the specified value",
            "title": "Medications.Dosageratemasssurface.Lessthanorequal",
            "type": "number"
          },
          "medications.dosageRateMassSurface.greaterThan": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than the specified value",
            "title": "Medications.Dosageratemasssurface.Greaterthan",
            "type": "number"
          },
          "medications.dosageRateMassSurface.greaterThanOrEqual": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values greater than or equal to the specified value",
            "title": "Medications.Dosageratemasssurface.Greaterthanorequal",
            "type": "number"
          },
          "medications.dosageRateMassSurface.equal": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values exactly equal to the specified value",
            "title": "Medications.Dosageratemasssurface.Equal",
            "type": "number"
          },
          "medications.dosageRateMassSurface.not.equal": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values not equal to the specified value",
            "title": "Medications.Dosageratemasssurface.Not.Equal",
            "type": "number"
          },
          "medications.dosageRateMassSurface.between": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemasssurface.Between",
            "type": "array"
          },
          "medications.dosageRateMassSurface.not.between": {
            "description": "Dosage rate - Mass per body surface - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Medications.Dosageratemasssurface.Not.Between",
            "type": "array"
          },
          "duration.lessThan": {
            "description": "None - Filter for entries with values less than the specified value",
            "title": "Duration.Lessthan",
            "type": "number"
          },
          "duration.lessThanOrEqual": {
            "description": "None - Filter for entries with values less than or equal to the specified value",
            "title": "Duration.Lessthanorequal",
            "type": "number"
          },
          "duration.greaterThan": {
            "description": "None - Filter for entries with values greater than the specified value",
            "title": "Duration.Greaterthan",
            "type": "number"
          },
          "duration.greaterThanOrEqual": {
            "description": "None - Filter for entries with values greater than or equal to the specified value",
            "title": "Duration.Greaterthanorequal",
            "type": "number"
          },
          "duration.equal": {
            "description": "None - Filter for entries with values exactly equal to the specified value",
            "title": "Duration.Equal",
            "type": "number"
          },
          "duration.not.equal": {
            "description": "None - Filter for entries with values not equal to the specified value",
            "title": "Duration.Not.Equal",
            "type": "number"
          },
          "duration.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Duration.Between",
            "type": "array"
          },
          "duration.not.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Duration.Not.Between",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "period.overlaps": {
            "description": "Treatment period - Filter for entries overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Overlaps",
            "type": "array"
          },
          "period.not.overlaps": {
            "description": "Treatment period - Filter for entries not overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Overlaps",
            "type": "array"
          },
          "period.contains": {
            "description": "Treatment period - Filter for entries containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Contains",
            "type": "array"
          },
          "period.not.contains": {
            "description": "Treatment period - Filter for entries not containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Contains",
            "type": "array"
          },
          "period.containedBy": {
            "description": "Treatment period - Filter for entries whose period are contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Containedby",
            "type": "array"
          },
          "period.not.containedBy": {
            "description": "Treatment period - Filter for entries whose period are not contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Containedby",
            "type": "array"
          },
          "cycles.lessThan": {
            "description": "Cycles - Filter for entries with values less than the specified value",
            "title": "Cycles.Lessthan",
            "type": "integer"
          },
          "cycles.lessThanOrEqual": {
            "description": "Cycles - Filter for entries with values less than or equal to the specified value",
            "title": "Cycles.Lessthanorequal",
            "type": "integer"
          },
          "cycles.greaterThan": {
            "description": "Cycles - Filter for entries with values greater than the specified value",
            "title": "Cycles.Greaterthan",
            "type": "integer"
          },
          "cycles.greaterThanOrEqual": {
            "description": "Cycles - Filter for entries with values greater than or equal to the specified value",
            "title": "Cycles.Greaterthanorequal",
            "type": "integer"
          },
          "cycles.equal": {
            "description": "Cycles - Filter for entries with values exactly equal to the specified value",
            "title": "Cycles.Equal",
            "type": "integer"
          },
          "cycles.not.equal": {
            "description": "Cycles - Filter for entries with values not equal to the specified value",
            "title": "Cycles.Not.Equal",
            "type": "integer"
          },
          "cycles.between": {
            "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Cycles.Between",
            "type": "array"
          },
          "cycles.not.between": {
            "description": "Cycles - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Cycles.Not.Between",
            "type": "array"
          },
          "intent": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SystemicTherapyIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for single value choice',)"
          },
          "intent.not": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SystemicTherapyIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          "intent.anyOf": {
            "description": "Intent - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "curative",
                "palliative"
              ],
              "title": "SystemicTherapyIntentChoices",
              "type": "string"
            },
            "title": "Intent.Anyof",
            "type": "array"
          },
          "adjunctiveRole.not.exists": {
            "description": "Treatment Role - Filter for entries without a value",
            "title": "Adjunctiverole.Not.Exists",
            "type": "boolean"
          },
          "adjunctiveRole.exists": {
            "description": "Treatment Role - Filter for entries with a value",
            "title": "Adjunctiverole.Exists",
            "type": "boolean"
          },
          "adjunctiveRole": {
            "description": "Treatment Role - Filter for a matching concept code",
            "title": "Adjunctiverole",
            "type": "string"
          },
          "adjunctiveRole.not": {
            "description": "Treatment Role - Filter for a mismatching concept code",
            "title": "Adjunctiverole.Not",
            "type": "string"
          },
          "adjunctiveRole.anyOf": {
            "description": "Treatment Role - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Adjunctiverole.Anyof",
            "type": "array"
          },
          "adjunctiveRole.not.anyOf": {
            "description": "Treatment Role - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Adjunctiverole.Not.Anyof",
            "type": "array"
          },
          "adjunctiveRole.descendantsOf": {
            "description": "Treatment Role - Filter for all child concepts of a given concepts code",
            "title": "Adjunctiverole.Descendantsof",
            "type": "string"
          },
          "isAdjunctive": {
            "description": "Treatment Role - ('Filter for yes/no statement',)",
            "title": "Isadjunctive",
            "type": "boolean"
          },
          "terminationReason.not.exists": {
            "description": "Termination reason - Filter for entries without a value",
            "title": "Terminationreason.Not.Exists",
            "type": "boolean"
          },
          "terminationReason.exists": {
            "description": "Termination reason - Filter for entries with a value",
            "title": "Terminationreason.Exists",
            "type": "boolean"
          },
          "terminationReason": {
            "description": "Termination reason - Filter for a matching concept code",
            "title": "Terminationreason",
            "type": "string"
          },
          "terminationReason.not": {
            "description": "Termination reason - Filter for a mismatching concept code",
            "title": "Terminationreason.Not",
            "type": "string"
          },
          "terminationReason.anyOf": {
            "description": "Termination reason - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Terminationreason.Anyof",
            "type": "array"
          },
          "terminationReason.not.anyOf": {
            "description": "Termination reason - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Terminationreason.Not.Anyof",
            "type": "array"
          },
          "terminationReason.descendantsOf": {
            "description": "Termination reason - Filter for all child concepts of a given concepts code",
            "title": "Terminationreason.Descendantsof",
            "type": "string"
          },
          "therapyLineId.not.exists": {
            "description": "Therapy line - Filter for entries without a value",
            "title": "Therapylineid.Not.Exists",
            "type": "boolean"
          },
          "therapyLineId.exists": {
            "description": "Therapy line - Filter for entries with a value",
            "title": "Therapylineid.Exists",
            "type": "boolean"
          },
          "therapyLineId": {
            "description": "Therapy line - Filter for reference matches",
            "title": "Therapylineid",
            "type": "string"
          },
          "therapyLineId.not": {
            "description": "Therapy line - Filter for reference mismatches",
            "title": "Therapylineid.Not",
            "type": "string"
          },
          "therapyLineId.contains": {
            "description": "Therapy line - Filter for partial text matches",
            "title": "Therapylineid.Contains",
            "type": "string"
          },
          "therapyLineId.not.contains": {
            "description": "Therapy line - Filter for partial text mismatches",
            "title": "Therapylineid.Not.Contains",
            "type": "string"
          },
          "therapyLineId.beginsWith": {
            "description": "Therapy line - Filter for entries starting with the text",
            "title": "Therapylineid.Beginswith",
            "type": "string"
          },
          "therapyLineId.not.beginsWith": {
            "description": "Therapy line - Filter for entries not starting with the text",
            "title": "Therapylineid.Not.Beginswith",
            "type": "string"
          },
          "therapyLineId.endsWith": {
            "description": "Therapy line - Filter for entries ending with the text",
            "title": "Therapylineid.Endswith",
            "type": "string"
          },
          "therapyLineId.not.endsWith": {
            "description": "Therapy line - Filter for entries not ending with the text",
            "title": "Therapylineid.Not.Endswith",
            "type": "string"
          },
          "therapyLineId.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Anyof",
            "type": "array"
          },
          "therapyLineId.not.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Not.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds": {
            "description": "Targeted neoplastic entities - Filter for full text matches",
            "title": "Targetedentitiesids",
            "type": "string"
          },
          "targetedEntitiesIds.not": {
            "description": "Targeted neoplastic entities - Filter for full text mismatches",
            "title": "Targetedentitiesids.Not",
            "type": "string"
          },
          "targetedEntitiesIds.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text matches",
            "title": "Targetedentitiesids.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.not.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text mismatches",
            "title": "Targetedentitiesids.Not.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries starting with the text",
            "title": "Targetedentitiesids.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
            "title": "Targetedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries ending with the text",
            "title": "Targetedentitiesids.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
            "title": "Targetedentitiesids.Not.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds.not.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "SystemicTherapyFilters",
        "type": "object"
      },
      "Paginated_SystemicTherapy_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/SystemicTherapy"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[SystemicTherapy]",
        "type": "object"
      },
      "SystemicTherapyCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the systemic therapy",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "period": {
            "$ref": "#/components/schemas/Period",
            "description": "Clinically-relevant period during which the therapy was administered to the patient.",
            "title": "Treatment period",
            "x-expanded": false
          },
          "cycles": {
            "description": "The total number of treatment cycles during the treatment period.",
            "title": "Cycles",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/SystemicTherapyIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "adjunctiveRole": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates the role of the adjunctive therapy (if applicable).",
            "title": "Treatment Role",
            "x-expanded": false,
            "x-terminology": "AdjunctiveTherapyRole"
          },
          "terminationReason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Explanation for the premature or planned termination of the systemic therapy",
            "title": "Termination reason",
            "x-expanded": false,
            "x-terminology": "TreatmentTerminationReason"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the systemic therapy is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the systemic therapy",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "period",
          "cycles",
          "intent"
        ],
        "title": "SystemicTherapyCreate",
        "type": "object"
      },
      "SystemicTherapyMedicationCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "drug": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Antineoplastic drug/medication administered to the patient",
            "title": "Antineoplastic Drug",
            "x-expanded": false,
            "x-terminology": "AntineoplasticAgent"
          },
          "route": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Drug administration route",
            "title": "Route",
            "x-expanded": false,
            "x-terminology": "DosageRoute"
          },
          "usedOfflabel": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a medication was used off-label at the time of administration",
            "title": "Off-label use",
            "x-expanded": false
          },
          "withinSoc": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a medication was within standard of care (SOC) at the time of administration.",
            "title": "Within SOC",
            "x-expanded": false
          },
          "dosageMassConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in mass concentration (if revelant/appliccable)",
            "title": "Dosage - Mass concentration",
            "x-default-unit": "g/l",
            "x-expanded": false,
            "x-measure": "MassConcentration"
          },
          "dosageMass": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a fixed mass (if revelant/appliccable)",
            "title": "Dosage - Fixed Mass",
            "x-default-unit": "g",
            "x-expanded": false,
            "x-measure": "Mass"
          },
          "dosageVolume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a volume (if revelant/appliccable)",
            "title": "Dosage - Volume",
            "x-default-unit": "l",
            "x-expanded": false,
            "x-measure": "Volume"
          },
          "dosageMassSurface": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)",
            "title": "Dosage - Mass per body surface",
            "x-default-unit": "g/square_meter",
            "x-expanded": false,
            "x-measure": "MassPerArea"
          },
          "dosageRateMassConcentration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)",
            "title": "Dosage rate - Mass concentration",
            "x-default-unit": "g/l/s",
            "x-expanded": false,
            "x-measure": "MassConcentrationPerTime"
          },
          "dosageRateMass": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)",
            "title": "Dosage rate - Fixed Mass",
            "x-default-unit": "g/s",
            "x-expanded": false,
            "x-measure": "MassPerTime"
          },
          "dosageRateVolume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a volume (if revelant/appliccable)",
            "title": "Dosage rate - Volume",
            "x-default-unit": "l/s",
            "x-expanded": false,
            "x-measure": "VolumePerTime"
          },
          "dosageRateMassSurface": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)",
            "title": "Dosage rate - Mass per body surface",
            "x-default-unit": "g/square_meter/s",
            "x-expanded": false,
            "x-measure": "MassPerAreaPerTime"
          }
        },
        "required": [
          "drug"
        ],
        "title": "SystemicTherapyMedicationCreate",
        "type": "object"
      },
      "SurgeryFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "procedure": {
            "description": "Surgical procedure - Filter for a matching concept code",
            "title": "Procedure",
            "type": "string"
          },
          "procedure.not": {
            "description": "Surgical procedure - Filter for a mismatching concept code",
            "title": "Procedure.Not",
            "type": "string"
          },
          "procedure.anyOf": {
            "description": "Surgical procedure - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Procedure.Anyof",
            "type": "array"
          },
          "procedure.not.anyOf": {
            "description": "Surgical procedure - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Procedure.Not.Anyof",
            "type": "array"
          },
          "procedure.descendantsOf": {
            "description": "Surgical procedure - Filter for all child concepts of a given concepts code",
            "title": "Procedure.Descendantsof",
            "type": "string"
          },
          "intent": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SurgeryIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for single value choice',)"
          },
          "intent.not": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "SurgeryIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          "intent.anyOf": {
            "description": "Intent - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "curative",
                "palliative"
              ],
              "title": "SurgeryIntentChoices",
              "type": "string"
            },
            "title": "Intent.Anyof",
            "type": "array"
          },
          "bodysite.not.exists": {
            "description": "Anatomical location - Filter for entries without a value",
            "title": "Bodysite.Not.Exists",
            "type": "boolean"
          },
          "bodysite.exists": {
            "description": "Anatomical location - Filter for entries with a value",
            "title": "Bodysite.Exists",
            "type": "boolean"
          },
          "bodysite": {
            "description": "Anatomical location - Filter for a matching concept code",
            "title": "Bodysite",
            "type": "string"
          },
          "bodysite.not": {
            "description": "Anatomical location - Filter for a mismatching concept code",
            "title": "Bodysite.Not",
            "type": "string"
          },
          "bodysite.anyOf": {
            "description": "Anatomical location - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysite.Anyof",
            "type": "array"
          },
          "bodysite.not.anyOf": {
            "description": "Anatomical location - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysite.Not.Anyof",
            "type": "array"
          },
          "bodysite.descendantsOf": {
            "description": "Anatomical location - Filter for all child concepts of a given concepts code",
            "title": "Bodysite.Descendantsof",
            "type": "string"
          },
          "bodysiteQualifier.not.exists": {
            "description": "Anatomical location qualifier - Filter for entries without a value",
            "title": "Bodysitequalifier.Not.Exists",
            "type": "boolean"
          },
          "bodysiteQualifier.exists": {
            "description": "Anatomical location qualifier - Filter for entries with a value",
            "title": "Bodysitequalifier.Exists",
            "type": "boolean"
          },
          "bodysiteQualifier": {
            "description": "Anatomical location qualifier - Filter for a matching concept code",
            "title": "Bodysitequalifier",
            "type": "string"
          },
          "bodysiteQualifier.not": {
            "description": "Anatomical location qualifier - Filter for a mismatching concept code",
            "title": "Bodysitequalifier.Not",
            "type": "string"
          },
          "bodysiteQualifier.anyOf": {
            "description": "Anatomical location qualifier - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysitequalifier.Anyof",
            "type": "array"
          },
          "bodysiteQualifier.not.anyOf": {
            "description": "Anatomical location qualifier - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysitequalifier.Not.Anyof",
            "type": "array"
          },
          "bodysiteQualifier.descendantsOf": {
            "description": "Anatomical location qualifier - Filter for all child concepts of a given concepts code",
            "title": "Bodysitequalifier.Descendantsof",
            "type": "string"
          },
          "bodysiteLaterality.not.exists": {
            "description": "Anatomical location laterality - Filter for entries without a value",
            "title": "Bodysitelaterality.Not.Exists",
            "type": "boolean"
          },
          "bodysiteLaterality.exists": {
            "description": "Anatomical location laterality - Filter for entries with a value",
            "title": "Bodysitelaterality.Exists",
            "type": "boolean"
          },
          "bodysiteLaterality": {
            "description": "Anatomical location laterality - Filter for a matching concept code",
            "title": "Bodysitelaterality",
            "type": "string"
          },
          "bodysiteLaterality.not": {
            "description": "Anatomical location laterality - Filter for a mismatching concept code",
            "title": "Bodysitelaterality.Not",
            "type": "string"
          },
          "bodysiteLaterality.anyOf": {
            "description": "Anatomical location laterality - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysitelaterality.Anyof",
            "type": "array"
          },
          "bodysiteLaterality.not.anyOf": {
            "description": "Anatomical location laterality - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Bodysitelaterality.Not.Anyof",
            "type": "array"
          },
          "bodysiteLaterality.descendantsOf": {
            "description": "Anatomical location laterality - Filter for all child concepts of a given concepts code",
            "title": "Bodysitelaterality.Descendantsof",
            "type": "string"
          },
          "outcome.not.exists": {
            "description": "Outcome - Filter for entries without a value",
            "title": "Outcome.Not.Exists",
            "type": "boolean"
          },
          "outcome.exists": {
            "description": "Outcome - Filter for entries with a value",
            "title": "Outcome.Exists",
            "type": "boolean"
          },
          "outcome": {
            "description": "Outcome - Filter for a matching concept code",
            "title": "Outcome",
            "type": "string"
          },
          "outcome.not": {
            "description": "Outcome - Filter for a mismatching concept code",
            "title": "Outcome.Not",
            "type": "string"
          },
          "outcome.anyOf": {
            "description": "Outcome - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Outcome.Anyof",
            "type": "array"
          },
          "outcome.not.anyOf": {
            "description": "Outcome - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Outcome.Not.Anyof",
            "type": "array"
          },
          "outcome.descendantsOf": {
            "description": "Outcome - Filter for all child concepts of a given concepts code",
            "title": "Outcome.Descendantsof",
            "type": "string"
          },
          "therapyLineId.not.exists": {
            "description": "Therapy line - Filter for entries without a value",
            "title": "Therapylineid.Not.Exists",
            "type": "boolean"
          },
          "therapyLineId.exists": {
            "description": "Therapy line - Filter for entries with a value",
            "title": "Therapylineid.Exists",
            "type": "boolean"
          },
          "therapyLineId": {
            "description": "Therapy line - Filter for reference matches",
            "title": "Therapylineid",
            "type": "string"
          },
          "therapyLineId.not": {
            "description": "Therapy line - Filter for reference mismatches",
            "title": "Therapylineid.Not",
            "type": "string"
          },
          "therapyLineId.contains": {
            "description": "Therapy line - Filter for partial text matches",
            "title": "Therapylineid.Contains",
            "type": "string"
          },
          "therapyLineId.not.contains": {
            "description": "Therapy line - Filter for partial text mismatches",
            "title": "Therapylineid.Not.Contains",
            "type": "string"
          },
          "therapyLineId.beginsWith": {
            "description": "Therapy line - Filter for entries starting with the text",
            "title": "Therapylineid.Beginswith",
            "type": "string"
          },
          "therapyLineId.not.beginsWith": {
            "description": "Therapy line - Filter for entries not starting with the text",
            "title": "Therapylineid.Not.Beginswith",
            "type": "string"
          },
          "therapyLineId.endsWith": {
            "description": "Therapy line - Filter for entries ending with the text",
            "title": "Therapylineid.Endswith",
            "type": "string"
          },
          "therapyLineId.not.endsWith": {
            "description": "Therapy line - Filter for entries not ending with the text",
            "title": "Therapylineid.Not.Endswith",
            "type": "string"
          },
          "therapyLineId.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Anyof",
            "type": "array"
          },
          "therapyLineId.not.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Not.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds": {
            "description": "Targeted neoplastic entities - Filter for full text matches",
            "title": "Targetedentitiesids",
            "type": "string"
          },
          "targetedEntitiesIds.not": {
            "description": "Targeted neoplastic entities - Filter for full text mismatches",
            "title": "Targetedentitiesids.Not",
            "type": "string"
          },
          "targetedEntitiesIds.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text matches",
            "title": "Targetedentitiesids.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.not.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text mismatches",
            "title": "Targetedentitiesids.Not.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries starting with the text",
            "title": "Targetedentitiesids.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
            "title": "Targetedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries ending with the text",
            "title": "Targetedentitiesids.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
            "title": "Targetedentitiesids.Not.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds.not.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "SurgeryFilters",
        "type": "object"
      },
      "Paginated_Surgery_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Surgery"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Surgery]",
        "type": "object"
      },
      "SurgeryCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the surgical procedure",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date of the surgical procedure.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "procedure": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The specific surgical procedure that was performed",
            "title": "Surgical procedure",
            "x-expanded": false,
            "x-terminology": "SurgicalProcedure"
          },
          "intent": {
            "$ref": "#/components/schemas/SurgeryIntentChoices",
            "description": "Therapeutic intent of the surgery",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "bodysite": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anatomical location of the surgery",
            "title": "Anatomical location",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "bodysiteQualifier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "General qualifier for the anatomical location of the surgery",
            "title": "Anatomical location qualifier",
            "x-expanded": false,
            "x-terminology": "BodyLocationQualifier"
          },
          "bodysiteLaterality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Laterality for the anatomical location of the surgery",
            "title": "Anatomical location laterality",
            "x-expanded": false,
            "x-terminology": "LateralityQualifier"
          },
          "outcome": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The outcome of the surgery",
            "title": "Outcome",
            "x-expanded": false,
            "x-terminology": "ProcedureOutcome"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the surgery is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the surgery",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "procedure",
          "intent"
        ],
        "title": "SurgeryCreate",
        "type": "object"
      },
      "RadiotherapyFilters": {
        "properties": {
          "dosages.id": {
            "description": "Id - Filter for full text matches",
            "title": "Dosages.Id",
            "type": "string"
          },
          "dosages.id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Dosages.Id.Not",
            "type": "string"
          },
          "dosages.id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Dosages.Id.Contains",
            "type": "string"
          },
          "dosages.id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Dosages.Id.Not.Contains",
            "type": "string"
          },
          "dosages.id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Dosages.Id.Beginswith",
            "type": "string"
          },
          "dosages.id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Dosages.Id.Not.Beginswith",
            "type": "string"
          },
          "dosages.id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Dosages.Id.Endswith",
            "type": "string"
          },
          "dosages.id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Dosages.Id.Not.Endswith",
            "type": "string"
          },
          "dosages.id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Id.Anyof",
            "type": "array"
          },
          "dosages.id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Id.Not.Anyof",
            "type": "array"
          },
          "dosages.fractions.not.exists": {
            "description": "Total fractions - Filter for entries without a value",
            "title": "Dosages.Fractions.Not.Exists",
            "type": "boolean"
          },
          "dosages.fractions.exists": {
            "description": "Total fractions - Filter for entries with a value",
            "title": "Dosages.Fractions.Exists",
            "type": "boolean"
          },
          "dosages.fractions.lessThan": {
            "description": "Total fractions - Filter for entries with values less than the specified value",
            "title": "Dosages.Fractions.Lessthan",
            "type": "integer"
          },
          "dosages.fractions.lessThanOrEqual": {
            "description": "Total fractions - Filter for entries with values less than or equal to the specified value",
            "title": "Dosages.Fractions.Lessthanorequal",
            "type": "integer"
          },
          "dosages.fractions.greaterThan": {
            "description": "Total fractions - Filter for entries with values greater than the specified value",
            "title": "Dosages.Fractions.Greaterthan",
            "type": "integer"
          },
          "dosages.fractions.greaterThanOrEqual": {
            "description": "Total fractions - Filter for entries with values greater than or equal to the specified value",
            "title": "Dosages.Fractions.Greaterthanorequal",
            "type": "integer"
          },
          "dosages.fractions.equal": {
            "description": "Total fractions - Filter for entries with values exactly equal to the specified value",
            "title": "Dosages.Fractions.Equal",
            "type": "integer"
          },
          "dosages.fractions.not.equal": {
            "description": "Total fractions - Filter for entries with values not equal to the specified value",
            "title": "Dosages.Fractions.Not.Equal",
            "type": "integer"
          },
          "dosages.fractions.between": {
            "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Dosages.Fractions.Between",
            "type": "array"
          },
          "dosages.fractions.not.between": {
            "description": "Total fractions - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Dosages.Fractions.Not.Between",
            "type": "array"
          },
          "dosages.dose.not.exists": {
            "description": "Total radiation dose - Filter for entries without a value",
            "title": "Dosages.Dose.Not.Exists",
            "type": "boolean"
          },
          "dosages.dose.exists": {
            "description": "Total radiation dose - Filter for entries with a value",
            "title": "Dosages.Dose.Exists",
            "type": "boolean"
          },
          "dosages.dose.lessThan": {
            "description": "Total radiation dose - Filter for entries with values less than the specified value",
            "title": "Dosages.Dose.Lessthan",
            "type": "number"
          },
          "dosages.dose.lessThanOrEqual": {
            "description": "Total radiation dose - Filter for entries with values less than or equal to the specified value",
            "title": "Dosages.Dose.Lessthanorequal",
            "type": "number"
          },
          "dosages.dose.greaterThan": {
            "description": "Total radiation dose - Filter for entries with values greater than the specified value",
            "title": "Dosages.Dose.Greaterthan",
            "type": "number"
          },
          "dosages.dose.greaterThanOrEqual": {
            "description": "Total radiation dose - Filter for entries with values greater than or equal to the specified value",
            "title": "Dosages.Dose.Greaterthanorequal",
            "type": "number"
          },
          "dosages.dose.equal": {
            "description": "Total radiation dose - Filter for entries with values exactly equal to the specified value",
            "title": "Dosages.Dose.Equal",
            "type": "number"
          },
          "dosages.dose.not.equal": {
            "description": "Total radiation dose - Filter for entries with values not equal to the specified value",
            "title": "Dosages.Dose.Not.Equal",
            "type": "number"
          },
          "dosages.dose.between": {
            "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Dosages.Dose.Between",
            "type": "array"
          },
          "dosages.dose.not.between": {
            "description": "Total radiation dose - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Dosages.Dose.Not.Between",
            "type": "array"
          },
          "dosages.irradiatedVolume": {
            "description": "Irradiated volume - Filter for a matching concept code",
            "title": "Dosages.Irradiatedvolume",
            "type": "string"
          },
          "dosages.irradiatedVolume.not": {
            "description": "Irradiated volume - Filter for a mismatching concept code",
            "title": "Dosages.Irradiatedvolume.Not",
            "type": "string"
          },
          "dosages.irradiatedVolume.anyOf": {
            "description": "Irradiated volume - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolume.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolume.not.anyOf": {
            "description": "Irradiated volume - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolume.Not.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolume.descendantsOf": {
            "description": "Irradiated volume - Filter for all child concepts of a given concepts code",
            "title": "Dosages.Irradiatedvolume.Descendantsof",
            "type": "string"
          },
          "dosages.irradiatedVolumeMorphology.not.exists": {
            "description": "Irradiated volume morphology - Filter for entries without a value",
            "title": "Dosages.Irradiatedvolumemorphology.Not.Exists",
            "type": "boolean"
          },
          "dosages.irradiatedVolumeMorphology.exists": {
            "description": "Irradiated volume morphology - Filter for entries with a value",
            "title": "Dosages.Irradiatedvolumemorphology.Exists",
            "type": "boolean"
          },
          "dosages.irradiatedVolumeMorphology": {
            "description": "Irradiated volume morphology - Filter for a matching concept code",
            "title": "Dosages.Irradiatedvolumemorphology",
            "type": "string"
          },
          "dosages.irradiatedVolumeMorphology.not": {
            "description": "Irradiated volume morphology - Filter for a mismatching concept code",
            "title": "Dosages.Irradiatedvolumemorphology.Not",
            "type": "string"
          },
          "dosages.irradiatedVolumeMorphology.anyOf": {
            "description": "Irradiated volume morphology - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolumemorphology.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolumeMorphology.not.anyOf": {
            "description": "Irradiated volume morphology - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolumemorphology.Not.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolumeMorphology.descendantsOf": {
            "description": "Irradiated volume morphology - Filter for all child concepts of a given concepts code",
            "title": "Dosages.Irradiatedvolumemorphology.Descendantsof",
            "type": "string"
          },
          "dosages.irradiatedVolumeQualifier.not.exists": {
            "description": "Irradiated volume qualifier - Filter for entries without a value",
            "title": "Dosages.Irradiatedvolumequalifier.Not.Exists",
            "type": "boolean"
          },
          "dosages.irradiatedVolumeQualifier.exists": {
            "description": "Irradiated volume qualifier - Filter for entries with a value",
            "title": "Dosages.Irradiatedvolumequalifier.Exists",
            "type": "boolean"
          },
          "dosages.irradiatedVolumeQualifier": {
            "description": "Irradiated volume qualifier - Filter for a matching concept code",
            "title": "Dosages.Irradiatedvolumequalifier",
            "type": "string"
          },
          "dosages.irradiatedVolumeQualifier.not": {
            "description": "Irradiated volume qualifier - Filter for a mismatching concept code",
            "title": "Dosages.Irradiatedvolumequalifier.Not",
            "type": "string"
          },
          "dosages.irradiatedVolumeQualifier.anyOf": {
            "description": "Irradiated volume qualifier - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolumequalifier.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolumeQualifier.not.anyOf": {
            "description": "Irradiated volume qualifier - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Dosages.Irradiatedvolumequalifier.Not.Anyof",
            "type": "array"
          },
          "dosages.irradiatedVolumeQualifier.descendantsOf": {
            "description": "Irradiated volume qualifier - Filter for all child concepts of a given concepts code",
            "title": "Dosages.Irradiatedvolumequalifier.Descendantsof",
            "type": "string"
          },
          "settings.id": {
            "description": "Id - Filter for full text matches",
            "title": "Settings.Id",
            "type": "string"
          },
          "settings.id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Settings.Id.Not",
            "type": "string"
          },
          "settings.id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Settings.Id.Contains",
            "type": "string"
          },
          "settings.id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Settings.Id.Not.Contains",
            "type": "string"
          },
          "settings.id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Settings.Id.Beginswith",
            "type": "string"
          },
          "settings.id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Settings.Id.Not.Beginswith",
            "type": "string"
          },
          "settings.id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Settings.Id.Endswith",
            "type": "string"
          },
          "settings.id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Settings.Id.Not.Endswith",
            "type": "string"
          },
          "settings.id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Settings.Id.Anyof",
            "type": "array"
          },
          "settings.id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Settings.Id.Not.Anyof",
            "type": "array"
          },
          "settings.modality": {
            "description": "Modality - Filter for a matching concept code",
            "title": "Settings.Modality",
            "type": "string"
          },
          "settings.modality.not": {
            "description": "Modality - Filter for a mismatching concept code",
            "title": "Settings.Modality.Not",
            "type": "string"
          },
          "settings.modality.anyOf": {
            "description": "Modality - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Settings.Modality.Anyof",
            "type": "array"
          },
          "settings.modality.not.anyOf": {
            "description": "Modality - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Settings.Modality.Not.Anyof",
            "type": "array"
          },
          "settings.modality.descendantsOf": {
            "description": "Modality - Filter for all child concepts of a given concepts code",
            "title": "Settings.Modality.Descendantsof",
            "type": "string"
          },
          "settings.technique": {
            "description": "Technique - Filter for a matching concept code",
            "title": "Settings.Technique",
            "type": "string"
          },
          "settings.technique.not": {
            "description": "Technique - Filter for a mismatching concept code",
            "title": "Settings.Technique.Not",
            "type": "string"
          },
          "settings.technique.anyOf": {
            "description": "Technique - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Settings.Technique.Anyof",
            "type": "array"
          },
          "settings.technique.not.anyOf": {
            "description": "Technique - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Settings.Technique.Not.Anyof",
            "type": "array"
          },
          "settings.technique.descendantsOf": {
            "description": "Technique - Filter for all child concepts of a given concepts code",
            "title": "Settings.Technique.Descendantsof",
            "type": "string"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "period.overlaps": {
            "description": "Treatment period - Filter for entries overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Overlaps",
            "type": "array"
          },
          "period.not.overlaps": {
            "description": "Treatment period - Filter for entries not overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Overlaps",
            "type": "array"
          },
          "period.contains": {
            "description": "Treatment period - Filter for entries containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Contains",
            "type": "array"
          },
          "period.not.contains": {
            "description": "Treatment period - Filter for entries not containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Contains",
            "type": "array"
          },
          "period.containedBy": {
            "description": "Treatment period - Filter for entries whose period are contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Containedby",
            "type": "array"
          },
          "period.not.containedBy": {
            "description": "Treatment period - Filter for entries whose period are not contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Containedby",
            "type": "array"
          },
          "sessions.lessThan": {
            "description": "Total sessions - Filter for entries with values less than the specified value",
            "title": "Sessions.Lessthan",
            "type": "integer"
          },
          "sessions.lessThanOrEqual": {
            "description": "Total sessions - Filter for entries with values less than or equal to the specified value",
            "title": "Sessions.Lessthanorequal",
            "type": "integer"
          },
          "sessions.greaterThan": {
            "description": "Total sessions - Filter for entries with values greater than the specified value",
            "title": "Sessions.Greaterthan",
            "type": "integer"
          },
          "sessions.greaterThanOrEqual": {
            "description": "Total sessions - Filter for entries with values greater than or equal to the specified value",
            "title": "Sessions.Greaterthanorequal",
            "type": "integer"
          },
          "sessions.equal": {
            "description": "Total sessions - Filter for entries with values exactly equal to the specified value",
            "title": "Sessions.Equal",
            "type": "integer"
          },
          "sessions.not.equal": {
            "description": "Total sessions - Filter for entries with values not equal to the specified value",
            "title": "Sessions.Not.Equal",
            "type": "integer"
          },
          "sessions.between": {
            "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Sessions.Between",
            "type": "array"
          },
          "sessions.not.between": {
            "description": "Total sessions - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Sessions.Not.Between",
            "type": "array"
          },
          "intent": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "RadiotherapyIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for single value choice',)"
          },
          "intent.not": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "RadiotherapyIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          "intent.anyOf": {
            "description": "Intent - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "curative",
                "palliative"
              ],
              "title": "RadiotherapyIntentChoices",
              "type": "string"
            },
            "title": "Intent.Anyof",
            "type": "array"
          },
          "terminationReason.not.exists": {
            "description": "Termination reason - Filter for entries without a value",
            "title": "Terminationreason.Not.Exists",
            "type": "boolean"
          },
          "terminationReason.exists": {
            "description": "Termination reason - Filter for entries with a value",
            "title": "Terminationreason.Exists",
            "type": "boolean"
          },
          "terminationReason": {
            "description": "Termination reason - Filter for a matching concept code",
            "title": "Terminationreason",
            "type": "string"
          },
          "terminationReason.not": {
            "description": "Termination reason - Filter for a mismatching concept code",
            "title": "Terminationreason.Not",
            "type": "string"
          },
          "terminationReason.anyOf": {
            "description": "Termination reason - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Terminationreason.Anyof",
            "type": "array"
          },
          "terminationReason.not.anyOf": {
            "description": "Termination reason - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Terminationreason.Not.Anyof",
            "type": "array"
          },
          "terminationReason.descendantsOf": {
            "description": "Termination reason - Filter for all child concepts of a given concepts code",
            "title": "Terminationreason.Descendantsof",
            "type": "string"
          },
          "therapyLineId.not.exists": {
            "description": "Therapy line - Filter for entries without a value",
            "title": "Therapylineid.Not.Exists",
            "type": "boolean"
          },
          "therapyLineId.exists": {
            "description": "Therapy line - Filter for entries with a value",
            "title": "Therapylineid.Exists",
            "type": "boolean"
          },
          "therapyLineId": {
            "description": "Therapy line - Filter for reference matches",
            "title": "Therapylineid",
            "type": "string"
          },
          "therapyLineId.not": {
            "description": "Therapy line - Filter for reference mismatches",
            "title": "Therapylineid.Not",
            "type": "string"
          },
          "therapyLineId.contains": {
            "description": "Therapy line - Filter for partial text matches",
            "title": "Therapylineid.Contains",
            "type": "string"
          },
          "therapyLineId.not.contains": {
            "description": "Therapy line - Filter for partial text mismatches",
            "title": "Therapylineid.Not.Contains",
            "type": "string"
          },
          "therapyLineId.beginsWith": {
            "description": "Therapy line - Filter for entries starting with the text",
            "title": "Therapylineid.Beginswith",
            "type": "string"
          },
          "therapyLineId.not.beginsWith": {
            "description": "Therapy line - Filter for entries not starting with the text",
            "title": "Therapylineid.Not.Beginswith",
            "type": "string"
          },
          "therapyLineId.endsWith": {
            "description": "Therapy line - Filter for entries ending with the text",
            "title": "Therapylineid.Endswith",
            "type": "string"
          },
          "therapyLineId.not.endsWith": {
            "description": "Therapy line - Filter for entries not ending with the text",
            "title": "Therapylineid.Not.Endswith",
            "type": "string"
          },
          "therapyLineId.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Anyof",
            "type": "array"
          },
          "therapyLineId.not.anyOf": {
            "description": "Therapy line - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Therapylineid.Not.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds": {
            "description": "Targeted neoplastic entities - Filter for full text matches",
            "title": "Targetedentitiesids",
            "type": "string"
          },
          "targetedEntitiesIds.not": {
            "description": "Targeted neoplastic entities - Filter for full text mismatches",
            "title": "Targetedentitiesids.Not",
            "type": "string"
          },
          "targetedEntitiesIds.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text matches",
            "title": "Targetedentitiesids.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.not.contains": {
            "description": "Targeted neoplastic entities - Filter for partial text mismatches",
            "title": "Targetedentitiesids.Not.Contains",
            "type": "string"
          },
          "targetedEntitiesIds.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries starting with the text",
            "title": "Targetedentitiesids.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.beginsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not starting with the text",
            "title": "Targetedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "targetedEntitiesIds.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries ending with the text",
            "title": "Targetedentitiesids.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.not.endsWith": {
            "description": "Targeted neoplastic entities - Filter for entries not ending with the text",
            "title": "Targetedentitiesids.Not.Endswith",
            "type": "string"
          },
          "targetedEntitiesIds.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Anyof",
            "type": "array"
          },
          "targetedEntitiesIds.not.anyOf": {
            "description": "Targeted neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Targetedentitiesids.Not.Anyof",
            "type": "array"
          }
        },
        "title": "RadiotherapyFilters",
        "type": "object"
      },
      "Paginated_Radiotherapy_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Radiotherapy"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Radiotherapy]",
        "type": "object"
      },
      "RadiotherapyCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who received the radiotherapy",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "period": {
            "$ref": "#/components/schemas/Period",
            "description": "Clinically-relevant period during which the radiotherapy was administered to the patient.",
            "title": "Treatment period",
            "x-expanded": false
          },
          "sessions": {
            "description": "The total number of radiotherapy sessions over the treatment period.",
            "title": "Total sessions",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/RadiotherapyIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "terminationReason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Explanation for the premature or planned termination of the radiotherapy",
            "title": "Termination reason",
            "x-expanded": false,
            "x-terminology": "TreatmentTerminationReason"
          },
          "therapyLineId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Therapy line to which the radiotherapy is assigned to",
            "title": "Therapy line",
            "x-expanded": false
          },
          "targetedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were targeted by the radiotherapy",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Targeted neoplastic entities",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "period",
          "sessions",
          "intent"
        ],
        "title": "RadiotherapyCreate",
        "type": "object"
      },
      "RadiotherapyDosageCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "fractions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The total number of radiotherapy fractions delivered over the treatment period.",
            "title": "Total fractions",
            "x-expanded": false
          },
          "dose": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Total radiation dose delivered over the full radiotherapy course",
            "title": "Total radiation dose",
            "x-default-unit": "Gy",
            "x-expanded": false,
            "x-measure": "RadiationDose"
          },
          "irradiatedVolume": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Anatomical location of the irradiated volume",
            "title": "Irradiated volume",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTreatmentLocation"
          },
          "irradiatedVolumeMorphology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphology of the anatomical location of the irradiated volume",
            "title": "Irradiated volume morphology",
            "x-expanded": false,
            "x-terminology": "RadiotherapyVolumeType"
          },
          "irradiatedVolumeQualifier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "General qualifier for the anatomical location of the irradiated volume",
            "title": "Irradiated volume qualifier",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTreatmentLocationQualifier"
          }
        },
        "required": [
          "irradiatedVolume"
        ],
        "title": "RadiotherapyDosageCreate",
        "type": "object"
      },
      "RadiotherapySettingCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "modality": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Modality of external beam or brachytherapy radiation procedures",
            "title": "Modality",
            "x-expanded": false,
            "x-terminology": "RadiotherapyModality"
          },
          "technique": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Technique of external beam or brachytherapy radiation procedures",
            "title": "Technique",
            "x-expanded": false,
            "x-terminology": "RadiotherapyTechnique"
          }
        },
        "required": [
          "modality",
          "technique"
        ],
        "title": "RadiotherapySettingCreate",
        "type": "object"
      },
      "TherapyLineFilters": {
        "properties": {
          "period.not.exists": {
            "description": "Period - Filter for entries without a value",
            "title": "Period.Not.Exists",
            "type": "boolean"
          },
          "period.exists": {
            "description": "Period - Filter for entries with a value",
            "title": "Period.Exists",
            "type": "boolean"
          },
          "period.overlaps": {
            "description": "Period - Filter for entries overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Overlaps",
            "type": "array"
          },
          "period.not.overlaps": {
            "description": "Period - Filter for entries not overlapping with the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Overlaps",
            "type": "array"
          },
          "period.contains": {
            "description": "Period - Filter for entries containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Contains",
            "type": "array"
          },
          "period.not.contains": {
            "description": "Period - Filter for entries not containing the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Contains",
            "type": "array"
          },
          "period.containedBy": {
            "description": "Period - Filter for entries whose period are contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Containedby",
            "type": "array"
          },
          "period.not.containedBy": {
            "description": "Period - Filter for entries whose period are not contined by the time period",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Period.Not.Containedby",
            "type": "array"
          },
          "label": {
            "description": "Label - Filter for full text matches",
            "title": "Label",
            "type": "string"
          },
          "label.not": {
            "description": "Label - Filter for full text mismatches",
            "title": "Label.Not",
            "type": "string"
          },
          "label.contains": {
            "description": "Label - Filter for partial text matches",
            "title": "Label.Contains",
            "type": "string"
          },
          "label.not.contains": {
            "description": "Label - Filter for partial text mismatches",
            "title": "Label.Not.Contains",
            "type": "string"
          },
          "label.beginsWith": {
            "description": "Label - Filter for entries starting with the text",
            "title": "Label.Beginswith",
            "type": "string"
          },
          "label.not.beginsWith": {
            "description": "Label - Filter for entries not starting with the text",
            "title": "Label.Not.Beginswith",
            "type": "string"
          },
          "label.endsWith": {
            "description": "Label - Filter for entries ending with the text",
            "title": "Label.Endswith",
            "type": "string"
          },
          "label.not.endsWith": {
            "description": "Label - Filter for entries not ending with the text",
            "title": "Label.Not.Endswith",
            "type": "string"
          },
          "label.anyOf": {
            "description": "Label - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Label.Anyof",
            "type": "array"
          },
          "label.not.anyOf": {
            "description": "Label - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Label.Not.Anyof",
            "type": "array"
          },
          "progressionFreeSurvival.not.exists": {
            "description": "Progression-free survival in months - Filter for entries without a value",
            "title": "Progressionfreesurvival.Not.Exists",
            "type": "boolean"
          },
          "progressionFreeSurvival.exists": {
            "description": "Progression-free survival in months - Filter for entries with a value",
            "title": "Progressionfreesurvival.Exists",
            "type": "boolean"
          },
          "progressionFreeSurvival.lessThan": {
            "description": "Progression-free survival in months - Filter for entries with values less than the specified value",
            "title": "Progressionfreesurvival.Lessthan",
            "type": "number"
          },
          "progressionFreeSurvival.lessThanOrEqual": {
            "description": "Progression-free survival in months - Filter for entries with values less than or equal to the specified value",
            "title": "Progressionfreesurvival.Lessthanorequal",
            "type": "number"
          },
          "progressionFreeSurvival.greaterThan": {
            "description": "Progression-free survival in months - Filter for entries with values greater than the specified value",
            "title": "Progressionfreesurvival.Greaterthan",
            "type": "number"
          },
          "progressionFreeSurvival.greaterThanOrEqual": {
            "description": "Progression-free survival in months - Filter for entries with values greater than or equal to the specified value",
            "title": "Progressionfreesurvival.Greaterthanorequal",
            "type": "number"
          },
          "progressionFreeSurvival.equal": {
            "description": "Progression-free survival in months - Filter for entries with values exactly equal to the specified value",
            "title": "Progressionfreesurvival.Equal",
            "type": "number"
          },
          "progressionFreeSurvival.not.equal": {
            "description": "Progression-free survival in months - Filter for entries with values not equal to the specified value",
            "title": "Progressionfreesurvival.Not.Equal",
            "type": "number"
          },
          "progressionFreeSurvival.between": {
            "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Progressionfreesurvival.Between",
            "type": "array"
          },
          "progressionFreeSurvival.not.between": {
            "description": "Progression-free survival in months - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Progressionfreesurvival.Not.Between",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "ordinal.lessThan": {
            "description": "Line ordinal number - Filter for entries with values less than the specified value",
            "title": "Ordinal.Lessthan",
            "type": "integer"
          },
          "ordinal.lessThanOrEqual": {
            "description": "Line ordinal number - Filter for entries with values less than or equal to the specified value",
            "title": "Ordinal.Lessthanorequal",
            "type": "integer"
          },
          "ordinal.greaterThan": {
            "description": "Line ordinal number - Filter for entries with values greater than the specified value",
            "title": "Ordinal.Greaterthan",
            "type": "integer"
          },
          "ordinal.greaterThanOrEqual": {
            "description": "Line ordinal number - Filter for entries with values greater than or equal to the specified value",
            "title": "Ordinal.Greaterthanorequal",
            "type": "integer"
          },
          "ordinal.equal": {
            "description": "Line ordinal number - Filter for entries with values exactly equal to the specified value",
            "title": "Ordinal.Equal",
            "type": "integer"
          },
          "ordinal.not.equal": {
            "description": "Line ordinal number - Filter for entries with values not equal to the specified value",
            "title": "Ordinal.Not.Equal",
            "type": "integer"
          },
          "ordinal.between": {
            "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ordinal.Between",
            "type": "array"
          },
          "ordinal.not.between": {
            "description": "Line ordinal number - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ordinal.Not.Between",
            "type": "array"
          },
          "intent": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "TherapyLineIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for single value choice',)"
          },
          "intent.not": {
            "allOf": [
              {
                "enum": [
                  "curative",
                  "palliative"
                ],
                "title": "TherapyLineIntentChoices",
                "type": "string"
              }
            ],
            "description": "Intent - ('Filter for all but a single value choice',)"
          },
          "intent.anyOf": {
            "description": "Intent - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "curative",
                "palliative"
              ],
              "title": "TherapyLineIntentChoices",
              "type": "string"
            },
            "title": "Intent.Anyof",
            "type": "array"
          },
          "progressionDate.not.exists": {
            "description": "Begin of progression - Filter for entries without a value",
            "title": "Progressiondate.Not.Exists",
            "type": "boolean"
          },
          "progressionDate.exists": {
            "description": "Begin of progression - Filter for entries with a value",
            "title": "Progressiondate.Exists",
            "type": "boolean"
          },
          "progressionDate.before": {
            "description": "Begin of progression - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Progressiondate.Before",
            "type": "string"
          },
          "progressionDate.after": {
            "description": "Begin of progression - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Progressiondate.After",
            "type": "string"
          },
          "progressionDate.onOrBefore": {
            "description": "Begin of progression - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Progressiondate.Onorbefore",
            "type": "string"
          },
          "progressionDate.onOrAfter": {
            "description": "Begin of progression - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Progressiondate.Onorafter",
            "type": "string"
          },
          "progressionDate.on": {
            "description": "Begin of progression - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Progressiondate.On",
            "type": "string"
          },
          "progressionDate.not.on": {
            "description": "Begin of progression - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Progressiondate.Not.On",
            "type": "string"
          },
          "progressionDate.between": {
            "description": "Begin of progression - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Progressiondate.Between",
            "type": "array"
          },
          "progressionDate.not.between": {
            "description": "Begin of progression - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Progressiondate.Not.Between",
            "type": "array"
          }
        },
        "title": "TherapyLineFilters",
        "type": "object"
      },
      "Paginated_TherapyLine_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/TherapyLine"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[TherapyLine]",
        "type": "object"
      },
      "TherapyLineCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient to whom this therapy line is associated",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "ordinal": {
            "description": "Number indicating the sequence in which this block of treatments were administered to the patient",
            "title": "Line ordinal number",
            "type": "integer",
            "x-expanded": false
          },
          "intent": {
            "$ref": "#/components/schemas/TherapyLineIntentChoices",
            "description": "Treatment intent of the system therapy",
            "maxLength": 30,
            "title": "Intent",
            "x-expanded": false
          },
          "progressionDate": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date at which progression was first detected, if applicable",
            "title": "Begin of progression",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "ordinal",
          "intent"
        ],
        "title": "TherapyLineCreate",
        "type": "object"
      },
      "AdverseEventFilters": {
        "properties": {
          "suspectedCauses.id": {
            "description": "Id - Filter for full text matches",
            "title": "Suspectedcauses.Id",
            "type": "string"
          },
          "suspectedCauses.id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Suspectedcauses.Id.Not",
            "type": "string"
          },
          "suspectedCauses.id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Suspectedcauses.Id.Contains",
            "type": "string"
          },
          "suspectedCauses.id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Suspectedcauses.Id.Not.Contains",
            "type": "string"
          },
          "suspectedCauses.id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Suspectedcauses.Id.Beginswith",
            "type": "string"
          },
          "suspectedCauses.id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Suspectedcauses.Id.Not.Beginswith",
            "type": "string"
          },
          "suspectedCauses.id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Suspectedcauses.Id.Endswith",
            "type": "string"
          },
          "suspectedCauses.id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Suspectedcauses.Id.Not.Endswith",
            "type": "string"
          },
          "suspectedCauses.id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Id.Anyof",
            "type": "array"
          },
          "suspectedCauses.id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Id.Not.Anyof",
            "type": "array"
          },
          "suspectedCauses.systemicTherapyId.not.exists": {
            "description": "Suspected systemic therapy - Filter for entries without a value",
            "title": "Suspectedcauses.Systemictherapyid.Not.Exists",
            "type": "boolean"
          },
          "suspectedCauses.systemicTherapyId.exists": {
            "description": "Suspected systemic therapy - Filter for entries with a value",
            "title": "Suspectedcauses.Systemictherapyid.Exists",
            "type": "boolean"
          },
          "suspectedCauses.systemicTherapyId": {
            "description": "Suspected systemic therapy - Filter for reference matches",
            "title": "Suspectedcauses.Systemictherapyid",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.not": {
            "description": "Suspected systemic therapy - Filter for reference mismatches",
            "title": "Suspectedcauses.Systemictherapyid.Not",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.contains": {
            "description": "Suspected systemic therapy - Filter for partial text matches",
            "title": "Suspectedcauses.Systemictherapyid.Contains",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.not.contains": {
            "description": "Suspected systemic therapy - Filter for partial text mismatches",
            "title": "Suspectedcauses.Systemictherapyid.Not.Contains",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.beginsWith": {
            "description": "Suspected systemic therapy - Filter for entries starting with the text",
            "title": "Suspectedcauses.Systemictherapyid.Beginswith",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.not.beginsWith": {
            "description": "Suspected systemic therapy - Filter for entries not starting with the text",
            "title": "Suspectedcauses.Systemictherapyid.Not.Beginswith",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.endsWith": {
            "description": "Suspected systemic therapy - Filter for entries ending with the text",
            "title": "Suspectedcauses.Systemictherapyid.Endswith",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.not.endsWith": {
            "description": "Suspected systemic therapy - Filter for entries not ending with the text",
            "title": "Suspectedcauses.Systemictherapyid.Not.Endswith",
            "type": "string"
          },
          "suspectedCauses.systemicTherapyId.anyOf": {
            "description": "Suspected systemic therapy - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Systemictherapyid.Anyof",
            "type": "array"
          },
          "suspectedCauses.systemicTherapyId.not.anyOf": {
            "description": "Suspected systemic therapy - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Systemictherapyid.Not.Anyof",
            "type": "array"
          },
          "suspectedCauses.medicationId.not.exists": {
            "description": "Suspected systemic therapy medication - Filter for entries without a value",
            "title": "Suspectedcauses.Medicationid.Not.Exists",
            "type": "boolean"
          },
          "suspectedCauses.medicationId.exists": {
            "description": "Suspected systemic therapy medication - Filter for entries with a value",
            "title": "Suspectedcauses.Medicationid.Exists",
            "type": "boolean"
          },
          "suspectedCauses.medicationId": {
            "description": "Suspected systemic therapy medication - Filter for reference matches",
            "title": "Suspectedcauses.Medicationid",
            "type": "string"
          },
          "suspectedCauses.medicationId.not": {
            "description": "Suspected systemic therapy medication - Filter for reference mismatches",
            "title": "Suspectedcauses.Medicationid.Not",
            "type": "string"
          },
          "suspectedCauses.medicationId.contains": {
            "description": "Suspected systemic therapy medication - Filter for partial text matches",
            "title": "Suspectedcauses.Medicationid.Contains",
            "type": "string"
          },
          "suspectedCauses.medicationId.not.contains": {
            "description": "Suspected systemic therapy medication - Filter for partial text mismatches",
            "title": "Suspectedcauses.Medicationid.Not.Contains",
            "type": "string"
          },
          "suspectedCauses.medicationId.beginsWith": {
            "description": "Suspected systemic therapy medication - Filter for entries starting with the text",
            "title": "Suspectedcauses.Medicationid.Beginswith",
            "type": "string"
          },
          "suspectedCauses.medicationId.not.beginsWith": {
            "description": "Suspected systemic therapy medication - Filter for entries not starting with the text",
            "title": "Suspectedcauses.Medicationid.Not.Beginswith",
            "type": "string"
          },
          "suspectedCauses.medicationId.endsWith": {
            "description": "Suspected systemic therapy medication - Filter for entries ending with the text",
            "title": "Suspectedcauses.Medicationid.Endswith",
            "type": "string"
          },
          "suspectedCauses.medicationId.not.endsWith": {
            "description": "Suspected systemic therapy medication - Filter for entries not ending with the text",
            "title": "Suspectedcauses.Medicationid.Not.Endswith",
            "type": "string"
          },
          "suspectedCauses.medicationId.anyOf": {
            "description": "Suspected systemic therapy medication - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Medicationid.Anyof",
            "type": "array"
          },
          "suspectedCauses.medicationId.not.anyOf": {
            "description": "Suspected systemic therapy medication - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Medicationid.Not.Anyof",
            "type": "array"
          },
          "suspectedCauses.radiotherapyId.not.exists": {
            "description": "Suspected radiotherapy - Filter for entries without a value",
            "title": "Suspectedcauses.Radiotherapyid.Not.Exists",
            "type": "boolean"
          },
          "suspectedCauses.radiotherapyId.exists": {
            "description": "Suspected radiotherapy - Filter for entries with a value",
            "title": "Suspectedcauses.Radiotherapyid.Exists",
            "type": "boolean"
          },
          "suspectedCauses.radiotherapyId": {
            "description": "Suspected radiotherapy - Filter for reference matches",
            "title": "Suspectedcauses.Radiotherapyid",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.not": {
            "description": "Suspected radiotherapy - Filter for reference mismatches",
            "title": "Suspectedcauses.Radiotherapyid.Not",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.contains": {
            "description": "Suspected radiotherapy - Filter for partial text matches",
            "title": "Suspectedcauses.Radiotherapyid.Contains",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.not.contains": {
            "description": "Suspected radiotherapy - Filter for partial text mismatches",
            "title": "Suspectedcauses.Radiotherapyid.Not.Contains",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.beginsWith": {
            "description": "Suspected radiotherapy - Filter for entries starting with the text",
            "title": "Suspectedcauses.Radiotherapyid.Beginswith",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.not.beginsWith": {
            "description": "Suspected radiotherapy - Filter for entries not starting with the text",
            "title": "Suspectedcauses.Radiotherapyid.Not.Beginswith",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.endsWith": {
            "description": "Suspected radiotherapy - Filter for entries ending with the text",
            "title": "Suspectedcauses.Radiotherapyid.Endswith",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.not.endsWith": {
            "description": "Suspected radiotherapy - Filter for entries not ending with the text",
            "title": "Suspectedcauses.Radiotherapyid.Not.Endswith",
            "type": "string"
          },
          "suspectedCauses.radiotherapyId.anyOf": {
            "description": "Suspected radiotherapy - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Radiotherapyid.Anyof",
            "type": "array"
          },
          "suspectedCauses.radiotherapyId.not.anyOf": {
            "description": "Suspected radiotherapy - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Radiotherapyid.Not.Anyof",
            "type": "array"
          },
          "suspectedCauses.surgeryId.not.exists": {
            "description": "Suspected surgery - Filter for entries without a value",
            "title": "Suspectedcauses.Surgeryid.Not.Exists",
            "type": "boolean"
          },
          "suspectedCauses.surgeryId.exists": {
            "description": "Suspected surgery - Filter for entries with a value",
            "title": "Suspectedcauses.Surgeryid.Exists",
            "type": "boolean"
          },
          "suspectedCauses.surgeryId": {
            "description": "Suspected surgery - Filter for reference matches",
            "title": "Suspectedcauses.Surgeryid",
            "type": "string"
          },
          "suspectedCauses.surgeryId.not": {
            "description": "Suspected surgery - Filter for reference mismatches",
            "title": "Suspectedcauses.Surgeryid.Not",
            "type": "string"
          },
          "suspectedCauses.surgeryId.contains": {
            "description": "Suspected surgery - Filter for partial text matches",
            "title": "Suspectedcauses.Surgeryid.Contains",
            "type": "string"
          },
          "suspectedCauses.surgeryId.not.contains": {
            "description": "Suspected surgery - Filter for partial text mismatches",
            "title": "Suspectedcauses.Surgeryid.Not.Contains",
            "type": "string"
          },
          "suspectedCauses.surgeryId.beginsWith": {
            "description": "Suspected surgery - Filter for entries starting with the text",
            "title": "Suspectedcauses.Surgeryid.Beginswith",
            "type": "string"
          },
          "suspectedCauses.surgeryId.not.beginsWith": {
            "description": "Suspected surgery - Filter for entries not starting with the text",
            "title": "Suspectedcauses.Surgeryid.Not.Beginswith",
            "type": "string"
          },
          "suspectedCauses.surgeryId.endsWith": {
            "description": "Suspected surgery - Filter for entries ending with the text",
            "title": "Suspectedcauses.Surgeryid.Endswith",
            "type": "string"
          },
          "suspectedCauses.surgeryId.not.endsWith": {
            "description": "Suspected surgery - Filter for entries not ending with the text",
            "title": "Suspectedcauses.Surgeryid.Not.Endswith",
            "type": "string"
          },
          "suspectedCauses.surgeryId.anyOf": {
            "description": "Suspected surgery - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Surgeryid.Anyof",
            "type": "array"
          },
          "suspectedCauses.surgeryId.not.anyOf": {
            "description": "Suspected surgery - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Suspectedcauses.Surgeryid.Not.Anyof",
            "type": "array"
          },
          "suspectedCauses.causality.not.exists": {
            "description": "Causality - Filter for entries without a value",
            "title": "Suspectedcauses.Causality.Not.Exists",
            "type": "boolean"
          },
          "suspectedCauses.causality.exists": {
            "description": "Causality - Filter for entries with a value",
            "title": "Suspectedcauses.Causality.Exists",
            "type": "boolean"
          },
          "suspectedCauses.causality": {
            "allOf": [
              {
                "enum": [
                  "unrelated",
                  "unlikely-related",
                  "possibly-related",
                  "probably-related",
                  "definitely-related",
                  "conditionally-related"
                ],
                "title": "AdverseEventSuspectedCauseCausalityChoices",
                "type": "string"
              }
            ],
            "description": "Causality - ('Filter for single value choice',)"
          },
          "suspectedCauses.causality.not": {
            "allOf": [
              {
                "enum": [
                  "unrelated",
                  "unlikely-related",
                  "possibly-related",
                  "probably-related",
                  "definitely-related",
                  "conditionally-related"
                ],
                "title": "AdverseEventSuspectedCauseCausalityChoices",
                "type": "string"
              }
            ],
            "description": "Causality - ('Filter for all but a single value choice',)"
          },
          "suspectedCauses.causality.anyOf": {
            "description": "Causality - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "unrelated",
                "unlikely-related",
                "possibly-related",
                "probably-related",
                "definitely-related",
                "conditionally-related"
              ],
              "title": "AdverseEventSuspectedCauseCausalityChoices",
              "type": "string"
            },
            "title": "Suspectedcauses.Causality.Anyof",
            "type": "array"
          },
          "mitigations.id": {
            "description": "Id - Filter for full text matches",
            "title": "Mitigations.Id",
            "type": "string"
          },
          "mitigations.id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Mitigations.Id.Not",
            "type": "string"
          },
          "mitigations.id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Mitigations.Id.Contains",
            "type": "string"
          },
          "mitigations.id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Mitigations.Id.Not.Contains",
            "type": "string"
          },
          "mitigations.id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Mitigations.Id.Beginswith",
            "type": "string"
          },
          "mitigations.id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Mitigations.Id.Not.Beginswith",
            "type": "string"
          },
          "mitigations.id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Mitigations.Id.Endswith",
            "type": "string"
          },
          "mitigations.id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Mitigations.Id.Not.Endswith",
            "type": "string"
          },
          "mitigations.id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Id.Anyof",
            "type": "array"
          },
          "mitigations.id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Id.Not.Anyof",
            "type": "array"
          },
          "mitigations.category": {
            "allOf": [
              {
                "enum": [
                  "adjustment",
                  "pharmacological",
                  "procedure"
                ],
                "title": "AdverseEventMitigationCategoryChoices",
                "type": "string"
              }
            ],
            "description": "Mitigation category - ('Filter for single value choice',)"
          },
          "mitigations.category.not": {
            "allOf": [
              {
                "enum": [
                  "adjustment",
                  "pharmacological",
                  "procedure"
                ],
                "title": "AdverseEventMitigationCategoryChoices",
                "type": "string"
              }
            ],
            "description": "Mitigation category - ('Filter for all but a single value choice',)"
          },
          "mitigations.category.anyOf": {
            "description": "Mitigation category - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "adjustment",
                "pharmacological",
                "procedure"
              ],
              "title": "AdverseEventMitigationCategoryChoices",
              "type": "string"
            },
            "title": "Mitigations.Category.Anyof",
            "type": "array"
          },
          "mitigations.adjustment.not.exists": {
            "description": "Treatment Adjustment - Filter for entries without a value",
            "title": "Mitigations.Adjustment.Not.Exists",
            "type": "boolean"
          },
          "mitigations.adjustment.exists": {
            "description": "Treatment Adjustment - Filter for entries with a value",
            "title": "Mitigations.Adjustment.Exists",
            "type": "boolean"
          },
          "mitigations.adjustment": {
            "description": "Treatment Adjustment - Filter for a matching concept code",
            "title": "Mitigations.Adjustment",
            "type": "string"
          },
          "mitigations.adjustment.not": {
            "description": "Treatment Adjustment - Filter for a mismatching concept code",
            "title": "Mitigations.Adjustment.Not",
            "type": "string"
          },
          "mitigations.adjustment.anyOf": {
            "description": "Treatment Adjustment - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Adjustment.Anyof",
            "type": "array"
          },
          "mitigations.adjustment.not.anyOf": {
            "description": "Treatment Adjustment - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Adjustment.Not.Anyof",
            "type": "array"
          },
          "mitigations.adjustment.descendantsOf": {
            "description": "Treatment Adjustment - Filter for all child concepts of a given concepts code",
            "title": "Mitigations.Adjustment.Descendantsof",
            "type": "string"
          },
          "mitigations.drug.not.exists": {
            "description": "Pharmacological drug - Filter for entries without a value",
            "title": "Mitigations.Drug.Not.Exists",
            "type": "boolean"
          },
          "mitigations.drug.exists": {
            "description": "Pharmacological drug - Filter for entries with a value",
            "title": "Mitigations.Drug.Exists",
            "type": "boolean"
          },
          "mitigations.drug": {
            "description": "Pharmacological drug - Filter for a matching concept code",
            "title": "Mitigations.Drug",
            "type": "string"
          },
          "mitigations.drug.not": {
            "description": "Pharmacological drug - Filter for a mismatching concept code",
            "title": "Mitigations.Drug.Not",
            "type": "string"
          },
          "mitigations.drug.anyOf": {
            "description": "Pharmacological drug - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Drug.Anyof",
            "type": "array"
          },
          "mitigations.drug.not.anyOf": {
            "description": "Pharmacological drug - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Drug.Not.Anyof",
            "type": "array"
          },
          "mitigations.drug.descendantsOf": {
            "description": "Pharmacological drug - Filter for all child concepts of a given concepts code",
            "title": "Mitigations.Drug.Descendantsof",
            "type": "string"
          },
          "mitigations.procedure.not.exists": {
            "description": "Procedure - Filter for entries without a value",
            "title": "Mitigations.Procedure.Not.Exists",
            "type": "boolean"
          },
          "mitigations.procedure.exists": {
            "description": "Procedure - Filter for entries with a value",
            "title": "Mitigations.Procedure.Exists",
            "type": "boolean"
          },
          "mitigations.procedure": {
            "description": "Procedure - Filter for a matching concept code",
            "title": "Mitigations.Procedure",
            "type": "string"
          },
          "mitigations.procedure.not": {
            "description": "Procedure - Filter for a mismatching concept code",
            "title": "Mitigations.Procedure.Not",
            "type": "string"
          },
          "mitigations.procedure.anyOf": {
            "description": "Procedure - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Procedure.Anyof",
            "type": "array"
          },
          "mitigations.procedure.not.anyOf": {
            "description": "Procedure - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Procedure.Not.Anyof",
            "type": "array"
          },
          "mitigations.procedure.descendantsOf": {
            "description": "Procedure - Filter for all child concepts of a given concepts code",
            "title": "Mitigations.Procedure.Descendantsof",
            "type": "string"
          },
          "mitigations.management.not.exists": {
            "description": "Management - Filter for entries without a value",
            "title": "Mitigations.Management.Not.Exists",
            "type": "boolean"
          },
          "mitigations.management.exists": {
            "description": "Management - Filter for entries with a value",
            "title": "Mitigations.Management.Exists",
            "type": "boolean"
          },
          "mitigations.management": {
            "description": "Management - Filter for a matching concept code",
            "title": "Mitigations.Management",
            "type": "string"
          },
          "mitigations.management.not": {
            "description": "Management - Filter for a mismatching concept code",
            "title": "Mitigations.Management.Not",
            "type": "string"
          },
          "mitigations.management.anyOf": {
            "description": "Management - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Management.Anyof",
            "type": "array"
          },
          "mitigations.management.not.anyOf": {
            "description": "Management - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Mitigations.Management.Not.Anyof",
            "type": "array"
          },
          "mitigations.management.descendantsOf": {
            "description": "Management - Filter for all child concepts of a given concepts code",
            "title": "Mitigations.Management.Descendantsof",
            "type": "string"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Event date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Event date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Event date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Event date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Event date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Event date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Event date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Event date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "event": {
            "description": "Adverse event - Filter for a matching concept code",
            "title": "Event",
            "type": "string"
          },
          "event.not": {
            "description": "Adverse event - Filter for a mismatching concept code",
            "title": "Event.Not",
            "type": "string"
          },
          "event.anyOf": {
            "description": "Adverse event - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Event.Anyof",
            "type": "array"
          },
          "event.not.anyOf": {
            "description": "Adverse event - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Event.Not.Anyof",
            "type": "array"
          },
          "event.descendantsOf": {
            "description": "Adverse event - Filter for all child concepts of a given concepts code",
            "title": "Event.Descendantsof",
            "type": "string"
          },
          "grade.lessThan": {
            "description": "Grade - Filter for entries with values less than the specified value",
            "title": "Grade.Lessthan",
            "type": "integer"
          },
          "grade.lessThanOrEqual": {
            "description": "Grade - Filter for entries with values less than or equal to the specified value",
            "title": "Grade.Lessthanorequal",
            "type": "integer"
          },
          "grade.greaterThan": {
            "description": "Grade - Filter for entries with values greater than the specified value",
            "title": "Grade.Greaterthan",
            "type": "integer"
          },
          "grade.greaterThanOrEqual": {
            "description": "Grade - Filter for entries with values greater than or equal to the specified value",
            "title": "Grade.Greaterthanorequal",
            "type": "integer"
          },
          "grade.equal": {
            "description": "Grade - Filter for entries with values exactly equal to the specified value",
            "title": "Grade.Equal",
            "type": "integer"
          },
          "grade.not.equal": {
            "description": "Grade - Filter for entries with values not equal to the specified value",
            "title": "Grade.Not.Equal",
            "type": "integer"
          },
          "grade.between": {
            "description": "Grade - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Grade.Between",
            "type": "array"
          },
          "grade.not.between": {
            "description": "Grade - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Grade.Not.Between",
            "type": "array"
          },
          "outcome": {
            "allOf": [
              {
                "enum": [
                  "resolved",
                  "resolved-with-sequelae",
                  "recovering",
                  "ongoing",
                  "fatal",
                  "unknown"
                ],
                "title": "AdverseEventOutcomeChoices",
                "type": "string"
              }
            ],
            "description": "Date resolved - ('Filter for single value choice',)"
          },
          "outcome.not": {
            "allOf": [
              {
                "enum": [
                  "resolved",
                  "resolved-with-sequelae",
                  "recovering",
                  "ongoing",
                  "fatal",
                  "unknown"
                ],
                "title": "AdverseEventOutcomeChoices",
                "type": "string"
              }
            ],
            "description": "Date resolved - ('Filter for all but a single value choice',)"
          },
          "outcome.anyOf": {
            "description": "Date resolved - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "resolved",
                "resolved-with-sequelae",
                "recovering",
                "ongoing",
                "fatal",
                "unknown"
              ],
              "title": "AdverseEventOutcomeChoices",
              "type": "string"
            },
            "title": "Outcome.Anyof",
            "type": "array"
          },
          "dateResolved.not.exists": {
            "description": "Date resolved - Filter for entries without a value",
            "title": "Dateresolved.Not.Exists",
            "type": "boolean"
          },
          "dateResolved.exists": {
            "description": "Date resolved - Filter for entries with a value",
            "title": "Dateresolved.Exists",
            "type": "boolean"
          },
          "dateResolved.before": {
            "description": "Date resolved - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Dateresolved.Before",
            "type": "string"
          },
          "dateResolved.after": {
            "description": "Date resolved - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Dateresolved.After",
            "type": "string"
          },
          "dateResolved.onOrBefore": {
            "description": "Date resolved - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Dateresolved.Onorbefore",
            "type": "string"
          },
          "dateResolved.onOrAfter": {
            "description": "Date resolved - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Dateresolved.Onorafter",
            "type": "string"
          },
          "dateResolved.on": {
            "description": "Date resolved - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Dateresolved.On",
            "type": "string"
          },
          "dateResolved.not.on": {
            "description": "Date resolved - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Dateresolved.Not.On",
            "type": "string"
          },
          "dateResolved.between": {
            "description": "Date resolved - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateresolved.Between",
            "type": "array"
          },
          "dateResolved.not.between": {
            "description": "Date resolved - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Dateresolved.Not.Between",
            "type": "array"
          }
        },
        "title": "AdverseEventFilters",
        "type": "object"
      },
      "Paginated_AdverseEvent_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AdverseEvent"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[AdverseEvent]",
        "type": "object"
      },
      "AdverseEventCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who had the adverse event being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the adverse event ocurred.",
            "format": "date",
            "title": "Event date",
            "type": "string",
            "x-expanded": false
          },
          "event": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Classification of the adverse event using CTCAE criteria",
            "title": "Adverse event",
            "x-expanded": false,
            "x-terminology": "AdverseEventTerm"
          },
          "grade": {
            "description": "The grade associated with the severity of an adverse event, using CTCAE criteria.",
            "title": "Grade",
            "type": "integer",
            "x-expanded": false
          },
          "outcome": {
            "$ref": "#/components/schemas/AdverseEventOutcomeChoices",
            "description": "The date when the adverse event ended or returned to baseline.",
            "maxLength": 50,
            "title": "Date resolved",
            "x-expanded": false
          },
          "dateResolved": {
            "anyOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The date when the adverse event ended or returned to baseline.",
            "title": "Date resolved",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "event",
          "grade",
          "outcome"
        ],
        "title": "AdverseEventCreate",
        "type": "object"
      },
      "AdverseEventSuspectedCauseCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "systemicTherapyId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systemic therapy suspected to be the cause of the adverse event",
            "title": "Suspected systemic therapy",
            "x-expanded": false
          },
          "medicationId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systemic therapy medication suspected to be the cause of the adverse event",
            "title": "Suspected systemic therapy medication",
            "x-expanded": false
          },
          "radiotherapyId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Radiotherapy suspected to be the cause of the adverse event",
            "title": "Suspected radiotherapy",
            "x-expanded": false
          },
          "surgeryId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Surgery suspected to be the cause of the adverse event",
            "title": "Suspected surgery",
            "x-expanded": false
          },
          "causality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdverseEventSuspectedCauseCausalityChoices",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "description": "Assessment of the potential causality",
            "title": "Causality",
            "x-expanded": false
          }
        },
        "title": "AdverseEventSuspectedCauseCreate",
        "type": "object"
      },
      "AdverseEventMitigationCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "category": {
            "$ref": "#/components/schemas/AdverseEventMitigationCategoryChoices",
            "description": "Type of mitigation employed",
            "maxLength": 50,
            "title": "Mitigation category",
            "x-expanded": false
          },
          "adjustment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)",
            "title": "Treatment Adjustment",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationTreatmentAdjustment"
          },
          "drug": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)",
            "title": "Pharmacological drug",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationDrug"
          },
          "procedure": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)",
            "title": "Procedure",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationProcedure"
          },
          "management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Management type of the adverse event mitigation",
            "title": "Management",
            "x-expanded": false,
            "x-terminology": "AdverseEventMitigationManagement"
          }
        },
        "required": [
          "category"
        ],
        "title": "AdverseEventMitigationCreate",
        "type": "object"
      },
      "TreatmentResponseFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "recist": {
            "description": "RECIST - Filter for a matching concept code",
            "title": "Recist",
            "type": "string"
          },
          "recist.not": {
            "description": "RECIST - Filter for a mismatching concept code",
            "title": "Recist.Not",
            "type": "string"
          },
          "recist.anyOf": {
            "description": "RECIST - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recist.Anyof",
            "type": "array"
          },
          "recist.not.anyOf": {
            "description": "RECIST - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recist.Not.Anyof",
            "type": "array"
          },
          "recist.descendantsOf": {
            "description": "RECIST - Filter for all child concepts of a given concepts code",
            "title": "Recist.Descendantsof",
            "type": "string"
          },
          "recistInterpreted.not.exists": {
            "description": "RECIST Interpreted? - Filter for entries without a value",
            "title": "Recistinterpreted.Not.Exists",
            "type": "boolean"
          },
          "recistInterpreted.exists": {
            "description": "RECIST Interpreted? - Filter for entries with a value",
            "title": "Recistinterpreted.Exists",
            "type": "boolean"
          },
          "recistInterpreted": {
            "description": "RECIST Interpreted? - ('Filter for yes/no statement',)",
            "title": "Recistinterpreted",
            "type": "boolean"
          },
          "methodology": {
            "description": "Assessment method - Filter for a matching concept code",
            "title": "Methodology",
            "type": "string"
          },
          "methodology.not": {
            "description": "Assessment method - Filter for a mismatching concept code",
            "title": "Methodology.Not",
            "type": "string"
          },
          "methodology.anyOf": {
            "description": "Assessment method - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Methodology.Anyof",
            "type": "array"
          },
          "methodology.not.anyOf": {
            "description": "Assessment method - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Methodology.Not.Anyof",
            "type": "array"
          },
          "methodology.descendantsOf": {
            "description": "Assessment method - Filter for all child concepts of a given concepts code",
            "title": "Methodology.Descendantsof",
            "type": "string"
          },
          "assessedEntitiesIds": {
            "description": "Assessed neoplastic entities - Filter for full text matches",
            "title": "Assessedentitiesids",
            "type": "string"
          },
          "assessedEntitiesIds.not": {
            "description": "Assessed neoplastic entities - Filter for full text mismatches",
            "title": "Assessedentitiesids.Not",
            "type": "string"
          },
          "assessedEntitiesIds.contains": {
            "description": "Assessed neoplastic entities - Filter for partial text matches",
            "title": "Assessedentitiesids.Contains",
            "type": "string"
          },
          "assessedEntitiesIds.not.contains": {
            "description": "Assessed neoplastic entities - Filter for partial text mismatches",
            "title": "Assessedentitiesids.Not.Contains",
            "type": "string"
          },
          "assessedEntitiesIds.beginsWith": {
            "description": "Assessed neoplastic entities - Filter for entries starting with the text",
            "title": "Assessedentitiesids.Beginswith",
            "type": "string"
          },
          "assessedEntitiesIds.not.beginsWith": {
            "description": "Assessed neoplastic entities - Filter for entries not starting with the text",
            "title": "Assessedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "assessedEntitiesIds.endsWith": {
            "description": "Assessed neoplastic entities - Filter for entries ending with the text",
            "title": "Assessedentitiesids.Endswith",
            "type": "string"
          },
          "assessedEntitiesIds.not.endsWith": {
            "description": "Assessed neoplastic entities - Filter for entries not ending with the text",
            "title": "Assessedentitiesids.Not.Endswith",
            "type": "string"
          },
          "assessedEntitiesIds.anyOf": {
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Assessedentitiesids.Anyof",
            "type": "array"
          },
          "assessedEntitiesIds.not.anyOf": {
            "description": "Assessed neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Assessedentitiesids.Not.Anyof",
            "type": "array"
          },
          "assessedBodysites.not.exists": {
            "description": "Assessed anatomical location - Filter for entries without a value",
            "title": "Assessedbodysites.Not.Exists",
            "type": "boolean"
          },
          "assessedBodysites.exists": {
            "description": "Assessed anatomical location - Filter for entries with a value",
            "title": "Assessedbodysites.Exists",
            "type": "boolean"
          },
          "assessedBodysites": {
            "description": "Assessed anatomical location - Filter for a matching concept code",
            "title": "Assessedbodysites",
            "type": "string"
          },
          "assessedBodysites.not": {
            "description": "Assessed anatomical location - Filter for a mismatching concept code",
            "title": "Assessedbodysites.Not",
            "type": "string"
          },
          "assessedBodysites.anyOf": {
            "description": "Assessed anatomical location - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Assessedbodysites.Anyof",
            "type": "array"
          },
          "assessedBodysites.not.anyOf": {
            "description": "Assessed anatomical location - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Assessedbodysites.Not.Anyof",
            "type": "array"
          },
          "assessedBodysites.descendantsOf": {
            "description": "Assessed anatomical location - Filter for all child concepts of a given concepts code",
            "title": "Assessedbodysites.Descendantsof",
            "type": "string"
          },
          "assessedBodysites.allOf": {
            "description": "Assessed anatomical location - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Assessedbodysites.Allof",
            "type": "array"
          },
          "assessedBodysites.not.allOf": {
            "description": "Assessed anatomical location - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Assessedbodysites.Not.Allof",
            "type": "array"
          }
        },
        "title": "TreatmentResponseFilters",
        "type": "object"
      },
      "Paginated_TreatmentResponse_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/TreatmentResponse"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[TreatmentResponse]",
        "type": "object"
      },
      "TreatmentResponseCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's treatment response is asseessed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date of the treatment response assessment",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "recist": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "The classification of the treatment response according to RECIST",
            "title": "RECIST",
            "x-expanded": false,
            "x-terminology": "CancerTreatmentResponse"
          },
          "recistInterpreted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether the RECIST value was interpreted or taken from the radiology report",
            "title": "RECIST Interpreted?",
            "x-expanded": false
          },
          "methodology": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Method used to assess and classify the treatment response",
            "title": "Assessment method",
            "x-expanded": false,
            "x-terminology": "CancerTreatmentResponseObservationMethod"
          },
          "assessedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were assesed for treatment response",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Assessed neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "assessedBodysites": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Anatomical location assessed to determine the treatment response",
            "title": "Assessed anatomical location",
            "x-expanded": false,
            "x-terminology": "ObservationBodySite"
          }
        },
        "required": [
          "caseId",
          "date",
          "recist",
          "methodology"
        ],
        "title": "TreatmentResponseCreate",
        "type": "object"
      },
      "TumorBoardFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "relatedEntitiesIds": {
            "description": "Related neoplastic entities - Filter for full text matches",
            "title": "Relatedentitiesids",
            "type": "string"
          },
          "relatedEntitiesIds.not": {
            "description": "Related neoplastic entities - Filter for full text mismatches",
            "title": "Relatedentitiesids.Not",
            "type": "string"
          },
          "relatedEntitiesIds.contains": {
            "description": "Related neoplastic entities - Filter for partial text matches",
            "title": "Relatedentitiesids.Contains",
            "type": "string"
          },
          "relatedEntitiesIds.not.contains": {
            "description": "Related neoplastic entities - Filter for partial text mismatches",
            "title": "Relatedentitiesids.Not.Contains",
            "type": "string"
          },
          "relatedEntitiesIds.beginsWith": {
            "description": "Related neoplastic entities - Filter for entries starting with the text",
            "title": "Relatedentitiesids.Beginswith",
            "type": "string"
          },
          "relatedEntitiesIds.not.beginsWith": {
            "description": "Related neoplastic entities - Filter for entries not starting with the text",
            "title": "Relatedentitiesids.Not.Beginswith",
            "type": "string"
          },
          "relatedEntitiesIds.endsWith": {
            "description": "Related neoplastic entities - Filter for entries ending with the text",
            "title": "Relatedentitiesids.Endswith",
            "type": "string"
          },
          "relatedEntitiesIds.not.endsWith": {
            "description": "Related neoplastic entities - Filter for entries not ending with the text",
            "title": "Relatedentitiesids.Not.Endswith",
            "type": "string"
          },
          "relatedEntitiesIds.anyOf": {
            "description": "Related neoplastic entities - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedentitiesids.Anyof",
            "type": "array"
          },
          "relatedEntitiesIds.not.anyOf": {
            "description": "Related neoplastic entities - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Relatedentitiesids.Not.Anyof",
            "type": "array"
          },
          "recommendations.not.exists": {
            "description": "Recommendations - Filter for entries without a value",
            "title": "Recommendations.Not.Exists",
            "type": "boolean"
          },
          "recommendations.exists": {
            "description": "Recommendations - Filter for entries with a value",
            "title": "Recommendations.Exists",
            "type": "boolean"
          },
          "recommendations": {
            "description": "Recommendations - Filter for a matching concept code",
            "title": "Recommendations",
            "type": "string"
          },
          "recommendations.not": {
            "description": "Recommendations - Filter for a mismatching concept code",
            "title": "Recommendations.Not",
            "type": "string"
          },
          "recommendations.anyOf": {
            "description": "Recommendations - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recommendations.Anyof",
            "type": "array"
          },
          "recommendations.not.anyOf": {
            "description": "Recommendations - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recommendations.Not.Anyof",
            "type": "array"
          },
          "recommendations.descendantsOf": {
            "description": "Recommendations - Filter for all child concepts of a given concepts code",
            "title": "Recommendations.Descendantsof",
            "type": "string"
          },
          "recommendations.allOf": {
            "description": "Recommendations - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Recommendations.Allof",
            "type": "array"
          },
          "recommendations.not.allOf": {
            "description": "Recommendations - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Recommendations.Not.Allof",
            "type": "array"
          }
        },
        "title": "TumorBoardFilters",
        "type": "object"
      },
      "AnyTumorBoard": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/UnspecifiedTumorBoard"
          },
          {
            "$ref": "#/components/schemas/MolecularTumorBoard"
          }
        ]
      },
      "Paginated_AnyTumorBoard_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AnyTumorBoard"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[AnyTumorBoard]",
        "type": "object"
      },
      "MolecularTumorBoardCreate": {
        "properties": {
          "category": {
            "const": "molecular",
            "default": "molecular",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient which was discussed at the tumor board",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the tumor board.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "recommendations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommendation(s) provided by the board regarding the patient's care",
            "title": "Recommendations",
            "x-expanded": false,
            "x-terminology": "TumorBoardRecommendation"
          },
          "conductedMolecularComparison": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Indicates whether a molecular comparison was conducted during the molecular tumor board",
            "title": "Conducted molecular comparison?",
            "x-expanded": false
          },
          "molecularComparisonMatchId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The neoplastic entity that was matched during the molecular comparison",
            "title": "Molecular comparison match",
            "x-expanded": false
          },
          "conductedCupCharacterization": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.",
            "title": "Conducted CUP characterization?",
            "x-expanded": false
          },
          "characterizedCup": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the cancer of unknown primary (CUP) characterization was successful.",
            "title": "Successful CUP characterization?",
            "x-expanded": false
          },
          "reviewedReports": {
            "description": "",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "title": "Reviewed Reports",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "reviewedReports"
        ],
        "title": "MolecularTumorBoardCreate",
        "type": "object"
      },
      "UnspecifiedTumorBoardCreate": {
        "properties": {
          "category": {
            "const": "unspecified",
            "default": "unspecified",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient which was discussed at the tumor board",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Date at which the tumor board took place and/or when the board provided a recommendation.",
            "format": "date",
            "title": "Date",
            "type": "string",
            "x-expanded": false
          },
          "relatedEntitiesIds": {
            "default": [],
            "description": "References to the neoplastic entities that were the focus of the tumor board.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Related neoplastic entities",
            "type": "array",
            "x-expanded": false
          },
          "recommendations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommendation(s) provided by the board regarding the patient's care",
            "title": "Recommendations",
            "x-expanded": false,
            "x-terminology": "TumorBoardRecommendation"
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "UnspecifiedTumorBoardCreate",
        "type": "object"
      },
      "MolecularTherapeuticRecommendationCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "expectedEffect": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the expected effect of the drug",
            "title": "Expected medication action",
            "x-expanded": false,
            "x-terminology": "ExpectedDrugAction"
          },
          "clinicalTrial": {
            "anyOf": [
              {
                "maxLength": 15,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Clinical trial (NCT-Iddentifier) recommended by the board for enrollment",
            "title": "Recommended clinical trial",
            "x-expanded": false
          },
          "offLabelUse": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the medication(s) recommended were off-label",
            "title": "Off-label use",
            "x-expanded": false
          },
          "withinSoc": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the medication(s) recommended were within standard of care",
            "title": "Within SOC",
            "x-expanded": false
          },
          "drugs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Drugs(s) being recommended",
            "title": "Drug(s)",
            "x-expanded": false,
            "x-terminology": "AntineoplasticAgent"
          },
          "supportingGenomicVariantsIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic variants that support the recommendation",
            "title": "Supporting genomic variants",
            "x-expanded": false
          },
          "supportingGenomicSignaturesIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic signatures that support the recommendation",
            "title": "Supporting genomic signatures",
            "x-expanded": false
          },
          "supportingTumorMarkersIds": {
            "anyOf": [
              {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tumor markers that support the recommendation",
            "title": "Supporting tumor markers",
            "x-expanded": false
          }
        },
        "title": "MolecularTherapeuticRecommendationCreate",
        "type": "object"
      },
      "PerformanceStatusFilters": {
        "properties": {
          "ecogInterpretation.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Ecoginterpretation.Not.Exists",
            "type": "boolean"
          },
          "ecogInterpretation.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Ecoginterpretation.Exists",
            "type": "boolean"
          },
          "ecogInterpretation": {
            "description": "None - Filter for a matching concept code",
            "title": "Ecoginterpretation",
            "type": "string"
          },
          "ecogInterpretation.not": {
            "description": "None - Filter for a mismatching concept code",
            "title": "Ecoginterpretation.Not",
            "type": "string"
          },
          "ecogInterpretation.anyOf": {
            "description": "None - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Ecoginterpretation.Anyof",
            "type": "array"
          },
          "ecogInterpretation.not.anyOf": {
            "description": "None - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Ecoginterpretation.Not.Anyof",
            "type": "array"
          },
          "ecogInterpretation.descendantsOf": {
            "description": "None - Filter for all child concepts of a given concepts code",
            "title": "Ecoginterpretation.Descendantsof",
            "type": "string"
          },
          "karnofskyInterpretation.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Karnofskyinterpretation.Not.Exists",
            "type": "boolean"
          },
          "karnofskyInterpretation.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Karnofskyinterpretation.Exists",
            "type": "boolean"
          },
          "karnofskyInterpretation": {
            "description": "None - Filter for a matching concept code",
            "title": "Karnofskyinterpretation",
            "type": "string"
          },
          "karnofskyInterpretation.not": {
            "description": "None - Filter for a mismatching concept code",
            "title": "Karnofskyinterpretation.Not",
            "type": "string"
          },
          "karnofskyInterpretation.anyOf": {
            "description": "None - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Karnofskyinterpretation.Anyof",
            "type": "array"
          },
          "karnofskyInterpretation.not.anyOf": {
            "description": "None - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Karnofskyinterpretation.Not.Anyof",
            "type": "array"
          },
          "karnofskyInterpretation.descendantsOf": {
            "description": "None - Filter for all child concepts of a given concepts code",
            "title": "Karnofskyinterpretation.Descendantsof",
            "type": "string"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "ecogScore.not.exists": {
            "description": "ECOG Score - Filter for entries without a value",
            "title": "Ecogscore.Not.Exists",
            "type": "boolean"
          },
          "ecogScore.exists": {
            "description": "ECOG Score - Filter for entries with a value",
            "title": "Ecogscore.Exists",
            "type": "boolean"
          },
          "ecogScore.lessThan": {
            "description": "ECOG Score - Filter for entries with values less than the specified value",
            "title": "Ecogscore.Lessthan",
            "type": "integer"
          },
          "ecogScore.lessThanOrEqual": {
            "description": "ECOG Score - Filter for entries with values less than or equal to the specified value",
            "title": "Ecogscore.Lessthanorequal",
            "type": "integer"
          },
          "ecogScore.greaterThan": {
            "description": "ECOG Score - Filter for entries with values greater than the specified value",
            "title": "Ecogscore.Greaterthan",
            "type": "integer"
          },
          "ecogScore.greaterThanOrEqual": {
            "description": "ECOG Score - Filter for entries with values greater than or equal to the specified value",
            "title": "Ecogscore.Greaterthanorequal",
            "type": "integer"
          },
          "ecogScore.equal": {
            "description": "ECOG Score - Filter for entries with values exactly equal to the specified value",
            "title": "Ecogscore.Equal",
            "type": "integer"
          },
          "ecogScore.not.equal": {
            "description": "ECOG Score - Filter for entries with values not equal to the specified value",
            "title": "Ecogscore.Not.Equal",
            "type": "integer"
          },
          "ecogScore.between": {
            "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ecogscore.Between",
            "type": "array"
          },
          "ecogScore.not.between": {
            "description": "ECOG Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Ecogscore.Not.Between",
            "type": "array"
          },
          "karnofskyScore.not.exists": {
            "description": "Karnofsky Score - Filter for entries without a value",
            "title": "Karnofskyscore.Not.Exists",
            "type": "boolean"
          },
          "karnofskyScore.exists": {
            "description": "Karnofsky Score - Filter for entries with a value",
            "title": "Karnofskyscore.Exists",
            "type": "boolean"
          },
          "karnofskyScore.lessThan": {
            "description": "Karnofsky Score - Filter for entries with values less than the specified value",
            "title": "Karnofskyscore.Lessthan",
            "type": "integer"
          },
          "karnofskyScore.lessThanOrEqual": {
            "description": "Karnofsky Score - Filter for entries with values less than or equal to the specified value",
            "title": "Karnofskyscore.Lessthanorequal",
            "type": "integer"
          },
          "karnofskyScore.greaterThan": {
            "description": "Karnofsky Score - Filter for entries with values greater than the specified value",
            "title": "Karnofskyscore.Greaterthan",
            "type": "integer"
          },
          "karnofskyScore.greaterThanOrEqual": {
            "description": "Karnofsky Score - Filter for entries with values greater than or equal to the specified value",
            "title": "Karnofskyscore.Greaterthanorequal",
            "type": "integer"
          },
          "karnofskyScore.equal": {
            "description": "Karnofsky Score - Filter for entries with values exactly equal to the specified value",
            "title": "Karnofskyscore.Equal",
            "type": "integer"
          },
          "karnofskyScore.not.equal": {
            "description": "Karnofsky Score - Filter for entries with values not equal to the specified value",
            "title": "Karnofskyscore.Not.Equal",
            "type": "integer"
          },
          "karnofskyScore.between": {
            "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Karnofskyscore.Between",
            "type": "array"
          },
          "karnofskyScore.not.between": {
            "description": "Karnofsky Score - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Karnofskyscore.Not.Between",
            "type": "array"
          }
        },
        "title": "PerformanceStatusFilters",
        "type": "object"
      },
      "Paginated_PerformanceStatus_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PerformanceStatus"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[PerformanceStatus]",
        "type": "object"
      },
      "PerformanceStatusCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's performance status is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the performance score was performed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "ecogScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ECOG Performance Status Score",
            "title": "ECOG Score",
            "x-expanded": false
          },
          "karnofskyScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Karnofsky Performance Status Score",
            "title": "Karnofsky Score",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "PerformanceStatusCreate",
        "type": "object"
      },
      "GenomicVariantFilters": {
        "properties": {
          "isPathogenic.not.exists": {
            "description": "Is Pathogenic - Filter for entries without a value",
            "title": "Ispathogenic.Not.Exists",
            "type": "boolean"
          },
          "isPathogenic.exists": {
            "description": "Is Pathogenic - Filter for entries with a value",
            "title": "Ispathogenic.Exists",
            "type": "boolean"
          },
          "isPathogenic": {
            "description": "Is Pathogenic - ('Filter for yes/no statement',)",
            "title": "Ispathogenic",
            "type": "boolean"
          },
          "isVUS.not.exists": {
            "description": "Is VUS - Filter for entries without a value",
            "title": "Isvus.Not.Exists",
            "type": "boolean"
          },
          "isVUS.exists": {
            "description": "Is VUS - Filter for entries with a value",
            "title": "Isvus.Exists",
            "type": "boolean"
          },
          "isVUS": {
            "description": "Is VUS - ('Filter for yes/no statement',)",
            "title": "Isvus",
            "type": "boolean"
          },
          "dnaHgvs.not.exists": {
            "description": "DNA HGVS - Filter for entries without a value",
            "title": "Dnahgvs.Not.Exists",
            "type": "boolean"
          },
          "dnaHgvs.exists": {
            "description": "DNA HGVS - Filter for entries with a value",
            "title": "Dnahgvs.Exists",
            "type": "boolean"
          },
          "dnaHgvs": {
            "description": "DNA HGVS - Filter for full text matches",
            "title": "Dnahgvs",
            "type": "string"
          },
          "dnaHgvs.not": {
            "description": "DNA HGVS - Filter for full text mismatches",
            "title": "Dnahgvs.Not",
            "type": "string"
          },
          "dnaHgvs.contains": {
            "description": "DNA HGVS - Filter for partial text matches",
            "title": "Dnahgvs.Contains",
            "type": "string"
          },
          "dnaHgvs.not.contains": {
            "description": "DNA HGVS - Filter for partial text mismatches",
            "title": "Dnahgvs.Not.Contains",
            "type": "string"
          },
          "dnaHgvs.beginsWith": {
            "description": "DNA HGVS - Filter for entries starting with the text",
            "title": "Dnahgvs.Beginswith",
            "type": "string"
          },
          "dnaHgvs.not.beginsWith": {
            "description": "DNA HGVS - Filter for entries not starting with the text",
            "title": "Dnahgvs.Not.Beginswith",
            "type": "string"
          },
          "dnaHgvs.endsWith": {
            "description": "DNA HGVS - Filter for entries ending with the text",
            "title": "Dnahgvs.Endswith",
            "type": "string"
          },
          "dnaHgvs.not.endsWith": {
            "description": "DNA HGVS - Filter for entries not ending with the text",
            "title": "Dnahgvs.Not.Endswith",
            "type": "string"
          },
          "dnaHgvs.anyOf": {
            "description": "DNA HGVS - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Dnahgvs.Anyof",
            "type": "array"
          },
          "dnaHgvs.not.anyOf": {
            "description": "DNA HGVS - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Dnahgvs.Not.Anyof",
            "type": "array"
          },
          "dnaReferenceSequence.not.exists": {
            "description": "DNA HGVS RefSeq - Filter for entries without a value",
            "title": "Dnareferencesequence.Not.Exists",
            "type": "boolean"
          },
          "dnaReferenceSequence.exists": {
            "description": "DNA HGVS RefSeq - Filter for entries with a value",
            "title": "Dnareferencesequence.Exists",
            "type": "boolean"
          },
          "dnaReferenceSequence": {
            "description": "DNA HGVS RefSeq - Filter for full text matches",
            "title": "Dnareferencesequence",
            "type": "string"
          },
          "dnaReferenceSequence.not": {
            "description": "DNA HGVS RefSeq - Filter for full text mismatches",
            "title": "Dnareferencesequence.Not",
            "type": "string"
          },
          "dnaReferenceSequence.contains": {
            "description": "DNA HGVS RefSeq - Filter for partial text matches",
            "title": "Dnareferencesequence.Contains",
            "type": "string"
          },
          "dnaReferenceSequence.not.contains": {
            "description": "DNA HGVS RefSeq - Filter for partial text mismatches",
            "title": "Dnareferencesequence.Not.Contains",
            "type": "string"
          },
          "dnaReferenceSequence.beginsWith": {
            "description": "DNA HGVS RefSeq - Filter for entries starting with the text",
            "title": "Dnareferencesequence.Beginswith",
            "type": "string"
          },
          "dnaReferenceSequence.not.beginsWith": {
            "description": "DNA HGVS RefSeq - Filter for entries not starting with the text",
            "title": "Dnareferencesequence.Not.Beginswith",
            "type": "string"
          },
          "dnaReferenceSequence.endsWith": {
            "description": "DNA HGVS RefSeq - Filter for entries ending with the text",
            "title": "Dnareferencesequence.Endswith",
            "type": "string"
          },
          "dnaReferenceSequence.not.endsWith": {
            "description": "DNA HGVS RefSeq - Filter for entries not ending with the text",
            "title": "Dnareferencesequence.Not.Endswith",
            "type": "string"
          },
          "dnaReferenceSequence.anyOf": {
            "description": "DNA HGVS RefSeq - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Dnareferencesequence.Anyof",
            "type": "array"
          },
          "dnaReferenceSequence.not.anyOf": {
            "description": "DNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Dnareferencesequence.Not.Anyof",
            "type": "array"
          },
          "dnaChangePosition.not.exists": {
            "description": "DNA change position - Filter for entries without a value",
            "title": "Dnachangeposition.Not.Exists",
            "type": "boolean"
          },
          "dnaChangePosition.exists": {
            "description": "DNA change position - Filter for entries with a value",
            "title": "Dnachangeposition.Exists",
            "type": "boolean"
          },
          "dnaChangePosition.lessThan": {
            "description": "DNA change position - Filter for entries with values less than the specified value",
            "title": "Dnachangeposition.Lessthan",
            "type": "integer"
          },
          "dnaChangePosition.lessThanOrEqual": {
            "description": "DNA change position - Filter for entries with values less than or equal to the specified value",
            "title": "Dnachangeposition.Lessthanorequal",
            "type": "integer"
          },
          "dnaChangePosition.greaterThan": {
            "description": "DNA change position - Filter for entries with values greater than the specified value",
            "title": "Dnachangeposition.Greaterthan",
            "type": "integer"
          },
          "dnaChangePosition.greaterThanOrEqual": {
            "description": "DNA change position - Filter for entries with values greater than or equal to the specified value",
            "title": "Dnachangeposition.Greaterthanorequal",
            "type": "integer"
          },
          "dnaChangePosition.equal": {
            "description": "DNA change position - Filter for entries with values exactly equal to the specified value",
            "title": "Dnachangeposition.Equal",
            "type": "integer"
          },
          "dnaChangePosition.not.equal": {
            "description": "DNA change position - Filter for entries with values not equal to the specified value",
            "title": "Dnachangeposition.Not.Equal",
            "type": "integer"
          },
          "dnaChangePosition.between": {
            "description": "DNA change position - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Dnachangeposition.Between",
            "type": "array"
          },
          "dnaChangePosition.not.between": {
            "description": "DNA change position - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Dnachangeposition.Not.Between",
            "type": "array"
          },
          "dnaChangePositionRange.not.exists": {
            "description": "DNA change range - Filter for entries without a value",
            "title": "Dnachangepositionrange.Not.Exists",
            "type": "boolean"
          },
          "dnaChangePositionRange.exists": {
            "description": "DNA change range - Filter for entries with a value",
            "title": "Dnachangepositionrange.Exists",
            "type": "boolean"
          },
          "dnaChangeType.not.exists": {
            "description": "DNA change type - Filter for entries without a value",
            "title": "Dnachangetype.Not.Exists",
            "type": "boolean"
          },
          "dnaChangeType.exists": {
            "description": "DNA change type - Filter for entries with a value",
            "title": "Dnachangetype.Exists",
            "type": "boolean"
          },
          "dnaChangeType": {
            "allOf": [
              {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition",
                  "translocation",
                  "transposition",
                  "methylation-gain",
                  "methylation-loss",
                  "methylation-unchanged"
                ],
                "title": "DNAChangeType",
                "type": "string"
              }
            ],
            "description": "DNA change type - ('Filter for single value choice',)"
          },
          "dnaChangeType.not": {
            "allOf": [
              {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition",
                  "translocation",
                  "transposition",
                  "methylation-gain",
                  "methylation-loss",
                  "methylation-unchanged"
                ],
                "title": "DNAChangeType",
                "type": "string"
              }
            ],
            "description": "DNA change type - ('Filter for all but a single value choice',)"
          },
          "dnaChangeType.anyOf": {
            "description": "DNA change type - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "substitution",
                "deletion-insertion",
                "insertion",
                "deletion",
                "duplication",
                "inversion",
                "unchanged",
                "repetition",
                "translocation",
                "transposition",
                "methylation-gain",
                "methylation-loss",
                "methylation-unchanged"
              ],
              "title": "DNAChangeType",
              "type": "string"
            },
            "title": "Dnachangetype.Anyof",
            "type": "array"
          },
          "rnaHgvs.not.exists": {
            "description": "RNA HGVS - Filter for entries without a value",
            "title": "Rnahgvs.Not.Exists",
            "type": "boolean"
          },
          "rnaHgvs.exists": {
            "description": "RNA HGVS - Filter for entries with a value",
            "title": "Rnahgvs.Exists",
            "type": "boolean"
          },
          "rnaHgvs": {
            "description": "RNA HGVS - Filter for full text matches",
            "title": "Rnahgvs",
            "type": "string"
          },
          "rnaHgvs.not": {
            "description": "RNA HGVS - Filter for full text mismatches",
            "title": "Rnahgvs.Not",
            "type": "string"
          },
          "rnaHgvs.contains": {
            "description": "RNA HGVS - Filter for partial text matches",
            "title": "Rnahgvs.Contains",
            "type": "string"
          },
          "rnaHgvs.not.contains": {
            "description": "RNA HGVS - Filter for partial text mismatches",
            "title": "Rnahgvs.Not.Contains",
            "type": "string"
          },
          "rnaHgvs.beginsWith": {
            "description": "RNA HGVS - Filter for entries starting with the text",
            "title": "Rnahgvs.Beginswith",
            "type": "string"
          },
          "rnaHgvs.not.beginsWith": {
            "description": "RNA HGVS - Filter for entries not starting with the text",
            "title": "Rnahgvs.Not.Beginswith",
            "type": "string"
          },
          "rnaHgvs.endsWith": {
            "description": "RNA HGVS - Filter for entries ending with the text",
            "title": "Rnahgvs.Endswith",
            "type": "string"
          },
          "rnaHgvs.not.endsWith": {
            "description": "RNA HGVS - Filter for entries not ending with the text",
            "title": "Rnahgvs.Not.Endswith",
            "type": "string"
          },
          "rnaHgvs.anyOf": {
            "description": "RNA HGVS - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnahgvs.Anyof",
            "type": "array"
          },
          "rnaHgvs.not.anyOf": {
            "description": "RNA HGVS - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnahgvs.Not.Anyof",
            "type": "array"
          },
          "rnaReferenceSequence.not.exists": {
            "description": "RNA HGVS RefSeq - Filter for entries without a value",
            "title": "Rnareferencesequence.Not.Exists",
            "type": "boolean"
          },
          "rnaReferenceSequence.exists": {
            "description": "RNA HGVS RefSeq - Filter for entries with a value",
            "title": "Rnareferencesequence.Exists",
            "type": "boolean"
          },
          "rnaReferenceSequence": {
            "description": "RNA HGVS RefSeq - Filter for full text matches",
            "title": "Rnareferencesequence",
            "type": "string"
          },
          "rnaReferenceSequence.not": {
            "description": "RNA HGVS RefSeq - Filter for full text mismatches",
            "title": "Rnareferencesequence.Not",
            "type": "string"
          },
          "rnaReferenceSequence.contains": {
            "description": "RNA HGVS RefSeq - Filter for partial text matches",
            "title": "Rnareferencesequence.Contains",
            "type": "string"
          },
          "rnaReferenceSequence.not.contains": {
            "description": "RNA HGVS RefSeq - Filter for partial text mismatches",
            "title": "Rnareferencesequence.Not.Contains",
            "type": "string"
          },
          "rnaReferenceSequence.beginsWith": {
            "description": "RNA HGVS RefSeq - Filter for entries starting with the text",
            "title": "Rnareferencesequence.Beginswith",
            "type": "string"
          },
          "rnaReferenceSequence.not.beginsWith": {
            "description": "RNA HGVS RefSeq - Filter for entries not starting with the text",
            "title": "Rnareferencesequence.Not.Beginswith",
            "type": "string"
          },
          "rnaReferenceSequence.endsWith": {
            "description": "RNA HGVS RefSeq - Filter for entries ending with the text",
            "title": "Rnareferencesequence.Endswith",
            "type": "string"
          },
          "rnaReferenceSequence.not.endsWith": {
            "description": "RNA HGVS RefSeq - Filter for entries not ending with the text",
            "title": "Rnareferencesequence.Not.Endswith",
            "type": "string"
          },
          "rnaReferenceSequence.anyOf": {
            "description": "RNA HGVS RefSeq - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnareferencesequence.Anyof",
            "type": "array"
          },
          "rnaReferenceSequence.not.anyOf": {
            "description": "RNA HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnareferencesequence.Not.Anyof",
            "type": "array"
          },
          "rnaChangePosition.not.exists": {
            "description": "RNA change position - Filter for entries without a value",
            "title": "Rnachangeposition.Not.Exists",
            "type": "boolean"
          },
          "rnaChangePosition.exists": {
            "description": "RNA change position - Filter for entries with a value",
            "title": "Rnachangeposition.Exists",
            "type": "boolean"
          },
          "rnaChangePosition": {
            "description": "RNA change position - Filter for full text matches",
            "title": "Rnachangeposition",
            "type": "string"
          },
          "rnaChangePosition.not": {
            "description": "RNA change position - Filter for full text mismatches",
            "title": "Rnachangeposition.Not",
            "type": "string"
          },
          "rnaChangePosition.contains": {
            "description": "RNA change position - Filter for partial text matches",
            "title": "Rnachangeposition.Contains",
            "type": "string"
          },
          "rnaChangePosition.not.contains": {
            "description": "RNA change position - Filter for partial text mismatches",
            "title": "Rnachangeposition.Not.Contains",
            "type": "string"
          },
          "rnaChangePosition.beginsWith": {
            "description": "RNA change position - Filter for entries starting with the text",
            "title": "Rnachangeposition.Beginswith",
            "type": "string"
          },
          "rnaChangePosition.not.beginsWith": {
            "description": "RNA change position - Filter for entries not starting with the text",
            "title": "Rnachangeposition.Not.Beginswith",
            "type": "string"
          },
          "rnaChangePosition.endsWith": {
            "description": "RNA change position - Filter for entries ending with the text",
            "title": "Rnachangeposition.Endswith",
            "type": "string"
          },
          "rnaChangePosition.not.endsWith": {
            "description": "RNA change position - Filter for entries not ending with the text",
            "title": "Rnachangeposition.Not.Endswith",
            "type": "string"
          },
          "rnaChangePosition.anyOf": {
            "description": "RNA change position - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnachangeposition.Anyof",
            "type": "array"
          },
          "rnaChangePosition.not.anyOf": {
            "description": "RNA change position - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Rnachangeposition.Not.Anyof",
            "type": "array"
          },
          "rnaChangeType.not.exists": {
            "description": "RNA change type - Filter for entries without a value",
            "title": "Rnachangetype.Not.Exists",
            "type": "boolean"
          },
          "rnaChangeType.exists": {
            "description": "RNA change type - Filter for entries with a value",
            "title": "Rnachangetype.Exists",
            "type": "boolean"
          },
          "rnaChangeType": {
            "allOf": [
              {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition"
                ],
                "title": "RNAChangeType",
                "type": "string"
              }
            ],
            "description": "RNA change type - ('Filter for single value choice',)"
          },
          "rnaChangeType.not": {
            "allOf": [
              {
                "enum": [
                  "substitution",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "inversion",
                  "unchanged",
                  "repetition"
                ],
                "title": "RNAChangeType",
                "type": "string"
              }
            ],
            "description": "RNA change type - ('Filter for all but a single value choice',)"
          },
          "rnaChangeType.anyOf": {
            "description": "RNA change type - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "substitution",
                "deletion-insertion",
                "insertion",
                "deletion",
                "duplication",
                "inversion",
                "unchanged",
                "repetition"
              ],
              "title": "RNAChangeType",
              "type": "string"
            },
            "title": "Rnachangetype.Anyof",
            "type": "array"
          },
          "proteinHgvs.not.exists": {
            "description": "Protein HGVS - Filter for entries without a value",
            "title": "Proteinhgvs.Not.Exists",
            "type": "boolean"
          },
          "proteinHgvs.exists": {
            "description": "Protein HGVS - Filter for entries with a value",
            "title": "Proteinhgvs.Exists",
            "type": "boolean"
          },
          "proteinHgvs": {
            "description": "Protein HGVS - Filter for full text matches",
            "title": "Proteinhgvs",
            "type": "string"
          },
          "proteinHgvs.not": {
            "description": "Protein HGVS - Filter for full text mismatches",
            "title": "Proteinhgvs.Not",
            "type": "string"
          },
          "proteinHgvs.contains": {
            "description": "Protein HGVS - Filter for partial text matches",
            "title": "Proteinhgvs.Contains",
            "type": "string"
          },
          "proteinHgvs.not.contains": {
            "description": "Protein HGVS - Filter for partial text mismatches",
            "title": "Proteinhgvs.Not.Contains",
            "type": "string"
          },
          "proteinHgvs.beginsWith": {
            "description": "Protein HGVS - Filter for entries starting with the text",
            "title": "Proteinhgvs.Beginswith",
            "type": "string"
          },
          "proteinHgvs.not.beginsWith": {
            "description": "Protein HGVS - Filter for entries not starting with the text",
            "title": "Proteinhgvs.Not.Beginswith",
            "type": "string"
          },
          "proteinHgvs.endsWith": {
            "description": "Protein HGVS - Filter for entries ending with the text",
            "title": "Proteinhgvs.Endswith",
            "type": "string"
          },
          "proteinHgvs.not.endsWith": {
            "description": "Protein HGVS - Filter for entries not ending with the text",
            "title": "Proteinhgvs.Not.Endswith",
            "type": "string"
          },
          "proteinHgvs.anyOf": {
            "description": "Protein HGVS - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Proteinhgvs.Anyof",
            "type": "array"
          },
          "proteinHgvs.not.anyOf": {
            "description": "Protein HGVS - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Proteinhgvs.Not.Anyof",
            "type": "array"
          },
          "proteinReferenceSequence.not.exists": {
            "description": "Protein HGVS RefSeq - Filter for entries without a value",
            "title": "Proteinreferencesequence.Not.Exists",
            "type": "boolean"
          },
          "proteinReferenceSequence.exists": {
            "description": "Protein HGVS RefSeq - Filter for entries with a value",
            "title": "Proteinreferencesequence.Exists",
            "type": "boolean"
          },
          "proteinReferenceSequence": {
            "description": "Protein HGVS RefSeq - Filter for full text matches",
            "title": "Proteinreferencesequence",
            "type": "string"
          },
          "proteinReferenceSequence.not": {
            "description": "Protein HGVS RefSeq - Filter for full text mismatches",
            "title": "Proteinreferencesequence.Not",
            "type": "string"
          },
          "proteinReferenceSequence.contains": {
            "description": "Protein HGVS RefSeq - Filter for partial text matches",
            "title": "Proteinreferencesequence.Contains",
            "type": "string"
          },
          "proteinReferenceSequence.not.contains": {
            "description": "Protein HGVS RefSeq - Filter for partial text mismatches",
            "title": "Proteinreferencesequence.Not.Contains",
            "type": "string"
          },
          "proteinReferenceSequence.beginsWith": {
            "description": "Protein HGVS RefSeq - Filter for entries starting with the text",
            "title": "Proteinreferencesequence.Beginswith",
            "type": "string"
          },
          "proteinReferenceSequence.not.beginsWith": {
            "description": "Protein HGVS RefSeq - Filter for entries not starting with the text",
            "title": "Proteinreferencesequence.Not.Beginswith",
            "type": "string"
          },
          "proteinReferenceSequence.endsWith": {
            "description": "Protein HGVS RefSeq - Filter for entries ending with the text",
            "title": "Proteinreferencesequence.Endswith",
            "type": "string"
          },
          "proteinReferenceSequence.not.endsWith": {
            "description": "Protein HGVS RefSeq - Filter for entries not ending with the text",
            "title": "Proteinreferencesequence.Not.Endswith",
            "type": "string"
          },
          "proteinReferenceSequence.anyOf": {
            "description": "Protein HGVS RefSeq - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Proteinreferencesequence.Anyof",
            "type": "array"
          },
          "proteinReferenceSequence.not.anyOf": {
            "description": "Protein HGVS RefSeq - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Proteinreferencesequence.Not.Anyof",
            "type": "array"
          },
          "proteinChangeType.not.exists": {
            "description": "Protein change type - Filter for entries without a value",
            "title": "Proteinchangetype.Not.Exists",
            "type": "boolean"
          },
          "proteinChangeType.exists": {
            "description": "Protein change type - Filter for entries with a value",
            "title": "Proteinchangetype.Exists",
            "type": "boolean"
          },
          "proteinChangeType": {
            "allOf": [
              {
                "enum": [
                  "missense",
                  "nonsense",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "frameshift",
                  "extension",
                  "silent",
                  "no-protein",
                  "unknown",
                  "repetition"
                ],
                "title": "ProteinChangeType",
                "type": "string"
              }
            ],
            "description": "Protein change type - ('Filter for single value choice',)"
          },
          "proteinChangeType.not": {
            "allOf": [
              {
                "enum": [
                  "missense",
                  "nonsense",
                  "deletion-insertion",
                  "insertion",
                  "deletion",
                  "duplication",
                  "frameshift",
                  "extension",
                  "silent",
                  "no-protein",
                  "unknown",
                  "repetition"
                ],
                "title": "ProteinChangeType",
                "type": "string"
              }
            ],
            "description": "Protein change type - ('Filter for all but a single value choice',)"
          },
          "proteinChangeType.anyOf": {
            "description": "Protein change type - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "missense",
                "nonsense",
                "deletion-insertion",
                "insertion",
                "deletion",
                "duplication",
                "frameshift",
                "extension",
                "silent",
                "no-protein",
                "unknown",
                "repetition"
              ],
              "title": "ProteinChangeType",
              "type": "string"
            },
            "title": "Proteinchangetype.Anyof",
            "type": "array"
          },
          "nucleotidesLength.not.exists": {
            "description": "Variant length - Filter for entries without a value",
            "title": "Nucleotideslength.Not.Exists",
            "type": "boolean"
          },
          "nucleotidesLength.exists": {
            "description": "Variant length - Filter for entries with a value",
            "title": "Nucleotideslength.Exists",
            "type": "boolean"
          },
          "nucleotidesLength.lessThan": {
            "description": "Variant length - Filter for entries with values less than the specified value",
            "title": "Nucleotideslength.Lessthan",
            "type": "integer"
          },
          "nucleotidesLength.lessThanOrEqual": {
            "description": "Variant length - Filter for entries with values less than or equal to the specified value",
            "title": "Nucleotideslength.Lessthanorequal",
            "type": "integer"
          },
          "nucleotidesLength.greaterThan": {
            "description": "Variant length - Filter for entries with values greater than the specified value",
            "title": "Nucleotideslength.Greaterthan",
            "type": "integer"
          },
          "nucleotidesLength.greaterThanOrEqual": {
            "description": "Variant length - Filter for entries with values greater than or equal to the specified value",
            "title": "Nucleotideslength.Greaterthanorequal",
            "type": "integer"
          },
          "nucleotidesLength.equal": {
            "description": "Variant length - Filter for entries with values exactly equal to the specified value",
            "title": "Nucleotideslength.Equal",
            "type": "integer"
          },
          "nucleotidesLength.not.equal": {
            "description": "Variant length - Filter for entries with values not equal to the specified value",
            "title": "Nucleotideslength.Not.Equal",
            "type": "integer"
          },
          "nucleotidesLength.between": {
            "description": "Variant length - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Nucleotideslength.Between",
            "type": "array"
          },
          "nucleotidesLength.not.between": {
            "description": "Variant length - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Nucleotideslength.Not.Between",
            "type": "array"
          },
          "regions.not.exists": {
            "description": "Gene regions - Filter for entries without a value",
            "title": "Regions.Not.Exists",
            "type": "boolean"
          },
          "regions.exists": {
            "description": "Gene regions - Filter for entries with a value",
            "title": "Regions.Exists",
            "type": "boolean"
          },
          "regions": {
            "description": "Gene regions - Filter for full text matches",
            "title": "Regions",
            "type": "string"
          },
          "regions.not": {
            "description": "Gene regions - Filter for full text mismatches",
            "title": "Regions.Not",
            "type": "string"
          },
          "regions.contains": {
            "description": "Gene regions - Filter for partial text matches",
            "title": "Regions.Contains",
            "type": "string"
          },
          "regions.not.contains": {
            "description": "Gene regions - Filter for partial text mismatches",
            "title": "Regions.Not.Contains",
            "type": "string"
          },
          "regions.beginsWith": {
            "description": "Gene regions - Filter for entries starting with the text",
            "title": "Regions.Beginswith",
            "type": "string"
          },
          "regions.not.beginsWith": {
            "description": "Gene regions - Filter for entries not starting with the text",
            "title": "Regions.Not.Beginswith",
            "type": "string"
          },
          "regions.endsWith": {
            "description": "Gene regions - Filter for entries ending with the text",
            "title": "Regions.Endswith",
            "type": "string"
          },
          "regions.not.endsWith": {
            "description": "Gene regions - Filter for entries not ending with the text",
            "title": "Regions.Not.Endswith",
            "type": "string"
          },
          "regions.anyOf": {
            "description": "Gene regions - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Regions.Anyof",
            "type": "array"
          },
          "regions.not.anyOf": {
            "description": "Gene regions - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Regions.Not.Anyof",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "genePanel.not.exists": {
            "description": "Gene panel - Filter for entries without a value",
            "title": "Genepanel.Not.Exists",
            "type": "boolean"
          },
          "genePanel.exists": {
            "description": "Gene panel - Filter for entries with a value",
            "title": "Genepanel.Exists",
            "type": "boolean"
          },
          "genePanel": {
            "description": "Gene panel - Filter for full text matches",
            "title": "Genepanel",
            "type": "string"
          },
          "genePanel.not": {
            "description": "Gene panel - Filter for full text mismatches",
            "title": "Genepanel.Not",
            "type": "string"
          },
          "genePanel.contains": {
            "description": "Gene panel - Filter for partial text matches",
            "title": "Genepanel.Contains",
            "type": "string"
          },
          "genePanel.not.contains": {
            "description": "Gene panel - Filter for partial text mismatches",
            "title": "Genepanel.Not.Contains",
            "type": "string"
          },
          "genePanel.beginsWith": {
            "description": "Gene panel - Filter for entries starting with the text",
            "title": "Genepanel.Beginswith",
            "type": "string"
          },
          "genePanel.not.beginsWith": {
            "description": "Gene panel - Filter for entries not starting with the text",
            "title": "Genepanel.Not.Beginswith",
            "type": "string"
          },
          "genePanel.endsWith": {
            "description": "Gene panel - Filter for entries ending with the text",
            "title": "Genepanel.Endswith",
            "type": "string"
          },
          "genePanel.not.endsWith": {
            "description": "Gene panel - Filter for entries not ending with the text",
            "title": "Genepanel.Not.Endswith",
            "type": "string"
          },
          "genePanel.anyOf": {
            "description": "Gene panel - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Genepanel.Anyof",
            "type": "array"
          },
          "genePanel.not.anyOf": {
            "description": "Gene panel - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Genepanel.Not.Anyof",
            "type": "array"
          },
          "assessment.not.exists": {
            "description": "Assessment - Filter for entries without a value",
            "title": "Assessment.Not.Exists",
            "type": "boolean"
          },
          "assessment.exists": {
            "description": "Assessment - Filter for entries with a value",
            "title": "Assessment.Exists",
            "type": "boolean"
          },
          "assessment": {
            "allOf": [
              {
                "enum": [
                  "present",
                  "absent",
                  "no-call",
                  "indeterminate"
                ],
                "title": "GenomicVariantAssessmentChoices",
                "type": "string"
              }
            ],
            "description": "Assessment - ('Filter for single value choice',)"
          },
          "assessment.not": {
            "allOf": [
              {
                "enum": [
                  "present",
                  "absent",
                  "no-call",
                  "indeterminate"
                ],
                "title": "GenomicVariantAssessmentChoices",
                "type": "string"
              }
            ],
            "description": "Assessment - ('Filter for all but a single value choice',)"
          },
          "assessment.anyOf": {
            "description": "Assessment - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "present",
                "absent",
                "no-call",
                "indeterminate"
              ],
              "title": "GenomicVariantAssessmentChoices",
              "type": "string"
            },
            "title": "Assessment.Anyof",
            "type": "array"
          },
          "confidence.not.exists": {
            "description": "Confidence - Filter for entries without a value",
            "title": "Confidence.Not.Exists",
            "type": "boolean"
          },
          "confidence.exists": {
            "description": "Confidence - Filter for entries with a value",
            "title": "Confidence.Exists",
            "type": "boolean"
          },
          "confidence": {
            "allOf": [
              {
                "enum": [
                  "low",
                  "high",
                  "indeterminate"
                ],
                "title": "GenomicVariantConfidenceChoices",
                "type": "string"
              }
            ],
            "description": "Confidence - ('Filter for single value choice',)"
          },
          "confidence.not": {
            "allOf": [
              {
                "enum": [
                  "low",
                  "high",
                  "indeterminate"
                ],
                "title": "GenomicVariantConfidenceChoices",
                "type": "string"
              }
            ],
            "description": "Confidence - ('Filter for all but a single value choice',)"
          },
          "confidence.anyOf": {
            "description": "Confidence - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "low",
                "high",
                "indeterminate"
              ],
              "title": "GenomicVariantConfidenceChoices",
              "type": "string"
            },
            "title": "Confidence.Anyof",
            "type": "array"
          },
          "analysisMethod.not.exists": {
            "description": "Analysis method - Filter for entries without a value",
            "title": "Analysismethod.Not.Exists",
            "type": "boolean"
          },
          "analysisMethod.exists": {
            "description": "Analysis method - Filter for entries with a value",
            "title": "Analysismethod.Exists",
            "type": "boolean"
          },
          "analysisMethod": {
            "description": "Analysis method - Filter for a matching concept code",
            "title": "Analysismethod",
            "type": "string"
          },
          "analysisMethod.not": {
            "description": "Analysis method - Filter for a mismatching concept code",
            "title": "Analysismethod.Not",
            "type": "string"
          },
          "analysisMethod.anyOf": {
            "description": "Analysis method - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Analysismethod.Anyof",
            "type": "array"
          },
          "analysisMethod.not.anyOf": {
            "description": "Analysis method - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Analysismethod.Not.Anyof",
            "type": "array"
          },
          "analysisMethod.descendantsOf": {
            "description": "Analysis method - Filter for all child concepts of a given concepts code",
            "title": "Analysismethod.Descendantsof",
            "type": "string"
          },
          "clinicalRelevance.not.exists": {
            "description": "Clinical relevance - Filter for entries without a value",
            "title": "Clinicalrelevance.Not.Exists",
            "type": "boolean"
          },
          "clinicalRelevance.exists": {
            "description": "Clinical relevance - Filter for entries with a value",
            "title": "Clinicalrelevance.Exists",
            "type": "boolean"
          },
          "clinicalRelevance": {
            "allOf": [
              {
                "enum": [
                  "pathogenic",
                  "likely_pathogenic",
                  "uncertain_significance",
                  "ambiguous",
                  "likely_benign",
                  "benign"
                ],
                "title": "GenomicVariantClinicalRelevanceChoices",
                "type": "string"
              }
            ],
            "description": "Clinical relevance - ('Filter for single value choice',)"
          },
          "clinicalRelevance.not": {
            "allOf": [
              {
                "enum": [
                  "pathogenic",
                  "likely_pathogenic",
                  "uncertain_significance",
                  "ambiguous",
                  "likely_benign",
                  "benign"
                ],
                "title": "GenomicVariantClinicalRelevanceChoices",
                "type": "string"
              }
            ],
            "description": "Clinical relevance - ('Filter for all but a single value choice',)"
          },
          "clinicalRelevance.anyOf": {
            "description": "Clinical relevance - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "pathogenic",
                "likely_pathogenic",
                "uncertain_significance",
                "ambiguous",
                "likely_benign",
                "benign"
              ],
              "title": "GenomicVariantClinicalRelevanceChoices",
              "type": "string"
            },
            "title": "Clinicalrelevance.Anyof",
            "type": "array"
          },
          "genomeAssemblyVersion.not.exists": {
            "description": "Genome assembly version - Filter for entries without a value",
            "title": "Genomeassemblyversion.Not.Exists",
            "type": "boolean"
          },
          "genomeAssemblyVersion.exists": {
            "description": "Genome assembly version - Filter for entries with a value",
            "title": "Genomeassemblyversion.Exists",
            "type": "boolean"
          },
          "genomeAssemblyVersion": {
            "description": "Genome assembly version - Filter for a matching concept code",
            "title": "Genomeassemblyversion",
            "type": "string"
          },
          "genomeAssemblyVersion.not": {
            "description": "Genome assembly version - Filter for a mismatching concept code",
            "title": "Genomeassemblyversion.Not",
            "type": "string"
          },
          "genomeAssemblyVersion.anyOf": {
            "description": "Genome assembly version - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genomeassemblyversion.Anyof",
            "type": "array"
          },
          "genomeAssemblyVersion.not.anyOf": {
            "description": "Genome assembly version - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genomeassemblyversion.Not.Anyof",
            "type": "array"
          },
          "genomeAssemblyVersion.descendantsOf": {
            "description": "Genome assembly version - Filter for all child concepts of a given concepts code",
            "title": "Genomeassemblyversion.Descendantsof",
            "type": "string"
          },
          "molecularConsequence.not.exists": {
            "description": "Molecular consequence - Filter for entries without a value",
            "title": "Molecularconsequence.Not.Exists",
            "type": "boolean"
          },
          "molecularConsequence.exists": {
            "description": "Molecular consequence - Filter for entries with a value",
            "title": "Molecularconsequence.Exists",
            "type": "boolean"
          },
          "molecularConsequence": {
            "description": "Molecular consequence - Filter for a matching concept code",
            "title": "Molecularconsequence",
            "type": "string"
          },
          "molecularConsequence.not": {
            "description": "Molecular consequence - Filter for a mismatching concept code",
            "title": "Molecularconsequence.Not",
            "type": "string"
          },
          "molecularConsequence.anyOf": {
            "description": "Molecular consequence - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Molecularconsequence.Anyof",
            "type": "array"
          },
          "molecularConsequence.not.anyOf": {
            "description": "Molecular consequence - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Molecularconsequence.Not.Anyof",
            "type": "array"
          },
          "molecularConsequence.descendantsOf": {
            "description": "Molecular consequence - Filter for all child concepts of a given concepts code",
            "title": "Molecularconsequence.Descendantsof",
            "type": "string"
          },
          "copyNumber.not.exists": {
            "description": "Copy number - Filter for entries without a value",
            "title": "Copynumber.Not.Exists",
            "type": "boolean"
          },
          "copyNumber.exists": {
            "description": "Copy number - Filter for entries with a value",
            "title": "Copynumber.Exists",
            "type": "boolean"
          },
          "copyNumber.lessThan": {
            "description": "Copy number - Filter for entries with values less than the specified value",
            "title": "Copynumber.Lessthan",
            "type": "integer"
          },
          "copyNumber.lessThanOrEqual": {
            "description": "Copy number - Filter for entries with values less than or equal to the specified value",
            "title": "Copynumber.Lessthanorequal",
            "type": "integer"
          },
          "copyNumber.greaterThan": {
            "description": "Copy number - Filter for entries with values greater than the specified value",
            "title": "Copynumber.Greaterthan",
            "type": "integer"
          },
          "copyNumber.greaterThanOrEqual": {
            "description": "Copy number - Filter for entries with values greater than or equal to the specified value",
            "title": "Copynumber.Greaterthanorequal",
            "type": "integer"
          },
          "copyNumber.equal": {
            "description": "Copy number - Filter for entries with values exactly equal to the specified value",
            "title": "Copynumber.Equal",
            "type": "integer"
          },
          "copyNumber.not.equal": {
            "description": "Copy number - Filter for entries with values not equal to the specified value",
            "title": "Copynumber.Not.Equal",
            "type": "integer"
          },
          "copyNumber.between": {
            "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Copynumber.Between",
            "type": "array"
          },
          "copyNumber.not.between": {
            "description": "Copy number - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Copynumber.Not.Between",
            "type": "array"
          },
          "alleleFrequency.not.exists": {
            "description": "Allele frequency - Filter for entries without a value",
            "title": "Allelefrequency.Not.Exists",
            "type": "boolean"
          },
          "alleleFrequency.exists": {
            "description": "Allele frequency - Filter for entries with a value",
            "title": "Allelefrequency.Exists",
            "type": "boolean"
          },
          "alleleFrequency.lessThan": {
            "description": "Allele frequency - Filter for entries with values less than the specified value",
            "title": "Allelefrequency.Lessthan",
            "type": "number"
          },
          "alleleFrequency.lessThanOrEqual": {
            "description": "Allele frequency - Filter for entries with values less than or equal to the specified value",
            "title": "Allelefrequency.Lessthanorequal",
            "type": "number"
          },
          "alleleFrequency.greaterThan": {
            "description": "Allele frequency - Filter for entries with values greater than the specified value",
            "title": "Allelefrequency.Greaterthan",
            "type": "number"
          },
          "alleleFrequency.greaterThanOrEqual": {
            "description": "Allele frequency - Filter for entries with values greater than or equal to the specified value",
            "title": "Allelefrequency.Greaterthanorequal",
            "type": "number"
          },
          "alleleFrequency.equal": {
            "description": "Allele frequency - Filter for entries with values exactly equal to the specified value",
            "title": "Allelefrequency.Equal",
            "type": "number"
          },
          "alleleFrequency.not.equal": {
            "description": "Allele frequency - Filter for entries with values not equal to the specified value",
            "title": "Allelefrequency.Not.Equal",
            "type": "number"
          },
          "alleleFrequency.between": {
            "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Allelefrequency.Between",
            "type": "array"
          },
          "alleleFrequency.not.between": {
            "description": "Allele frequency - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Allelefrequency.Not.Between",
            "type": "array"
          },
          "alleleDepth.not.exists": {
            "description": "Allele depth (reads) - Filter for entries without a value",
            "title": "Alleledepth.Not.Exists",
            "type": "boolean"
          },
          "alleleDepth.exists": {
            "description": "Allele depth (reads) - Filter for entries with a value",
            "title": "Alleledepth.Exists",
            "type": "boolean"
          },
          "alleleDepth.lessThan": {
            "description": "Allele depth (reads) - Filter for entries with values less than the specified value",
            "title": "Alleledepth.Lessthan",
            "type": "integer"
          },
          "alleleDepth.lessThanOrEqual": {
            "description": "Allele depth (reads) - Filter for entries with values less than or equal to the specified value",
            "title": "Alleledepth.Lessthanorequal",
            "type": "integer"
          },
          "alleleDepth.greaterThan": {
            "description": "Allele depth (reads) - Filter for entries with values greater than the specified value",
            "title": "Alleledepth.Greaterthan",
            "type": "integer"
          },
          "alleleDepth.greaterThanOrEqual": {
            "description": "Allele depth (reads) - Filter for entries with values greater than or equal to the specified value",
            "title": "Alleledepth.Greaterthanorequal",
            "type": "integer"
          },
          "alleleDepth.equal": {
            "description": "Allele depth (reads) - Filter for entries with values exactly equal to the specified value",
            "title": "Alleledepth.Equal",
            "type": "integer"
          },
          "alleleDepth.not.equal": {
            "description": "Allele depth (reads) - Filter for entries with values not equal to the specified value",
            "title": "Alleledepth.Not.Equal",
            "type": "integer"
          },
          "alleleDepth.between": {
            "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Alleledepth.Between",
            "type": "array"
          },
          "alleleDepth.not.between": {
            "description": "Allele depth (reads) - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Alleledepth.Not.Between",
            "type": "array"
          },
          "zygosity.not.exists": {
            "description": "Zygosity - Filter for entries without a value",
            "title": "Zygosity.Not.Exists",
            "type": "boolean"
          },
          "zygosity.exists": {
            "description": "Zygosity - Filter for entries with a value",
            "title": "Zygosity.Exists",
            "type": "boolean"
          },
          "zygosity": {
            "description": "Zygosity - Filter for a matching concept code",
            "title": "Zygosity",
            "type": "string"
          },
          "zygosity.not": {
            "description": "Zygosity - Filter for a mismatching concept code",
            "title": "Zygosity.Not",
            "type": "string"
          },
          "zygosity.anyOf": {
            "description": "Zygosity - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Zygosity.Anyof",
            "type": "array"
          },
          "zygosity.not.anyOf": {
            "description": "Zygosity - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Zygosity.Not.Anyof",
            "type": "array"
          },
          "zygosity.descendantsOf": {
            "description": "Zygosity - Filter for all child concepts of a given concepts code",
            "title": "Zygosity.Descendantsof",
            "type": "string"
          },
          "inheritance.not.exists": {
            "description": "Inheritance - Filter for entries without a value",
            "title": "Inheritance.Not.Exists",
            "type": "boolean"
          },
          "inheritance.exists": {
            "description": "Inheritance - Filter for entries with a value",
            "title": "Inheritance.Exists",
            "type": "boolean"
          },
          "inheritance": {
            "description": "Inheritance - Filter for a matching concept code",
            "title": "Inheritance",
            "type": "string"
          },
          "inheritance.not": {
            "description": "Inheritance - Filter for a mismatching concept code",
            "title": "Inheritance.Not",
            "type": "string"
          },
          "inheritance.anyOf": {
            "description": "Inheritance - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Inheritance.Anyof",
            "type": "array"
          },
          "inheritance.not.anyOf": {
            "description": "Inheritance - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Inheritance.Not.Anyof",
            "type": "array"
          },
          "inheritance.descendantsOf": {
            "description": "Inheritance - Filter for all child concepts of a given concepts code",
            "title": "Inheritance.Descendantsof",
            "type": "string"
          },
          "coordinateSystem.not.exists": {
            "description": "Coordinate system - Filter for entries without a value",
            "title": "Coordinatesystem.Not.Exists",
            "type": "boolean"
          },
          "coordinateSystem.exists": {
            "description": "Coordinate system - Filter for entries with a value",
            "title": "Coordinatesystem.Exists",
            "type": "boolean"
          },
          "coordinateSystem": {
            "description": "Coordinate system - Filter for a matching concept code",
            "title": "Coordinatesystem",
            "type": "string"
          },
          "coordinateSystem.not": {
            "description": "Coordinate system - Filter for a mismatching concept code",
            "title": "Coordinatesystem.Not",
            "type": "string"
          },
          "coordinateSystem.anyOf": {
            "description": "Coordinate system - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Coordinatesystem.Anyof",
            "type": "array"
          },
          "coordinateSystem.not.anyOf": {
            "description": "Coordinate system - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Coordinatesystem.Not.Anyof",
            "type": "array"
          },
          "coordinateSystem.descendantsOf": {
            "description": "Coordinate system - Filter for all child concepts of a given concepts code",
            "title": "Coordinatesystem.Descendantsof",
            "type": "string"
          },
          "clinvar.not.exists": {
            "description": "ClinVar accession number - Filter for entries without a value",
            "title": "Clinvar.Not.Exists",
            "type": "boolean"
          },
          "clinvar.exists": {
            "description": "ClinVar accession number - Filter for entries with a value",
            "title": "Clinvar.Exists",
            "type": "boolean"
          },
          "clinvar": {
            "description": "ClinVar accession number - Filter for full text matches",
            "title": "Clinvar",
            "type": "string"
          },
          "clinvar.not": {
            "description": "ClinVar accession number - Filter for full text mismatches",
            "title": "Clinvar.Not",
            "type": "string"
          },
          "clinvar.contains": {
            "description": "ClinVar accession number - Filter for partial text matches",
            "title": "Clinvar.Contains",
            "type": "string"
          },
          "clinvar.not.contains": {
            "description": "ClinVar accession number - Filter for partial text mismatches",
            "title": "Clinvar.Not.Contains",
            "type": "string"
          },
          "clinvar.beginsWith": {
            "description": "ClinVar accession number - Filter for entries starting with the text",
            "title": "Clinvar.Beginswith",
            "type": "string"
          },
          "clinvar.not.beginsWith": {
            "description": "ClinVar accession number - Filter for entries not starting with the text",
            "title": "Clinvar.Not.Beginswith",
            "type": "string"
          },
          "clinvar.endsWith": {
            "description": "ClinVar accession number - Filter for entries ending with the text",
            "title": "Clinvar.Endswith",
            "type": "string"
          },
          "clinvar.not.endsWith": {
            "description": "ClinVar accession number - Filter for entries not ending with the text",
            "title": "Clinvar.Not.Endswith",
            "type": "string"
          },
          "clinvar.anyOf": {
            "description": "ClinVar accession number - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinvar.Anyof",
            "type": "array"
          },
          "clinvar.not.anyOf": {
            "description": "ClinVar accession number - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Clinvar.Not.Anyof",
            "type": "array"
          },
          "genes": {
            "description": "Gene(s) - Filter for a matching concept code",
            "title": "Genes",
            "type": "string"
          },
          "genes.not": {
            "description": "Gene(s) - Filter for a mismatching concept code",
            "title": "Genes.Not",
            "type": "string"
          },
          "genes.anyOf": {
            "description": "Gene(s) - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genes.Anyof",
            "type": "array"
          },
          "genes.not.anyOf": {
            "description": "Gene(s) - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Genes.Not.Anyof",
            "type": "array"
          },
          "genes.descendantsOf": {
            "description": "Gene(s) - Filter for all child concepts of a given concepts code",
            "title": "Genes.Descendantsof",
            "type": "string"
          },
          "genes.allOf": {
            "description": "Gene(s) - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Genes.Allof",
            "type": "array"
          },
          "genes.not.allOf": {
            "description": "Gene(s) - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Genes.Not.Allof",
            "type": "array"
          }
        },
        "title": "GenomicVariantFilters",
        "type": "object"
      },
      "Paginated_GenomicVariant_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/GenomicVariant"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[GenomicVariant]",
        "type": "object"
      },
      "GenomicVariantCreate": {
        "properties": {
          "dnaHgvs": {
            "anyOf": [
              {
                "pattern": "(?:(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g)|(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+))?\\(?((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3}))\\)?:)?c))\\.((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+\u003E(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]\\sand\\s(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|gom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|lom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|met=)",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "DNA HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "DNA HGVS"
          },
          "rnaHgvs": {
            "anyOf": [
              {
                "pattern": "(?:((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3})):)?r\\.\\(?((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+\u003E(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\])\\)?",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RNA HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "RNA HGVS"
          },
          "proteinHgvs": {
            "anyOf": [
              {
                "pattern": "(?:((?:(?:AP_|NP_|YP_|XP_|WP_)\\d+(?:\\.\\d{1,3})?)|(?:ENSP\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+p\\d{1,3})):)?p\\.\\(?(0\\??|\\?|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))delins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))del|(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))ins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))dup|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:Ter|\\*)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)?fs(?:Ter)?(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+)))*|(?:(?:Met1ext-\\d+)|(?:Ter\\d+(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)extTer\\d+))|\\(?(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))\\)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))=)\\)?",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Protein HGVS expression (g-coordinate expression, HGVS version \u003E=21.1)",
            "title": "Protein HGVS"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who' genomic variant is described",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the genomic variant was detected and/or reported.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "genePanel": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Commercial or official name of the gene panel tested to identify the variant",
            "title": "Gene panel",
            "x-expanded": false
          },
          "assessment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantAssessmentChoices",
                "maxLength": 15
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.",
            "title": "Assessment",
            "x-expanded": false
          },
          "confidence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantConfidenceChoices",
                "maxLength": 15
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.",
            "title": "Confidence",
            "x-expanded": false
          },
          "analysisMethod": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Analysis method used to detect the variant",
            "title": "Analysis method",
            "x-expanded": false,
            "x-terminology": "StructuralVariantAnalysisMethod"
          },
          "clinicalRelevance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenomicVariantClinicalRelevanceChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Classification of the clinical relevance or pathogenicity of the variant.",
            "title": "Clinical relevance",
            "x-expanded": false
          },
          "genomeAssemblyVersion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reference genome assembly versionused in this analysis.",
            "title": "Genome assembly version",
            "x-expanded": false,
            "x-terminology": "ReferenceGenomeBuild"
          },
          "molecularConsequence": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.",
            "title": "Molecular consequence",
            "x-expanded": false,
            "x-terminology": "MolecularConsequence"
          },
          "copyNumber": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.",
            "title": "Copy number",
            "x-expanded": false
          },
          "alleleFrequency": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.",
            "title": "Allele frequency",
            "x-expanded": false
          },
          "alleleDepth": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.",
            "title": "Allele depth (reads)",
            "x-expanded": false
          },
          "zygosity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "The observed level of occurrence of the variant in the set of chromosomes.",
            "title": "Zygosity",
            "x-expanded": false,
            "x-terminology": "Zygosity"
          },
          "inheritance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Variant inheritance origin (if known).",
            "title": "Inheritance",
            "x-expanded": false,
            "x-terminology": "VariantInheritance"
          },
          "coordinateSystem": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.",
            "title": "Coordinate system",
            "x-expanded": false,
            "x-terminology": "GenomicCoordinateSystem"
          },
          "clinvar": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Accession number in the ClinVar variant database, given for cross-reference.",
            "title": "ClinVar accession number",
            "x-expanded": false
          },
          "genes": {
            "default": [],
            "description": "Gene(s) affected by this variant",
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Gene(s)",
            "type": "array",
            "x-expanded": false,
            "x-terminology": "Gene"
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "GenomicVariantCreate",
        "type": "object"
      },
      "GenomicSignatureFilters": {
        "properties": {
          "category": {
            "allOf": [
              {
                "enum": [
                  "tumor_mutational_burden",
                  "loss_of_heterozygosity",
                  "microsatellite_instability",
                  "homologous_recombination_deficiency",
                  "tumor_neoantigen_burden",
                  "aneuploid_score"
                ],
                "title": "GenomicSignatureTypes",
                "type": "string"
              }
            ],
            "description": "None - ('Filter for single value choice',)"
          },
          "category.not": {
            "allOf": [
              {
                "enum": [
                  "tumor_mutational_burden",
                  "loss_of_heterozygosity",
                  "microsatellite_instability",
                  "homologous_recombination_deficiency",
                  "tumor_neoantigen_burden",
                  "aneuploid_score"
                ],
                "title": "GenomicSignatureTypes",
                "type": "string"
              }
            ],
            "description": "None - ('Filter for all but a single value choice',)"
          },
          "category.anyOf": {
            "description": "None - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "tumor_mutational_burden",
                "loss_of_heterozygosity",
                "microsatellite_instability",
                "homologous_recombination_deficiency",
                "tumor_neoantigen_burden",
                "aneuploid_score"
              ],
              "title": "GenomicSignatureTypes",
              "type": "string"
            },
            "title": "Category.Anyof",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          }
        },
        "title": "GenomicSignatureFilters",
        "type": "object"
      },
      "GenomicSignatureTypes": {
        "enum": [
          "tumor_mutational_burden",
          "loss_of_heterozygosity",
          "microsatellite_instability",
          "homologous_recombination_deficiency",
          "tumor_neoantigen_burden",
          "aneuploid_score"
        ],
        "title": "GenomicSignatureTypes",
        "type": "string"
      },
      "AnyGenomicSignature": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/MicrosatelliteInstability"
          },
          {
            "$ref": "#/components/schemas/TumorMutationalBurden"
          },
          {
            "$ref": "#/components/schemas/LossOfHeterozygosity"
          },
          {
            "$ref": "#/components/schemas/HomologousRecombinationDeficiency"
          },
          {
            "$ref": "#/components/schemas/TumorNeoantigenBurden"
          },
          {
            "$ref": "#/components/schemas/AneuploidScore"
          }
        ]
      },
      "Paginated_AnyGenomicSignature_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AnyGenomicSignature"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[AnyGenomicSignature]",
        "type": "object"
      },
      "AneuploidScoreCreate": {
        "properties": {
          "category": {
            "const": "aneuploid_score",
            "default": "aneuploid_score",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual aneuploid score (AS) value in total altered arms",
            "title": "Value",
            "type": "integer",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "value"
        ],
        "title": "AneuploidScoreCreate",
        "type": "object"
      },
      "HomologousRecombinationDeficiencyCreate": {
        "properties": {
          "category": {
            "const": "homologous_recombination_deficiency",
            "default": "homologous_recombination_deficiency",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Homologous recombination deficiency (HRD) score value",
            "title": "Value",
            "x-expanded": false
          },
          "interpretation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HomologousRecombinationDeficiencyInterpretationChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Homologous recombination deficiency (HRD) interpretation",
            "title": "Interpretation",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "HomologousRecombinationDeficiencyCreate",
        "type": "object"
      },
      "LossOfHeterozygosityCreate": {
        "properties": {
          "category": {
            "const": "loss_of_heterozygosity",
            "default": "loss_of_heterozygosity",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "Loss of heterozygosity (LOH) as a percentage",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "value"
        ],
        "title": "LossOfHeterozygosityCreate",
        "type": "object"
      },
      "MicrosatelliteInstabilityCreate": {
        "properties": {
          "category": {
            "const": "microsatellite_instability",
            "default": "microsatellite_instability",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Microsatellite instability (MSI) classification",
            "title": "Value",
            "x-expanded": false,
            "x-terminology": "MicrosatelliteInstabilityState"
          }
        },
        "required": [
          "caseId",
          "date",
          "value"
        ],
        "title": "MicrosatelliteInstabilityCreate",
        "type": "object"
      },
      "TumorMutationalBurdenCreate": {
        "properties": {
          "category": {
            "const": "tumor_mutational_burden",
            "default": "tumor_mutational_burden",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual tumor mutational burden (TMB) value in mutations/Mb",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TumorMutationalBurdenStatusChoices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Cclassification of the tumor mutational burden (TMB) status",
            "title": "Status",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "value"
        ],
        "title": "TumorMutationalBurdenCreate",
        "type": "object"
      },
      "TumorNeoantigenBurdenCreate": {
        "properties": {
          "category": {
            "const": "tumor_neoantigen_burden",
            "default": "tumor_neoantigen_burden",
            "title": "Category",
            "type": "string"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's genomic signature was assessed.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "value": {
            "description": "The actual tumor neoantigen burden (TNB) value in neoantigens/Mb",
            "title": "Value",
            "type": "number",
            "x-expanded": false
          }
        },
        "required": [
          "caseId",
          "date",
          "value"
        ],
        "title": "TumorNeoantigenBurdenCreate",
        "type": "object"
      },
      "LifestyleFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "smokingStatus.not.exists": {
            "description": "Alcohol consumption - Filter for entries without a value",
            "title": "Smokingstatus.Not.Exists",
            "type": "boolean"
          },
          "smokingStatus.exists": {
            "description": "Alcohol consumption - Filter for entries with a value",
            "title": "Smokingstatus.Exists",
            "type": "boolean"
          },
          "smokingStatus": {
            "description": "Alcohol consumption - Filter for a matching concept code",
            "title": "Smokingstatus",
            "type": "string"
          },
          "smokingStatus.not": {
            "description": "Alcohol consumption - Filter for a mismatching concept code",
            "title": "Smokingstatus.Not",
            "type": "string"
          },
          "smokingStatus.anyOf": {
            "description": "Alcohol consumption - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Smokingstatus.Anyof",
            "type": "array"
          },
          "smokingStatus.not.anyOf": {
            "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Smokingstatus.Not.Anyof",
            "type": "array"
          },
          "smokingStatus.descendantsOf": {
            "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
            "title": "Smokingstatus.Descendantsof",
            "type": "string"
          },
          "smokingPackyears.not.exists": {
            "description": "Smoking packyears - Filter for entries without a value",
            "title": "Smokingpackyears.Not.Exists",
            "type": "boolean"
          },
          "smokingPackyears.exists": {
            "description": "Smoking packyears - Filter for entries with a value",
            "title": "Smokingpackyears.Exists",
            "type": "boolean"
          },
          "smokingPackyears.lessThan": {
            "description": "Smoking packyears - Filter for entries with values less than the specified value",
            "title": "Smokingpackyears.Lessthan",
            "type": "number"
          },
          "smokingPackyears.lessThanOrEqual": {
            "description": "Smoking packyears - Filter for entries with values less than or equal to the specified value",
            "title": "Smokingpackyears.Lessthanorequal",
            "type": "number"
          },
          "smokingPackyears.greaterThan": {
            "description": "Smoking packyears - Filter for entries with values greater than the specified value",
            "title": "Smokingpackyears.Greaterthan",
            "type": "number"
          },
          "smokingPackyears.greaterThanOrEqual": {
            "description": "Smoking packyears - Filter for entries with values greater than or equal to the specified value",
            "title": "Smokingpackyears.Greaterthanorequal",
            "type": "number"
          },
          "smokingPackyears.equal": {
            "description": "Smoking packyears - Filter for entries with values exactly equal to the specified value",
            "title": "Smokingpackyears.Equal",
            "type": "number"
          },
          "smokingPackyears.not.equal": {
            "description": "Smoking packyears - Filter for entries with values not equal to the specified value",
            "title": "Smokingpackyears.Not.Equal",
            "type": "number"
          },
          "smokingPackyears.between": {
            "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Smokingpackyears.Between",
            "type": "array"
          },
          "smokingPackyears.not.between": {
            "description": "Smoking packyears - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Smokingpackyears.Not.Between",
            "type": "array"
          },
          "smokingQuited.not.exists": {
            "description": "Time since quitted smoking - Filter for entries without a value",
            "title": "Smokingquited.Not.Exists",
            "type": "boolean"
          },
          "smokingQuited.exists": {
            "description": "Time since quitted smoking - Filter for entries with a value",
            "title": "Smokingquited.Exists",
            "type": "boolean"
          },
          "smokingQuited.lessThan": {
            "description": "Time since quitted smoking - Filter for entries with values less than the specified value",
            "title": "Smokingquited.Lessthan",
            "type": "number"
          },
          "smokingQuited.lessThanOrEqual": {
            "description": "Time since quitted smoking - Filter for entries with values less than or equal to the specified value",
            "title": "Smokingquited.Lessthanorequal",
            "type": "number"
          },
          "smokingQuited.greaterThan": {
            "description": "Time since quitted smoking - Filter for entries with values greater than the specified value",
            "title": "Smokingquited.Greaterthan",
            "type": "number"
          },
          "smokingQuited.greaterThanOrEqual": {
            "description": "Time since quitted smoking - Filter for entries with values greater than or equal to the specified value",
            "title": "Smokingquited.Greaterthanorequal",
            "type": "number"
          },
          "smokingQuited.equal": {
            "description": "Time since quitted smoking - Filter for entries with values exactly equal to the specified value",
            "title": "Smokingquited.Equal",
            "type": "number"
          },
          "smokingQuited.not.equal": {
            "description": "Time since quitted smoking - Filter for entries with values not equal to the specified value",
            "title": "Smokingquited.Not.Equal",
            "type": "number"
          },
          "smokingQuited.between": {
            "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Smokingquited.Between",
            "type": "array"
          },
          "smokingQuited.not.between": {
            "description": "Time since quitted smoking - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Smokingquited.Not.Between",
            "type": "array"
          },
          "alcoholConsumption.not.exists": {
            "description": "Alcohol consumption - Filter for entries without a value",
            "title": "Alcoholconsumption.Not.Exists",
            "type": "boolean"
          },
          "alcoholConsumption.exists": {
            "description": "Alcohol consumption - Filter for entries with a value",
            "title": "Alcoholconsumption.Exists",
            "type": "boolean"
          },
          "alcoholConsumption": {
            "description": "Alcohol consumption - Filter for a matching concept code",
            "title": "Alcoholconsumption",
            "type": "string"
          },
          "alcoholConsumption.not": {
            "description": "Alcohol consumption - Filter for a mismatching concept code",
            "title": "Alcoholconsumption.Not",
            "type": "string"
          },
          "alcoholConsumption.anyOf": {
            "description": "Alcohol consumption - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Alcoholconsumption.Anyof",
            "type": "array"
          },
          "alcoholConsumption.not.anyOf": {
            "description": "Alcohol consumption - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Alcoholconsumption.Not.Anyof",
            "type": "array"
          },
          "alcoholConsumption.descendantsOf": {
            "description": "Alcohol consumption - Filter for all child concepts of a given concepts code",
            "title": "Alcoholconsumption.Descendantsof",
            "type": "string"
          },
          "nightSleep.not.exists": {
            "description": "Night sleep - Filter for entries without a value",
            "title": "Nightsleep.Not.Exists",
            "type": "boolean"
          },
          "nightSleep.exists": {
            "description": "Night sleep - Filter for entries with a value",
            "title": "Nightsleep.Exists",
            "type": "boolean"
          },
          "nightSleep.lessThan": {
            "description": "Night sleep - Filter for entries with values less than the specified value",
            "title": "Nightsleep.Lessthan",
            "type": "number"
          },
          "nightSleep.lessThanOrEqual": {
            "description": "Night sleep - Filter for entries with values less than or equal to the specified value",
            "title": "Nightsleep.Lessthanorequal",
            "type": "number"
          },
          "nightSleep.greaterThan": {
            "description": "Night sleep - Filter for entries with values greater than the specified value",
            "title": "Nightsleep.Greaterthan",
            "type": "number"
          },
          "nightSleep.greaterThanOrEqual": {
            "description": "Night sleep - Filter for entries with values greater than or equal to the specified value",
            "title": "Nightsleep.Greaterthanorequal",
            "type": "number"
          },
          "nightSleep.equal": {
            "description": "Night sleep - Filter for entries with values exactly equal to the specified value",
            "title": "Nightsleep.Equal",
            "type": "number"
          },
          "nightSleep.not.equal": {
            "description": "Night sleep - Filter for entries with values not equal to the specified value",
            "title": "Nightsleep.Not.Equal",
            "type": "number"
          },
          "nightSleep.between": {
            "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Nightsleep.Between",
            "type": "array"
          },
          "nightSleep.not.between": {
            "description": "Night sleep - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Nightsleep.Not.Between",
            "type": "array"
          },
          "recreationalDrugs.not.exists": {
            "description": "Recreational drugs - Filter for entries without a value",
            "title": "Recreationaldrugs.Not.Exists",
            "type": "boolean"
          },
          "recreationalDrugs.exists": {
            "description": "Recreational drugs - Filter for entries with a value",
            "title": "Recreationaldrugs.Exists",
            "type": "boolean"
          },
          "recreationalDrugs": {
            "description": "Recreational drugs - Filter for a matching concept code",
            "title": "Recreationaldrugs",
            "type": "string"
          },
          "recreationalDrugs.not": {
            "description": "Recreational drugs - Filter for a mismatching concept code",
            "title": "Recreationaldrugs.Not",
            "type": "string"
          },
          "recreationalDrugs.anyOf": {
            "description": "Recreational drugs - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recreationaldrugs.Anyof",
            "type": "array"
          },
          "recreationalDrugs.not.anyOf": {
            "description": "Recreational drugs - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Recreationaldrugs.Not.Anyof",
            "type": "array"
          },
          "recreationalDrugs.descendantsOf": {
            "description": "Recreational drugs - Filter for all child concepts of a given concepts code",
            "title": "Recreationaldrugs.Descendantsof",
            "type": "string"
          },
          "recreationalDrugs.allOf": {
            "description": "Recreational drugs - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Recreationaldrugs.Allof",
            "type": "array"
          },
          "recreationalDrugs.not.allOf": {
            "description": "Recreational drugs - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Recreationaldrugs.Not.Allof",
            "type": "array"
          },
          "exposures.not.exists": {
            "description": "Exposures - Filter for entries without a value",
            "title": "Exposures.Not.Exists",
            "type": "boolean"
          },
          "exposures.exists": {
            "description": "Exposures - Filter for entries with a value",
            "title": "Exposures.Exists",
            "type": "boolean"
          },
          "exposures": {
            "description": "Exposures - Filter for a matching concept code",
            "title": "Exposures",
            "type": "string"
          },
          "exposures.not": {
            "description": "Exposures - Filter for a mismatching concept code",
            "title": "Exposures.Not",
            "type": "string"
          },
          "exposures.anyOf": {
            "description": "Exposures - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Exposures.Anyof",
            "type": "array"
          },
          "exposures.not.anyOf": {
            "description": "Exposures - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Exposures.Not.Anyof",
            "type": "array"
          },
          "exposures.descendantsOf": {
            "description": "Exposures - Filter for all child concepts of a given concepts code",
            "title": "Exposures.Descendantsof",
            "type": "string"
          },
          "exposures.allOf": {
            "description": "Exposures - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Exposures.Allof",
            "type": "array"
          },
          "exposures.not.allOf": {
            "description": "Exposures - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Exposures.Not.Allof",
            "type": "array"
          }
        },
        "title": "LifestyleFilters",
        "type": "object"
      },
      "Paginated_Lifestyle_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Lifestyle"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Lifestyle]",
        "type": "object"
      },
      "LifestyleCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's lifestyle is assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's lifetyle was assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "smokingStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Frequency of alcohol consumption",
            "title": "Alcohol consumption",
            "x-expanded": false,
            "x-terminology": "SmokingStatus"
          },
          "smokingPackyears": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Smoking pack-years (if applicable)",
            "title": "Smoking packyears",
            "x-expanded": false
          },
          "smokingQuited": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated time since quitting smoking (if applicable)",
            "title": "Time since quitted smoking",
            "x-default-unit": "year",
            "x-expanded": false,
            "x-measure": "Time"
          },
          "alcoholConsumption": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Frequency of alcohol consumption",
            "title": "Alcohol consumption",
            "x-expanded": false,
            "x-terminology": "AlcoholConsumptionFrequency"
          },
          "nightSleep": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated average sleep time per night",
            "title": "Night sleep",
            "x-default-unit": "hour",
            "x-expanded": false,
            "x-measure": "Time"
          },
          "recreationalDrugs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Any recreational drug(s) used by the patient",
            "title": "Recreational drugs",
            "x-expanded": false,
            "x-terminology": "RecreationalDrug"
          },
          "exposures": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Environmental or occupational exposures to hazards or carcinogenic agents",
            "title": "Exposures",
            "x-expanded": false,
            "x-terminology": "ExposureAgent"
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "LifestyleCreate",
        "type": "object"
      },
      "FamilyHistoryFilters": {
        "properties": {
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "relationship": {
            "description": "Relationship - Filter for a matching concept code",
            "title": "Relationship",
            "type": "string"
          },
          "relationship.not": {
            "description": "Relationship - Filter for a mismatching concept code",
            "title": "Relationship.Not",
            "type": "string"
          },
          "relationship.anyOf": {
            "description": "Relationship - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Relationship.Anyof",
            "type": "array"
          },
          "relationship.not.anyOf": {
            "description": "Relationship - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Relationship.Not.Anyof",
            "type": "array"
          },
          "relationship.descendantsOf": {
            "description": "Relationship - Filter for all child concepts of a given concepts code",
            "title": "Relationship.Descendantsof",
            "type": "string"
          },
          "hadCancer": {
            "description": "Had cancer - ('Filter for yes/no statement',)",
            "title": "Hadcancer",
            "type": "boolean"
          },
          "contributedToDeath.not.exists": {
            "description": "Contributed to death - Filter for entries without a value",
            "title": "Contributedtodeath.Not.Exists",
            "type": "boolean"
          },
          "contributedToDeath.exists": {
            "description": "Contributed to death - Filter for entries with a value",
            "title": "Contributedtodeath.Exists",
            "type": "boolean"
          },
          "contributedToDeath": {
            "description": "Contributed to death - ('Filter for yes/no statement',)",
            "title": "Contributedtodeath",
            "type": "boolean"
          },
          "onsetAge.not.exists": {
            "description": "Onset age - Filter for entries without a value",
            "title": "Onsetage.Not.Exists",
            "type": "boolean"
          },
          "onsetAge.exists": {
            "description": "Onset age - Filter for entries with a value",
            "title": "Onsetage.Exists",
            "type": "boolean"
          },
          "onsetAge.lessThan": {
            "description": "Onset age - Filter for entries with values less than the specified value",
            "title": "Onsetage.Lessthan",
            "type": "integer"
          },
          "onsetAge.lessThanOrEqual": {
            "description": "Onset age - Filter for entries with values less than or equal to the specified value",
            "title": "Onsetage.Lessthanorequal",
            "type": "integer"
          },
          "onsetAge.greaterThan": {
            "description": "Onset age - Filter for entries with values greater than the specified value",
            "title": "Onsetage.Greaterthan",
            "type": "integer"
          },
          "onsetAge.greaterThanOrEqual": {
            "description": "Onset age - Filter for entries with values greater than or equal to the specified value",
            "title": "Onsetage.Greaterthanorequal",
            "type": "integer"
          },
          "onsetAge.equal": {
            "description": "Onset age - Filter for entries with values exactly equal to the specified value",
            "title": "Onsetage.Equal",
            "type": "integer"
          },
          "onsetAge.not.equal": {
            "description": "Onset age - Filter for entries with values not equal to the specified value",
            "title": "Onsetage.Not.Equal",
            "type": "integer"
          },
          "onsetAge.between": {
            "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Onsetage.Between",
            "type": "array"
          },
          "onsetAge.not.between": {
            "description": "Onset age - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Onsetage.Not.Between",
            "type": "array"
          },
          "topography.not.exists": {
            "description": "Topography - Filter for entries without a value",
            "title": "Topography.Not.Exists",
            "type": "boolean"
          },
          "topography.exists": {
            "description": "Topography - Filter for entries with a value",
            "title": "Topography.Exists",
            "type": "boolean"
          },
          "topography": {
            "description": "Topography - Filter for a matching concept code",
            "title": "Topography",
            "type": "string"
          },
          "topography.not": {
            "description": "Topography - Filter for a mismatching concept code",
            "title": "Topography.Not",
            "type": "string"
          },
          "topography.anyOf": {
            "description": "Topography - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topography.Anyof",
            "type": "array"
          },
          "topography.not.anyOf": {
            "description": "Topography - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Topography.Not.Anyof",
            "type": "array"
          },
          "topography.descendantsOf": {
            "description": "Topography - Filter for all child concepts of a given concepts code",
            "title": "Topography.Descendantsof",
            "type": "string"
          },
          "morphology.not.exists": {
            "description": "Morphology - Filter for entries without a value",
            "title": "Morphology.Not.Exists",
            "type": "boolean"
          },
          "morphology.exists": {
            "description": "Morphology - Filter for entries with a value",
            "title": "Morphology.Exists",
            "type": "boolean"
          },
          "morphology": {
            "description": "Morphology - Filter for a matching concept code",
            "title": "Morphology",
            "type": "string"
          },
          "morphology.not": {
            "description": "Morphology - Filter for a mismatching concept code",
            "title": "Morphology.Not",
            "type": "string"
          },
          "morphology.anyOf": {
            "description": "Morphology - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Morphology.Anyof",
            "type": "array"
          },
          "morphology.not.anyOf": {
            "description": "Morphology - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Morphology.Not.Anyof",
            "type": "array"
          },
          "morphology.descendantsOf": {
            "description": "Morphology - Filter for all child concepts of a given concepts code",
            "title": "Morphology.Descendantsof",
            "type": "string"
          }
        },
        "title": "FamilyHistoryFilters",
        "type": "object"
      },
      "Paginated_FamilyHistory_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/FamilyHistory"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[FamilyHistory]",
        "type": "object"
      },
      "FamilyHistoryCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's family's history is being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's family history was assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "relationship": {
            "$ref": "#/components/schemas/CodedConcept",
            "description": "Relationship to the patient",
            "title": "Relationship",
            "x-expanded": false,
            "x-terminology": "FamilyMemberType"
          },
          "hadCancer": {
            "description": "Whether the family member has a history of cancer",
            "title": "Had cancer",
            "type": "boolean",
            "x-expanded": false
          },
          "contributedToDeath": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether the cancer contributed to the cause of death of the family member",
            "title": "Contributed to death",
            "x-expanded": false
          },
          "onsetAge": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Age at which the family member's cancer manifested",
            "title": "Onset age",
            "x-expanded": false
          },
          "topography": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Estimated or actual topography of the family member's cancer",
            "title": "Topography",
            "x-expanded": false,
            "x-terminology": "CancerTopography"
          },
          "morphology": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Morphology of the family member's cancer (if known)",
            "title": "Morphology",
            "x-expanded": false,
            "x-terminology": "CancerMorphology"
          }
        },
        "required": [
          "caseId",
          "date",
          "relationship",
          "hadCancer"
        ],
        "title": "FamilyHistoryCreate",
        "type": "object"
      },
      "ComorbiditiesAssessmentFilters": {
        "properties": {
          "score.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Score.Not.Exists",
            "type": "boolean"
          },
          "score.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Score.Exists",
            "type": "boolean"
          },
          "score.lessThan": {
            "description": "None - Filter for entries with values less than the specified value",
            "title": "Score.Lessthan",
            "type": "integer"
          },
          "score.lessThanOrEqual": {
            "description": "None - Filter for entries with values less than or equal to the specified value",
            "title": "Score.Lessthanorequal",
            "type": "integer"
          },
          "score.greaterThan": {
            "description": "None - Filter for entries with values greater than the specified value",
            "title": "Score.Greaterthan",
            "type": "integer"
          },
          "score.greaterThanOrEqual": {
            "description": "None - Filter for entries with values greater than or equal to the specified value",
            "title": "Score.Greaterthanorequal",
            "type": "integer"
          },
          "score.equal": {
            "description": "None - Filter for entries with values exactly equal to the specified value",
            "title": "Score.Equal",
            "type": "integer"
          },
          "score.not.equal": {
            "description": "None - Filter for entries with values not equal to the specified value",
            "title": "Score.Not.Equal",
            "type": "integer"
          },
          "score.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Score.Between",
            "type": "array"
          },
          "score.not.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Score.Not.Between",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "indexConditionId": {
            "description": "Index neoplastic entity - Filter for reference matches",
            "title": "Indexconditionid",
            "type": "string"
          },
          "indexConditionId.not": {
            "description": "Index neoplastic entity - Filter for reference mismatches",
            "title": "Indexconditionid.Not",
            "type": "string"
          },
          "indexConditionId.contains": {
            "description": "Index neoplastic entity - Filter for partial text matches",
            "title": "Indexconditionid.Contains",
            "type": "string"
          },
          "indexConditionId.not.contains": {
            "description": "Index neoplastic entity - Filter for partial text mismatches",
            "title": "Indexconditionid.Not.Contains",
            "type": "string"
          },
          "indexConditionId.beginsWith": {
            "description": "Index neoplastic entity - Filter for entries starting with the text",
            "title": "Indexconditionid.Beginswith",
            "type": "string"
          },
          "indexConditionId.not.beginsWith": {
            "description": "Index neoplastic entity - Filter for entries not starting with the text",
            "title": "Indexconditionid.Not.Beginswith",
            "type": "string"
          },
          "indexConditionId.endsWith": {
            "description": "Index neoplastic entity - Filter for entries ending with the text",
            "title": "Indexconditionid.Endswith",
            "type": "string"
          },
          "indexConditionId.not.endsWith": {
            "description": "Index neoplastic entity - Filter for entries not ending with the text",
            "title": "Indexconditionid.Not.Endswith",
            "type": "string"
          },
          "indexConditionId.anyOf": {
            "description": "Index neoplastic entity - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Indexconditionid.Anyof",
            "type": "array"
          },
          "indexConditionId.not.anyOf": {
            "description": "Index neoplastic entity - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Indexconditionid.Not.Anyof",
            "type": "array"
          },
          "panel.not.exists": {
            "description": "Panel - Filter for entries without a value",
            "title": "Panel.Not.Exists",
            "type": "boolean"
          },
          "panel.exists": {
            "description": "Panel - Filter for entries with a value",
            "title": "Panel.Exists",
            "type": "boolean"
          },
          "panel": {
            "allOf": [
              {
                "enum": [
                  "Charlson",
                  "Elixhauser",
                  "NCI"
                ],
                "title": "ComorbiditiesAssessmentPanelChoices",
                "type": "string"
              }
            ],
            "description": "Panel - ('Filter for single value choice',)"
          },
          "panel.not": {
            "allOf": [
              {
                "enum": [
                  "Charlson",
                  "Elixhauser",
                  "NCI"
                ],
                "title": "ComorbiditiesAssessmentPanelChoices",
                "type": "string"
              }
            ],
            "description": "Panel - ('Filter for all but a single value choice',)"
          },
          "panel.anyOf": {
            "description": "Panel - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "Charlson",
                "Elixhauser",
                "NCI"
              ],
              "title": "ComorbiditiesAssessmentPanelChoices",
              "type": "string"
            },
            "title": "Panel.Anyof",
            "type": "array"
          },
          "presentConditions.not.exists": {
            "description": "Present comorbid conditions - Filter for entries without a value",
            "title": "Presentconditions.Not.Exists",
            "type": "boolean"
          },
          "presentConditions.exists": {
            "description": "Present comorbid conditions - Filter for entries with a value",
            "title": "Presentconditions.Exists",
            "type": "boolean"
          },
          "presentConditions": {
            "description": "Present comorbid conditions - Filter for a matching concept code",
            "title": "Presentconditions",
            "type": "string"
          },
          "presentConditions.not": {
            "description": "Present comorbid conditions - Filter for a mismatching concept code",
            "title": "Presentconditions.Not",
            "type": "string"
          },
          "presentConditions.anyOf": {
            "description": "Present comorbid conditions - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Presentconditions.Anyof",
            "type": "array"
          },
          "presentConditions.not.anyOf": {
            "description": "Present comorbid conditions - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Presentconditions.Not.Anyof",
            "type": "array"
          },
          "presentConditions.descendantsOf": {
            "description": "Present comorbid conditions - Filter for all child concepts of a given concepts code",
            "title": "Presentconditions.Descendantsof",
            "type": "string"
          },
          "presentConditions.allOf": {
            "description": "Present comorbid conditions - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Presentconditions.Allof",
            "type": "array"
          },
          "presentConditions.not.allOf": {
            "description": "Present comorbid conditions - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Presentconditions.Not.Allof",
            "type": "array"
          },
          "absentConditions.not.exists": {
            "description": "Absent comorbid conditions - Filter for entries without a value",
            "title": "Absentconditions.Not.Exists",
            "type": "boolean"
          },
          "absentConditions.exists": {
            "description": "Absent comorbid conditions - Filter for entries with a value",
            "title": "Absentconditions.Exists",
            "type": "boolean"
          },
          "absentConditions": {
            "description": "Absent comorbid conditions - Filter for a matching concept code",
            "title": "Absentconditions",
            "type": "string"
          },
          "absentConditions.not": {
            "description": "Absent comorbid conditions - Filter for a mismatching concept code",
            "title": "Absentconditions.Not",
            "type": "string"
          },
          "absentConditions.anyOf": {
            "description": "Absent comorbid conditions - Filter for a matching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Absentconditions.Anyof",
            "type": "array"
          },
          "absentConditions.not.anyOf": {
            "description": "Absent comorbid conditions - Filter for a mismmatching set of concept codes",
            "items": {
              "type": "string"
            },
            "title": "Absentconditions.Not.Anyof",
            "type": "array"
          },
          "absentConditions.descendantsOf": {
            "description": "Absent comorbid conditions - Filter for all child concepts of a given concepts code",
            "title": "Absentconditions.Descendantsof",
            "type": "string"
          },
          "absentConditions.allOf": {
            "description": "Absent comorbid conditions - Filter for entries matching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Absentconditions.Allof",
            "type": "array"
          },
          "absentConditions.not.allOf": {
            "description": "Absent comorbid conditions - Filter for entries mismatching all of the concepts",
            "items": {
              "type": "string"
            },
            "title": "Absentconditions.Not.Allof",
            "type": "array"
          }
        },
        "title": "ComorbiditiesAssessmentFilters",
        "type": "object"
      },
      "Paginated_ComorbiditiesAssessment_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ComorbiditiesAssessment"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[ComorbiditiesAssessment]",
        "type": "object"
      },
      "ComorbiditiesAssessmentCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's comorbidities are being recorded",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the patient's comorbidities were assessed and recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "indexConditionId": {
            "description": "The primary neoplastic entity against which comorbidities are assessed",
            "format": "uuid",
            "title": "Index neoplastic entity",
            "type": "string",
            "x-expanded": false
          },
          "panel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComorbiditiesAssessmentPanelChoices",
                "maxLength": 30
              },
              {
                "type": "null"
              }
            ],
            "description": "Comorbidities panel",
            "title": "Panel",
            "x-expanded": false
          },
          "presentConditions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Present comorbid conditions",
            "title": "Present comorbid conditions",
            "x-expanded": false,
            "x-terminology": "ICD10Condition"
          },
          "absentConditions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CodedConcept"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Absent comorbid conditions",
            "title": "Absent comorbid conditions",
            "x-expanded": false,
            "x-terminology": "ICD10Condition"
          }
        },
        "required": [
          "caseId",
          "date",
          "indexConditionId"
        ],
        "title": "ComorbiditiesAssessmentCreate",
        "type": "object"
      },
      "ComorbiditiesPanel": {
        "properties": {
          "name": {
            "description": "Comorbidity panel name",
            "title": "Name",
            "type": "string"
          },
          "categories": {
            "description": "Comorbidity panel categories",
            "items": {
              "$ref": "#/components/schemas/ComorbidityPanelCategory"
            },
            "title": "Categories",
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "title": "ComorbiditiesPanel",
        "type": "object"
      },
      "ComorbidityPanelCategory": {
        "properties": {
          "label": {
            "description": "Label of the comorbidity panel category",
            "title": "Label",
            "type": "string"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodedConcept"
              },
              {
                "type": "null"
              }
            ],
            "description": "Default choice for category"
          },
          "conditions": {
            "description": "List of conditions included in the panel category",
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Conditions",
            "type": "array"
          }
        },
        "required": [
          "label",
          "conditions"
        ],
        "title": "ComorbidityPanelCategory",
        "type": "object"
      },
      "VitalsFilters": {
        "properties": {
          "body_mass_index.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Body Mass Index.Not.Exists",
            "type": "boolean"
          },
          "body_mass_index.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Body Mass Index.Exists",
            "type": "boolean"
          },
          "body_mass_index.lessThan": {
            "description": "None - Filter for entries with values less than the specified value",
            "title": "Body Mass Index.Lessthan",
            "type": "number"
          },
          "body_mass_index.lessThanOrEqual": {
            "description": "None - Filter for entries with values less than or equal to the specified value",
            "title": "Body Mass Index.Lessthanorequal",
            "type": "number"
          },
          "body_mass_index.greaterThan": {
            "description": "None - Filter for entries with values greater than the specified value",
            "title": "Body Mass Index.Greaterthan",
            "type": "number"
          },
          "body_mass_index.greaterThanOrEqual": {
            "description": "None - Filter for entries with values greater than or equal to the specified value",
            "title": "Body Mass Index.Greaterthanorequal",
            "type": "number"
          },
          "body_mass_index.equal": {
            "description": "None - Filter for entries with values exactly equal to the specified value",
            "title": "Body Mass Index.Equal",
            "type": "number"
          },
          "body_mass_index.not.equal": {
            "description": "None - Filter for entries with values not equal to the specified value",
            "title": "Body Mass Index.Not.Equal",
            "type": "number"
          },
          "body_mass_index.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Body Mass Index.Between",
            "type": "array"
          },
          "body_mass_index.not.between": {
            "description": "None - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Body Mass Index.Not.Between",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "caseId": {
            "description": "Patient case - Filter for reference matches",
            "title": "Caseid",
            "type": "string"
          },
          "caseId.not": {
            "description": "Patient case - Filter for reference mismatches",
            "title": "Caseid.Not",
            "type": "string"
          },
          "caseId.contains": {
            "description": "Patient case - Filter for partial text matches",
            "title": "Caseid.Contains",
            "type": "string"
          },
          "caseId.not.contains": {
            "description": "Patient case - Filter for partial text mismatches",
            "title": "Caseid.Not.Contains",
            "type": "string"
          },
          "caseId.beginsWith": {
            "description": "Patient case - Filter for entries starting with the text",
            "title": "Caseid.Beginswith",
            "type": "string"
          },
          "caseId.not.beginsWith": {
            "description": "Patient case - Filter for entries not starting with the text",
            "title": "Caseid.Not.Beginswith",
            "type": "string"
          },
          "caseId.endsWith": {
            "description": "Patient case - Filter for entries ending with the text",
            "title": "Caseid.Endswith",
            "type": "string"
          },
          "caseId.not.endsWith": {
            "description": "Patient case - Filter for entries not ending with the text",
            "title": "Caseid.Not.Endswith",
            "type": "string"
          },
          "caseId.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Anyof",
            "type": "array"
          },
          "caseId.not.anyOf": {
            "description": "Patient case - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Caseid.Not.Anyof",
            "type": "array"
          },
          "date.before": {
            "description": "Assessment date - Filter for entries with dates before the specified value",
            "format": "date",
            "title": "Date.Before",
            "type": "string"
          },
          "date.after": {
            "description": "Assessment date - Filter for entries with dates after the specified value",
            "format": "date",
            "title": "Date.After",
            "type": "string"
          },
          "date.onOrBefore": {
            "description": "Assessment date - Filter for entries with dates on or before the specified value",
            "format": "date",
            "title": "Date.Onorbefore",
            "type": "string"
          },
          "date.onOrAfter": {
            "description": "Assessment date - Filter for entries with dates on or after the specified value",
            "format": "date",
            "title": "Date.Onorafter",
            "type": "string"
          },
          "date.on": {
            "description": "Assessment date - Filter for entries with dates exactly matching the specified value",
            "format": "date",
            "title": "Date.On",
            "type": "string"
          },
          "date.not.on": {
            "description": "Assessment date - Filter for entries with dates not matching the specified value",
            "format": "date",
            "title": "Date.Not.On",
            "type": "string"
          },
          "date.between": {
            "description": "Assessment date - Filter for entries with dates between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Between",
            "type": "array"
          },
          "date.not.between": {
            "description": "Assessment date - Filter for entries with dates not between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date",
                "type": "string"
              }
            ],
            "title": "Date.Not.Between",
            "type": "array"
          },
          "height.not.exists": {
            "description": "Height - Filter for entries without a value",
            "title": "Height.Not.Exists",
            "type": "boolean"
          },
          "height.exists": {
            "description": "Height - Filter for entries with a value",
            "title": "Height.Exists",
            "type": "boolean"
          },
          "height.lessThan": {
            "description": "Height - Filter for entries with values less than the specified value",
            "title": "Height.Lessthan",
            "type": "number"
          },
          "height.lessThanOrEqual": {
            "description": "Height - Filter for entries with values less than or equal to the specified value",
            "title": "Height.Lessthanorequal",
            "type": "number"
          },
          "height.greaterThan": {
            "description": "Height - Filter for entries with values greater than the specified value",
            "title": "Height.Greaterthan",
            "type": "number"
          },
          "height.greaterThanOrEqual": {
            "description": "Height - Filter for entries with values greater than or equal to the specified value",
            "title": "Height.Greaterthanorequal",
            "type": "number"
          },
          "height.equal": {
            "description": "Height - Filter for entries with values exactly equal to the specified value",
            "title": "Height.Equal",
            "type": "number"
          },
          "height.not.equal": {
            "description": "Height - Filter for entries with values not equal to the specified value",
            "title": "Height.Not.Equal",
            "type": "number"
          },
          "height.between": {
            "description": "Height - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Height.Between",
            "type": "array"
          },
          "height.not.between": {
            "description": "Height - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Height.Not.Between",
            "type": "array"
          },
          "weight.not.exists": {
            "description": "Weight - Filter for entries without a value",
            "title": "Weight.Not.Exists",
            "type": "boolean"
          },
          "weight.exists": {
            "description": "Weight - Filter for entries with a value",
            "title": "Weight.Exists",
            "type": "boolean"
          },
          "weight.lessThan": {
            "description": "Weight - Filter for entries with values less than the specified value",
            "title": "Weight.Lessthan",
            "type": "number"
          },
          "weight.lessThanOrEqual": {
            "description": "Weight - Filter for entries with values less than or equal to the specified value",
            "title": "Weight.Lessthanorequal",
            "type": "number"
          },
          "weight.greaterThan": {
            "description": "Weight - Filter for entries with values greater than the specified value",
            "title": "Weight.Greaterthan",
            "type": "number"
          },
          "weight.greaterThanOrEqual": {
            "description": "Weight - Filter for entries with values greater than or equal to the specified value",
            "title": "Weight.Greaterthanorequal",
            "type": "number"
          },
          "weight.equal": {
            "description": "Weight - Filter for entries with values exactly equal to the specified value",
            "title": "Weight.Equal",
            "type": "number"
          },
          "weight.not.equal": {
            "description": "Weight - Filter for entries with values not equal to the specified value",
            "title": "Weight.Not.Equal",
            "type": "number"
          },
          "weight.between": {
            "description": "Weight - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Weight.Between",
            "type": "array"
          },
          "weight.not.between": {
            "description": "Weight - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Weight.Not.Between",
            "type": "array"
          },
          "bloodPressureSystolic.not.exists": {
            "description": "Systolic blood pressure - Filter for entries without a value",
            "title": "Bloodpressuresystolic.Not.Exists",
            "type": "boolean"
          },
          "bloodPressureSystolic.exists": {
            "description": "Systolic blood pressure - Filter for entries with a value",
            "title": "Bloodpressuresystolic.Exists",
            "type": "boolean"
          },
          "bloodPressureSystolic.lessThan": {
            "description": "Systolic blood pressure - Filter for entries with values less than the specified value",
            "title": "Bloodpressuresystolic.Lessthan",
            "type": "number"
          },
          "bloodPressureSystolic.lessThanOrEqual": {
            "description": "Systolic blood pressure - Filter for entries with values less than or equal to the specified value",
            "title": "Bloodpressuresystolic.Lessthanorequal",
            "type": "number"
          },
          "bloodPressureSystolic.greaterThan": {
            "description": "Systolic blood pressure - Filter for entries with values greater than the specified value",
            "title": "Bloodpressuresystolic.Greaterthan",
            "type": "number"
          },
          "bloodPressureSystolic.greaterThanOrEqual": {
            "description": "Systolic blood pressure - Filter for entries with values greater than or equal to the specified value",
            "title": "Bloodpressuresystolic.Greaterthanorequal",
            "type": "number"
          },
          "bloodPressureSystolic.equal": {
            "description": "Systolic blood pressure - Filter for entries with values exactly equal to the specified value",
            "title": "Bloodpressuresystolic.Equal",
            "type": "number"
          },
          "bloodPressureSystolic.not.equal": {
            "description": "Systolic blood pressure - Filter for entries with values not equal to the specified value",
            "title": "Bloodpressuresystolic.Not.Equal",
            "type": "number"
          },
          "bloodPressureSystolic.between": {
            "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Bloodpressuresystolic.Between",
            "type": "array"
          },
          "bloodPressureSystolic.not.between": {
            "description": "Systolic blood pressure - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Bloodpressuresystolic.Not.Between",
            "type": "array"
          },
          "bloodPressureDiastolic.not.exists": {
            "description": "Diastolic blood pressure - Filter for entries without a value",
            "title": "Bloodpressurediastolic.Not.Exists",
            "type": "boolean"
          },
          "bloodPressureDiastolic.exists": {
            "description": "Diastolic blood pressure - Filter for entries with a value",
            "title": "Bloodpressurediastolic.Exists",
            "type": "boolean"
          },
          "bloodPressureDiastolic.lessThan": {
            "description": "Diastolic blood pressure - Filter for entries with values less than the specified value",
            "title": "Bloodpressurediastolic.Lessthan",
            "type": "number"
          },
          "bloodPressureDiastolic.lessThanOrEqual": {
            "description": "Diastolic blood pressure - Filter for entries with values less than or equal to the specified value",
            "title": "Bloodpressurediastolic.Lessthanorequal",
            "type": "number"
          },
          "bloodPressureDiastolic.greaterThan": {
            "description": "Diastolic blood pressure - Filter for entries with values greater than the specified value",
            "title": "Bloodpressurediastolic.Greaterthan",
            "type": "number"
          },
          "bloodPressureDiastolic.greaterThanOrEqual": {
            "description": "Diastolic blood pressure - Filter for entries with values greater than or equal to the specified value",
            "title": "Bloodpressurediastolic.Greaterthanorequal",
            "type": "number"
          },
          "bloodPressureDiastolic.equal": {
            "description": "Diastolic blood pressure - Filter for entries with values exactly equal to the specified value",
            "title": "Bloodpressurediastolic.Equal",
            "type": "number"
          },
          "bloodPressureDiastolic.not.equal": {
            "description": "Diastolic blood pressure - Filter for entries with values not equal to the specified value",
            "title": "Bloodpressurediastolic.Not.Equal",
            "type": "number"
          },
          "bloodPressureDiastolic.between": {
            "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Bloodpressurediastolic.Between",
            "type": "array"
          },
          "bloodPressureDiastolic.not.between": {
            "description": "Diastolic blood pressure - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Bloodpressurediastolic.Not.Between",
            "type": "array"
          },
          "temperature.not.exists": {
            "description": "Temperature - Filter for entries without a value",
            "title": "Temperature.Not.Exists",
            "type": "boolean"
          },
          "temperature.exists": {
            "description": "Temperature - Filter for entries with a value",
            "title": "Temperature.Exists",
            "type": "boolean"
          },
          "temperature.lessThan": {
            "description": "Temperature - Filter for entries with values less than the specified value",
            "title": "Temperature.Lessthan",
            "type": "number"
          },
          "temperature.lessThanOrEqual": {
            "description": "Temperature - Filter for entries with values less than or equal to the specified value",
            "title": "Temperature.Lessthanorequal",
            "type": "number"
          },
          "temperature.greaterThan": {
            "description": "Temperature - Filter for entries with values greater than the specified value",
            "title": "Temperature.Greaterthan",
            "type": "number"
          },
          "temperature.greaterThanOrEqual": {
            "description": "Temperature - Filter for entries with values greater than or equal to the specified value",
            "title": "Temperature.Greaterthanorequal",
            "type": "number"
          },
          "temperature.equal": {
            "description": "Temperature - Filter for entries with values exactly equal to the specified value",
            "title": "Temperature.Equal",
            "type": "number"
          },
          "temperature.not.equal": {
            "description": "Temperature - Filter for entries with values not equal to the specified value",
            "title": "Temperature.Not.Equal",
            "type": "number"
          },
          "temperature.between": {
            "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Temperature.Between",
            "type": "array"
          },
          "temperature.not.between": {
            "description": "Temperature - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Temperature.Not.Between",
            "type": "array"
          }
        },
        "title": "VitalsFilters",
        "type": "object"
      },
      "Paginated_Vitals_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Vitals"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Vitals]",
        "type": "object"
      },
      "VitalsCreate": {
        "properties": {
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "caseId": {
            "description": "Indicates the case of the patient who's vitals are assesed",
            "format": "uuid",
            "title": "Patient case",
            "type": "string",
            "x-expanded": false
          },
          "date": {
            "description": "Clinically-relevant date at which the vitals were recorded.",
            "format": "date",
            "title": "Assessment date",
            "type": "string",
            "x-expanded": false
          },
          "height": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Height of the patient",
            "title": "Height",
            "x-default-unit": "m",
            "x-expanded": false,
            "x-measure": "Distance"
          },
          "weight": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Weight of the patient",
            "title": "Weight",
            "x-default-unit": "kg",
            "x-expanded": false,
            "x-measure": "Mass"
          },
          "bloodPressureSystolic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Systolic blood pressure of the patient",
            "title": "Systolic blood pressure",
            "x-default-unit": "mmHg",
            "x-expanded": false,
            "x-measure": "Pressure"
          },
          "bloodPressureDiastolic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Diastolic blood pressure of the patient",
            "title": "Diastolic blood pressure",
            "x-default-unit": "mmHg",
            "x-expanded": false,
            "x-measure": "Pressure"
          },
          "temperature": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Measure"
              },
              {
                "type": "null"
              }
            ],
            "description": "Temperature of the patient",
            "title": "Temperature",
            "x-default-unit": "celsius",
            "x-expanded": false,
            "x-measure": "Temperature"
          }
        },
        "required": [
          "caseId",
          "date"
        ],
        "title": "VitalsCreate",
        "type": "object"
      },
      "MeasureConversion": {
        "description": "Represents a measure value to be converted to another unit.\n\nAttributes:\n\n    value (float): The numerical value of the measure.\n    unit (str): The unit of the measure.\n    new_unit (str): The new unit to convert the measure to.",
        "properties": {
          "value": {
            "title": "Value",
            "type": "number"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          },
          "new_unit": {
            "title": "New Unit",
            "type": "string"
          }
        },
        "required": [
          "value",
          "unit",
          "new_unit"
        ],
        "title": "MeasureConversion",
        "type": "object"
      },
      "TerminologyFilters": {
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          },
          "codes": {
            "items": {
              "type": "string"
            },
            "title": "Codes",
            "type": "array"
          }
        },
        "title": "TerminologyFilters",
        "type": "object"
      },
      "Paginated_CodedConcept_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/CodedConcept"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[CodedConcept]",
        "type": "object"
      },
      "CohortFilters": {
        "properties": {
          "population.lessThan": {
            "description": "Population - Filter for entries with values less than the specified value",
            "title": "Population.Lessthan",
            "type": "integer"
          },
          "population.lessThanOrEqual": {
            "description": "Population - Filter for entries with values less than or equal to the specified value",
            "title": "Population.Lessthanorequal",
            "type": "integer"
          },
          "population.greaterThan": {
            "description": "Population - Filter for entries with values greater than the specified value",
            "title": "Population.Greaterthan",
            "type": "integer"
          },
          "population.greaterThanOrEqual": {
            "description": "Population - Filter for entries with values greater than or equal to the specified value",
            "title": "Population.Greaterthanorequal",
            "type": "integer"
          },
          "population.equal": {
            "description": "Population - Filter for entries with values exactly equal to the specified value",
            "title": "Population.Equal",
            "type": "integer"
          },
          "population.not.equal": {
            "description": "Population - Filter for entries with values not equal to the specified value",
            "title": "Population.Not.Equal",
            "type": "integer"
          },
          "population.between": {
            "description": "Population - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Population.Between",
            "type": "array"
          },
          "population.not.between": {
            "description": "Population - Filter for entries with values between two specified values (inclusive)",
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Population.Not.Between",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "name": {
            "description": "Cohort name - Filter for full text matches",
            "title": "Name",
            "type": "string"
          },
          "name.not": {
            "description": "Cohort name - Filter for full text mismatches",
            "title": "Name.Not",
            "type": "string"
          },
          "name.contains": {
            "description": "Cohort name - Filter for partial text matches",
            "title": "Name.Contains",
            "type": "string"
          },
          "name.not.contains": {
            "description": "Cohort name - Filter for partial text mismatches",
            "title": "Name.Not.Contains",
            "type": "string"
          },
          "name.beginsWith": {
            "description": "Cohort name - Filter for entries starting with the text",
            "title": "Name.Beginswith",
            "type": "string"
          },
          "name.not.beginsWith": {
            "description": "Cohort name - Filter for entries not starting with the text",
            "title": "Name.Not.Beginswith",
            "type": "string"
          },
          "name.endsWith": {
            "description": "Cohort name - Filter for entries ending with the text",
            "title": "Name.Endswith",
            "type": "string"
          },
          "name.not.endsWith": {
            "description": "Cohort name - Filter for entries not ending with the text",
            "title": "Name.Not.Endswith",
            "type": "string"
          },
          "name.anyOf": {
            "description": "Cohort name - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Name.Anyof",
            "type": "array"
          },
          "name.not.anyOf": {
            "description": "Cohort name - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Name.Not.Anyof",
            "type": "array"
          },
          "includeCriteria.not.exists": {
            "description": "Inclusion criteria - Filter for entries without a value",
            "title": "Includecriteria.Not.Exists",
            "type": "boolean"
          },
          "includeCriteria.exists": {
            "description": "Inclusion criteria - Filter for entries with a value",
            "title": "Includecriteria.Exists",
            "type": "boolean"
          },
          "excludeCriteria.not.exists": {
            "description": "Exclusion criteria - Filter for entries without a value",
            "title": "Excludecriteria.Not.Exists",
            "type": "boolean"
          },
          "excludeCriteria.exists": {
            "description": "Exclusion criteria - Filter for entries with a value",
            "title": "Excludecriteria.Exists",
            "type": "boolean"
          },
          "isPublic": {
            "description": "Is public? - ('Filter for yes/no statement',)",
            "title": "Ispublic",
            "type": "boolean"
          },
          "projectId.not.exists": {
            "description": "Project - Filter for entries without a value",
            "title": "Projectid.Not.Exists",
            "type": "boolean"
          },
          "projectId.exists": {
            "description": "Project - Filter for entries with a value",
            "title": "Projectid.Exists",
            "type": "boolean"
          },
          "projectId": {
            "description": "Project - Filter for reference matches",
            "title": "Projectid",
            "type": "string"
          },
          "projectId.not": {
            "description": "Project - Filter for reference mismatches",
            "title": "Projectid.Not",
            "type": "string"
          },
          "projectId.contains": {
            "description": "Project - Filter for partial text matches",
            "title": "Projectid.Contains",
            "type": "string"
          },
          "projectId.not.contains": {
            "description": "Project - Filter for partial text mismatches",
            "title": "Projectid.Not.Contains",
            "type": "string"
          },
          "projectId.beginsWith": {
            "description": "Project - Filter for entries starting with the text",
            "title": "Projectid.Beginswith",
            "type": "string"
          },
          "projectId.not.beginsWith": {
            "description": "Project - Filter for entries not starting with the text",
            "title": "Projectid.Not.Beginswith",
            "type": "string"
          },
          "projectId.endsWith": {
            "description": "Project - Filter for entries ending with the text",
            "title": "Projectid.Endswith",
            "type": "string"
          },
          "projectId.not.endsWith": {
            "description": "Project - Filter for entries not ending with the text",
            "title": "Projectid.Not.Endswith",
            "type": "string"
          },
          "projectId.anyOf": {
            "description": "Project - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Projectid.Anyof",
            "type": "array"
          },
          "projectId.not.anyOf": {
            "description": "Project - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Projectid.Not.Anyof",
            "type": "array"
          },
          "casesIds": {
            "description": "Cases - Filter for full text matches",
            "title": "Casesids",
            "type": "string"
          },
          "casesIds.not": {
            "description": "Cases - Filter for full text mismatches",
            "title": "Casesids.Not",
            "type": "string"
          },
          "casesIds.contains": {
            "description": "Cases - Filter for partial text matches",
            "title": "Casesids.Contains",
            "type": "string"
          },
          "casesIds.not.contains": {
            "description": "Cases - Filter for partial text mismatches",
            "title": "Casesids.Not.Contains",
            "type": "string"
          },
          "casesIds.beginsWith": {
            "description": "Cases - Filter for entries starting with the text",
            "title": "Casesids.Beginswith",
            "type": "string"
          },
          "casesIds.not.beginsWith": {
            "description": "Cases - Filter for entries not starting with the text",
            "title": "Casesids.Not.Beginswith",
            "type": "string"
          },
          "casesIds.endsWith": {
            "description": "Cases - Filter for entries ending with the text",
            "title": "Casesids.Endswith",
            "type": "string"
          },
          "casesIds.not.endsWith": {
            "description": "Cases - Filter for entries not ending with the text",
            "title": "Casesids.Not.Endswith",
            "type": "string"
          },
          "casesIds.anyOf": {
            "description": "Cases - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Casesids.Anyof",
            "type": "array"
          },
          "casesIds.not.anyOf": {
            "description": "Cases - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Casesids.Not.Anyof",
            "type": "array"
          },
          "manualChoicesIds": {
            "description": "Manually added cases - Filter for full text matches",
            "title": "Manualchoicesids",
            "type": "string"
          },
          "manualChoicesIds.not": {
            "description": "Manually added cases - Filter for full text mismatches",
            "title": "Manualchoicesids.Not",
            "type": "string"
          },
          "manualChoicesIds.contains": {
            "description": "Manually added cases - Filter for partial text matches",
            "title": "Manualchoicesids.Contains",
            "type": "string"
          },
          "manualChoicesIds.not.contains": {
            "description": "Manually added cases - Filter for partial text mismatches",
            "title": "Manualchoicesids.Not.Contains",
            "type": "string"
          },
          "manualChoicesIds.beginsWith": {
            "description": "Manually added cases - Filter for entries starting with the text",
            "title": "Manualchoicesids.Beginswith",
            "type": "string"
          },
          "manualChoicesIds.not.beginsWith": {
            "description": "Manually added cases - Filter for entries not starting with the text",
            "title": "Manualchoicesids.Not.Beginswith",
            "type": "string"
          },
          "manualChoicesIds.endsWith": {
            "description": "Manually added cases - Filter for entries ending with the text",
            "title": "Manualchoicesids.Endswith",
            "type": "string"
          },
          "manualChoicesIds.not.endsWith": {
            "description": "Manually added cases - Filter for entries not ending with the text",
            "title": "Manualchoicesids.Not.Endswith",
            "type": "string"
          },
          "manualChoicesIds.anyOf": {
            "description": "Manually added cases - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Manualchoicesids.Anyof",
            "type": "array"
          },
          "manualChoicesIds.not.anyOf": {
            "description": "Manually added cases - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Manualchoicesids.Not.Anyof",
            "type": "array"
          },
          "frozenSetIds": {
            "description": "Frozen cases - Filter for full text matches",
            "title": "Frozensetids",
            "type": "string"
          },
          "frozenSetIds.not": {
            "description": "Frozen cases - Filter for full text mismatches",
            "title": "Frozensetids.Not",
            "type": "string"
          },
          "frozenSetIds.contains": {
            "description": "Frozen cases - Filter for partial text matches",
            "title": "Frozensetids.Contains",
            "type": "string"
          },
          "frozenSetIds.not.contains": {
            "description": "Frozen cases - Filter for partial text mismatches",
            "title": "Frozensetids.Not.Contains",
            "type": "string"
          },
          "frozenSetIds.beginsWith": {
            "description": "Frozen cases - Filter for entries starting with the text",
            "title": "Frozensetids.Beginswith",
            "type": "string"
          },
          "frozenSetIds.not.beginsWith": {
            "description": "Frozen cases - Filter for entries not starting with the text",
            "title": "Frozensetids.Not.Beginswith",
            "type": "string"
          },
          "frozenSetIds.endsWith": {
            "description": "Frozen cases - Filter for entries ending with the text",
            "title": "Frozensetids.Endswith",
            "type": "string"
          },
          "frozenSetIds.not.endsWith": {
            "description": "Frozen cases - Filter for entries not ending with the text",
            "title": "Frozensetids.Not.Endswith",
            "type": "string"
          },
          "frozenSetIds.anyOf": {
            "description": "Frozen cases - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Frozensetids.Anyof",
            "type": "array"
          },
          "frozenSetIds.not.anyOf": {
            "description": "Frozen cases - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Frozensetids.Not.Anyof",
            "type": "array"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filter for a particular cohort creator by its username",
            "title": "Createdby"
          }
        },
        "title": "CohortFilters",
        "type": "object"
      },
      "Cohort": {
        "properties": {
          "population": {
            "description": "Cohort population",
            "title": "Population",
            "type": "integer"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "name": {
            "description": "Name of the cohort",
            "maxLength": 255,
            "title": "Cohort name",
            "type": "string",
            "x-expanded": false
          },
          "includeCriteria": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "JSON object defining inclusion criteria",
            "title": "Inclusion criteria",
            "x-expanded": false
          },
          "excludeCriteria": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "JSON object defining exclusion criteria",
            "title": "Exclusion criteria",
            "x-expanded": false
          },
          "isPublic": {
            "default": true,
            "description": "Whether the cohort is public",
            "title": "Is public?",
            "type": "boolean",
            "x-expanded": false
          },
          "projectId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Project to which the cohort is associated",
            "title": "Project",
            "x-expanded": false
          },
          "casesIds": {
            "default": [],
            "description": "Cases composing the cohort",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Cases",
            "type": "array",
            "x-expanded": false
          },
          "manualChoicesIds": {
            "default": [],
            "description": "Manually added cases",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Manually added cases",
            "type": "array",
            "x-expanded": false
          },
          "frozenSetIds": {
            "default": [],
            "description": "Frozen cases",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Frozen cases",
            "type": "array",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "population",
          "id",
          "name",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Cohort",
        "type": "object"
      },
      "Paginated_Cohort_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Cohort"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Cohort]",
        "type": "object"
      },
      "CohortCreate": {
        "properties": {
          "includeCriteria": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CohortRuleset"
              },
              {
                "type": "null"
              }
            ],
            "description": "Logic rules to filter and constrain the cases to be included in the cohort",
            "title": "Inclusion critera"
          },
          "excludeCriteria": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CohortRuleset"
              },
              {
                "type": "null"
              }
            ],
            "description": "Logic rules to filter and constrain the cases to be excluded from the cohort",
            "title": "Exclusion critera"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "name": {
            "description": "Name of the cohort",
            "maxLength": 255,
            "title": "Cohort name",
            "type": "string",
            "x-expanded": false
          },
          "isPublic": {
            "default": true,
            "description": "Whether the cohort is public",
            "title": "Is public?",
            "type": "boolean",
            "x-expanded": false
          },
          "projectId": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Project to which the cohort is associated",
            "title": "Project",
            "x-expanded": false
          },
          "casesIds": {
            "default": [],
            "description": "Cases composing the cohort",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Cases",
            "type": "array",
            "x-expanded": false
          },
          "manualChoicesIds": {
            "default": [],
            "description": "Manually added cases",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Manually added cases",
            "type": "array",
            "x-expanded": false
          },
          "frozenSetIds": {
            "default": [],
            "description": "Frozen cases",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Frozen cases",
            "type": "array",
            "x-expanded": false
          }
        },
        "required": [
          "name"
        ],
        "title": "CohortCreate",
        "type": "object"
      },
      "CohortQueryEntity": {
        "enum": [
          "PatientCase",
          "PatientCaseDataCompletion",
          "NeoplasticEntity",
          "Staging",
          "TNMStaging",
          "FIGOStaging",
          "BinetStaging",
          "RaiStaging",
          "BreslowDepth",
          "ClarkStaging",
          "ISSStaging",
          "RISSStaging",
          "GleasonGrade",
          "INSSStage",
          "INRGSSStage",
          "WilmsStage",
          "RhabdomyosarcomaClinicalGroup",
          "LymphomaStaging",
          "TumorMarker",
          "RiskAssessment",
          "TreatmentResponse",
          "TherapyLine",
          "SystemicTherapy",
          "SystemicTherapyMedication",
          "PerformanceStatus",
          "Surgery",
          "Radiotherapy",
          "RadiotherapyDosage",
          "RadiotherapySetting",
          "Lifestyle",
          "ComorbiditiesAssessment",
          "FamilyHistory",
          "TumorBoard",
          "MolecularTumorBoard",
          "UnspecifiedTumorBoard",
          "MolecularTherapeuticRecommendation",
          "AdverseEvent",
          "AdverseEventSuspectedCause",
          "AdverseEventMitigation",
          "Vitals",
          "GenomicVariant",
          "GenomicSignature",
          "TumorMutationalBurden",
          "MicrosatelliteInstability",
          "LossOfHeterozygosity",
          "HomologousRecombinationDeficiency",
          "TumorNeoantigenBurden",
          "AneuploidScore"
        ],
        "title": "CohortQueryEntity",
        "type": "string"
      },
      "CohortQueryFilter": {
        "enum": [
          "ExactStringFilter",
          "NotExactStringFilter",
          "ContainsStringFilter",
          "NotContainsStringFilter",
          "BeginsWithStringFilter",
          "NotBeginsWithStringFilter",
          "EndsWithStringFilter",
          "NotEndsWithStringFilter",
          "AnyOfStringFilter",
          "NotAnyOfStringFilter",
          "BeforeDateFilter",
          "AfterDateFilter",
          "OnOrBeforeDateFilter",
          "OnOrAfterDateFilter",
          "OnDateFilter",
          "NotOnDateFilter",
          "BetweenDatesFilter",
          "NotBetweenDatesFilter",
          "OverlapsPeriodFilter",
          "NotOverlapsPeriodFilter",
          "ContainsPeriodFilter",
          "NotContainsPeriodFilter",
          "ContainedByPeriodFilter",
          "NotContainedByPeriodFilter",
          "LessThanIntegerFilter",
          "LessThanOrEqualIntegerFilter",
          "GreaterThanIntegerFilter",
          "GreaterThanOrEqualIntegerFilter",
          "EqualIntegerFilter",
          "NotEqualIntegerFilter",
          "BetweenIntegerFilter",
          "NotBetweenIntegerFilter",
          "LessThanFloatFilter",
          "LessThanOrEqualFloatFilter",
          "GreaterThanFloatFilter",
          "GreaterThanOrEqualFloatFilter",
          "EqualFloatFilter",
          "NotEqualFloatFilter",
          "BetweenFloatFilter",
          "NotBetweenFloatFilter",
          "EqualsBooleanFilter",
          "EqualsConceptFilter",
          "NotEqualsConceptFilter",
          "AnyOfConceptFilter",
          "NotAnyOfConceptFilter",
          "DescendantsOfConceptFilter",
          "AllOfConceptFilter",
          "NotAllOfConceptFilter",
          "ExactRefereceFilter",
          "NotExactRefereceFilter",
          "AnyOfReferecesFilter",
          "NotAnyOfReferecesFilter",
          "AllOfReferencesFilter",
          "NotAllOfReferencesFilter",
          "ExactUserReferenceFilter",
          "NotExactUserRefereceFilter",
          "AnyOfUserRefereceFilter",
          "NotAnyOfUserRefereceFilter",
          "EqualsEnumFilter",
          "NotEqualsEnumFilter",
          "AnyOfEnumFilter",
          "NotAnyOfEnumFilter",
          "IsNullFilter",
          "NotIsNullFilter"
        ],
        "title": "CohortQueryFilter",
        "type": "string"
      },
      "CohortRule": {
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/CohortQueryEntity",
            "description": "Name of the case-related resource",
            "title": "entity"
          },
          "filters": {
            "description": "List of filters to be applied to the resource",
            "items": {
              "$ref": "#/components/schemas/CohortRuleFilter"
            },
            "title": "Filters",
            "type": "array"
          }
        },
        "required": [
          "entity",
          "filters"
        ],
        "title": "CohortRule",
        "type": "object"
      },
      "CohortRuleFilter": {
        "properties": {
          "field": {
            "description": "Dot-separated path of the resource field (e.g. 'medications.drug')",
            "title": "Field",
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/CohortQueryFilter",
            "description": "Name of the filter operator to be applied to the field",
            "title": "Operator"
          },
          "value": {
            "description": "Filter value to be applied to the field using the rule's oprerator",
            "title": "Value"
          }
        },
        "required": [
          "field",
          "operator",
          "value"
        ],
        "title": "CohortRuleFilter",
        "type": "object"
      },
      "CohortRuleset": {
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RulesetCondition"
              }
            ],
            "default": "and",
            "description": "Logical condition used to chain the rules within the ruleset",
            "title": "Logical condition"
          },
          "rules": {
            "description": "List of rules or nested rulesets that define the fields and values to use for the filtering.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CohortRule"
                },
                {
                  "$ref": "#/components/schemas/CohortRuleset"
                }
              ]
            },
            "title": "Rules",
            "type": "array"
          }
        },
        "required": [
          "rules"
        ],
        "title": "CohortRuleset",
        "type": "object"
      },
      "RulesetCondition": {
        "enum": [
          "and",
          "or"
        ],
        "title": "RulesetCondition",
        "type": "string"
      },
      "CohortContribution": {
        "properties": {
          "contributor": {
            "title": "Contributor",
            "type": "string"
          },
          "contributions": {
            "title": "Contributions",
            "type": "integer"
          }
        },
        "required": [
          "contributor",
          "contributions"
        ],
        "title": "CohortContribution",
        "type": "object"
      },
      "DataResource": {
        "enum": [
          "PatientCase",
          "NeoplasticEntity",
          "TNMStaging",
          "FIGOStaging",
          "BinetStaging",
          "RaiStaging",
          "BreslowDepth",
          "ClarkStaging",
          "ISSStaging",
          "RISSStaging",
          "GleasonGrade",
          "INSSStage",
          "INRGSSStage",
          "WilmsStage",
          "RhabdomyosarcomaClinicalGroup",
          "LymphomaStaging",
          "TumorMarker",
          "RiskAssessment",
          "TherapyLine",
          "SystemicTherapy",
          "SystemicTherapyMedication",
          "Surgery",
          "Radiotherapy",
          "RadiotherapyDosage",
          "RadiotherapySetting",
          "AdverseEvent",
          "AdverseEventSuspectedCause",
          "AdverseEventMitigation",
          "TreatmentResponse",
          "UnspecifiedTumorBoard",
          "MolecularTumorBoard",
          "MolecularTherapeuticRecommendation",
          "PerformanceStatus",
          "Lifestyle",
          "FamilyHistory",
          "Vitals",
          "ComorbiditiesAssessment",
          "GenomicVariant",
          "TumorMutationalBurden",
          "MicrosatelliteInstability",
          "LossOfHeterozygosity",
          "HomologousRecombinationDeficiency",
          "TumorNeoantigenBurden",
          "AneuploidScore"
        ],
        "title": "DataResource",
        "type": "string"
      },
      "DatasetRule": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DataResource"
          },
          "field": {
            "title": "Field",
            "type": "string"
          },
          "transform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "maxItems": 2,
                "minItems": 2,
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {

                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transform"
          }
        },
        "required": [
          "resource",
          "field"
        ],
        "title": "DatasetRule",
        "type": "object"
      },
      "Paginated_Any_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {

            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Any]",
        "type": "object"
      },
      "CohortTraitAverage": {
        "properties": {
          "average": {
            "title": "Average",
            "type": "number"
          },
          "standardDeviation": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Standarddeviation"
          }
        },
        "required": [
          "average",
          "standardDeviation"
        ],
        "title": "CohortTraitAverage",
        "type": "object"
      },
      "CohortTraitMedian": {
        "properties": {
          "median": {
            "title": "Median",
            "type": "number"
          },
          "interQuartalRange": {
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Interquartalrange",
            "type": "array"
          }
        },
        "required": [
          "median",
          "interQuartalRange"
        ],
        "title": "CohortTraitMedian",
        "type": "object"
      },
      "CohortTraitCounts": {
        "properties": {
          "category": {
            "title": "Category",
            "type": "string"
          },
          "counts": {
            "title": "Counts",
            "type": "integer"
          },
          "percentage": {
            "title": "Percentage",
            "type": "number"
          }
        },
        "required": [
          "category",
          "counts",
          "percentage"
        ],
        "title": "CohortTraitCounts",
        "type": "object"
      },
      "KapplerMeierCurve": {
        "properties": {
          "months": {
            "items": {
              "type": "number"
            },
            "title": "Months",
            "type": "array"
          },
          "probabilities": {
            "items": {
              "type": "number"
            },
            "title": "Probabilities",
            "type": "array"
          },
          "lowerConfidenceBand": {
            "items": {
              "type": "number"
            },
            "title": "Lowerconfidenceband",
            "type": "array"
          },
          "upperConfidenceBand": {
            "items": {
              "type": "number"
            },
            "title": "Upperconfidenceband",
            "type": "array"
          }
        },
        "required": [
          "months",
          "probabilities",
          "lowerConfidenceBand",
          "upperConfidenceBand"
        ],
        "title": "KapplerMeierCurve",
        "type": "object"
      },
      "DataPlatformStatisticsSchema": {
        "properties": {
          "cases": {
            "title": "Cases",
            "type": "integer"
          },
          "primarySites": {
            "title": "Primarysites",
            "type": "integer"
          },
          "projects": {
            "title": "Projects",
            "type": "integer"
          },
          "cohorts": {
            "title": "Cohorts",
            "type": "integer"
          },
          "entries": {
            "title": "Entries",
            "type": "integer"
          },
          "mutations": {
            "title": "Mutations",
            "type": "integer"
          },
          "clinicalCenters": {
            "title": "Clinicalcenters",
            "type": "integer"
          },
          "contributors": {
            "title": "Contributors",
            "type": "integer"
          }
        },
        "required": [
          "cases",
          "primarySites",
          "projects",
          "cohorts",
          "entries",
          "mutations",
          "clinicalCenters",
          "contributors"
        ],
        "title": "DataPlatformStatisticsSchema",
        "type": "object"
      },
      "EntityStatisticsSchema": {
        "properties": {
          "population": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Population"
          },
          "dataCompletionMedian": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datacompletionmedian"
          },
          "topographyCode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Topographycode"
          },
          "topographyGroup": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Topographygroup"
          },
          "contributors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contributors"
          }
        },
        "title": "EntityStatistics",
        "type": "object"
      },
      "CasesPerMonthSchema": {
        "properties": {
          "month": {
            "format": "date",
            "title": "Month",
            "type": "string"
          },
          "cumulativeCount": {
            "title": "Cumulativecount",
            "type": "integer"
          }
        },
        "required": [
          "month",
          "cumulativeCount"
        ],
        "title": "CasesPerMonthSchema",
        "type": "object"
      },
      "DatasetFilters": {
        "properties": {
          "rules.resource": {
            "allOf": [
              {
                "enum": [
                  "PatientCase",
                  "NeoplasticEntity",
                  "TNMStaging",
                  "FIGOStaging",
                  "BinetStaging",
                  "RaiStaging",
                  "BreslowDepth",
                  "ClarkStaging",
                  "ISSStaging",
                  "RISSStaging",
                  "GleasonGrade",
                  "INSSStage",
                  "INRGSSStage",
                  "WilmsStage",
                  "RhabdomyosarcomaClinicalGroup",
                  "LymphomaStaging",
                  "TumorMarker",
                  "RiskAssessment",
                  "TherapyLine",
                  "SystemicTherapy",
                  "SystemicTherapyMedication",
                  "Surgery",
                  "Radiotherapy",
                  "RadiotherapyDosage",
                  "RadiotherapySetting",
                  "AdverseEvent",
                  "AdverseEventSuspectedCause",
                  "AdverseEventMitigation",
                  "TreatmentResponse",
                  "UnspecifiedTumorBoard",
                  "MolecularTumorBoard",
                  "MolecularTherapeuticRecommendation",
                  "PerformanceStatus",
                  "Lifestyle",
                  "FamilyHistory",
                  "Vitals",
                  "ComorbiditiesAssessment",
                  "GenomicVariant",
                  "TumorMutationalBurden",
                  "MicrosatelliteInstability",
                  "LossOfHeterozygosity",
                  "HomologousRecombinationDeficiency",
                  "TumorNeoantigenBurden",
                  "AneuploidScore"
                ],
                "title": "DataResource",
                "type": "string"
              }
            ],
            "description": "None - ('Filter for single value choice',)"
          },
          "rules.resource.not": {
            "allOf": [
              {
                "enum": [
                  "PatientCase",
                  "NeoplasticEntity",
                  "TNMStaging",
                  "FIGOStaging",
                  "BinetStaging",
                  "RaiStaging",
                  "BreslowDepth",
                  "ClarkStaging",
                  "ISSStaging",
                  "RISSStaging",
                  "GleasonGrade",
                  "INSSStage",
                  "INRGSSStage",
                  "WilmsStage",
                  "RhabdomyosarcomaClinicalGroup",
                  "LymphomaStaging",
                  "TumorMarker",
                  "RiskAssessment",
                  "TherapyLine",
                  "SystemicTherapy",
                  "SystemicTherapyMedication",
                  "Surgery",
                  "Radiotherapy",
                  "RadiotherapyDosage",
                  "RadiotherapySetting",
                  "AdverseEvent",
                  "AdverseEventSuspectedCause",
                  "AdverseEventMitigation",
                  "TreatmentResponse",
                  "UnspecifiedTumorBoard",
                  "MolecularTumorBoard",
                  "MolecularTherapeuticRecommendation",
                  "PerformanceStatus",
                  "Lifestyle",
                  "FamilyHistory",
                  "Vitals",
                  "ComorbiditiesAssessment",
                  "GenomicVariant",
                  "TumorMutationalBurden",
                  "MicrosatelliteInstability",
                  "LossOfHeterozygosity",
                  "HomologousRecombinationDeficiency",
                  "TumorNeoantigenBurden",
                  "AneuploidScore"
                ],
                "title": "DataResource",
                "type": "string"
              }
            ],
            "description": "None - ('Filter for all but a single value choice',)"
          },
          "rules.resource.anyOf": {
            "description": "None - ('Filter for excluding a subset of value choices',)",
            "items": {
              "enum": [
                "PatientCase",
                "NeoplasticEntity",
                "TNMStaging",
                "FIGOStaging",
                "BinetStaging",
                "RaiStaging",
                "BreslowDepth",
                "ClarkStaging",
                "ISSStaging",
                "RISSStaging",
                "GleasonGrade",
                "INSSStage",
                "INRGSSStage",
                "WilmsStage",
                "RhabdomyosarcomaClinicalGroup",
                "LymphomaStaging",
                "TumorMarker",
                "RiskAssessment",
                "TherapyLine",
                "SystemicTherapy",
                "SystemicTherapyMedication",
                "Surgery",
                "Radiotherapy",
                "RadiotherapyDosage",
                "RadiotherapySetting",
                "AdverseEvent",
                "AdverseEventSuspectedCause",
                "AdverseEventMitigation",
                "TreatmentResponse",
                "UnspecifiedTumorBoard",
                "MolecularTumorBoard",
                "MolecularTherapeuticRecommendation",
                "PerformanceStatus",
                "Lifestyle",
                "FamilyHistory",
                "Vitals",
                "ComorbiditiesAssessment",
                "GenomicVariant",
                "TumorMutationalBurden",
                "MicrosatelliteInstability",
                "LossOfHeterozygosity",
                "HomologousRecombinationDeficiency",
                "TumorNeoantigenBurden",
                "AneuploidScore"
              ],
              "title": "DataResource",
              "type": "string"
            },
            "title": "Rules.Resource.Anyof",
            "type": "array"
          },
          "rules.field": {
            "description": "None - Filter for full text matches",
            "title": "Rules.Field",
            "type": "string"
          },
          "rules.field.not": {
            "description": "None - Filter for full text mismatches",
            "title": "Rules.Field.Not",
            "type": "string"
          },
          "rules.field.contains": {
            "description": "None - Filter for partial text matches",
            "title": "Rules.Field.Contains",
            "type": "string"
          },
          "rules.field.not.contains": {
            "description": "None - Filter for partial text mismatches",
            "title": "Rules.Field.Not.Contains",
            "type": "string"
          },
          "rules.field.beginsWith": {
            "description": "None - Filter for entries starting with the text",
            "title": "Rules.Field.Beginswith",
            "type": "string"
          },
          "rules.field.not.beginsWith": {
            "description": "None - Filter for entries not starting with the text",
            "title": "Rules.Field.Not.Beginswith",
            "type": "string"
          },
          "rules.field.endsWith": {
            "description": "None - Filter for entries ending with the text",
            "title": "Rules.Field.Endswith",
            "type": "string"
          },
          "rules.field.not.endsWith": {
            "description": "None - Filter for entries not ending with the text",
            "title": "Rules.Field.Not.Endswith",
            "type": "string"
          },
          "rules.field.anyOf": {
            "description": "None - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Rules.Field.Anyof",
            "type": "array"
          },
          "rules.field.not.anyOf": {
            "description": "None - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Rules.Field.Not.Anyof",
            "type": "array"
          },
          "rules.transform.not.exists": {
            "description": "None - Filter for entries without a value",
            "title": "Rules.Transform.Not.Exists",
            "type": "boolean"
          },
          "rules.transform.exists": {
            "description": "None - Filter for entries with a value",
            "title": "Rules.Transform.Exists",
            "type": "boolean"
          },
          "rules.transform": {
            "description": "None - Filter for full text matches",
            "title": "Rules.Transform",
            "type": "string"
          },
          "rules.transform.not": {
            "description": "None - Filter for full text mismatches",
            "title": "Rules.Transform.Not",
            "type": "string"
          },
          "rules.transform.contains": {
            "description": "None - Filter for partial text matches",
            "title": "Rules.Transform.Contains",
            "type": "string"
          },
          "rules.transform.not.contains": {
            "description": "None - Filter for partial text mismatches",
            "title": "Rules.Transform.Not.Contains",
            "type": "string"
          },
          "rules.transform.beginsWith": {
            "description": "None - Filter for entries starting with the text",
            "title": "Rules.Transform.Beginswith",
            "type": "string"
          },
          "rules.transform.not.beginsWith": {
            "description": "None - Filter for entries not starting with the text",
            "title": "Rules.Transform.Not.Beginswith",
            "type": "string"
          },
          "rules.transform.endsWith": {
            "description": "None - Filter for entries ending with the text",
            "title": "Rules.Transform.Endswith",
            "type": "string"
          },
          "rules.transform.not.endsWith": {
            "description": "None - Filter for entries not ending with the text",
            "title": "Rules.Transform.Not.Endswith",
            "type": "string"
          },
          "rules.transform.anyOf": {
            "description": "None - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Rules.Transform.Anyof",
            "type": "array"
          },
          "rules.transform.not.anyOf": {
            "description": "None - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Rules.Transform.Not.Anyof",
            "type": "array"
          },
          "id": {
            "description": "Id - Filter for full text matches",
            "title": "Id",
            "type": "string"
          },
          "id.not": {
            "description": "Id - Filter for full text mismatches",
            "title": "Id.Not",
            "type": "string"
          },
          "id.contains": {
            "description": "Id - Filter for partial text matches",
            "title": "Id.Contains",
            "type": "string"
          },
          "id.not.contains": {
            "description": "Id - Filter for partial text mismatches",
            "title": "Id.Not.Contains",
            "type": "string"
          },
          "id.beginsWith": {
            "description": "Id - Filter for entries starting with the text",
            "title": "Id.Beginswith",
            "type": "string"
          },
          "id.not.beginsWith": {
            "description": "Id - Filter for entries not starting with the text",
            "title": "Id.Not.Beginswith",
            "type": "string"
          },
          "id.endsWith": {
            "description": "Id - Filter for entries ending with the text",
            "title": "Id.Endswith",
            "type": "string"
          },
          "id.not.endsWith": {
            "description": "Id - Filter for entries not ending with the text",
            "title": "Id.Not.Endswith",
            "type": "string"
          },
          "id.anyOf": {
            "description": "Id - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Anyof",
            "type": "array"
          },
          "id.not.anyOf": {
            "description": "Id - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Id.Not.Anyof",
            "type": "array"
          },
          "name": {
            "description": "Dataset name - Filter for full text matches",
            "title": "Name",
            "type": "string"
          },
          "name.not": {
            "description": "Dataset name - Filter for full text mismatches",
            "title": "Name.Not",
            "type": "string"
          },
          "name.contains": {
            "description": "Dataset name - Filter for partial text matches",
            "title": "Name.Contains",
            "type": "string"
          },
          "name.not.contains": {
            "description": "Dataset name - Filter for partial text mismatches",
            "title": "Name.Not.Contains",
            "type": "string"
          },
          "name.beginsWith": {
            "description": "Dataset name - Filter for entries starting with the text",
            "title": "Name.Beginswith",
            "type": "string"
          },
          "name.not.beginsWith": {
            "description": "Dataset name - Filter for entries not starting with the text",
            "title": "Name.Not.Beginswith",
            "type": "string"
          },
          "name.endsWith": {
            "description": "Dataset name - Filter for entries ending with the text",
            "title": "Name.Endswith",
            "type": "string"
          },
          "name.not.endsWith": {
            "description": "Dataset name - Filter for entries not ending with the text",
            "title": "Name.Not.Endswith",
            "type": "string"
          },
          "name.anyOf": {
            "description": "Dataset name - Filter for entries where at least one reference matches the query",
            "items": {
              "type": "string"
            },
            "title": "Name.Anyof",
            "type": "array"
          },
          "name.not.anyOf": {
            "description": "Dataset name - Filter for entries where at least one reference mismatches the query",
            "items": {
              "type": "string"
            },
            "title": "Name.Not.Anyof",
            "type": "array"
          },
          "isPublic": {
            "description": "Is public? - ('Filter for yes/no statement',)",
            "title": "Ispublic",
            "type": "boolean"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filter for a particular cohort creator by its username",
            "title": "Createdby"
          }
        },
        "title": "DatasetFilters",
        "type": "object"
      },
      "Dataset": {
        "properties": {
          "rules": {
            "default": [],
            "description": "Composition rules of the dataset",
            "items": {
              "$ref": "#/components/schemas/DatasetRule"
            },
            "title": "Rules",
            "type": "array"
          },
          "id": {
            "description": "",
            "format": "uuid",
            "title": "Id",
            "type": "string",
            "x-expanded": false
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "name": {
            "description": "Name of the dataset",
            "maxLength": 255,
            "title": "Dataset name",
            "type": "string",
            "x-expanded": false
          },
          "isPublic": {
            "default": true,
            "description": "Whether the cohort is public",
            "title": "Is public?",
            "type": "boolean",
            "x-expanded": false
          },
          "description": {
            "description": "Human-readable description",
            "title": "Description",
            "type": "string"
          },
          "createdAt": {
            "description": "Date-time when the resource was created",
            "format": "date-time",
            "title": "Createdat",
            "type": "string"
          },
          "updatedAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Date-time when the resource was last updated",
            "title": "Updatedat"
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Username of the user who created the resource",
            "title": "Createdby"
          },
          "updatedBy": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Usernames of the users who have updated the resource",
            "title": "Updatedby"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "createdAt",
          "createdBy"
        ],
        "title": "Dataset",
        "type": "object"
      },
      "Paginated_Dataset_": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "count",
          "items"
        ],
        "title": "Paginated[Dataset]",
        "type": "object"
      },
      "DatasetCreate": {
        "properties": {
          "rules": {
            "default": [],
            "description": "Composition rules of the dataset",
            "items": {
              "$ref": "#/components/schemas/DatasetRule"
            },
            "title": "Rules",
            "type": "array"
          },
          "externalSource": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The digital source of the data, relevant for automated data",
            "title": "External data source",
            "x-expanded": false
          },
          "externalSourceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data identifier at the digital source of the data, relevant for automated data",
            "title": "External data source Id",
            "x-expanded": false
          },
          "name": {
            "description": "Name of the dataset",
            "maxLength": 255,
            "title": "Dataset name",
            "type": "string",
            "x-expanded": false
          },
          "isPublic": {
            "default": true,
            "description": "Whether the cohort is public",
            "title": "Is public?",
            "type": "boolean",
            "x-expanded": false
          }
        },
        "required": [
          "name"
        ],
        "title": "DatasetCreate",
        "type": "object"
      }
    },
    "securitySchemes": {
      "XSessionTokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-SESSION-TOKEN"
      }
    }
  },
  "servers": [
    {
      "url": "https://{domain}:{port}/api",
      "description": "API server",
      "variables": {
        "port": {
          "default": "4443"
        },
        "domain": {
          "default": "localhost"
        }
      }
    }
  ]
}