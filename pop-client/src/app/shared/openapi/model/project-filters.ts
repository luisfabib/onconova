/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ProjectFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Id - Filter for entries where at least one reference matches the query
     */
    'id.anyOf'?: Array<string>;
    /**
     * Id - Filter for entries where at least one reference mismatches the query
     */
    'id.not.anyOf'?: Array<string>;
    /**
     * Project leader - Filter for username matches
     */
    'leader.username'?: string;
    /**
     * Project leader - Filter for username mismatches
     */
    'leader.username.not'?: string;
    /**
     * Project leader - Filter for entries where at least one reference mismatches the query
     */
    'leader.username.anyOf'?: Array<string>;
    /**
     * Project leader - Filter for entries where at least one reference matches the query
     */
    'leader.username.not.anyOf'?: string;
    /**
     * Clinical Centers - Filter for full text matches
     */
    clinicalCenters?: string;
    /**
     * Clinical Centers - Filter for full text mismatches
     */
    'clinicalCenters.not'?: string;
    /**
     * Clinical Centers - Filter for partial text matches
     */
    'clinicalCenters.contains'?: string;
    /**
     * Clinical Centers - Filter for partial text mismatches
     */
    'clinicalCenters.not.contains'?: string;
    /**
     * Clinical Centers - Filter for entries starting with the text
     */
    'clinicalCenters.beginsWith'?: string;
    /**
     * Clinical Centers - Filter for entries not starting with the text
     */
    'clinicalCenters.not.beginsWith'?: string;
    /**
     * Clinical Centers - Filter for entries ending with the text
     */
    'clinicalCenters.endsWith'?: string;
    /**
     * Clinical Centers - Filter for entries not ending with the text
     */
    'clinicalCenters.not.endsWith'?: string;
    /**
     * Clinical Centers - Filter for entries where at least one reference matches the query
     */
    'clinicalCenters.anyOf'?: Array<string>;
    /**
     * Clinical Centers - Filter for entries where at least one reference mismatches the query
     */
    'clinicalCenters.not.anyOf'?: Array<string>;
    /**
     * Project title - Filter for full text matches
     */
    title?: string;
    /**
     * Project title - Filter for full text mismatches
     */
    'title.not'?: string;
    /**
     * Project title - Filter for partial text matches
     */
    'title.contains'?: string;
    /**
     * Project title - Filter for partial text mismatches
     */
    'title.not.contains'?: string;
    /**
     * Project title - Filter for entries starting with the text
     */
    'title.beginsWith'?: string;
    /**
     * Project title - Filter for entries not starting with the text
     */
    'title.not.beginsWith'?: string;
    /**
     * Project title - Filter for entries ending with the text
     */
    'title.endsWith'?: string;
    /**
     * Project title - Filter for entries not ending with the text
     */
    'title.not.endsWith'?: string;
    /**
     * Project title - Filter for entries where at least one reference matches the query
     */
    'title.anyOf'?: Array<string>;
    /**
     * Project title - Filter for entries where at least one reference mismatches the query
     */
    'title.not.anyOf'?: Array<string>;
    /**
     * Project description - Filter for full text matches
     */
    summary?: string;
    /**
     * Project description - Filter for full text mismatches
     */
    'summary.not'?: string;
    /**
     * Project description - Filter for partial text matches
     */
    'summary.contains'?: string;
    /**
     * Project description - Filter for partial text mismatches
     */
    'summary.not.contains'?: string;
    /**
     * Project description - Filter for entries starting with the text
     */
    'summary.beginsWith'?: string;
    /**
     * Project description - Filter for entries not starting with the text
     */
    'summary.not.beginsWith'?: string;
    /**
     * Project description - Filter for entries ending with the text
     */
    'summary.endsWith'?: string;
    /**
     * Project description - Filter for entries not ending with the text
     */
    'summary.not.endsWith'?: string;
    /**
     * Project description - Filter for entries where at least one reference matches the query
     */
    'summary.anyOf'?: Array<string>;
    /**
     * Project description - Filter for entries where at least one reference mismatches the query
     */
    'summary.not.anyOf'?: Array<string>;
    /**
     * Ethics approval number - Filter for full text matches
     */
    ethicsApprovalNumber?: string;
    /**
     * Ethics approval number - Filter for full text mismatches
     */
    'ethicsApprovalNumber.not'?: string;
    /**
     * Ethics approval number - Filter for partial text matches
     */
    'ethicsApprovalNumber.contains'?: string;
    /**
     * Ethics approval number - Filter for partial text mismatches
     */
    'ethicsApprovalNumber.not.contains'?: string;
    /**
     * Ethics approval number - Filter for entries starting with the text
     */
    'ethicsApprovalNumber.beginsWith'?: string;
    /**
     * Ethics approval number - Filter for entries not starting with the text
     */
    'ethicsApprovalNumber.not.beginsWith'?: string;
    /**
     * Ethics approval number - Filter for entries ending with the text
     */
    'ethicsApprovalNumber.endsWith'?: string;
    /**
     * Ethics approval number - Filter for entries not ending with the text
     */
    'ethicsApprovalNumber.not.endsWith'?: string;
    /**
     * Ethics approval number - Filter for entries where at least one reference matches the query
     */
    'ethicsApprovalNumber.anyOf'?: Array<string>;
    /**
     * Ethics approval number - Filter for entries where at least one reference mismatches the query
     */
    'ethicsApprovalNumber.not.anyOf'?: Array<string>;
    status?: ProjectFilters.StatusEnum;
    'status.not'?: ProjectFilters.StatusNotEnum;
    /**
     * Project status - (\'Filter for excluding a subset of value choices\',)
     */
    'status.anyOf'?: Array<ProjectFilters.StatusAnyOfEnum>;
    /**
     * Project members - Filter for username matches
     */
    'members.username'?: string;
    /**
     * Project members - Filter for username mismatches
     */
    'members.username.not'?: string;
    /**
     * Project members - Filter for entries where at least one reference mismatches the query
     */
    'members.username.anyOf'?: Array<string>;
    /**
     * Project members - Filter for entries where at least one reference matches the query
     */
    'members.username.not.anyOf'?: string;
}
export namespace ProjectFilters {
    export type StatusEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusEnum = {
        Planned: 'planned' as StatusEnum,
        Ongoing: 'ongoing' as StatusEnum,
        Completed: 'completed' as StatusEnum,
        Aborted: 'aborted' as StatusEnum
    };
    export type StatusNotEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusNotEnum = {
        Planned: 'planned' as StatusNotEnum,
        Ongoing: 'ongoing' as StatusNotEnum,
        Completed: 'completed' as StatusNotEnum,
        Aborted: 'aborted' as StatusNotEnum
    };
    export type StatusAnyOfEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusAnyOfEnum = {
        Planned: 'planned' as StatusAnyOfEnum,
        Ongoing: 'ongoing' as StatusAnyOfEnum,
        Completed: 'completed' as StatusAnyOfEnum,
        Aborted: 'aborted' as StatusAnyOfEnum
    };
}


