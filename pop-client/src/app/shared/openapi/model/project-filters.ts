/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ProjectFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    'leader.role'?: ProjectFilters.LeaderRoleEnum;
    'leader.role.not'?: ProjectFilters.LeaderRoleNotEnum;
    /**
     * None - (\'Filter for excluding a subset of value choices\',)
     */
    'leader.role.anyOf'?: Array<ProjectFilters.LeaderRoleAnyOfEnum>;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canViewCases'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canViewProjects'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canViewCohorts'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canViewUsers'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canViewDatasets'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canImportData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canManageCases'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canManageCohorts'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canManageDatasets'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canAnalyzeData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canExportData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canManageProjects'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canAccessSensitiveData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canAuditLogs'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.canManageUsers'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.isSystemAdmin'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'leader.isProvided'?: boolean;
    /**
     * None - Filter for entries without a value
     */
    'leader.provider.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'leader.provider.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'leader.provider'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'leader.provider.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'leader.provider.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'leader.provider.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'leader.provider.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'leader.provider.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'leader.provider.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'leader.provider.not.endsWith'?: string;
    /**
     * Last Login - Filter for entries without a value
     */
    'leader.lastLogin.not.exists'?: boolean;
    /**
     * Last Login - Filter for entries with a value
     */
    'leader.lastLogin.exists'?: boolean;
    /**
     * Last Login - Filter for entries with dates before the specified value
     */
    'leader.lastLogin.before'?: string;
    /**
     * Last Login - Filter for entries with dates after the specified value
     */
    'leader.lastLogin.after'?: string;
    /**
     * Last Login - Filter for entries with dates on or before the specified value
     */
    'leader.lastLogin.onOrBefore'?: string;
    /**
     * Last Login - Filter for entries with dates on or after the specified value
     */
    'leader.lastLogin.onOrAfter'?: string;
    /**
     * Last Login - Filter for entries with dates exactly matching the specified value
     */
    'leader.lastLogin.on'?: string;
    /**
     * Last Login - Filter for entries with dates not matching the specified value
     */
    'leader.lastLogin.not.on'?: string;
    /**
     * Last Login - Filter for entries with dates between two specified values (inclusive)
     */
    'leader.lastLogin.between'?: Array<any>;
    /**
     * Last Login - Filter for entries with dates not between two specified values (inclusive)
     */
    'leader.lastLogin.not.between'?: Array<any>;
    /**
     * Username - Filter for full text matches
     */
    'leader.username'?: string;
    /**
     * Username - Filter for full text mismatches
     */
    'leader.username.not'?: string;
    /**
     * Username - Filter for partial text matches
     */
    'leader.username.contains'?: string;
    /**
     * Username - Filter for partial text mismatches
     */
    'leader.username.not.contains'?: string;
    /**
     * Username - Filter for entries starting with the text
     */
    'leader.username.beginsWith'?: string;
    /**
     * Username - Filter for entries not starting with the text
     */
    'leader.username.not.beginsWith'?: string;
    /**
     * Username - Filter for entries ending with the text
     */
    'leader.username.endsWith'?: string;
    /**
     * Username - Filter for entries not ending with the text
     */
    'leader.username.not.endsWith'?: string;
    /**
     * First Name - Filter for entries without a value
     */
    'leader.firstName.not.exists'?: boolean;
    /**
     * First Name - Filter for entries with a value
     */
    'leader.firstName.exists'?: boolean;
    /**
     * First Name - Filter for full text matches
     */
    'leader.firstName'?: string;
    /**
     * First Name - Filter for full text mismatches
     */
    'leader.firstName.not'?: string;
    /**
     * First Name - Filter for partial text matches
     */
    'leader.firstName.contains'?: string;
    /**
     * First Name - Filter for partial text mismatches
     */
    'leader.firstName.not.contains'?: string;
    /**
     * First Name - Filter for entries starting with the text
     */
    'leader.firstName.beginsWith'?: string;
    /**
     * First Name - Filter for entries not starting with the text
     */
    'leader.firstName.not.beginsWith'?: string;
    /**
     * First Name - Filter for entries ending with the text
     */
    'leader.firstName.endsWith'?: string;
    /**
     * First Name - Filter for entries not ending with the text
     */
    'leader.firstName.not.endsWith'?: string;
    /**
     * Last Name - Filter for entries without a value
     */
    'leader.lastName.not.exists'?: boolean;
    /**
     * Last Name - Filter for entries with a value
     */
    'leader.lastName.exists'?: boolean;
    /**
     * Last Name - Filter for full text matches
     */
    'leader.lastName'?: string;
    /**
     * Last Name - Filter for full text mismatches
     */
    'leader.lastName.not'?: string;
    /**
     * Last Name - Filter for partial text matches
     */
    'leader.lastName.contains'?: string;
    /**
     * Last Name - Filter for partial text mismatches
     */
    'leader.lastName.not.contains'?: string;
    /**
     * Last Name - Filter for entries starting with the text
     */
    'leader.lastName.beginsWith'?: string;
    /**
     * Last Name - Filter for entries not starting with the text
     */
    'leader.lastName.not.beginsWith'?: string;
    /**
     * Last Name - Filter for entries ending with the text
     */
    'leader.lastName.endsWith'?: string;
    /**
     * Last Name - Filter for entries not ending with the text
     */
    'leader.lastName.not.endsWith'?: string;
    /**
     * Email Address - Filter for entries without a value
     */
    'leader.email.not.exists'?: boolean;
    /**
     * Email Address - Filter for entries with a value
     */
    'leader.email.exists'?: boolean;
    /**
     * Email Address - Filter for full text matches
     */
    'leader.email'?: string;
    /**
     * Email Address - Filter for full text mismatches
     */
    'leader.email.not'?: string;
    /**
     * Email Address - Filter for partial text matches
     */
    'leader.email.contains'?: string;
    /**
     * Email Address - Filter for partial text mismatches
     */
    'leader.email.not.contains'?: string;
    /**
     * Email Address - Filter for entries starting with the text
     */
    'leader.email.beginsWith'?: string;
    /**
     * Email Address - Filter for entries not starting with the text
     */
    'leader.email.not.beginsWith'?: string;
    /**
     * Email Address - Filter for entries ending with the text
     */
    'leader.email.endsWith'?: string;
    /**
     * Email Address - Filter for entries not ending with the text
     */
    'leader.email.not.endsWith'?: string;
    /**
     * Active - (\'Filter for yes/no statement\',)
     */
    'leader.isActive'?: boolean;
    /**
     * Id - Filter for full text matches
     */
    'leader.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'leader.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'leader.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'leader.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'leader.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'leader.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'leader.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'leader.id.not.endsWith'?: string;
    /**
     * Title - Filter for entries without a value
     */
    'leader.title.not.exists'?: boolean;
    /**
     * Title - Filter for entries with a value
     */
    'leader.title.exists'?: boolean;
    /**
     * Title - Filter for full text matches
     */
    'leader.title'?: string;
    /**
     * Title - Filter for full text mismatches
     */
    'leader.title.not'?: string;
    /**
     * Title - Filter for partial text matches
     */
    'leader.title.contains'?: string;
    /**
     * Title - Filter for partial text mismatches
     */
    'leader.title.not.contains'?: string;
    /**
     * Title - Filter for entries starting with the text
     */
    'leader.title.beginsWith'?: string;
    /**
     * Title - Filter for entries not starting with the text
     */
    'leader.title.not.beginsWith'?: string;
    /**
     * Title - Filter for entries ending with the text
     */
    'leader.title.endsWith'?: string;
    /**
     * Title - Filter for entries not ending with the text
     */
    'leader.title.not.endsWith'?: string;
    /**
     * Organization - Filter for entries without a value
     */
    'leader.organization.not.exists'?: boolean;
    /**
     * Organization - Filter for entries with a value
     */
    'leader.organization.exists'?: boolean;
    /**
     * Organization - Filter for full text matches
     */
    'leader.organization'?: string;
    /**
     * Organization - Filter for full text mismatches
     */
    'leader.organization.not'?: string;
    /**
     * Organization - Filter for partial text matches
     */
    'leader.organization.contains'?: string;
    /**
     * Organization - Filter for partial text mismatches
     */
    'leader.organization.not.contains'?: string;
    /**
     * Organization - Filter for entries starting with the text
     */
    'leader.organization.beginsWith'?: string;
    /**
     * Organization - Filter for entries not starting with the text
     */
    'leader.organization.not.beginsWith'?: string;
    /**
     * Organization - Filter for entries ending with the text
     */
    'leader.organization.endsWith'?: string;
    /**
     * Organization - Filter for entries not ending with the text
     */
    'leader.organization.not.endsWith'?: string;
    /**
     * Department - Filter for entries without a value
     */
    'leader.department.not.exists'?: boolean;
    /**
     * Department - Filter for entries with a value
     */
    'leader.department.exists'?: boolean;
    /**
     * Department - Filter for full text matches
     */
    'leader.department'?: string;
    /**
     * Department - Filter for full text mismatches
     */
    'leader.department.not'?: string;
    /**
     * Department - Filter for partial text matches
     */
    'leader.department.contains'?: string;
    /**
     * Department - Filter for partial text mismatches
     */
    'leader.department.not.contains'?: string;
    /**
     * Department - Filter for entries starting with the text
     */
    'leader.department.beginsWith'?: string;
    /**
     * Department - Filter for entries not starting with the text
     */
    'leader.department.not.beginsWith'?: string;
    /**
     * Department - Filter for entries ending with the text
     */
    'leader.department.endsWith'?: string;
    /**
     * Department - Filter for entries not ending with the text
     */
    'leader.department.not.endsWith'?: string;
    /**
     * Access level - Filter for entries with values less than the specified value
     */
    'leader.accessLevel.lessThan'?: number;
    /**
     * Access level - Filter for entries with values less than or equal to the specified value
     */
    'leader.accessLevel.lessThanOrEqual'?: number;
    /**
     * Access level - Filter for entries with values greater than the specified value
     */
    'leader.accessLevel.greaterThan'?: number;
    /**
     * Access level - Filter for entries with values greater than or equal to the specified value
     */
    'leader.accessLevel.greaterThanOrEqual'?: number;
    /**
     * Access level - Filter for entries with values exactly equal to the specified value
     */
    'leader.accessLevel.equal'?: number;
    /**
     * Access level - Filter for entries with values not equal to the specified value
     */
    'leader.accessLevel.not.equal'?: number;
    /**
     * Access level - Filter for entries with values between two specified values (inclusive)
     */
    'leader.accessLevel.between'?: Array<any>;
    /**
     * Access level - Filter for entries with values between two specified values (inclusive)
     */
    'leader.accessLevel.not.between'?: Array<any>;
    /**
     * Clinical Centers - Filter for full text matches
     */
    clinicalCenters?: string;
    /**
     * Clinical Centers - Filter for full text mismatches
     */
    'clinicalCenters.not'?: string;
    /**
     * Clinical Centers - Filter for partial text matches
     */
    'clinicalCenters.contains'?: string;
    /**
     * Clinical Centers - Filter for partial text mismatches
     */
    'clinicalCenters.not.contains'?: string;
    /**
     * Clinical Centers - Filter for entries starting with the text
     */
    'clinicalCenters.beginsWith'?: string;
    /**
     * Clinical Centers - Filter for entries not starting with the text
     */
    'clinicalCenters.not.beginsWith'?: string;
    /**
     * Clinical Centers - Filter for entries ending with the text
     */
    'clinicalCenters.endsWith'?: string;
    /**
     * Clinical Centers - Filter for entries not ending with the text
     */
    'clinicalCenters.not.endsWith'?: string;
    /**
     * Project title - Filter for full text matches
     */
    title?: string;
    /**
     * Project title - Filter for full text mismatches
     */
    'title.not'?: string;
    /**
     * Project title - Filter for partial text matches
     */
    'title.contains'?: string;
    /**
     * Project title - Filter for partial text mismatches
     */
    'title.not.contains'?: string;
    /**
     * Project title - Filter for entries starting with the text
     */
    'title.beginsWith'?: string;
    /**
     * Project title - Filter for entries not starting with the text
     */
    'title.not.beginsWith'?: string;
    /**
     * Project title - Filter for entries ending with the text
     */
    'title.endsWith'?: string;
    /**
     * Project title - Filter for entries not ending with the text
     */
    'title.not.endsWith'?: string;
    /**
     * Project description - Filter for full text matches
     */
    summary?: string;
    /**
     * Project description - Filter for full text mismatches
     */
    'summary.not'?: string;
    /**
     * Project description - Filter for partial text matches
     */
    'summary.contains'?: string;
    /**
     * Project description - Filter for partial text mismatches
     */
    'summary.not.contains'?: string;
    /**
     * Project description - Filter for entries starting with the text
     */
    'summary.beginsWith'?: string;
    /**
     * Project description - Filter for entries not starting with the text
     */
    'summary.not.beginsWith'?: string;
    /**
     * Project description - Filter for entries ending with the text
     */
    'summary.endsWith'?: string;
    /**
     * Project description - Filter for entries not ending with the text
     */
    'summary.not.endsWith'?: string;
    /**
     * Ethics approval number - Filter for full text matches
     */
    ethicsApprovalNumber?: string;
    /**
     * Ethics approval number - Filter for full text mismatches
     */
    'ethicsApprovalNumber.not'?: string;
    /**
     * Ethics approval number - Filter for partial text matches
     */
    'ethicsApprovalNumber.contains'?: string;
    /**
     * Ethics approval number - Filter for partial text mismatches
     */
    'ethicsApprovalNumber.not.contains'?: string;
    /**
     * Ethics approval number - Filter for entries starting with the text
     */
    'ethicsApprovalNumber.beginsWith'?: string;
    /**
     * Ethics approval number - Filter for entries not starting with the text
     */
    'ethicsApprovalNumber.not.beginsWith'?: string;
    /**
     * Ethics approval number - Filter for entries ending with the text
     */
    'ethicsApprovalNumber.endsWith'?: string;
    /**
     * Ethics approval number - Filter for entries not ending with the text
     */
    'ethicsApprovalNumber.not.endsWith'?: string;
    status?: ProjectFilters.StatusEnum;
    'status.not'?: ProjectFilters.StatusNotEnum;
    /**
     * Project status - (\'Filter for excluding a subset of value choices\',)
     */
    'status.anyOf'?: Array<ProjectFilters.StatusAnyOfEnum>;
    'members.role'?: ProjectFilters.MembersRoleEnum;
    'members.role.not'?: ProjectFilters.MembersRoleNotEnum;
    /**
     * None - (\'Filter for excluding a subset of value choices\',)
     */
    'members.role.anyOf'?: Array<ProjectFilters.MembersRoleAnyOfEnum>;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canViewCases'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canViewProjects'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canViewCohorts'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canViewUsers'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canViewDatasets'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canImportData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canManageCases'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canManageCohorts'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canManageDatasets'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canAnalyzeData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canExportData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canManageProjects'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canAccessSensitiveData'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canAuditLogs'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.canManageUsers'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.isSystemAdmin'?: boolean;
    /**
     * None - (\'Filter for yes/no statement\',)
     */
    'members.isProvided'?: boolean;
    /**
     * None - Filter for entries without a value
     */
    'members.provider.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'members.provider.exists'?: boolean;
    /**
     * None - Filter for full text matches
     */
    'members.provider'?: string;
    /**
     * None - Filter for full text mismatches
     */
    'members.provider.not'?: string;
    /**
     * None - Filter for partial text matches
     */
    'members.provider.contains'?: string;
    /**
     * None - Filter for partial text mismatches
     */
    'members.provider.not.contains'?: string;
    /**
     * None - Filter for entries starting with the text
     */
    'members.provider.beginsWith'?: string;
    /**
     * None - Filter for entries not starting with the text
     */
    'members.provider.not.beginsWith'?: string;
    /**
     * None - Filter for entries ending with the text
     */
    'members.provider.endsWith'?: string;
    /**
     * None - Filter for entries not ending with the text
     */
    'members.provider.not.endsWith'?: string;
    /**
     * Last Login - Filter for entries without a value
     */
    'members.lastLogin.not.exists'?: boolean;
    /**
     * Last Login - Filter for entries with a value
     */
    'members.lastLogin.exists'?: boolean;
    /**
     * Last Login - Filter for entries with dates before the specified value
     */
    'members.lastLogin.before'?: string;
    /**
     * Last Login - Filter for entries with dates after the specified value
     */
    'members.lastLogin.after'?: string;
    /**
     * Last Login - Filter for entries with dates on or before the specified value
     */
    'members.lastLogin.onOrBefore'?: string;
    /**
     * Last Login - Filter for entries with dates on or after the specified value
     */
    'members.lastLogin.onOrAfter'?: string;
    /**
     * Last Login - Filter for entries with dates exactly matching the specified value
     */
    'members.lastLogin.on'?: string;
    /**
     * Last Login - Filter for entries with dates not matching the specified value
     */
    'members.lastLogin.not.on'?: string;
    /**
     * Last Login - Filter for entries with dates between two specified values (inclusive)
     */
    'members.lastLogin.between'?: Array<any>;
    /**
     * Last Login - Filter for entries with dates not between two specified values (inclusive)
     */
    'members.lastLogin.not.between'?: Array<any>;
    /**
     * Username - Filter for full text matches
     */
    'members.username'?: string;
    /**
     * Username - Filter for full text mismatches
     */
    'members.username.not'?: string;
    /**
     * Username - Filter for partial text matches
     */
    'members.username.contains'?: string;
    /**
     * Username - Filter for partial text mismatches
     */
    'members.username.not.contains'?: string;
    /**
     * Username - Filter for entries starting with the text
     */
    'members.username.beginsWith'?: string;
    /**
     * Username - Filter for entries not starting with the text
     */
    'members.username.not.beginsWith'?: string;
    /**
     * Username - Filter for entries ending with the text
     */
    'members.username.endsWith'?: string;
    /**
     * Username - Filter for entries not ending with the text
     */
    'members.username.not.endsWith'?: string;
    /**
     * First Name - Filter for entries without a value
     */
    'members.firstName.not.exists'?: boolean;
    /**
     * First Name - Filter for entries with a value
     */
    'members.firstName.exists'?: boolean;
    /**
     * First Name - Filter for full text matches
     */
    'members.firstName'?: string;
    /**
     * First Name - Filter for full text mismatches
     */
    'members.firstName.not'?: string;
    /**
     * First Name - Filter for partial text matches
     */
    'members.firstName.contains'?: string;
    /**
     * First Name - Filter for partial text mismatches
     */
    'members.firstName.not.contains'?: string;
    /**
     * First Name - Filter for entries starting with the text
     */
    'members.firstName.beginsWith'?: string;
    /**
     * First Name - Filter for entries not starting with the text
     */
    'members.firstName.not.beginsWith'?: string;
    /**
     * First Name - Filter for entries ending with the text
     */
    'members.firstName.endsWith'?: string;
    /**
     * First Name - Filter for entries not ending with the text
     */
    'members.firstName.not.endsWith'?: string;
    /**
     * Last Name - Filter for entries without a value
     */
    'members.lastName.not.exists'?: boolean;
    /**
     * Last Name - Filter for entries with a value
     */
    'members.lastName.exists'?: boolean;
    /**
     * Last Name - Filter for full text matches
     */
    'members.lastName'?: string;
    /**
     * Last Name - Filter for full text mismatches
     */
    'members.lastName.not'?: string;
    /**
     * Last Name - Filter for partial text matches
     */
    'members.lastName.contains'?: string;
    /**
     * Last Name - Filter for partial text mismatches
     */
    'members.lastName.not.contains'?: string;
    /**
     * Last Name - Filter for entries starting with the text
     */
    'members.lastName.beginsWith'?: string;
    /**
     * Last Name - Filter for entries not starting with the text
     */
    'members.lastName.not.beginsWith'?: string;
    /**
     * Last Name - Filter for entries ending with the text
     */
    'members.lastName.endsWith'?: string;
    /**
     * Last Name - Filter for entries not ending with the text
     */
    'members.lastName.not.endsWith'?: string;
    /**
     * Email Address - Filter for entries without a value
     */
    'members.email.not.exists'?: boolean;
    /**
     * Email Address - Filter for entries with a value
     */
    'members.email.exists'?: boolean;
    /**
     * Email Address - Filter for full text matches
     */
    'members.email'?: string;
    /**
     * Email Address - Filter for full text mismatches
     */
    'members.email.not'?: string;
    /**
     * Email Address - Filter for partial text matches
     */
    'members.email.contains'?: string;
    /**
     * Email Address - Filter for partial text mismatches
     */
    'members.email.not.contains'?: string;
    /**
     * Email Address - Filter for entries starting with the text
     */
    'members.email.beginsWith'?: string;
    /**
     * Email Address - Filter for entries not starting with the text
     */
    'members.email.not.beginsWith'?: string;
    /**
     * Email Address - Filter for entries ending with the text
     */
    'members.email.endsWith'?: string;
    /**
     * Email Address - Filter for entries not ending with the text
     */
    'members.email.not.endsWith'?: string;
    /**
     * Active - (\'Filter for yes/no statement\',)
     */
    'members.isActive'?: boolean;
    /**
     * Id - Filter for full text matches
     */
    'members.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'members.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'members.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'members.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'members.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'members.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'members.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'members.id.not.endsWith'?: string;
    /**
     * Title - Filter for entries without a value
     */
    'members.title.not.exists'?: boolean;
    /**
     * Title - Filter for entries with a value
     */
    'members.title.exists'?: boolean;
    /**
     * Title - Filter for full text matches
     */
    'members.title'?: string;
    /**
     * Title - Filter for full text mismatches
     */
    'members.title.not'?: string;
    /**
     * Title - Filter for partial text matches
     */
    'members.title.contains'?: string;
    /**
     * Title - Filter for partial text mismatches
     */
    'members.title.not.contains'?: string;
    /**
     * Title - Filter for entries starting with the text
     */
    'members.title.beginsWith'?: string;
    /**
     * Title - Filter for entries not starting with the text
     */
    'members.title.not.beginsWith'?: string;
    /**
     * Title - Filter for entries ending with the text
     */
    'members.title.endsWith'?: string;
    /**
     * Title - Filter for entries not ending with the text
     */
    'members.title.not.endsWith'?: string;
    /**
     * Organization - Filter for entries without a value
     */
    'members.organization.not.exists'?: boolean;
    /**
     * Organization - Filter for entries with a value
     */
    'members.organization.exists'?: boolean;
    /**
     * Organization - Filter for full text matches
     */
    'members.organization'?: string;
    /**
     * Organization - Filter for full text mismatches
     */
    'members.organization.not'?: string;
    /**
     * Organization - Filter for partial text matches
     */
    'members.organization.contains'?: string;
    /**
     * Organization - Filter for partial text mismatches
     */
    'members.organization.not.contains'?: string;
    /**
     * Organization - Filter for entries starting with the text
     */
    'members.organization.beginsWith'?: string;
    /**
     * Organization - Filter for entries not starting with the text
     */
    'members.organization.not.beginsWith'?: string;
    /**
     * Organization - Filter for entries ending with the text
     */
    'members.organization.endsWith'?: string;
    /**
     * Organization - Filter for entries not ending with the text
     */
    'members.organization.not.endsWith'?: string;
    /**
     * Department - Filter for entries without a value
     */
    'members.department.not.exists'?: boolean;
    /**
     * Department - Filter for entries with a value
     */
    'members.department.exists'?: boolean;
    /**
     * Department - Filter for full text matches
     */
    'members.department'?: string;
    /**
     * Department - Filter for full text mismatches
     */
    'members.department.not'?: string;
    /**
     * Department - Filter for partial text matches
     */
    'members.department.contains'?: string;
    /**
     * Department - Filter for partial text mismatches
     */
    'members.department.not.contains'?: string;
    /**
     * Department - Filter for entries starting with the text
     */
    'members.department.beginsWith'?: string;
    /**
     * Department - Filter for entries not starting with the text
     */
    'members.department.not.beginsWith'?: string;
    /**
     * Department - Filter for entries ending with the text
     */
    'members.department.endsWith'?: string;
    /**
     * Department - Filter for entries not ending with the text
     */
    'members.department.not.endsWith'?: string;
    /**
     * Access level - Filter for entries with values less than the specified value
     */
    'members.accessLevel.lessThan'?: number;
    /**
     * Access level - Filter for entries with values less than or equal to the specified value
     */
    'members.accessLevel.lessThanOrEqual'?: number;
    /**
     * Access level - Filter for entries with values greater than the specified value
     */
    'members.accessLevel.greaterThan'?: number;
    /**
     * Access level - Filter for entries with values greater than or equal to the specified value
     */
    'members.accessLevel.greaterThanOrEqual'?: number;
    /**
     * Access level - Filter for entries with values exactly equal to the specified value
     */
    'members.accessLevel.equal'?: number;
    /**
     * Access level - Filter for entries with values not equal to the specified value
     */
    'members.accessLevel.not.equal'?: number;
    /**
     * Access level - Filter for entries with values between two specified values (inclusive)
     */
    'members.accessLevel.between'?: Array<any>;
    /**
     * Access level - Filter for entries with values between two specified values (inclusive)
     */
    'members.accessLevel.not.between'?: Array<any>;
}
export namespace ProjectFilters {
    export type LeaderRoleEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const LeaderRoleEnum = {
        External: 'External' as LeaderRoleEnum,
        Viewer: 'Viewer' as LeaderRoleEnum,
        DataContributor: 'Data Contributor' as LeaderRoleEnum,
        DataAnalyst: 'Data Analyst' as LeaderRoleEnum,
        ProjectManager: 'Project Manager' as LeaderRoleEnum,
        PlatformManager: 'Platform Manager' as LeaderRoleEnum,
        SystemAdministrator: 'System Administrator' as LeaderRoleEnum
    };
    export type LeaderRoleNotEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const LeaderRoleNotEnum = {
        External: 'External' as LeaderRoleNotEnum,
        Viewer: 'Viewer' as LeaderRoleNotEnum,
        DataContributor: 'Data Contributor' as LeaderRoleNotEnum,
        DataAnalyst: 'Data Analyst' as LeaderRoleNotEnum,
        ProjectManager: 'Project Manager' as LeaderRoleNotEnum,
        PlatformManager: 'Platform Manager' as LeaderRoleNotEnum,
        SystemAdministrator: 'System Administrator' as LeaderRoleNotEnum
    };
    export type LeaderRoleAnyOfEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const LeaderRoleAnyOfEnum = {
        External: 'External' as LeaderRoleAnyOfEnum,
        Viewer: 'Viewer' as LeaderRoleAnyOfEnum,
        DataContributor: 'Data Contributor' as LeaderRoleAnyOfEnum,
        DataAnalyst: 'Data Analyst' as LeaderRoleAnyOfEnum,
        ProjectManager: 'Project Manager' as LeaderRoleAnyOfEnum,
        PlatformManager: 'Platform Manager' as LeaderRoleAnyOfEnum,
        SystemAdministrator: 'System Administrator' as LeaderRoleAnyOfEnum
    };
    export type StatusEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusEnum = {
        Planned: 'planned' as StatusEnum,
        Ongoing: 'ongoing' as StatusEnum,
        Completed: 'completed' as StatusEnum,
        Aborted: 'aborted' as StatusEnum
    };
    export type StatusNotEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusNotEnum = {
        Planned: 'planned' as StatusNotEnum,
        Ongoing: 'ongoing' as StatusNotEnum,
        Completed: 'completed' as StatusNotEnum,
        Aborted: 'aborted' as StatusNotEnum
    };
    export type StatusAnyOfEnum = 'planned' | 'ongoing' | 'completed' | 'aborted';
    export const StatusAnyOfEnum = {
        Planned: 'planned' as StatusAnyOfEnum,
        Ongoing: 'ongoing' as StatusAnyOfEnum,
        Completed: 'completed' as StatusAnyOfEnum,
        Aborted: 'aborted' as StatusAnyOfEnum
    };
    export type MembersRoleEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const MembersRoleEnum = {
        External: 'External' as MembersRoleEnum,
        Viewer: 'Viewer' as MembersRoleEnum,
        DataContributor: 'Data Contributor' as MembersRoleEnum,
        DataAnalyst: 'Data Analyst' as MembersRoleEnum,
        ProjectManager: 'Project Manager' as MembersRoleEnum,
        PlatformManager: 'Platform Manager' as MembersRoleEnum,
        SystemAdministrator: 'System Administrator' as MembersRoleEnum
    };
    export type MembersRoleNotEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const MembersRoleNotEnum = {
        External: 'External' as MembersRoleNotEnum,
        Viewer: 'Viewer' as MembersRoleNotEnum,
        DataContributor: 'Data Contributor' as MembersRoleNotEnum,
        DataAnalyst: 'Data Analyst' as MembersRoleNotEnum,
        ProjectManager: 'Project Manager' as MembersRoleNotEnum,
        PlatformManager: 'Platform Manager' as MembersRoleNotEnum,
        SystemAdministrator: 'System Administrator' as MembersRoleNotEnum
    };
    export type MembersRoleAnyOfEnum = 'External' | 'Viewer' | 'Data Contributor' | 'Data Analyst' | 'Project Manager' | 'Platform Manager' | 'System Administrator';
    export const MembersRoleAnyOfEnum = {
        External: 'External' as MembersRoleAnyOfEnum,
        Viewer: 'Viewer' as MembersRoleAnyOfEnum,
        DataContributor: 'Data Contributor' as MembersRoleAnyOfEnum,
        DataAnalyst: 'Data Analyst' as MembersRoleAnyOfEnum,
        ProjectManager: 'Project Manager' as MembersRoleAnyOfEnum,
        PlatformManager: 'Platform Manager' as MembersRoleAnyOfEnum,
        SystemAdministrator: 'System Administrator' as MembersRoleAnyOfEnum
    };
}


