/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ComorbiditiesAssessmentFilters { 
    /**
     * None - Filter for entries without a value
     */
    'index.not.exists'?: boolean;
    /**
     * None - Filter for entries with a value
     */
    'index.exists'?: boolean;
    /**
     * None - Filter for entries with values less than the specified value
     */
    'index.lessThan'?: number;
    /**
     * None - Filter for entries with values less than or equal to the specified value
     */
    'index.lessThanOrEqual'?: number;
    /**
     * None - Filter for entries with values greater than the specified value
     */
    'index.greaterThan'?: number;
    /**
     * None - Filter for entries with values greater than or equal to the specified value
     */
    'index.greaterThanOrEqual'?: number;
    /**
     * None - Filter for entries with values exactly equal to the specified value
     */
    'index.equal'?: number;
    /**
     * None - Filter for entries with values not equal to the specified value
     */
    'index.not.equal'?: number;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'index.between'?: Array<any>;
    /**
     * None - Filter for entries with values between two specified values (inclusive)
     */
    'index.not.between'?: Array<any>;
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Assessment date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Assessment date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Assessment date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Assessment date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Assessment date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Assessment date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Assessment date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Assessment date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Index neoplastic entity - Filter for reference matches
     */
    indexConditionId?: string;
    /**
     * Index neoplastic entity - Filter for reference mismatches
     */
    'indexConditionId.not'?: string;
    /**
     * Index neoplastic entity - Filter for partial text matches
     */
    'indexConditionId.contains'?: string;
    /**
     * Index neoplastic entity - Filter for partial text mismatches
     */
    'indexConditionId.not.contains'?: string;
    /**
     * Index neoplastic entity - Filter for entries starting with the text
     */
    'indexConditionId.beginsWith'?: string;
    /**
     * Index neoplastic entity - Filter for entries not starting with the text
     */
    'indexConditionId.not.beginsWith'?: string;
    /**
     * Index neoplastic entity - Filter for entries ending with the text
     */
    'indexConditionId.endsWith'?: string;
    /**
     * Index neoplastic entity - Filter for entries not ending with the text
     */
    'indexConditionId.not.endsWith'?: string;
    /**
     * Panel - Filter for entries without a value
     */
    'panel.not.exists'?: boolean;
    /**
     * Panel - Filter for entries with a value
     */
    'panel.exists'?: boolean;
    panel?: ComorbiditiesAssessmentFilters.PanelEnum;
    'panel.not'?: ComorbiditiesAssessmentFilters.PanelNotEnum;
    /**
     * Panel - (\'Filter for excluding a subset of value choices\',)
     */
    'panel.anyOf'?: Array<ComorbiditiesAssessmentFilters.PanelAnyOfEnum>;
    /**
     * Present comorbid conditions - Filter for entries without a value
     */
    'presentConditions.not.exists'?: boolean;
    /**
     * Present comorbid conditions - Filter for entries with a value
     */
    'presentConditions.exists'?: boolean;
    /**
     * Present comorbid conditions - Filter for a matching concept code
     */
    presentConditions?: string;
    /**
     * Present comorbid conditions - Filter for a mismatching concept code
     */
    'presentConditions.not'?: string;
    /**
     * Present comorbid conditions - Filter for a matching set of concept codes
     */
    'presentConditions.anyOf'?: Array<string>;
    /**
     * Present comorbid conditions - Filter for a mismmatching set of concept codes
     */
    'presentConditions.not.anyOf'?: Array<string>;
    /**
     * Present comorbid conditions - Filter for all child concepts of a given concepts code
     */
    'presentConditions.descendantsOf'?: string;
    /**
     * Present comorbid conditions - Filter for entries matching all of the concepts
     */
    'presentConditions.allOf'?: Array<string>;
    /**
     * Present comorbid conditions - Filter for entries mismatching all of the concepts
     */
    'presentConditions.not.allOf'?: Array<string>;
    /**
     * Absent comorbid conditions - Filter for entries without a value
     */
    'absentConditions.not.exists'?: boolean;
    /**
     * Absent comorbid conditions - Filter for entries with a value
     */
    'absentConditions.exists'?: boolean;
    /**
     * Absent comorbid conditions - Filter for a matching concept code
     */
    absentConditions?: string;
    /**
     * Absent comorbid conditions - Filter for a mismatching concept code
     */
    'absentConditions.not'?: string;
    /**
     * Absent comorbid conditions - Filter for a matching set of concept codes
     */
    'absentConditions.anyOf'?: Array<string>;
    /**
     * Absent comorbid conditions - Filter for a mismmatching set of concept codes
     */
    'absentConditions.not.anyOf'?: Array<string>;
    /**
     * Absent comorbid conditions - Filter for all child concepts of a given concepts code
     */
    'absentConditions.descendantsOf'?: string;
    /**
     * Absent comorbid conditions - Filter for entries matching all of the concepts
     */
    'absentConditions.allOf'?: Array<string>;
    /**
     * Absent comorbid conditions - Filter for entries mismatching all of the concepts
     */
    'absentConditions.not.allOf'?: Array<string>;
}
export namespace ComorbiditiesAssessmentFilters {
    export type PanelEnum = 'Charlson' | 'Elixhauser' | 'NCI';
    export const PanelEnum = {
        Charlson: 'Charlson' as PanelEnum,
        Elixhauser: 'Elixhauser' as PanelEnum,
        Nci: 'NCI' as PanelEnum
    };
    export type PanelNotEnum = 'Charlson' | 'Elixhauser' | 'NCI';
    export const PanelNotEnum = {
        Charlson: 'Charlson' as PanelNotEnum,
        Elixhauser: 'Elixhauser' as PanelNotEnum,
        Nci: 'NCI' as PanelNotEnum
    };
    export type PanelAnyOfEnum = 'Charlson' | 'Elixhauser' | 'NCI';
    export const PanelAnyOfEnum = {
        Charlson: 'Charlson' as PanelAnyOfEnum,
        Elixhauser: 'Elixhauser' as PanelAnyOfEnum,
        Nci: 'NCI' as PanelAnyOfEnum
    };
}


