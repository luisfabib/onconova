/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface AdverseEventFilters { 
    /**
     * Id - Filter for full text matches
     */
    'suspectedCauses.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'suspectedCauses.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'suspectedCauses.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'suspectedCauses.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'suspectedCauses.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'suspectedCauses.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'suspectedCauses.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'suspectedCauses.id.not.endsWith'?: string;
    /**
     * Suspected systemic therapy - Filter for entries without a value
     */
    'suspectedCauses.systemicTherapyId.not.exists'?: boolean;
    /**
     * Suspected systemic therapy - Filter for entries with a value
     */
    'suspectedCauses.systemicTherapyId.exists'?: boolean;
    /**
     * Suspected systemic therapy - Filter for reference matches
     */
    'suspectedCauses.systemicTherapyId'?: string;
    /**
     * Suspected systemic therapy - Filter for reference mismatches
     */
    'suspectedCauses.systemicTherapyId.not'?: string;
    /**
     * Suspected systemic therapy - Filter for partial text matches
     */
    'suspectedCauses.systemicTherapyId.contains'?: string;
    /**
     * Suspected systemic therapy - Filter for partial text mismatches
     */
    'suspectedCauses.systemicTherapyId.not.contains'?: string;
    /**
     * Suspected systemic therapy - Filter for entries starting with the text
     */
    'suspectedCauses.systemicTherapyId.beginsWith'?: string;
    /**
     * Suspected systemic therapy - Filter for entries not starting with the text
     */
    'suspectedCauses.systemicTherapyId.not.beginsWith'?: string;
    /**
     * Suspected systemic therapy - Filter for entries ending with the text
     */
    'suspectedCauses.systemicTherapyId.endsWith'?: string;
    /**
     * Suspected systemic therapy - Filter for entries not ending with the text
     */
    'suspectedCauses.systemicTherapyId.not.endsWith'?: string;
    /**
     * Suspected systemic therapy medication - Filter for entries without a value
     */
    'suspectedCauses.medicationId.not.exists'?: boolean;
    /**
     * Suspected systemic therapy medication - Filter for entries with a value
     */
    'suspectedCauses.medicationId.exists'?: boolean;
    /**
     * Suspected systemic therapy medication - Filter for reference matches
     */
    'suspectedCauses.medicationId'?: string;
    /**
     * Suspected systemic therapy medication - Filter for reference mismatches
     */
    'suspectedCauses.medicationId.not'?: string;
    /**
     * Suspected systemic therapy medication - Filter for partial text matches
     */
    'suspectedCauses.medicationId.contains'?: string;
    /**
     * Suspected systemic therapy medication - Filter for partial text mismatches
     */
    'suspectedCauses.medicationId.not.contains'?: string;
    /**
     * Suspected systemic therapy medication - Filter for entries starting with the text
     */
    'suspectedCauses.medicationId.beginsWith'?: string;
    /**
     * Suspected systemic therapy medication - Filter for entries not starting with the text
     */
    'suspectedCauses.medicationId.not.beginsWith'?: string;
    /**
     * Suspected systemic therapy medication - Filter for entries ending with the text
     */
    'suspectedCauses.medicationId.endsWith'?: string;
    /**
     * Suspected systemic therapy medication - Filter for entries not ending with the text
     */
    'suspectedCauses.medicationId.not.endsWith'?: string;
    /**
     * Suspected radiotherapy - Filter for entries without a value
     */
    'suspectedCauses.radiotherapyId.not.exists'?: boolean;
    /**
     * Suspected radiotherapy - Filter for entries with a value
     */
    'suspectedCauses.radiotherapyId.exists'?: boolean;
    /**
     * Suspected radiotherapy - Filter for reference matches
     */
    'suspectedCauses.radiotherapyId'?: string;
    /**
     * Suspected radiotherapy - Filter for reference mismatches
     */
    'suspectedCauses.radiotherapyId.not'?: string;
    /**
     * Suspected radiotherapy - Filter for partial text matches
     */
    'suspectedCauses.radiotherapyId.contains'?: string;
    /**
     * Suspected radiotherapy - Filter for partial text mismatches
     */
    'suspectedCauses.radiotherapyId.not.contains'?: string;
    /**
     * Suspected radiotherapy - Filter for entries starting with the text
     */
    'suspectedCauses.radiotherapyId.beginsWith'?: string;
    /**
     * Suspected radiotherapy - Filter for entries not starting with the text
     */
    'suspectedCauses.radiotherapyId.not.beginsWith'?: string;
    /**
     * Suspected radiotherapy - Filter for entries ending with the text
     */
    'suspectedCauses.radiotherapyId.endsWith'?: string;
    /**
     * Suspected radiotherapy - Filter for entries not ending with the text
     */
    'suspectedCauses.radiotherapyId.not.endsWith'?: string;
    /**
     * Suspected surgery - Filter for entries without a value
     */
    'suspectedCauses.surgeryId.not.exists'?: boolean;
    /**
     * Suspected surgery - Filter for entries with a value
     */
    'suspectedCauses.surgeryId.exists'?: boolean;
    /**
     * Suspected surgery - Filter for reference matches
     */
    'suspectedCauses.surgeryId'?: string;
    /**
     * Suspected surgery - Filter for reference mismatches
     */
    'suspectedCauses.surgeryId.not'?: string;
    /**
     * Suspected surgery - Filter for partial text matches
     */
    'suspectedCauses.surgeryId.contains'?: string;
    /**
     * Suspected surgery - Filter for partial text mismatches
     */
    'suspectedCauses.surgeryId.not.contains'?: string;
    /**
     * Suspected surgery - Filter for entries starting with the text
     */
    'suspectedCauses.surgeryId.beginsWith'?: string;
    /**
     * Suspected surgery - Filter for entries not starting with the text
     */
    'suspectedCauses.surgeryId.not.beginsWith'?: string;
    /**
     * Suspected surgery - Filter for entries ending with the text
     */
    'suspectedCauses.surgeryId.endsWith'?: string;
    /**
     * Suspected surgery - Filter for entries not ending with the text
     */
    'suspectedCauses.surgeryId.not.endsWith'?: string;
    /**
     * Causality - Filter for entries without a value
     */
    'suspectedCauses.causality.not.exists'?: boolean;
    /**
     * Causality - Filter for entries with a value
     */
    'suspectedCauses.causality.exists'?: boolean;
    'suspectedCauses.causality'?: AdverseEventFilters.SuspectedCausesCausalityEnum;
    'suspectedCauses.causality.not'?: AdverseEventFilters.SuspectedCausesCausalityNotEnum;
    /**
     * Causality - (\'Filter for excluding a subset of value choices\',)
     */
    'suspectedCauses.causality.anyOf'?: Array<AdverseEventFilters.SuspectedCausesCausalityAnyOfEnum>;
    /**
     * Id - Filter for full text matches
     */
    'mitigations.id'?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'mitigations.id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'mitigations.id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'mitigations.id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'mitigations.id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'mitigations.id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'mitigations.id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'mitigations.id.not.endsWith'?: string;
    'mitigations.category'?: AdverseEventFilters.MitigationsCategoryEnum;
    'mitigations.category.not'?: AdverseEventFilters.MitigationsCategoryNotEnum;
    /**
     * Mitigation category - (\'Filter for excluding a subset of value choices\',)
     */
    'mitigations.category.anyOf'?: Array<AdverseEventFilters.MitigationsCategoryAnyOfEnum>;
    /**
     * Treatment Adjustment - Filter for entries without a value
     */
    'mitigations.adjustment.not.exists'?: boolean;
    /**
     * Treatment Adjustment - Filter for entries with a value
     */
    'mitigations.adjustment.exists'?: boolean;
    /**
     * Treatment Adjustment - Filter for a matching concept code
     */
    'mitigations.adjustment'?: string;
    /**
     * Treatment Adjustment - Filter for a mismatching concept code
     */
    'mitigations.adjustment.not'?: string;
    /**
     * Treatment Adjustment - Filter for a matching set of concept codes
     */
    'mitigations.adjustment.anyOf'?: Array<string>;
    /**
     * Treatment Adjustment - Filter for a mismmatching set of concept codes
     */
    'mitigations.adjustment.not.anyOf'?: Array<string>;
    /**
     * Treatment Adjustment - Filter for all child concepts of a given concepts code
     */
    'mitigations.adjustment.descendantsOf'?: string;
    /**
     * Pharmacological drug - Filter for entries without a value
     */
    'mitigations.drug.not.exists'?: boolean;
    /**
     * Pharmacological drug - Filter for entries with a value
     */
    'mitigations.drug.exists'?: boolean;
    /**
     * Pharmacological drug - Filter for a matching concept code
     */
    'mitigations.drug'?: string;
    /**
     * Pharmacological drug - Filter for a mismatching concept code
     */
    'mitigations.drug.not'?: string;
    /**
     * Pharmacological drug - Filter for a matching set of concept codes
     */
    'mitigations.drug.anyOf'?: Array<string>;
    /**
     * Pharmacological drug - Filter for a mismmatching set of concept codes
     */
    'mitigations.drug.not.anyOf'?: Array<string>;
    /**
     * Pharmacological drug - Filter for all child concepts of a given concepts code
     */
    'mitigations.drug.descendantsOf'?: string;
    /**
     * Procedure - Filter for entries without a value
     */
    'mitigations.procedure.not.exists'?: boolean;
    /**
     * Procedure - Filter for entries with a value
     */
    'mitigations.procedure.exists'?: boolean;
    /**
     * Procedure - Filter for a matching concept code
     */
    'mitigations.procedure'?: string;
    /**
     * Procedure - Filter for a mismatching concept code
     */
    'mitigations.procedure.not'?: string;
    /**
     * Procedure - Filter for a matching set of concept codes
     */
    'mitigations.procedure.anyOf'?: Array<string>;
    /**
     * Procedure - Filter for a mismmatching set of concept codes
     */
    'mitigations.procedure.not.anyOf'?: Array<string>;
    /**
     * Procedure - Filter for all child concepts of a given concepts code
     */
    'mitigations.procedure.descendantsOf'?: string;
    /**
     * Management - Filter for entries without a value
     */
    'mitigations.management.not.exists'?: boolean;
    /**
     * Management - Filter for entries with a value
     */
    'mitigations.management.exists'?: boolean;
    /**
     * Management - Filter for a matching concept code
     */
    'mitigations.management'?: string;
    /**
     * Management - Filter for a mismatching concept code
     */
    'mitigations.management.not'?: string;
    /**
     * Management - Filter for a matching set of concept codes
     */
    'mitigations.management.anyOf'?: Array<string>;
    /**
     * Management - Filter for a mismmatching set of concept codes
     */
    'mitigations.management.not.anyOf'?: Array<string>;
    /**
     * Management - Filter for all child concepts of a given concepts code
     */
    'mitigations.management.descendantsOf'?: string;
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Event date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Event date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Event date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Event date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Event date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Event date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Event date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Event date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Adverse event - Filter for a matching concept code
     */
    event?: string;
    /**
     * Adverse event - Filter for a mismatching concept code
     */
    'event.not'?: string;
    /**
     * Adverse event - Filter for a matching set of concept codes
     */
    'event.anyOf'?: Array<string>;
    /**
     * Adverse event - Filter for a mismmatching set of concept codes
     */
    'event.not.anyOf'?: Array<string>;
    /**
     * Adverse event - Filter for all child concepts of a given concepts code
     */
    'event.descendantsOf'?: string;
    /**
     * Grade - Filter for entries with values less than the specified value
     */
    'grade.lessThan'?: number;
    /**
     * Grade - Filter for entries with values less than or equal to the specified value
     */
    'grade.lessThanOrEqual'?: number;
    /**
     * Grade - Filter for entries with values greater than the specified value
     */
    'grade.greaterThan'?: number;
    /**
     * Grade - Filter for entries with values greater than or equal to the specified value
     */
    'grade.greaterThanOrEqual'?: number;
    /**
     * Grade - Filter for entries with values exactly equal to the specified value
     */
    'grade.equal'?: number;
    /**
     * Grade - Filter for entries with values not equal to the specified value
     */
    'grade.not.equal'?: number;
    /**
     * Grade - Filter for entries with values between two specified values (inclusive)
     */
    'grade.between'?: Array<any>;
    /**
     * Grade - Filter for entries with values between two specified values (inclusive)
     */
    'grade.not.between'?: Array<any>;
    outcome?: AdverseEventFilters.OutcomeEnum;
    'outcome.not'?: AdverseEventFilters.OutcomeNotEnum;
    /**
     * Date resolved - (\'Filter for excluding a subset of value choices\',)
     */
    'outcome.anyOf'?: Array<AdverseEventFilters.OutcomeAnyOfEnum>;
    /**
     * Date resolved - Filter for entries without a value
     */
    'dateResolved.not.exists'?: boolean;
    /**
     * Date resolved - Filter for entries with a value
     */
    'dateResolved.exists'?: boolean;
    /**
     * Date resolved - Filter for entries with dates before the specified value
     */
    'dateResolved.before'?: string;
    /**
     * Date resolved - Filter for entries with dates after the specified value
     */
    'dateResolved.after'?: string;
    /**
     * Date resolved - Filter for entries with dates on or before the specified value
     */
    'dateResolved.onOrBefore'?: string;
    /**
     * Date resolved - Filter for entries with dates on or after the specified value
     */
    'dateResolved.onOrAfter'?: string;
    /**
     * Date resolved - Filter for entries with dates exactly matching the specified value
     */
    'dateResolved.on'?: string;
    /**
     * Date resolved - Filter for entries with dates not matching the specified value
     */
    'dateResolved.not.on'?: string;
    /**
     * Date resolved - Filter for entries with dates between two specified values (inclusive)
     */
    'dateResolved.between'?: Array<any>;
    /**
     * Date resolved - Filter for entries with dates not between two specified values (inclusive)
     */
    'dateResolved.not.between'?: Array<any>;
}
export namespace AdverseEventFilters {
    export type SuspectedCausesCausalityEnum = 'unrelated' | 'unlikely-related' | 'possibly-related' | 'probably-related' | 'definitely-related' | 'conditionally-related';
    export const SuspectedCausesCausalityEnum = {
        Unrelated: 'unrelated' as SuspectedCausesCausalityEnum,
        UnlikelyRelated: 'unlikely-related' as SuspectedCausesCausalityEnum,
        PossiblyRelated: 'possibly-related' as SuspectedCausesCausalityEnum,
        ProbablyRelated: 'probably-related' as SuspectedCausesCausalityEnum,
        DefinitelyRelated: 'definitely-related' as SuspectedCausesCausalityEnum,
        ConditionallyRelated: 'conditionally-related' as SuspectedCausesCausalityEnum
    };
    export type SuspectedCausesCausalityNotEnum = 'unrelated' | 'unlikely-related' | 'possibly-related' | 'probably-related' | 'definitely-related' | 'conditionally-related';
    export const SuspectedCausesCausalityNotEnum = {
        Unrelated: 'unrelated' as SuspectedCausesCausalityNotEnum,
        UnlikelyRelated: 'unlikely-related' as SuspectedCausesCausalityNotEnum,
        PossiblyRelated: 'possibly-related' as SuspectedCausesCausalityNotEnum,
        ProbablyRelated: 'probably-related' as SuspectedCausesCausalityNotEnum,
        DefinitelyRelated: 'definitely-related' as SuspectedCausesCausalityNotEnum,
        ConditionallyRelated: 'conditionally-related' as SuspectedCausesCausalityNotEnum
    };
    export type SuspectedCausesCausalityAnyOfEnum = 'unrelated' | 'unlikely-related' | 'possibly-related' | 'probably-related' | 'definitely-related' | 'conditionally-related';
    export const SuspectedCausesCausalityAnyOfEnum = {
        Unrelated: 'unrelated' as SuspectedCausesCausalityAnyOfEnum,
        UnlikelyRelated: 'unlikely-related' as SuspectedCausesCausalityAnyOfEnum,
        PossiblyRelated: 'possibly-related' as SuspectedCausesCausalityAnyOfEnum,
        ProbablyRelated: 'probably-related' as SuspectedCausesCausalityAnyOfEnum,
        DefinitelyRelated: 'definitely-related' as SuspectedCausesCausalityAnyOfEnum,
        ConditionallyRelated: 'conditionally-related' as SuspectedCausesCausalityAnyOfEnum
    };
    export type MitigationsCategoryEnum = 'adjustment' | 'pharmacological' | 'procedure';
    export const MitigationsCategoryEnum = {
        Adjustment: 'adjustment' as MitigationsCategoryEnum,
        Pharmacological: 'pharmacological' as MitigationsCategoryEnum,
        Procedure: 'procedure' as MitigationsCategoryEnum
    };
    export type MitigationsCategoryNotEnum = 'adjustment' | 'pharmacological' | 'procedure';
    export const MitigationsCategoryNotEnum = {
        Adjustment: 'adjustment' as MitigationsCategoryNotEnum,
        Pharmacological: 'pharmacological' as MitigationsCategoryNotEnum,
        Procedure: 'procedure' as MitigationsCategoryNotEnum
    };
    export type MitigationsCategoryAnyOfEnum = 'adjustment' | 'pharmacological' | 'procedure';
    export const MitigationsCategoryAnyOfEnum = {
        Adjustment: 'adjustment' as MitigationsCategoryAnyOfEnum,
        Pharmacological: 'pharmacological' as MitigationsCategoryAnyOfEnum,
        Procedure: 'procedure' as MitigationsCategoryAnyOfEnum
    };
    export type OutcomeEnum = 'resolved' | 'resolved-with-sequelae' | 'recovering' | 'ongoing' | 'fatal' | 'unknown';
    export const OutcomeEnum = {
        Resolved: 'resolved' as OutcomeEnum,
        ResolvedWithSequelae: 'resolved-with-sequelae' as OutcomeEnum,
        Recovering: 'recovering' as OutcomeEnum,
        Ongoing: 'ongoing' as OutcomeEnum,
        Fatal: 'fatal' as OutcomeEnum,
        Unknown: 'unknown' as OutcomeEnum
    };
    export type OutcomeNotEnum = 'resolved' | 'resolved-with-sequelae' | 'recovering' | 'ongoing' | 'fatal' | 'unknown';
    export const OutcomeNotEnum = {
        Resolved: 'resolved' as OutcomeNotEnum,
        ResolvedWithSequelae: 'resolved-with-sequelae' as OutcomeNotEnum,
        Recovering: 'recovering' as OutcomeNotEnum,
        Ongoing: 'ongoing' as OutcomeNotEnum,
        Fatal: 'fatal' as OutcomeNotEnum,
        Unknown: 'unknown' as OutcomeNotEnum
    };
    export type OutcomeAnyOfEnum = 'resolved' | 'resolved-with-sequelae' | 'recovering' | 'ongoing' | 'fatal' | 'unknown';
    export const OutcomeAnyOfEnum = {
        Resolved: 'resolved' as OutcomeAnyOfEnum,
        ResolvedWithSequelae: 'resolved-with-sequelae' as OutcomeAnyOfEnum,
        Recovering: 'recovering' as OutcomeAnyOfEnum,
        Ongoing: 'ongoing' as OutcomeAnyOfEnum,
        Fatal: 'fatal' as OutcomeAnyOfEnum,
        Unknown: 'unknown' as OutcomeAnyOfEnum
    };
}


