/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface SurgeryFilters { 
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Assessment date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Assessment date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Assessment date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Assessment date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Assessment date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Assessment date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Assessment date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Assessment date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Surgical procedure - Filter for a matching concept code
     */
    procedure?: string;
    /**
     * Surgical procedure - Filter for a mismatching concept code
     */
    'procedure.not'?: string;
    /**
     * Surgical procedure - Filter for a matching set of concept codes
     */
    'procedure.anyOf'?: Array<string>;
    /**
     * Surgical procedure - Filter for a mismmatching set of concept codes
     */
    'procedure.not.anyOf'?: Array<string>;
    /**
     * Surgical procedure - Filter for all child concepts of a given concepts code
     */
    'procedure.descendantsOf'?: string;
    intent?: SurgeryFilters.IntentEnum;
    'intent.not'?: SurgeryFilters.IntentNotEnum;
    /**
     * Intent - (\'Filter for excluding a subset of value choices\',)
     */
    'intent.anyOf'?: Array<SurgeryFilters.IntentAnyOfEnum>;
    /**
     * Anatomical location - Filter for entries without a value
     */
    'bodysite.not.exists'?: boolean;
    /**
     * Anatomical location - Filter for entries with a value
     */
    'bodysite.exists'?: boolean;
    /**
     * Anatomical location - Filter for a matching concept code
     */
    bodysite?: string;
    /**
     * Anatomical location - Filter for a mismatching concept code
     */
    'bodysite.not'?: string;
    /**
     * Anatomical location - Filter for a matching set of concept codes
     */
    'bodysite.anyOf'?: Array<string>;
    /**
     * Anatomical location - Filter for a mismmatching set of concept codes
     */
    'bodysite.not.anyOf'?: Array<string>;
    /**
     * Anatomical location - Filter for all child concepts of a given concepts code
     */
    'bodysite.descendantsOf'?: string;
    /**
     * Anatomical location qualifier - Filter for entries without a value
     */
    'bodysiteQualifier.not.exists'?: boolean;
    /**
     * Anatomical location qualifier - Filter for entries with a value
     */
    'bodysiteQualifier.exists'?: boolean;
    /**
     * Anatomical location qualifier - Filter for a matching concept code
     */
    bodysiteQualifier?: string;
    /**
     * Anatomical location qualifier - Filter for a mismatching concept code
     */
    'bodysiteQualifier.not'?: string;
    /**
     * Anatomical location qualifier - Filter for a matching set of concept codes
     */
    'bodysiteQualifier.anyOf'?: Array<string>;
    /**
     * Anatomical location qualifier - Filter for a mismmatching set of concept codes
     */
    'bodysiteQualifier.not.anyOf'?: Array<string>;
    /**
     * Anatomical location qualifier - Filter for all child concepts of a given concepts code
     */
    'bodysiteQualifier.descendantsOf'?: string;
    /**
     * Anatomical location laterality - Filter for entries without a value
     */
    'bodysiteLaterality.not.exists'?: boolean;
    /**
     * Anatomical location laterality - Filter for entries with a value
     */
    'bodysiteLaterality.exists'?: boolean;
    /**
     * Anatomical location laterality - Filter for a matching concept code
     */
    bodysiteLaterality?: string;
    /**
     * Anatomical location laterality - Filter for a mismatching concept code
     */
    'bodysiteLaterality.not'?: string;
    /**
     * Anatomical location laterality - Filter for a matching set of concept codes
     */
    'bodysiteLaterality.anyOf'?: Array<string>;
    /**
     * Anatomical location laterality - Filter for a mismmatching set of concept codes
     */
    'bodysiteLaterality.not.anyOf'?: Array<string>;
    /**
     * Anatomical location laterality - Filter for all child concepts of a given concepts code
     */
    'bodysiteLaterality.descendantsOf'?: string;
    /**
     * Outcome - Filter for entries without a value
     */
    'outcome.not.exists'?: boolean;
    /**
     * Outcome - Filter for entries with a value
     */
    'outcome.exists'?: boolean;
    /**
     * Outcome - Filter for a matching concept code
     */
    outcome?: string;
    /**
     * Outcome - Filter for a mismatching concept code
     */
    'outcome.not'?: string;
    /**
     * Outcome - Filter for a matching set of concept codes
     */
    'outcome.anyOf'?: Array<string>;
    /**
     * Outcome - Filter for a mismmatching set of concept codes
     */
    'outcome.not.anyOf'?: Array<string>;
    /**
     * Outcome - Filter for all child concepts of a given concepts code
     */
    'outcome.descendantsOf'?: string;
    /**
     * Therapy line - Filter for entries without a value
     */
    'therapyLineId.not.exists'?: boolean;
    /**
     * Therapy line - Filter for entries with a value
     */
    'therapyLineId.exists'?: boolean;
    /**
     * Therapy line - Filter for reference matches
     */
    therapyLineId?: string;
    /**
     * Therapy line - Filter for reference mismatches
     */
    'therapyLineId.not'?: string;
    /**
     * Therapy line - Filter for partial text matches
     */
    'therapyLineId.contains'?: string;
    /**
     * Therapy line - Filter for partial text mismatches
     */
    'therapyLineId.not.contains'?: string;
    /**
     * Therapy line - Filter for entries starting with the text
     */
    'therapyLineId.beginsWith'?: string;
    /**
     * Therapy line - Filter for entries not starting with the text
     */
    'therapyLineId.not.beginsWith'?: string;
    /**
     * Therapy line - Filter for entries ending with the text
     */
    'therapyLineId.endsWith'?: string;
    /**
     * Therapy line - Filter for entries not ending with the text
     */
    'therapyLineId.not.endsWith'?: string;
    /**
     * Targeted neoplastic entities - Filter for full text matches
     */
    targetedEntitiesIds?: string;
    /**
     * Targeted neoplastic entities - Filter for full text mismatches
     */
    'targetedEntitiesIds.not'?: string;
    /**
     * Targeted neoplastic entities - Filter for partial text matches
     */
    'targetedEntitiesIds.contains'?: string;
    /**
     * Targeted neoplastic entities - Filter for partial text mismatches
     */
    'targetedEntitiesIds.not.contains'?: string;
    /**
     * Targeted neoplastic entities - Filter for entries starting with the text
     */
    'targetedEntitiesIds.beginsWith'?: string;
    /**
     * Targeted neoplastic entities - Filter for entries not starting with the text
     */
    'targetedEntitiesIds.not.beginsWith'?: string;
    /**
     * Targeted neoplastic entities - Filter for entries ending with the text
     */
    'targetedEntitiesIds.endsWith'?: string;
    /**
     * Targeted neoplastic entities - Filter for entries not ending with the text
     */
    'targetedEntitiesIds.not.endsWith'?: string;
}
export namespace SurgeryFilters {
    export type IntentEnum = 'curative' | 'palliative';
    export const IntentEnum = {
        Curative: 'curative' as IntentEnum,
        Palliative: 'palliative' as IntentEnum
    };
    export type IntentNotEnum = 'curative' | 'palliative';
    export const IntentNotEnum = {
        Curative: 'curative' as IntentNotEnum,
        Palliative: 'palliative' as IntentNotEnum
    };
    export type IntentAnyOfEnum = 'curative' | 'palliative';
    export const IntentAnyOfEnum = {
        Curative: 'curative' as IntentAnyOfEnum,
        Palliative: 'palliative' as IntentAnyOfEnum
    };
}


