/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface GenomicVariantFilters { 
    /**
     * DNA HGVS - Filter for entries without a value
     */
    'dnaHgvs.not.exists'?: boolean;
    /**
     * DNA HGVS - Filter for entries with a value
     */
    'dnaHgvs.exists'?: boolean;
    /**
     * DNA HGVS - Filter for full text matches
     */
    dnaHgvs?: string;
    /**
     * DNA HGVS - Filter for full text mismatches
     */
    'dnaHgvs.not'?: string;
    /**
     * DNA HGVS - Filter for partial text matches
     */
    'dnaHgvs.contains'?: string;
    /**
     * DNA HGVS - Filter for partial text mismatches
     */
    'dnaHgvs.not.contains'?: string;
    /**
     * DNA HGVS - Filter for entries starting with the text
     */
    'dnaHgvs.beginsWith'?: string;
    /**
     * DNA HGVS - Filter for entries not starting with the text
     */
    'dnaHgvs.not.beginsWith'?: string;
    /**
     * DNA HGVS - Filter for entries ending with the text
     */
    'dnaHgvs.endsWith'?: string;
    /**
     * DNA HGVS - Filter for entries not ending with the text
     */
    'dnaHgvs.not.endsWith'?: string;
    /**
     * DNA HGVS RefSeq - Filter for entries without a value
     */
    'dnaReferenceSequence.not.exists'?: boolean;
    /**
     * DNA HGVS RefSeq - Filter for entries with a value
     */
    'dnaReferenceSequence.exists'?: boolean;
    /**
     * DNA HGVS RefSeq - Filter for full text matches
     */
    dnaReferenceSequence?: string;
    /**
     * DNA HGVS RefSeq - Filter for full text mismatches
     */
    'dnaReferenceSequence.not'?: string;
    /**
     * DNA HGVS RefSeq - Filter for partial text matches
     */
    'dnaReferenceSequence.contains'?: string;
    /**
     * DNA HGVS RefSeq - Filter for partial text mismatches
     */
    'dnaReferenceSequence.not.contains'?: string;
    /**
     * DNA HGVS RefSeq - Filter for entries starting with the text
     */
    'dnaReferenceSequence.beginsWith'?: string;
    /**
     * DNA HGVS RefSeq - Filter for entries not starting with the text
     */
    'dnaReferenceSequence.not.beginsWith'?: string;
    /**
     * DNA HGVS RefSeq - Filter for entries ending with the text
     */
    'dnaReferenceSequence.endsWith'?: string;
    /**
     * DNA HGVS RefSeq - Filter for entries not ending with the text
     */
    'dnaReferenceSequence.not.endsWith'?: string;
    /**
     * DNA change position - Filter for entries without a value
     */
    'dnaChangePosition.not.exists'?: boolean;
    /**
     * DNA change position - Filter for entries with a value
     */
    'dnaChangePosition.exists'?: boolean;
    /**
     * DNA change position - Filter for entries with values less than the specified value
     */
    'dnaChangePosition.lessThan'?: number;
    /**
     * DNA change position - Filter for entries with values less than or equal to the specified value
     */
    'dnaChangePosition.lessThanOrEqual'?: number;
    /**
     * DNA change position - Filter for entries with values greater than the specified value
     */
    'dnaChangePosition.greaterThan'?: number;
    /**
     * DNA change position - Filter for entries with values greater than or equal to the specified value
     */
    'dnaChangePosition.greaterThanOrEqual'?: number;
    /**
     * DNA change position - Filter for entries with values exactly equal to the specified value
     */
    'dnaChangePosition.equal'?: number;
    /**
     * DNA change position - Filter for entries with values not equal to the specified value
     */
    'dnaChangePosition.not.equal'?: number;
    /**
     * DNA change position - Filter for entries with values between two specified values (inclusive)
     */
    'dnaChangePosition.between'?: Array<any>;
    /**
     * DNA change position - Filter for entries with values between two specified values (inclusive)
     */
    'dnaChangePosition.not.between'?: Array<any>;
    /**
     * DNA change type - Filter for entries without a value
     */
    'dnaChangeType.not.exists'?: boolean;
    /**
     * DNA change type - Filter for entries with a value
     */
    'dnaChangeType.exists'?: boolean;
    dnaChangeType?: GenomicVariantFilters.DnaChangeTypeEnum;
    'dnaChangeType.not'?: GenomicVariantFilters.DnaChangeTypeNotEnum;
    /**
     * DNA change type - (\'Filter for excluding a subset of value choices\',)
     */
    'dnaChangeType.anyOf'?: Array<GenomicVariantFilters.DnaChangeTypeAnyOfEnum>;
    /**
     * RNA HGVS - Filter for entries without a value
     */
    'rnaHgvs.not.exists'?: boolean;
    /**
     * RNA HGVS - Filter for entries with a value
     */
    'rnaHgvs.exists'?: boolean;
    /**
     * RNA HGVS - Filter for full text matches
     */
    rnaHgvs?: string;
    /**
     * RNA HGVS - Filter for full text mismatches
     */
    'rnaHgvs.not'?: string;
    /**
     * RNA HGVS - Filter for partial text matches
     */
    'rnaHgvs.contains'?: string;
    /**
     * RNA HGVS - Filter for partial text mismatches
     */
    'rnaHgvs.not.contains'?: string;
    /**
     * RNA HGVS - Filter for entries starting with the text
     */
    'rnaHgvs.beginsWith'?: string;
    /**
     * RNA HGVS - Filter for entries not starting with the text
     */
    'rnaHgvs.not.beginsWith'?: string;
    /**
     * RNA HGVS - Filter for entries ending with the text
     */
    'rnaHgvs.endsWith'?: string;
    /**
     * RNA HGVS - Filter for entries not ending with the text
     */
    'rnaHgvs.not.endsWith'?: string;
    /**
     * RNA HGVS RefSeq - Filter for entries without a value
     */
    'rnaReferenceSequence.not.exists'?: boolean;
    /**
     * RNA HGVS RefSeq - Filter for entries with a value
     */
    'rnaReferenceSequence.exists'?: boolean;
    /**
     * RNA HGVS RefSeq - Filter for full text matches
     */
    rnaReferenceSequence?: string;
    /**
     * RNA HGVS RefSeq - Filter for full text mismatches
     */
    'rnaReferenceSequence.not'?: string;
    /**
     * RNA HGVS RefSeq - Filter for partial text matches
     */
    'rnaReferenceSequence.contains'?: string;
    /**
     * RNA HGVS RefSeq - Filter for partial text mismatches
     */
    'rnaReferenceSequence.not.contains'?: string;
    /**
     * RNA HGVS RefSeq - Filter for entries starting with the text
     */
    'rnaReferenceSequence.beginsWith'?: string;
    /**
     * RNA HGVS RefSeq - Filter for entries not starting with the text
     */
    'rnaReferenceSequence.not.beginsWith'?: string;
    /**
     * RNA HGVS RefSeq - Filter for entries ending with the text
     */
    'rnaReferenceSequence.endsWith'?: string;
    /**
     * RNA HGVS RefSeq - Filter for entries not ending with the text
     */
    'rnaReferenceSequence.not.endsWith'?: string;
    /**
     * RNA change position - Filter for entries without a value
     */
    'rnaChangePosition.not.exists'?: boolean;
    /**
     * RNA change position - Filter for entries with a value
     */
    'rnaChangePosition.exists'?: boolean;
    /**
     * RNA change position - Filter for full text matches
     */
    rnaChangePosition?: string;
    /**
     * RNA change position - Filter for full text mismatches
     */
    'rnaChangePosition.not'?: string;
    /**
     * RNA change position - Filter for partial text matches
     */
    'rnaChangePosition.contains'?: string;
    /**
     * RNA change position - Filter for partial text mismatches
     */
    'rnaChangePosition.not.contains'?: string;
    /**
     * RNA change position - Filter for entries starting with the text
     */
    'rnaChangePosition.beginsWith'?: string;
    /**
     * RNA change position - Filter for entries not starting with the text
     */
    'rnaChangePosition.not.beginsWith'?: string;
    /**
     * RNA change position - Filter for entries ending with the text
     */
    'rnaChangePosition.endsWith'?: string;
    /**
     * RNA change position - Filter for entries not ending with the text
     */
    'rnaChangePosition.not.endsWith'?: string;
    /**
     * RNA change type - Filter for entries without a value
     */
    'rnaChangeType.not.exists'?: boolean;
    /**
     * RNA change type - Filter for entries with a value
     */
    'rnaChangeType.exists'?: boolean;
    rnaChangeType?: GenomicVariantFilters.RnaChangeTypeEnum;
    'rnaChangeType.not'?: GenomicVariantFilters.RnaChangeTypeNotEnum;
    /**
     * RNA change type - (\'Filter for excluding a subset of value choices\',)
     */
    'rnaChangeType.anyOf'?: Array<GenomicVariantFilters.RnaChangeTypeAnyOfEnum>;
    /**
     * Protein HGVS - Filter for entries without a value
     */
    'proteinHgvs.not.exists'?: boolean;
    /**
     * Protein HGVS - Filter for entries with a value
     */
    'proteinHgvs.exists'?: boolean;
    /**
     * Protein HGVS - Filter for full text matches
     */
    proteinHgvs?: string;
    /**
     * Protein HGVS - Filter for full text mismatches
     */
    'proteinHgvs.not'?: string;
    /**
     * Protein HGVS - Filter for partial text matches
     */
    'proteinHgvs.contains'?: string;
    /**
     * Protein HGVS - Filter for partial text mismatches
     */
    'proteinHgvs.not.contains'?: string;
    /**
     * Protein HGVS - Filter for entries starting with the text
     */
    'proteinHgvs.beginsWith'?: string;
    /**
     * Protein HGVS - Filter for entries not starting with the text
     */
    'proteinHgvs.not.beginsWith'?: string;
    /**
     * Protein HGVS - Filter for entries ending with the text
     */
    'proteinHgvs.endsWith'?: string;
    /**
     * Protein HGVS - Filter for entries not ending with the text
     */
    'proteinHgvs.not.endsWith'?: string;
    /**
     * Protein HGVS RefSeq - Filter for entries without a value
     */
    'proteinReferenceSequence.not.exists'?: boolean;
    /**
     * Protein HGVS RefSeq - Filter for entries with a value
     */
    'proteinReferenceSequence.exists'?: boolean;
    /**
     * Protein HGVS RefSeq - Filter for full text matches
     */
    proteinReferenceSequence?: string;
    /**
     * Protein HGVS RefSeq - Filter for full text mismatches
     */
    'proteinReferenceSequence.not'?: string;
    /**
     * Protein HGVS RefSeq - Filter for partial text matches
     */
    'proteinReferenceSequence.contains'?: string;
    /**
     * Protein HGVS RefSeq - Filter for partial text mismatches
     */
    'proteinReferenceSequence.not.contains'?: string;
    /**
     * Protein HGVS RefSeq - Filter for entries starting with the text
     */
    'proteinReferenceSequence.beginsWith'?: string;
    /**
     * Protein HGVS RefSeq - Filter for entries not starting with the text
     */
    'proteinReferenceSequence.not.beginsWith'?: string;
    /**
     * Protein HGVS RefSeq - Filter for entries ending with the text
     */
    'proteinReferenceSequence.endsWith'?: string;
    /**
     * Protein HGVS RefSeq - Filter for entries not ending with the text
     */
    'proteinReferenceSequence.not.endsWith'?: string;
    /**
     * Protein change type - Filter for entries without a value
     */
    'proteinChangeType.not.exists'?: boolean;
    /**
     * Protein change type - Filter for entries with a value
     */
    'proteinChangeType.exists'?: boolean;
    proteinChangeType?: GenomicVariantFilters.ProteinChangeTypeEnum;
    'proteinChangeType.not'?: GenomicVariantFilters.ProteinChangeTypeNotEnum;
    /**
     * Protein change type - (\'Filter for excluding a subset of value choices\',)
     */
    'proteinChangeType.anyOf'?: Array<GenomicVariantFilters.ProteinChangeTypeAnyOfEnum>;
    /**
     * Variant length - Filter for entries without a value
     */
    'nucleotidesLength.not.exists'?: boolean;
    /**
     * Variant length - Filter for entries with a value
     */
    'nucleotidesLength.exists'?: boolean;
    /**
     * Variant length - Filter for entries with values less than the specified value
     */
    'nucleotidesLength.lessThan'?: number;
    /**
     * Variant length - Filter for entries with values less than or equal to the specified value
     */
    'nucleotidesLength.lessThanOrEqual'?: number;
    /**
     * Variant length - Filter for entries with values greater than the specified value
     */
    'nucleotidesLength.greaterThan'?: number;
    /**
     * Variant length - Filter for entries with values greater than or equal to the specified value
     */
    'nucleotidesLength.greaterThanOrEqual'?: number;
    /**
     * Variant length - Filter for entries with values exactly equal to the specified value
     */
    'nucleotidesLength.equal'?: number;
    /**
     * Variant length - Filter for entries with values not equal to the specified value
     */
    'nucleotidesLength.not.equal'?: number;
    /**
     * Variant length - Filter for entries with values between two specified values (inclusive)
     */
    'nucleotidesLength.between'?: Array<any>;
    /**
     * Variant length - Filter for entries with values between two specified values (inclusive)
     */
    'nucleotidesLength.not.between'?: Array<any>;
    /**
     * Exons - Filter for entries without a value
     */
    'exons.not.exists'?: boolean;
    /**
     * Exons - Filter for entries with a value
     */
    'exons.exists'?: boolean;
    /**
     * Id - Filter for full text matches
     */
    id?: string;
    /**
     * Id - Filter for full text mismatches
     */
    'id.not'?: string;
    /**
     * Id - Filter for partial text matches
     */
    'id.contains'?: string;
    /**
     * Id - Filter for partial text mismatches
     */
    'id.not.contains'?: string;
    /**
     * Id - Filter for entries starting with the text
     */
    'id.beginsWith'?: string;
    /**
     * Id - Filter for entries not starting with the text
     */
    'id.not.beginsWith'?: string;
    /**
     * Id - Filter for entries ending with the text
     */
    'id.endsWith'?: string;
    /**
     * Id - Filter for entries not ending with the text
     */
    'id.not.endsWith'?: string;
    /**
     * Patient case - Filter for reference matches
     */
    caseId?: string;
    /**
     * Patient case - Filter for reference mismatches
     */
    'caseId.not'?: string;
    /**
     * Patient case - Filter for partial text matches
     */
    'caseId.contains'?: string;
    /**
     * Patient case - Filter for partial text mismatches
     */
    'caseId.not.contains'?: string;
    /**
     * Patient case - Filter for entries starting with the text
     */
    'caseId.beginsWith'?: string;
    /**
     * Patient case - Filter for entries not starting with the text
     */
    'caseId.not.beginsWith'?: string;
    /**
     * Patient case - Filter for entries ending with the text
     */
    'caseId.endsWith'?: string;
    /**
     * Patient case - Filter for entries not ending with the text
     */
    'caseId.not.endsWith'?: string;
    /**
     * Assessment date - Filter for entries with dates before the specified value
     */
    'date.before'?: string;
    /**
     * Assessment date - Filter for entries with dates after the specified value
     */
    'date.after'?: string;
    /**
     * Assessment date - Filter for entries with dates on or before the specified value
     */
    'date.onOrBefore'?: string;
    /**
     * Assessment date - Filter for entries with dates on or after the specified value
     */
    'date.onOrAfter'?: string;
    /**
     * Assessment date - Filter for entries with dates exactly matching the specified value
     */
    'date.on'?: string;
    /**
     * Assessment date - Filter for entries with dates not matching the specified value
     */
    'date.not.on'?: string;
    /**
     * Assessment date - Filter for entries with dates between two specified values (inclusive)
     */
    'date.between'?: Array<any>;
    /**
     * Assessment date - Filter for entries with dates not between two specified values (inclusive)
     */
    'date.not.between'?: Array<any>;
    /**
     * Gene panel - Filter for entries without a value
     */
    'genePanel.not.exists'?: boolean;
    /**
     * Gene panel - Filter for entries with a value
     */
    'genePanel.exists'?: boolean;
    /**
     * Gene panel - Filter for full text matches
     */
    genePanel?: string;
    /**
     * Gene panel - Filter for full text mismatches
     */
    'genePanel.not'?: string;
    /**
     * Gene panel - Filter for partial text matches
     */
    'genePanel.contains'?: string;
    /**
     * Gene panel - Filter for partial text mismatches
     */
    'genePanel.not.contains'?: string;
    /**
     * Gene panel - Filter for entries starting with the text
     */
    'genePanel.beginsWith'?: string;
    /**
     * Gene panel - Filter for entries not starting with the text
     */
    'genePanel.not.beginsWith'?: string;
    /**
     * Gene panel - Filter for entries ending with the text
     */
    'genePanel.endsWith'?: string;
    /**
     * Gene panel - Filter for entries not ending with the text
     */
    'genePanel.not.endsWith'?: string;
    /**
     * Assessment - Filter for entries without a value
     */
    'assessment.not.exists'?: boolean;
    /**
     * Assessment - Filter for entries with a value
     */
    'assessment.exists'?: boolean;
    assessment?: GenomicVariantFilters.AssessmentEnum;
    'assessment.not'?: GenomicVariantFilters.AssessmentNotEnum;
    /**
     * Assessment - (\'Filter for excluding a subset of value choices\',)
     */
    'assessment.anyOf'?: Array<GenomicVariantFilters.AssessmentAnyOfEnum>;
    /**
     * Confidence - Filter for entries without a value
     */
    'confidence.not.exists'?: boolean;
    /**
     * Confidence - Filter for entries with a value
     */
    'confidence.exists'?: boolean;
    confidence?: GenomicVariantFilters.ConfidenceEnum;
    'confidence.not'?: GenomicVariantFilters.ConfidenceNotEnum;
    /**
     * Confidence - (\'Filter for excluding a subset of value choices\',)
     */
    'confidence.anyOf'?: Array<GenomicVariantFilters.ConfidenceAnyOfEnum>;
    /**
     * Analysis method - Filter for entries without a value
     */
    'analysisMethod.not.exists'?: boolean;
    /**
     * Analysis method - Filter for entries with a value
     */
    'analysisMethod.exists'?: boolean;
    /**
     * Analysis method - Filter for a matching concept code
     */
    analysisMethod?: string;
    /**
     * Analysis method - Filter for a mismatching concept code
     */
    'analysisMethod.not'?: string;
    /**
     * Analysis method - Filter for a matching set of concept codes
     */
    'analysisMethod.anyOf'?: Array<string>;
    /**
     * Analysis method - Filter for a mismmatching set of concept codes
     */
    'analysisMethod.not.anyOf'?: Array<string>;
    /**
     * Analysis method - Filter for all child concepts of a given concepts code
     */
    'analysisMethod.descendantsOf'?: string;
    /**
     * Clinical relevance - Filter for entries without a value
     */
    'clinicalRelevance.not.exists'?: boolean;
    /**
     * Clinical relevance - Filter for entries with a value
     */
    'clinicalRelevance.exists'?: boolean;
    clinicalRelevance?: GenomicVariantFilters.ClinicalRelevanceEnum;
    'clinicalRelevance.not'?: GenomicVariantFilters.ClinicalRelevanceNotEnum;
    /**
     * Clinical relevance - (\'Filter for excluding a subset of value choices\',)
     */
    'clinicalRelevance.anyOf'?: Array<GenomicVariantFilters.ClinicalRelevanceAnyOfEnum>;
    /**
     * Is pathogenic - Filter for entries without a value
     */
    'isVus.not.exists'?: boolean;
    /**
     * Is pathogenic - Filter for entries with a value
     */
    'isVus.exists'?: boolean;
    /**
     * Is pathogenic - (\'Filter for yes/no statement\',)
     */
    isVus?: boolean;
    /**
     * Is pathogenic - (\'Filter for yes/no statement\',)
     */
    isPathogenic?: boolean;
    /**
     * Genome assembly version - Filter for entries without a value
     */
    'genomeAssemblyVersion.not.exists'?: boolean;
    /**
     * Genome assembly version - Filter for entries with a value
     */
    'genomeAssemblyVersion.exists'?: boolean;
    /**
     * Genome assembly version - Filter for a matching concept code
     */
    genomeAssemblyVersion?: string;
    /**
     * Genome assembly version - Filter for a mismatching concept code
     */
    'genomeAssemblyVersion.not'?: string;
    /**
     * Genome assembly version - Filter for a matching set of concept codes
     */
    'genomeAssemblyVersion.anyOf'?: Array<string>;
    /**
     * Genome assembly version - Filter for a mismmatching set of concept codes
     */
    'genomeAssemblyVersion.not.anyOf'?: Array<string>;
    /**
     * Genome assembly version - Filter for all child concepts of a given concepts code
     */
    'genomeAssemblyVersion.descendantsOf'?: string;
    /**
     * Molecular consequence - Filter for entries without a value
     */
    'molecularConsequence.not.exists'?: boolean;
    /**
     * Molecular consequence - Filter for entries with a value
     */
    'molecularConsequence.exists'?: boolean;
    /**
     * Molecular consequence - Filter for a matching concept code
     */
    molecularConsequence?: string;
    /**
     * Molecular consequence - Filter for a mismatching concept code
     */
    'molecularConsequence.not'?: string;
    /**
     * Molecular consequence - Filter for a matching set of concept codes
     */
    'molecularConsequence.anyOf'?: Array<string>;
    /**
     * Molecular consequence - Filter for a mismmatching set of concept codes
     */
    'molecularConsequence.not.anyOf'?: Array<string>;
    /**
     * Molecular consequence - Filter for all child concepts of a given concepts code
     */
    'molecularConsequence.descendantsOf'?: string;
    /**
     * Copy number - Filter for entries without a value
     */
    'copyNumber.not.exists'?: boolean;
    /**
     * Copy number - Filter for entries with a value
     */
    'copyNumber.exists'?: boolean;
    /**
     * Copy number - Filter for entries with values less than the specified value
     */
    'copyNumber.lessThan'?: number;
    /**
     * Copy number - Filter for entries with values less than or equal to the specified value
     */
    'copyNumber.lessThanOrEqual'?: number;
    /**
     * Copy number - Filter for entries with values greater than the specified value
     */
    'copyNumber.greaterThan'?: number;
    /**
     * Copy number - Filter for entries with values greater than or equal to the specified value
     */
    'copyNumber.greaterThanOrEqual'?: number;
    /**
     * Copy number - Filter for entries with values exactly equal to the specified value
     */
    'copyNumber.equal'?: number;
    /**
     * Copy number - Filter for entries with values not equal to the specified value
     */
    'copyNumber.not.equal'?: number;
    /**
     * Copy number - Filter for entries with values between two specified values (inclusive)
     */
    'copyNumber.between'?: Array<any>;
    /**
     * Copy number - Filter for entries with values between two specified values (inclusive)
     */
    'copyNumber.not.between'?: Array<any>;
    /**
     * Allele frequency - Filter for entries without a value
     */
    'alleleFrequency.not.exists'?: boolean;
    /**
     * Allele frequency - Filter for entries with a value
     */
    'alleleFrequency.exists'?: boolean;
    /**
     * Allele frequency - Filter for entries with values less than the specified value
     */
    'alleleFrequency.lessThan'?: number;
    /**
     * Allele frequency - Filter for entries with values less than or equal to the specified value
     */
    'alleleFrequency.lessThanOrEqual'?: number;
    /**
     * Allele frequency - Filter for entries with values greater than the specified value
     */
    'alleleFrequency.greaterThan'?: number;
    /**
     * Allele frequency - Filter for entries with values greater than or equal to the specified value
     */
    'alleleFrequency.greaterThanOrEqual'?: number;
    /**
     * Allele frequency - Filter for entries with values exactly equal to the specified value
     */
    'alleleFrequency.equal'?: number;
    /**
     * Allele frequency - Filter for entries with values not equal to the specified value
     */
    'alleleFrequency.not.equal'?: number;
    /**
     * Allele frequency - Filter for entries with values between two specified values (inclusive)
     */
    'alleleFrequency.between'?: Array<any>;
    /**
     * Allele frequency - Filter for entries with values between two specified values (inclusive)
     */
    'alleleFrequency.not.between'?: Array<any>;
    /**
     * Allele depth (reads) - Filter for entries without a value
     */
    'alleleDepth.not.exists'?: boolean;
    /**
     * Allele depth (reads) - Filter for entries with a value
     */
    'alleleDepth.exists'?: boolean;
    /**
     * Allele depth (reads) - Filter for entries with values less than the specified value
     */
    'alleleDepth.lessThan'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values less than or equal to the specified value
     */
    'alleleDepth.lessThanOrEqual'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values greater than the specified value
     */
    'alleleDepth.greaterThan'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values greater than or equal to the specified value
     */
    'alleleDepth.greaterThanOrEqual'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values exactly equal to the specified value
     */
    'alleleDepth.equal'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values not equal to the specified value
     */
    'alleleDepth.not.equal'?: number;
    /**
     * Allele depth (reads) - Filter for entries with values between two specified values (inclusive)
     */
    'alleleDepth.between'?: Array<any>;
    /**
     * Allele depth (reads) - Filter for entries with values between two specified values (inclusive)
     */
    'alleleDepth.not.between'?: Array<any>;
    /**
     * Zygosity - Filter for entries without a value
     */
    'zygosity.not.exists'?: boolean;
    /**
     * Zygosity - Filter for entries with a value
     */
    'zygosity.exists'?: boolean;
    /**
     * Zygosity - Filter for a matching concept code
     */
    zygosity?: string;
    /**
     * Zygosity - Filter for a mismatching concept code
     */
    'zygosity.not'?: string;
    /**
     * Zygosity - Filter for a matching set of concept codes
     */
    'zygosity.anyOf'?: Array<string>;
    /**
     * Zygosity - Filter for a mismmatching set of concept codes
     */
    'zygosity.not.anyOf'?: Array<string>;
    /**
     * Zygosity - Filter for all child concepts of a given concepts code
     */
    'zygosity.descendantsOf'?: string;
    /**
     * Inheritance - Filter for entries without a value
     */
    'inheritance.not.exists'?: boolean;
    /**
     * Inheritance - Filter for entries with a value
     */
    'inheritance.exists'?: boolean;
    /**
     * Inheritance - Filter for a matching concept code
     */
    inheritance?: string;
    /**
     * Inheritance - Filter for a mismatching concept code
     */
    'inheritance.not'?: string;
    /**
     * Inheritance - Filter for a matching set of concept codes
     */
    'inheritance.anyOf'?: Array<string>;
    /**
     * Inheritance - Filter for a mismmatching set of concept codes
     */
    'inheritance.not.anyOf'?: Array<string>;
    /**
     * Inheritance - Filter for all child concepts of a given concepts code
     */
    'inheritance.descendantsOf'?: string;
    /**
     * Coordinate system - Filter for entries without a value
     */
    'coordinateSystem.not.exists'?: boolean;
    /**
     * Coordinate system - Filter for entries with a value
     */
    'coordinateSystem.exists'?: boolean;
    /**
     * Coordinate system - Filter for a matching concept code
     */
    coordinateSystem?: string;
    /**
     * Coordinate system - Filter for a mismatching concept code
     */
    'coordinateSystem.not'?: string;
    /**
     * Coordinate system - Filter for a matching set of concept codes
     */
    'coordinateSystem.anyOf'?: Array<string>;
    /**
     * Coordinate system - Filter for a mismmatching set of concept codes
     */
    'coordinateSystem.not.anyOf'?: Array<string>;
    /**
     * Coordinate system - Filter for all child concepts of a given concepts code
     */
    'coordinateSystem.descendantsOf'?: string;
    /**
     * ClinVar accession number - Filter for entries without a value
     */
    'clinvar.not.exists'?: boolean;
    /**
     * ClinVar accession number - Filter for entries with a value
     */
    'clinvar.exists'?: boolean;
    /**
     * ClinVar accession number - Filter for full text matches
     */
    clinvar?: string;
    /**
     * ClinVar accession number - Filter for full text mismatches
     */
    'clinvar.not'?: string;
    /**
     * ClinVar accession number - Filter for partial text matches
     */
    'clinvar.contains'?: string;
    /**
     * ClinVar accession number - Filter for partial text mismatches
     */
    'clinvar.not.contains'?: string;
    /**
     * ClinVar accession number - Filter for entries starting with the text
     */
    'clinvar.beginsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries not starting with the text
     */
    'clinvar.not.beginsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries ending with the text
     */
    'clinvar.endsWith'?: string;
    /**
     * ClinVar accession number - Filter for entries not ending with the text
     */
    'clinvar.not.endsWith'?: string;
    /**
     * Gene(s) - Filter for a matching concept code
     */
    genes?: string;
    /**
     * Gene(s) - Filter for a mismatching concept code
     */
    'genes.not'?: string;
    /**
     * Gene(s) - Filter for a matching set of concept codes
     */
    'genes.anyOf'?: Array<string>;
    /**
     * Gene(s) - Filter for a mismmatching set of concept codes
     */
    'genes.not.anyOf'?: Array<string>;
    /**
     * Gene(s) - Filter for all child concepts of a given concepts code
     */
    'genes.descendantsOf'?: string;
    /**
     * Gene(s) - Filter for entries matching all of the concepts
     */
    'genes.allOf'?: Array<string>;
    /**
     * Gene(s) - Filter for entries mismatching all of the concepts
     */
    'genes.not.allOf'?: Array<string>;
}
export namespace GenomicVariantFilters {
    export type DnaChangeTypeEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition' | 'translocation' | 'transposition' | 'methylation-gain' | 'methylation-loss' | 'methylation-unchanged';
    export const DnaChangeTypeEnum = {
        Substitution: 'substitution' as DnaChangeTypeEnum,
        DeletionInsertion: 'deletion-insertion' as DnaChangeTypeEnum,
        Insertion: 'insertion' as DnaChangeTypeEnum,
        Deletion: 'deletion' as DnaChangeTypeEnum,
        Duplication: 'duplication' as DnaChangeTypeEnum,
        Inversion: 'inversion' as DnaChangeTypeEnum,
        Unchanged: 'unchanged' as DnaChangeTypeEnum,
        Repetition: 'repetition' as DnaChangeTypeEnum,
        Translocation: 'translocation' as DnaChangeTypeEnum,
        Transposition: 'transposition' as DnaChangeTypeEnum,
        MethylationGain: 'methylation-gain' as DnaChangeTypeEnum,
        MethylationLoss: 'methylation-loss' as DnaChangeTypeEnum,
        MethylationUnchanged: 'methylation-unchanged' as DnaChangeTypeEnum
    };
    export type DnaChangeTypeNotEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition' | 'translocation' | 'transposition' | 'methylation-gain' | 'methylation-loss' | 'methylation-unchanged';
    export const DnaChangeTypeNotEnum = {
        Substitution: 'substitution' as DnaChangeTypeNotEnum,
        DeletionInsertion: 'deletion-insertion' as DnaChangeTypeNotEnum,
        Insertion: 'insertion' as DnaChangeTypeNotEnum,
        Deletion: 'deletion' as DnaChangeTypeNotEnum,
        Duplication: 'duplication' as DnaChangeTypeNotEnum,
        Inversion: 'inversion' as DnaChangeTypeNotEnum,
        Unchanged: 'unchanged' as DnaChangeTypeNotEnum,
        Repetition: 'repetition' as DnaChangeTypeNotEnum,
        Translocation: 'translocation' as DnaChangeTypeNotEnum,
        Transposition: 'transposition' as DnaChangeTypeNotEnum,
        MethylationGain: 'methylation-gain' as DnaChangeTypeNotEnum,
        MethylationLoss: 'methylation-loss' as DnaChangeTypeNotEnum,
        MethylationUnchanged: 'methylation-unchanged' as DnaChangeTypeNotEnum
    };
    export type DnaChangeTypeAnyOfEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition' | 'translocation' | 'transposition' | 'methylation-gain' | 'methylation-loss' | 'methylation-unchanged';
    export const DnaChangeTypeAnyOfEnum = {
        Substitution: 'substitution' as DnaChangeTypeAnyOfEnum,
        DeletionInsertion: 'deletion-insertion' as DnaChangeTypeAnyOfEnum,
        Insertion: 'insertion' as DnaChangeTypeAnyOfEnum,
        Deletion: 'deletion' as DnaChangeTypeAnyOfEnum,
        Duplication: 'duplication' as DnaChangeTypeAnyOfEnum,
        Inversion: 'inversion' as DnaChangeTypeAnyOfEnum,
        Unchanged: 'unchanged' as DnaChangeTypeAnyOfEnum,
        Repetition: 'repetition' as DnaChangeTypeAnyOfEnum,
        Translocation: 'translocation' as DnaChangeTypeAnyOfEnum,
        Transposition: 'transposition' as DnaChangeTypeAnyOfEnum,
        MethylationGain: 'methylation-gain' as DnaChangeTypeAnyOfEnum,
        MethylationLoss: 'methylation-loss' as DnaChangeTypeAnyOfEnum,
        MethylationUnchanged: 'methylation-unchanged' as DnaChangeTypeAnyOfEnum
    };
    export type RnaChangeTypeEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition';
    export const RnaChangeTypeEnum = {
        Substitution: 'substitution' as RnaChangeTypeEnum,
        DeletionInsertion: 'deletion-insertion' as RnaChangeTypeEnum,
        Insertion: 'insertion' as RnaChangeTypeEnum,
        Deletion: 'deletion' as RnaChangeTypeEnum,
        Duplication: 'duplication' as RnaChangeTypeEnum,
        Inversion: 'inversion' as RnaChangeTypeEnum,
        Unchanged: 'unchanged' as RnaChangeTypeEnum,
        Repetition: 'repetition' as RnaChangeTypeEnum
    };
    export type RnaChangeTypeNotEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition';
    export const RnaChangeTypeNotEnum = {
        Substitution: 'substitution' as RnaChangeTypeNotEnum,
        DeletionInsertion: 'deletion-insertion' as RnaChangeTypeNotEnum,
        Insertion: 'insertion' as RnaChangeTypeNotEnum,
        Deletion: 'deletion' as RnaChangeTypeNotEnum,
        Duplication: 'duplication' as RnaChangeTypeNotEnum,
        Inversion: 'inversion' as RnaChangeTypeNotEnum,
        Unchanged: 'unchanged' as RnaChangeTypeNotEnum,
        Repetition: 'repetition' as RnaChangeTypeNotEnum
    };
    export type RnaChangeTypeAnyOfEnum = 'substitution' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'inversion' | 'unchanged' | 'repetition';
    export const RnaChangeTypeAnyOfEnum = {
        Substitution: 'substitution' as RnaChangeTypeAnyOfEnum,
        DeletionInsertion: 'deletion-insertion' as RnaChangeTypeAnyOfEnum,
        Insertion: 'insertion' as RnaChangeTypeAnyOfEnum,
        Deletion: 'deletion' as RnaChangeTypeAnyOfEnum,
        Duplication: 'duplication' as RnaChangeTypeAnyOfEnum,
        Inversion: 'inversion' as RnaChangeTypeAnyOfEnum,
        Unchanged: 'unchanged' as RnaChangeTypeAnyOfEnum,
        Repetition: 'repetition' as RnaChangeTypeAnyOfEnum
    };
    export type ProteinChangeTypeEnum = 'missense' | 'nonsense' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'frameshift' | 'extension' | 'silent' | 'no-protein' | 'repetition';
    export const ProteinChangeTypeEnum = {
        Missense: 'missense' as ProteinChangeTypeEnum,
        Nonsense: 'nonsense' as ProteinChangeTypeEnum,
        DeletionInsertion: 'deletion-insertion' as ProteinChangeTypeEnum,
        Insertion: 'insertion' as ProteinChangeTypeEnum,
        Deletion: 'deletion' as ProteinChangeTypeEnum,
        Duplication: 'duplication' as ProteinChangeTypeEnum,
        Frameshift: 'frameshift' as ProteinChangeTypeEnum,
        Extension: 'extension' as ProteinChangeTypeEnum,
        Silent: 'silent' as ProteinChangeTypeEnum,
        NoProtein: 'no-protein' as ProteinChangeTypeEnum,
        Repetition: 'repetition' as ProteinChangeTypeEnum
    };
    export type ProteinChangeTypeNotEnum = 'missense' | 'nonsense' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'frameshift' | 'extension' | 'silent' | 'no-protein' | 'repetition';
    export const ProteinChangeTypeNotEnum = {
        Missense: 'missense' as ProteinChangeTypeNotEnum,
        Nonsense: 'nonsense' as ProteinChangeTypeNotEnum,
        DeletionInsertion: 'deletion-insertion' as ProteinChangeTypeNotEnum,
        Insertion: 'insertion' as ProteinChangeTypeNotEnum,
        Deletion: 'deletion' as ProteinChangeTypeNotEnum,
        Duplication: 'duplication' as ProteinChangeTypeNotEnum,
        Frameshift: 'frameshift' as ProteinChangeTypeNotEnum,
        Extension: 'extension' as ProteinChangeTypeNotEnum,
        Silent: 'silent' as ProteinChangeTypeNotEnum,
        NoProtein: 'no-protein' as ProteinChangeTypeNotEnum,
        Repetition: 'repetition' as ProteinChangeTypeNotEnum
    };
    export type ProteinChangeTypeAnyOfEnum = 'missense' | 'nonsense' | 'deletion-insertion' | 'insertion' | 'deletion' | 'duplication' | 'frameshift' | 'extension' | 'silent' | 'no-protein' | 'repetition';
    export const ProteinChangeTypeAnyOfEnum = {
        Missense: 'missense' as ProteinChangeTypeAnyOfEnum,
        Nonsense: 'nonsense' as ProteinChangeTypeAnyOfEnum,
        DeletionInsertion: 'deletion-insertion' as ProteinChangeTypeAnyOfEnum,
        Insertion: 'insertion' as ProteinChangeTypeAnyOfEnum,
        Deletion: 'deletion' as ProteinChangeTypeAnyOfEnum,
        Duplication: 'duplication' as ProteinChangeTypeAnyOfEnum,
        Frameshift: 'frameshift' as ProteinChangeTypeAnyOfEnum,
        Extension: 'extension' as ProteinChangeTypeAnyOfEnum,
        Silent: 'silent' as ProteinChangeTypeAnyOfEnum,
        NoProtein: 'no-protein' as ProteinChangeTypeAnyOfEnum,
        Repetition: 'repetition' as ProteinChangeTypeAnyOfEnum
    };
    export type AssessmentEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentEnum = {
        Present: 'present' as AssessmentEnum,
        Absent: 'absent' as AssessmentEnum,
        NoCall: 'no-call' as AssessmentEnum,
        Indeterminate: 'indeterminate' as AssessmentEnum
    };
    export type AssessmentNotEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentNotEnum = {
        Present: 'present' as AssessmentNotEnum,
        Absent: 'absent' as AssessmentNotEnum,
        NoCall: 'no-call' as AssessmentNotEnum,
        Indeterminate: 'indeterminate' as AssessmentNotEnum
    };
    export type AssessmentAnyOfEnum = 'present' | 'absent' | 'no-call' | 'indeterminate';
    export const AssessmentAnyOfEnum = {
        Present: 'present' as AssessmentAnyOfEnum,
        Absent: 'absent' as AssessmentAnyOfEnum,
        NoCall: 'no-call' as AssessmentAnyOfEnum,
        Indeterminate: 'indeterminate' as AssessmentAnyOfEnum
    };
    export type ConfidenceEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceEnum = {
        Low: 'low' as ConfidenceEnum,
        High: 'high' as ConfidenceEnum,
        Indeterminate: 'indeterminate' as ConfidenceEnum
    };
    export type ConfidenceNotEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceNotEnum = {
        Low: 'low' as ConfidenceNotEnum,
        High: 'high' as ConfidenceNotEnum,
        Indeterminate: 'indeterminate' as ConfidenceNotEnum
    };
    export type ConfidenceAnyOfEnum = 'low' | 'high' | 'indeterminate';
    export const ConfidenceAnyOfEnum = {
        Low: 'low' as ConfidenceAnyOfEnum,
        High: 'high' as ConfidenceAnyOfEnum,
        Indeterminate: 'indeterminate' as ConfidenceAnyOfEnum
    };
    export type ClinicalRelevanceEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceEnum,
        Benign: 'benign' as ClinicalRelevanceEnum
    };
    export type ClinicalRelevanceNotEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceNotEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceNotEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceNotEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceNotEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceNotEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceNotEnum,
        Benign: 'benign' as ClinicalRelevanceNotEnum
    };
    export type ClinicalRelevanceAnyOfEnum = 'pathogenic' | 'likely_pathogenic' | 'uncertain_significance' | 'ambiguous' | 'likely_benign' | 'benign';
    export const ClinicalRelevanceAnyOfEnum = {
        Pathogenic: 'pathogenic' as ClinicalRelevanceAnyOfEnum,
        LikelyPathogenic: 'likely_pathogenic' as ClinicalRelevanceAnyOfEnum,
        UncertainSignificance: 'uncertain_significance' as ClinicalRelevanceAnyOfEnum,
        Ambiguous: 'ambiguous' as ClinicalRelevanceAnyOfEnum,
        LikelyBenign: 'likely_benign' as ClinicalRelevanceAnyOfEnum,
        Benign: 'benign' as ClinicalRelevanceAnyOfEnum
    };
}


