/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HistoryEvent } from '../model/history-event';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedHistoryEvent } from '../model/paginated-history-event';
// @ts-ignore
import { PaginatedSurgery } from '../model/paginated-surgery';
// @ts-ignore
import { Surgery } from '../model/surgery';
// @ts-ignore
import { SurgeryCreate } from '../model/surgery-create';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    SurgeriesServiceInterface,
    CreateSurgeryRequestParams,
    DeleteSurgeryByIdRequestParams,
    GetAllSurgeryHistoryEventsRequestParams,
    GetSurgeriesRequestParams,
    GetSurgeryByIdRequestParams,
    GetSurgeryHistoryEventByIdRequestParams,
    RevertSurgeryToHistoryEventRequestParams,
    UpdateSurgeryByIdRequestParams
} from './surgeries.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class SurgeriesService extends BaseService implements SurgeriesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Surgery
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSurgery(requestParameters: CreateSurgeryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createSurgery(requestParameters: CreateSurgeryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createSurgery(requestParameters: CreateSurgeryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createSurgery(requestParameters: CreateSurgeryRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryCreate = requestParameters?.surgeryCreate;
        if (surgeryCreate === null || surgeryCreate === undefined) {
            throw new Error('Required parameter surgeryCreate was null or undefined when calling createSurgery.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: surgeryCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Surgery
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSurgeryById(requestParameters: DeleteSurgeryByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteSurgeryById(requestParameters: DeleteSurgeryByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteSurgeryById(requestParameters: DeleteSurgeryByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteSurgeryById(requestParameters: DeleteSurgeryByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling deleteSurgeryById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Surgery History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSurgeryHistoryEvents(requestParameters: GetAllSurgeryHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEvent>;
    public getAllSurgeryHistoryEvents(requestParameters: GetAllSurgeryHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEvent>>;
    public getAllSurgeryHistoryEvents(requestParameters: GetAllSurgeryHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEvent>>;
    public getAllSurgeryHistoryEvents(requestParameters: GetAllSurgeryHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling getAllSurgeryHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Surgeries Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurgeries(requestParameters?: GetSurgeriesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedSurgery>;
    public getSurgeries(requestParameters?: GetSurgeriesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedSurgery>>;
    public getSurgeries(requestParameters?: GetSurgeriesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedSurgery>>;
    public getSurgeries(requestParameters?: GetSurgeriesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const procedure = requestParameters?.procedure;
        const procedureNot = requestParameters?.procedureNot;
        const procedureAnyOf = requestParameters?.procedureAnyOf;
        const procedureNotAnyOf = requestParameters?.procedureNotAnyOf;
        const procedureDescendantsOf = requestParameters?.procedureDescendantsOf;
        const intent = requestParameters?.intent;
        const intentNot = requestParameters?.intentNot;
        const intentAnyOf = requestParameters?.intentAnyOf;
        const bodysiteNotExists = requestParameters?.bodysiteNotExists;
        const bodysiteExists = requestParameters?.bodysiteExists;
        const bodysite = requestParameters?.bodysite;
        const bodysiteNot = requestParameters?.bodysiteNot;
        const bodysiteAnyOf = requestParameters?.bodysiteAnyOf;
        const bodysiteNotAnyOf = requestParameters?.bodysiteNotAnyOf;
        const bodysiteDescendantsOf = requestParameters?.bodysiteDescendantsOf;
        const bodysiteQualifierNotExists = requestParameters?.bodysiteQualifierNotExists;
        const bodysiteQualifierExists = requestParameters?.bodysiteQualifierExists;
        const bodysiteQualifier = requestParameters?.bodysiteQualifier;
        const bodysiteQualifierNot = requestParameters?.bodysiteQualifierNot;
        const bodysiteQualifierAnyOf = requestParameters?.bodysiteQualifierAnyOf;
        const bodysiteQualifierNotAnyOf = requestParameters?.bodysiteQualifierNotAnyOf;
        const bodysiteQualifierDescendantsOf = requestParameters?.bodysiteQualifierDescendantsOf;
        const bodysiteLateralityNotExists = requestParameters?.bodysiteLateralityNotExists;
        const bodysiteLateralityExists = requestParameters?.bodysiteLateralityExists;
        const bodysiteLaterality = requestParameters?.bodysiteLaterality;
        const bodysiteLateralityNot = requestParameters?.bodysiteLateralityNot;
        const bodysiteLateralityAnyOf = requestParameters?.bodysiteLateralityAnyOf;
        const bodysiteLateralityNotAnyOf = requestParameters?.bodysiteLateralityNotAnyOf;
        const bodysiteLateralityDescendantsOf = requestParameters?.bodysiteLateralityDescendantsOf;
        const outcomeNotExists = requestParameters?.outcomeNotExists;
        const outcomeExists = requestParameters?.outcomeExists;
        const outcome = requestParameters?.outcome;
        const outcomeNot = requestParameters?.outcomeNot;
        const outcomeAnyOf = requestParameters?.outcomeAnyOf;
        const outcomeNotAnyOf = requestParameters?.outcomeNotAnyOf;
        const outcomeDescendantsOf = requestParameters?.outcomeDescendantsOf;
        const therapyLineIdNotExists = requestParameters?.therapyLineIdNotExists;
        const therapyLineIdExists = requestParameters?.therapyLineIdExists;
        const therapyLineId = requestParameters?.therapyLineId;
        const therapyLineIdNot = requestParameters?.therapyLineIdNot;
        const therapyLineIdContains = requestParameters?.therapyLineIdContains;
        const therapyLineIdNotContains = requestParameters?.therapyLineIdNotContains;
        const therapyLineIdBeginsWith = requestParameters?.therapyLineIdBeginsWith;
        const therapyLineIdNotBeginsWith = requestParameters?.therapyLineIdNotBeginsWith;
        const therapyLineIdEndsWith = requestParameters?.therapyLineIdEndsWith;
        const therapyLineIdNotEndsWith = requestParameters?.therapyLineIdNotEndsWith;
        const targetedEntitiesIds = requestParameters?.targetedEntitiesIds;
        const targetedEntitiesIdsNot = requestParameters?.targetedEntitiesIdsNot;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateBefore, 'date.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateAfter, 'date.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrBefore, 'date.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrAfter, 'date.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOn, 'date.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateNotOn, 'date.not.on');
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>procedure, 'procedure');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>procedureNot, 'procedure.not');
        if (procedureAnyOf) {
            procedureAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'procedure.anyOf');
            })
        }
        if (procedureNotAnyOf) {
            procedureNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'procedure.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>procedureDescendantsOf, 'procedure.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intent, 'intent');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intentNot, 'intent.not');
        if (intentAnyOf) {
            intentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'intent.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteNotExists, 'bodysite.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteExists, 'bodysite.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysite, 'bodysite');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteNot, 'bodysite.not');
        if (bodysiteAnyOf) {
            bodysiteAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysite.anyOf');
            })
        }
        if (bodysiteNotAnyOf) {
            bodysiteNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysite.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteDescendantsOf, 'bodysite.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteQualifierNotExists, 'bodysiteQualifier.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteQualifierExists, 'bodysiteQualifier.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteQualifier, 'bodysiteQualifier');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteQualifierNot, 'bodysiteQualifier.not');
        if (bodysiteQualifierAnyOf) {
            bodysiteQualifierAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysiteQualifier.anyOf');
            })
        }
        if (bodysiteQualifierNotAnyOf) {
            bodysiteQualifierNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysiteQualifier.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteQualifierDescendantsOf, 'bodysiteQualifier.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteLateralityNotExists, 'bodysiteLaterality.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteLateralityExists, 'bodysiteLaterality.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteLaterality, 'bodysiteLaterality');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteLateralityNot, 'bodysiteLaterality.not');
        if (bodysiteLateralityAnyOf) {
            bodysiteLateralityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysiteLaterality.anyOf');
            })
        }
        if (bodysiteLateralityNotAnyOf) {
            bodysiteLateralityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bodysiteLaterality.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>bodysiteLateralityDescendantsOf, 'bodysiteLaterality.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outcomeNotExists, 'outcome.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outcomeExists, 'outcome.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outcome, 'outcome');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outcomeNot, 'outcome.not');
        if (outcomeAnyOf) {
            outcomeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'outcome.anyOf');
            })
        }
        if (outcomeNotAnyOf) {
            outcomeNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'outcome.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outcomeDescendantsOf, 'outcome.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotExists, 'therapyLineId.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdExists, 'therapyLineId.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineId, 'therapyLineId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNot, 'therapyLineId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdContains, 'therapyLineId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotContains, 'therapyLineId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdBeginsWith, 'therapyLineId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotBeginsWith, 'therapyLineId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdEndsWith, 'therapyLineId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotEndsWith, 'therapyLineId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>targetedEntitiesIds, 'targetedEntitiesIds');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>targetedEntitiesIdsNot, 'targetedEntitiesIds.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries`;
        return this.httpClient.request<PaginatedSurgery>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Surgery By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurgeryById(requestParameters: GetSurgeryByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Surgery>;
    public getSurgeryById(requestParameters: GetSurgeryByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Surgery>>;
    public getSurgeryById(requestParameters: GetSurgeryByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Surgery>>;
    public getSurgeryById(requestParameters: GetSurgeryByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling getSurgeryById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Surgery>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Surgery History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurgeryHistoryEventById(requestParameters: GetSurgeryHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEvent>;
    public getSurgeryHistoryEventById(requestParameters: GetSurgeryHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEvent>>;
    public getSurgeryHistoryEventById(requestParameters: GetSurgeryHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEvent>>;
    public getSurgeryHistoryEventById(requestParameters: GetSurgeryHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling getSurgeryHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getSurgeryHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Surgery To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertSurgeryToHistoryEvent(requestParameters: RevertSurgeryToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertSurgeryToHistoryEvent(requestParameters: RevertSurgeryToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertSurgeryToHistoryEvent(requestParameters: RevertSurgeryToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertSurgeryToHistoryEvent(requestParameters: RevertSurgeryToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling revertSurgeryToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertSurgeryToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Surgery
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSurgeryById(requestParameters: UpdateSurgeryByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateSurgeryById(requestParameters: UpdateSurgeryByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateSurgeryById(requestParameters: UpdateSurgeryByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateSurgeryById(requestParameters: UpdateSurgeryByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const surgeryId = requestParameters?.surgeryId;
        if (surgeryId === null || surgeryId === undefined) {
            throw new Error('Required parameter surgeryId was null or undefined when calling updateSurgeryById.');
        }
        const surgeryCreate = requestParameters?.surgeryCreate;
        if (surgeryCreate === null || surgeryCreate === undefined) {
            throw new Error('Required parameter surgeryCreate was null or undefined when calling updateSurgeryById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/surgeries/${this.configuration.encodeParam({name: "surgeryId", value: surgeryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: surgeryCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
