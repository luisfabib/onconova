/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiAllauthAppV1AccountProvidersDeleteRequest } from '../model/api-allauth-app-v1-account-providers-delete-request';
// @ts-ignore
import { ApiAllauthAppV1AccountProvidersGet200Response } from '../model/api-allauth-app-v1-account-providers-get200-response';
// @ts-ignore
import { ErrorResponse } from '../model/error-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    AccountProvidersServiceInterface,
    ApiAllauthAppV1AccountProvidersDeleteRequestParams,
    ApiAllauthAppV1AccountProvidersGetRequestParams
} from './account-providers.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AccountProvidersService extends BaseService implements AccountProvidersServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Disconnect a third-party provider account 
     * Disconnect a third-party provider account, returning the remaining accounts that are still connected. The disconnect is not allowed if it would leave the account unusable. For example, if no password was set up yet. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountProvidersDelete(requestParameters: ApiAllauthAppV1AccountProvidersDeleteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountProvidersGet200Response>;
    public apiAllauthAppV1AccountProvidersDelete(requestParameters: ApiAllauthAppV1AccountProvidersDeleteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountProvidersGet200Response>>;
    public apiAllauthAppV1AccountProvidersDelete(requestParameters: ApiAllauthAppV1AccountProvidersDeleteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountProvidersGet200Response>>;
    public apiAllauthAppV1AccountProvidersDelete(requestParameters: ApiAllauthAppV1AccountProvidersDeleteRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountProvidersDelete.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const apiAllauthAppV1AccountProvidersDeleteRequest = requestParameters?.apiAllauthAppV1AccountProvidersDeleteRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/providers`;
        return this.httpClient.request<ApiAllauthAppV1AccountProvidersGet200Response>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: apiAllauthAppV1AccountProvidersDeleteRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List the connected third-party provider accounts
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountProvidersGet(requestParameters: ApiAllauthAppV1AccountProvidersGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountProvidersGet200Response>;
    public apiAllauthAppV1AccountProvidersGet(requestParameters: ApiAllauthAppV1AccountProvidersGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountProvidersGet200Response>>;
    public apiAllauthAppV1AccountProvidersGet(requestParameters: ApiAllauthAppV1AccountProvidersGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountProvidersGet200Response>>;
    public apiAllauthAppV1AccountProvidersGet(requestParameters: ApiAllauthAppV1AccountProvidersGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountProvidersGet.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/providers`;
        return this.httpClient.request<ApiAllauthAppV1AccountProvidersGet200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
