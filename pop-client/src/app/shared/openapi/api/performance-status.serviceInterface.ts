/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ModifiedResource } from '../model/models';
import { PaginatedPerformanceStatus } from '../model/models';
import { PerformanceStatus } from '../model/models';
import { PerformanceStatusCreate } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreatePerformanceStatusRequestParams {
    performanceStatusCreate: PerformanceStatusCreate;
}

export interface DeletePerformanceStatusRequestParams {
    performanceStatusId: string;
}

export interface GetPerformanceStatusRequestParams {
    ecogInterpretationNotExists?: boolean;
    ecogInterpretationExists?: boolean;
    ecogInterpretation?: string;
    ecogInterpretationNot?: string;
    ecogInterpretationAnyOf?: Array<string>;
    ecogInterpretationNotAnyOf?: Array<string>;
    ecogInterpretationDescendantsOf?: string;
    karnofskyInterpretationNotExists?: boolean;
    karnofskyInterpretationExists?: boolean;
    karnofskyInterpretation?: string;
    karnofskyInterpretationNot?: string;
    karnofskyInterpretationAnyOf?: Array<string>;
    karnofskyInterpretationNotAnyOf?: Array<string>;
    karnofskyInterpretationDescendantsOf?: string;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    ecogScoreNotExists?: boolean;
    ecogScoreExists?: boolean;
    ecogScoreLessThan?: number;
    ecogScoreLessThanOrEqual?: number;
    ecogScoreGreaterThan?: number;
    ecogScoreGreaterThanOrEqual?: number;
    ecogScoreEqual?: number;
    ecogScoreNotEqual?: number;
    ecogScoreBetween?: Array<any>;
    ecogScoreNotBetween?: Array<any>;
    karnofskyScoreNotExists?: boolean;
    karnofskyScoreExists?: boolean;
    karnofskyScoreLessThan?: number;
    karnofskyScoreLessThanOrEqual?: number;
    karnofskyScoreGreaterThan?: number;
    karnofskyScoreGreaterThanOrEqual?: number;
    karnofskyScoreEqual?: number;
    karnofskyScoreNotEqual?: number;
    karnofskyScoreBetween?: Array<any>;
    karnofskyScoreNotBetween?: Array<any>;
    limit?: number;
    offset?: number;
}

export interface GetPerformanceStatusByIdRequestParams {
    performanceStatusId: string;
}

export interface UpdatePerformanceStatusByIdRequestParams {
    performanceStatusId: string;
    performanceStatusCreate: PerformanceStatusCreate;
}


export interface PerformanceStatusServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Performance Status
     * 
* @param requestParameters
     */
    createPerformanceStatus(requestParameters: CreatePerformanceStatusRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Performance Status
     * 
* @param requestParameters
     */
    deletePerformanceStatus(requestParameters: DeletePerformanceStatusRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Performance Status Matching The Query
     * 
* @param requestParameters
     */
    getPerformanceStatus(requestParameters: GetPerformanceStatusRequestParams, extraHttpRequestParams?: any): Observable<PaginatedPerformanceStatus>;

    /**
     * Get Performance Status By Id
     * 
* @param requestParameters
     */
    getPerformanceStatusById(requestParameters: GetPerformanceStatusByIdRequestParams, extraHttpRequestParams?: any): Observable<PerformanceStatus>;

    /**
     * Update Performance Status
     * 
* @param requestParameters
     */
    updatePerformanceStatusById(requestParameters: UpdatePerformanceStatusByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
