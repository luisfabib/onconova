/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { FamilyHistory } from '../model/family-history';
// @ts-ignore
import { FamilyHistoryCreate } from '../model/family-history-create';
// @ts-ignore
import { HistoryEvent } from '../model/history-event';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedFamilyHistory } from '../model/paginated-family-history';
// @ts-ignore
import { PaginatedHistoryEvent } from '../model/paginated-history-event';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    FamilyHistoriesServiceInterface,
    CreateFamilyHistoryRequestParams,
    DeleteFamilyHistoryByIdRequestParams,
    GetAllFamilyHistoryHistoryEventsRequestParams,
    GetFamilyHistoriesRequestParams,
    GetFamilyHistoryByIdRequestParams,
    GetFamilyHistoryHistoryEventByIdRequestParams,
    RevertFamilyHistoryToHistoryEventRequestParams,
    UpdateFamilyHistoryRequestParams
} from './family-histories.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class FamilyHistoriesService extends BaseService implements FamilyHistoriesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Family History
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFamilyHistory(requestParameters: CreateFamilyHistoryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createFamilyHistory(requestParameters: CreateFamilyHistoryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createFamilyHistory(requestParameters: CreateFamilyHistoryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createFamilyHistory(requestParameters: CreateFamilyHistoryRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryCreate = requestParameters?.familyHistoryCreate;
        if (familyHistoryCreate === null || familyHistoryCreate === undefined) {
            throw new Error('Required parameter familyHistoryCreate was null or undefined when calling createFamilyHistory.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: familyHistoryCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Family History
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFamilyHistoryById(requestParameters: DeleteFamilyHistoryByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteFamilyHistoryById(requestParameters: DeleteFamilyHistoryByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteFamilyHistoryById(requestParameters: DeleteFamilyHistoryByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteFamilyHistoryById(requestParameters: DeleteFamilyHistoryByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling deleteFamilyHistoryById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Family History History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllFamilyHistoryHistoryEvents(requestParameters: GetAllFamilyHistoryHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEvent>;
    public getAllFamilyHistoryHistoryEvents(requestParameters: GetAllFamilyHistoryHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEvent>>;
    public getAllFamilyHistoryHistoryEvents(requestParameters: GetAllFamilyHistoryHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEvent>>;
    public getAllFamilyHistoryHistoryEvents(requestParameters: GetAllFamilyHistoryHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling getAllFamilyHistoryHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Family Member Histories Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFamilyHistories(requestParameters?: GetFamilyHistoriesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedFamilyHistory>;
    public getFamilyHistories(requestParameters?: GetFamilyHistoriesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedFamilyHistory>>;
    public getFamilyHistories(requestParameters?: GetFamilyHistoriesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedFamilyHistory>>;
    public getFamilyHistories(requestParameters?: GetFamilyHistoriesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const relationship = requestParameters?.relationship;
        const relationshipNot = requestParameters?.relationshipNot;
        const relationshipAnyOf = requestParameters?.relationshipAnyOf;
        const relationshipNotAnyOf = requestParameters?.relationshipNotAnyOf;
        const relationshipDescendantsOf = requestParameters?.relationshipDescendantsOf;
        const hadCancer = requestParameters?.hadCancer;
        const contributedToDeathNotExists = requestParameters?.contributedToDeathNotExists;
        const contributedToDeathExists = requestParameters?.contributedToDeathExists;
        const contributedToDeath = requestParameters?.contributedToDeath;
        const onsetAgeNotExists = requestParameters?.onsetAgeNotExists;
        const onsetAgeExists = requestParameters?.onsetAgeExists;
        const onsetAgeLessThan = requestParameters?.onsetAgeLessThan;
        const onsetAgeLessThanOrEqual = requestParameters?.onsetAgeLessThanOrEqual;
        const onsetAgeGreaterThan = requestParameters?.onsetAgeGreaterThan;
        const onsetAgeGreaterThanOrEqual = requestParameters?.onsetAgeGreaterThanOrEqual;
        const onsetAgeEqual = requestParameters?.onsetAgeEqual;
        const onsetAgeNotEqual = requestParameters?.onsetAgeNotEqual;
        const onsetAgeBetween = requestParameters?.onsetAgeBetween;
        const onsetAgeNotBetween = requestParameters?.onsetAgeNotBetween;
        const topographyNotExists = requestParameters?.topographyNotExists;
        const topographyExists = requestParameters?.topographyExists;
        const topography = requestParameters?.topography;
        const topographyNot = requestParameters?.topographyNot;
        const topographyAnyOf = requestParameters?.topographyAnyOf;
        const topographyNotAnyOf = requestParameters?.topographyNotAnyOf;
        const topographyDescendantsOf = requestParameters?.topographyDescendantsOf;
        const morphologyNotExists = requestParameters?.morphologyNotExists;
        const morphologyExists = requestParameters?.morphologyExists;
        const morphology = requestParameters?.morphology;
        const morphologyNot = requestParameters?.morphologyNot;
        const morphologyAnyOf = requestParameters?.morphologyAnyOf;
        const morphologyNotAnyOf = requestParameters?.morphologyNotAnyOf;
        const morphologyDescendantsOf = requestParameters?.morphologyDescendantsOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateBefore, 'date.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateAfter, 'date.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrBefore, 'date.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrAfter, 'date.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOn, 'date.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateNotOn, 'date.not.on');
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>relationship, 'relationship');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>relationshipNot, 'relationship.not');
        if (relationshipAnyOf) {
            relationshipAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'relationship.anyOf');
            })
        }
        if (relationshipNotAnyOf) {
            relationshipNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'relationship.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>relationshipDescendantsOf, 'relationship.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>hadCancer, 'hadCancer');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>contributedToDeathNotExists, 'contributedToDeath.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>contributedToDeathExists, 'contributedToDeath.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>contributedToDeath, 'contributedToDeath');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeNotExists, 'onsetAge.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeExists, 'onsetAge.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeLessThan, 'onsetAge.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeLessThanOrEqual, 'onsetAge.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeGreaterThan, 'onsetAge.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeGreaterThanOrEqual, 'onsetAge.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeEqual, 'onsetAge.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>onsetAgeNotEqual, 'onsetAge.not.equal');
        if (onsetAgeBetween) {
            onsetAgeBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'onsetAge.between');
            })
        }
        if (onsetAgeNotBetween) {
            onsetAgeNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'onsetAge.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>topographyNotExists, 'topography.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>topographyExists, 'topography.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>topography, 'topography');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>topographyNot, 'topography.not');
        if (topographyAnyOf) {
            topographyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'topography.anyOf');
            })
        }
        if (topographyNotAnyOf) {
            topographyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'topography.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>topographyDescendantsOf, 'topography.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>morphologyNotExists, 'morphology.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>morphologyExists, 'morphology.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>morphology, 'morphology');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>morphologyNot, 'morphology.not');
        if (morphologyAnyOf) {
            morphologyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'morphology.anyOf');
            })
        }
        if (morphologyNotAnyOf) {
            morphologyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'morphology.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>morphologyDescendantsOf, 'morphology.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories`;
        return this.httpClient.request<PaginatedFamilyHistory>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Family History By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFamilyHistoryById(requestParameters: GetFamilyHistoryByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FamilyHistory>;
    public getFamilyHistoryById(requestParameters: GetFamilyHistoryByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FamilyHistory>>;
    public getFamilyHistoryById(requestParameters: GetFamilyHistoryByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FamilyHistory>>;
    public getFamilyHistoryById(requestParameters: GetFamilyHistoryByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling getFamilyHistoryById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<FamilyHistory>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Family History History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFamilyHistoryHistoryEventById(requestParameters: GetFamilyHistoryHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEvent>;
    public getFamilyHistoryHistoryEventById(requestParameters: GetFamilyHistoryHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEvent>>;
    public getFamilyHistoryHistoryEventById(requestParameters: GetFamilyHistoryHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEvent>>;
    public getFamilyHistoryHistoryEventById(requestParameters: GetFamilyHistoryHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling getFamilyHistoryHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getFamilyHistoryHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Family History To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertFamilyHistoryToHistoryEvent(requestParameters: RevertFamilyHistoryToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertFamilyHistoryToHistoryEvent(requestParameters: RevertFamilyHistoryToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertFamilyHistoryToHistoryEvent(requestParameters: RevertFamilyHistoryToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertFamilyHistoryToHistoryEvent(requestParameters: RevertFamilyHistoryToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling revertFamilyHistoryToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertFamilyHistoryToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Family History
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFamilyHistory(requestParameters: UpdateFamilyHistoryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateFamilyHistory(requestParameters: UpdateFamilyHistoryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateFamilyHistory(requestParameters: UpdateFamilyHistoryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateFamilyHistory(requestParameters: UpdateFamilyHistoryRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const familyHistoryId = requestParameters?.familyHistoryId;
        if (familyHistoryId === null || familyHistoryId === undefined) {
            throw new Error('Required parameter familyHistoryId was null or undefined when calling updateFamilyHistory.');
        }
        const familyHistoryCreate = requestParameters?.familyHistoryCreate;
        if (familyHistoryCreate === null || familyHistoryCreate === undefined) {
            throw new Error('Required parameter familyHistoryCreate was null or undefined when calling updateFamilyHistory.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/family-histories/${this.configuration.encodeParam({name: "familyHistoryId", value: familyHistoryId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: familyHistoryCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
