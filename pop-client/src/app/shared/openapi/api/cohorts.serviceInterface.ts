/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Cohort } from '../model/models';
import { CohortContribution } from '../model/models';
import { CohortCreate } from '../model/models';
import { CohortTraitAverage } from '../model/models';
import { CohortTraitCounts } from '../model/models';
import { CohortTraitMedian } from '../model/models';
import { DatasetRule } from '../model/models';
import { HistoryEventWithSchema } from '../model/models';
import { KapplerMeierCurve } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedAny } from '../model/models';
import { PaginatedCohort } from '../model/models';
import { PaginatedHistoryEventWithSchema } from '../model/models';
import { PaginatedPatientCase } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateCohortRequestParams {
    cohortCreate: CohortCreate;
}

export interface DeleteCohortByIdRequestParams {
    cohortId: string;
}

export interface ExportCohortDatasetRequestParams {
    cohortId: string;
    datasetRule: Array<DatasetRule>;
}

export interface GetAllCohortHistoryEventsRequestParams {
    cohortId: string;
    limit?: number;
    offset?: number;
}

export interface GetCohortByIdRequestParams {
    cohortId: string;
}

export interface GetCohortCasesRequestParams {
    cohortId: string;
    anonymized?: boolean;
    limit?: number;
    offset?: number;
}

export interface GetCohortContributorsRequestParams {
    cohortId: string;
    limit?: number;
    offset?: number;
}

export interface GetCohortDatasetRequestParams {
    cohortId: string;
    datasetId: string;
    limit?: number;
    offset?: number;
}

export interface GetCohortDatasetDynamicallyRequestParams {
    cohortId: string;
    datasetRule: Array<DatasetRule>;
    limit?: number;
    offset?: number;
}

export interface GetCohortGenomicsRequestParams {
    cohortId: string;
}

export interface GetCohortHistoryEventByIdRequestParams {
    cohortId: string;
    eventId: string;
}

export interface GetCohortOverallSurvivalCurveRequestParams {
    cohortId: string;
}

export interface GetCohortProgressionFreeSurvivalCurveRequestParams {
    cohortId: string;
    therapyLine: string;
}

export interface GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams {
    cohortId: string;
    therapyLine: string;
}

export interface GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams {
    cohortId: string;
    therapyLine: string;
}

export interface GetCohortTraitAverageRequestParams {
    cohortId: string;
    trait: string;
}

export interface GetCohortTraitCountsRequestParams {
    cohortId: string;
    trait: string;
}

export interface GetCohortTraitMedianRequestParams {
    cohortId: string;
    trait: string;
}

export interface GetCohortsRequestParams {
    populationLessThan?: number;
    populationLessThanOrEqual?: number;
    populationGreaterThan?: number;
    populationGreaterThanOrEqual?: number;
    populationEqual?: number;
    populationNotEqual?: number;
    populationBetween?: Array<any>;
    populationNotBetween?: Array<any>;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    idAnyOf?: Array<string>;
    idNotAnyOf?: Array<string>;
    name?: string;
    nameNot?: string;
    nameContains?: string;
    nameNotContains?: string;
    nameBeginsWith?: string;
    nameNotBeginsWith?: string;
    nameEndsWith?: string;
    nameNotEndsWith?: string;
    nameAnyOf?: Array<string>;
    nameNotAnyOf?: Array<string>;
    includeCriteriaNotExists?: boolean;
    includeCriteriaExists?: boolean;
    excludeCriteriaNotExists?: boolean;
    excludeCriteriaExists?: boolean;
    isPublic?: boolean;
    projectIdNotExists?: boolean;
    projectIdExists?: boolean;
    projectId?: string;
    projectIdNot?: string;
    projectIdContains?: string;
    projectIdNotContains?: string;
    projectIdBeginsWith?: string;
    projectIdNotBeginsWith?: string;
    projectIdEndsWith?: string;
    projectIdNotEndsWith?: string;
    projectIdAnyOf?: Array<string>;
    projectIdNotAnyOf?: Array<string>;
    casesIds?: string;
    casesIdsNot?: string;
    casesIdsContains?: string;
    casesIdsNotContains?: string;
    casesIdsBeginsWith?: string;
    casesIdsNotBeginsWith?: string;
    casesIdsEndsWith?: string;
    casesIdsNotEndsWith?: string;
    casesIdsAnyOf?: Array<string>;
    casesIdsNotAnyOf?: Array<string>;
    manualChoicesIds?: string;
    manualChoicesIdsNot?: string;
    manualChoicesIdsContains?: string;
    manualChoicesIdsNotContains?: string;
    manualChoicesIdsBeginsWith?: string;
    manualChoicesIdsNotBeginsWith?: string;
    manualChoicesIdsEndsWith?: string;
    manualChoicesIdsNotEndsWith?: string;
    manualChoicesIdsAnyOf?: Array<string>;
    manualChoicesIdsNotAnyOf?: Array<string>;
    frozenSetIds?: string;
    frozenSetIdsNot?: string;
    frozenSetIdsContains?: string;
    frozenSetIdsNotContains?: string;
    frozenSetIdsBeginsWith?: string;
    frozenSetIdsNotBeginsWith?: string;
    frozenSetIdsEndsWith?: string;
    frozenSetIdsNotEndsWith?: string;
    frozenSetIdsAnyOf?: Array<string>;
    frozenSetIdsNotAnyOf?: Array<string>;
    createdBy?: string | null;
    limit?: number;
    offset?: number;
}

export interface RevertCohortToHistoryEventRequestParams {
    cohortId: string;
    eventId: string;
}

export interface UpdateCohortRequestParams {
    cohortId: string;
    cohortCreate: CohortCreate;
}


export interface CohortsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Cohort
     * 
* @param requestParameters
     */
    createCohort(requestParameters: CreateCohortRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Cohort
     * 
* @param requestParameters
     */
    deleteCohortById(requestParameters: DeleteCohortByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Export Cohort Dataset
     * 
* @param requestParameters
     */
    exportCohortDataset(requestParameters: ExportCohortDatasetRequestParams, extraHttpRequestParams?: any): Observable<any>;

    /**
     * Get All Cohort History Events
     * 
* @param requestParameters
     */
    getAllCohortHistoryEvents(requestParameters: GetAllCohortHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get Cohort By Id
     * 
* @param requestParameters
     */
    getCohortById(requestParameters: GetCohortByIdRequestParams, extraHttpRequestParams?: any): Observable<Cohort>;

    /**
     * Get Cohort Cases
     * 
* @param requestParameters
     */
    getCohortCases(requestParameters: GetCohortCasesRequestParams, extraHttpRequestParams?: any): Observable<PaginatedPatientCase>;

    /**
     * Get Cohort Contributions
     * 
* @param requestParameters
     */
    getCohortContributors(requestParameters: GetCohortContributorsRequestParams, extraHttpRequestParams?: any): Observable<Array<CohortContribution>>;

    /**
     * Get Cohort Dataset
     * 
* @param requestParameters
     */
    getCohortDataset(requestParameters: GetCohortDatasetRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAny>;

    /**
     * Construct Cohort Dataset
     * 
* @param requestParameters
     */
    getCohortDatasetDynamically(requestParameters: GetCohortDatasetDynamicallyRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAny>;

    /**
     * Get Cohort Genomics
     * 
* @param requestParameters
     */
    getCohortGenomics(requestParameters: GetCohortGenomicsRequestParams, extraHttpRequestParams?: any): Observable<{ [key: string]: any; }>;

    /**
     * Get Cohort History Event By Id
     * 
* @param requestParameters
     */
    getCohortHistoryEventById(requestParameters: GetCohortHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get Cohort Overall Survival Curve
     * 
* @param requestParameters
     */
    getCohortOverallSurvivalCurve(requestParameters: GetCohortOverallSurvivalCurveRequestParams, extraHttpRequestParams?: any): Observable<KapplerMeierCurve>;

    /**
     * Get Cohort Progression Free Survival Curve
     * 
* @param requestParameters
     */
    getCohortProgressionFreeSurvivalCurve(requestParameters: GetCohortProgressionFreeSurvivalCurveRequestParams, extraHttpRequestParams?: any): Observable<KapplerMeierCurve>;

    /**
     * Get Cohort Progression Free Survival Curve By Drug Combinations
     * 
* @param requestParameters
     */
    getCohortProgressionFreeSurvivalCurveByDrugCombinations(requestParameters: GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams, extraHttpRequestParams?: any): Observable<{ [key: string]: any; }>;

    /**
     * Get Cohort Progression Free Survival Curve By Therapy Classifications
     * 
* @param requestParameters
     */
    getCohortProgressionFreeSurvivalCurveByTherapyClassifications(requestParameters: GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams, extraHttpRequestParams?: any): Observable<{ [key: string]: any; }>;

    /**
     * Get Cohort Trait Average
     * 
* @param requestParameters
     */
    getCohortTraitAverage(requestParameters: GetCohortTraitAverageRequestParams, extraHttpRequestParams?: any): Observable<CohortTraitAverage>;

    /**
     * Get Cohort Trait Counts
     * 
* @param requestParameters
     */
    getCohortTraitCounts(requestParameters: GetCohortTraitCountsRequestParams, extraHttpRequestParams?: any): Observable<Array<CohortTraitCounts>>;

    /**
     * Get Cohort Trait Median
     * 
* @param requestParameters
     */
    getCohortTraitMedian(requestParameters: GetCohortTraitMedianRequestParams, extraHttpRequestParams?: any): Observable<CohortTraitMedian>;

    /**
     * Get All Cohorts Matching The Query
     * 
* @param requestParameters
     */
    getCohorts(requestParameters: GetCohortsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedCohort>;

    /**
     * Revert Cohort To History Event
     * 
* @param requestParameters
     */
    revertCohortToHistoryEvent(requestParameters: RevertCohortToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Cohort
     * 
* @param requestParameters
     */
    updateCohort(requestParameters: UpdateCohortRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
