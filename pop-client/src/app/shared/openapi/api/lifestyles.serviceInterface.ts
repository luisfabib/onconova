/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { HistoryEvent } from '../model/models';
import { Lifestyle } from '../model/models';
import { LifestyleCreate } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedHistoryEvent } from '../model/models';
import { PaginatedLifestyle } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateLifestyleRequestParams {
    lifestyleCreate: LifestyleCreate;
}

export interface DeleteLifestyleByIdRequestParams {
    lifestyleId: string;
}

export interface GetAllLifestyleHistoryEventsRequestParams {
    lifestyleId: string;
    limit?: number;
    offset?: number;
}

export interface GetLifestyleByIdRequestParams {
    lifestyleId: string;
}

export interface GetLifestyleHistoryEventByIdRequestParams {
    lifestyleId: string;
    eventId: string;
}

export interface GetLifestylesRequestParams {
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    smokingStatusNotExists?: boolean;
    smokingStatusExists?: boolean;
    smokingStatus?: string;
    smokingStatusNot?: string;
    smokingStatusAnyOf?: Array<string>;
    smokingStatusNotAnyOf?: Array<string>;
    smokingStatusDescendantsOf?: string;
    smokingPackyearsNotExists?: boolean;
    smokingPackyearsExists?: boolean;
    smokingPackyearsLessThan?: number;
    smokingPackyearsLessThanOrEqual?: number;
    smokingPackyearsGreaterThan?: number;
    smokingPackyearsGreaterThanOrEqual?: number;
    smokingPackyearsEqual?: number;
    smokingPackyearsNotEqual?: number;
    smokingPackyearsBetween?: Array<any>;
    smokingPackyearsNotBetween?: Array<any>;
    smokingQuitedNotExists?: boolean;
    smokingQuitedExists?: boolean;
    smokingQuitedLessThan?: number;
    smokingQuitedLessThanOrEqual?: number;
    smokingQuitedGreaterThan?: number;
    smokingQuitedGreaterThanOrEqual?: number;
    smokingQuitedEqual?: number;
    smokingQuitedNotEqual?: number;
    smokingQuitedBetween?: Array<any>;
    smokingQuitedNotBetween?: Array<any>;
    alcoholConsumptionNotExists?: boolean;
    alcoholConsumptionExists?: boolean;
    alcoholConsumption?: string;
    alcoholConsumptionNot?: string;
    alcoholConsumptionAnyOf?: Array<string>;
    alcoholConsumptionNotAnyOf?: Array<string>;
    alcoholConsumptionDescendantsOf?: string;
    nightSleepNotExists?: boolean;
    nightSleepExists?: boolean;
    nightSleepLessThan?: number;
    nightSleepLessThanOrEqual?: number;
    nightSleepGreaterThan?: number;
    nightSleepGreaterThanOrEqual?: number;
    nightSleepEqual?: number;
    nightSleepNotEqual?: number;
    nightSleepBetween?: Array<any>;
    nightSleepNotBetween?: Array<any>;
    recreationalDrugsNotExists?: boolean;
    recreationalDrugsExists?: boolean;
    recreationalDrugs?: string;
    recreationalDrugsNot?: string;
    recreationalDrugsAnyOf?: Array<string>;
    recreationalDrugsNotAnyOf?: Array<string>;
    recreationalDrugsDescendantsOf?: string;
    recreationalDrugsAllOf?: Array<string>;
    recreationalDrugsNotAllOf?: Array<string>;
    exposuresNotExists?: boolean;
    exposuresExists?: boolean;
    exposures?: string;
    exposuresNot?: string;
    exposuresAnyOf?: Array<string>;
    exposuresNotAnyOf?: Array<string>;
    exposuresDescendantsOf?: string;
    exposuresAllOf?: Array<string>;
    exposuresNotAllOf?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface RevertLifestyleToHistoryEventRequestParams {
    lifestyleId: string;
    eventId: string;
}

export interface UpdateLifestyleByIdRequestParams {
    lifestyleId: string;
    lifestyleCreate: LifestyleCreate;
}


export interface LifestylesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Lifestyle
     * 
* @param requestParameters
     */
    createLifestyle(requestParameters: CreateLifestyleRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Lifestyle
     * 
* @param requestParameters
     */
    deleteLifestyleById(requestParameters: DeleteLifestyleByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Lifestyle History Events
     * 
* @param requestParameters
     */
    getAllLifestyleHistoryEvents(requestParameters: GetAllLifestyleHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEvent>;

    /**
     * Get Lifestyle By Id
     * 
* @param requestParameters
     */
    getLifestyleById(requestParameters: GetLifestyleByIdRequestParams, extraHttpRequestParams?: any): Observable<Lifestyle>;

    /**
     * Get Lifestyle History Event By Id
     * 
* @param requestParameters
     */
    getLifestyleHistoryEventById(requestParameters: GetLifestyleHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEvent>;

    /**
     * Get All Lifestyles Matching The Query
     * 
* @param requestParameters
     */
    getLifestyles(requestParameters: GetLifestylesRequestParams, extraHttpRequestParams?: any): Observable<PaginatedLifestyle>;

    /**
     * Revert Lifestyle To History Event
     * 
* @param requestParameters
     */
    revertLifestyleToHistoryEvent(requestParameters: RevertLifestyleToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Lifestyle
     * 
* @param requestParameters
     */
    updateLifestyleById(requestParameters: UpdateLifestyleByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
