/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HistoryEvent } from '../model/history-event';
// @ts-ignore
import { Lifestyle } from '../model/lifestyle';
// @ts-ignore
import { LifestyleCreate } from '../model/lifestyle-create';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedHistoryEvent } from '../model/paginated-history-event';
// @ts-ignore
import { PaginatedLifestyle } from '../model/paginated-lifestyle';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    LifestylesServiceInterface,
    CreateLifestyleRequestParams,
    DeleteLifestyleByIdRequestParams,
    GetAllLifestyleHistoryEventsRequestParams,
    GetLifestyleByIdRequestParams,
    GetLifestyleHistoryEventByIdRequestParams,
    GetLifestylesRequestParams,
    RevertLifestyleToHistoryEventRequestParams,
    UpdateLifestyleByIdRequestParams
} from './lifestyles.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class LifestylesService extends BaseService implements LifestylesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Lifestyle
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLifestyle(requestParameters: CreateLifestyleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createLifestyle(requestParameters: CreateLifestyleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createLifestyle(requestParameters: CreateLifestyleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createLifestyle(requestParameters: CreateLifestyleRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleCreate = requestParameters?.lifestyleCreate;
        if (lifestyleCreate === null || lifestyleCreate === undefined) {
            throw new Error('Required parameter lifestyleCreate was null or undefined when calling createLifestyle.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: lifestyleCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Lifestyle
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLifestyleById(requestParameters: DeleteLifestyleByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteLifestyleById(requestParameters: DeleteLifestyleByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteLifestyleById(requestParameters: DeleteLifestyleByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteLifestyleById(requestParameters: DeleteLifestyleByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling deleteLifestyleById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Lifestyle History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllLifestyleHistoryEvents(requestParameters: GetAllLifestyleHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEvent>;
    public getAllLifestyleHistoryEvents(requestParameters: GetAllLifestyleHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEvent>>;
    public getAllLifestyleHistoryEvents(requestParameters: GetAllLifestyleHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEvent>>;
    public getAllLifestyleHistoryEvents(requestParameters: GetAllLifestyleHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling getAllLifestyleHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Lifestyle By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLifestyleById(requestParameters: GetLifestyleByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Lifestyle>;
    public getLifestyleById(requestParameters: GetLifestyleByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Lifestyle>>;
    public getLifestyleById(requestParameters: GetLifestyleByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Lifestyle>>;
    public getLifestyleById(requestParameters: GetLifestyleByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling getLifestyleById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Lifestyle>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Lifestyle History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLifestyleHistoryEventById(requestParameters: GetLifestyleHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEvent>;
    public getLifestyleHistoryEventById(requestParameters: GetLifestyleHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEvent>>;
    public getLifestyleHistoryEventById(requestParameters: GetLifestyleHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEvent>>;
    public getLifestyleHistoryEventById(requestParameters: GetLifestyleHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling getLifestyleHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getLifestyleHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Lifestyles Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLifestyles(requestParameters?: GetLifestylesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedLifestyle>;
    public getLifestyles(requestParameters?: GetLifestylesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedLifestyle>>;
    public getLifestyles(requestParameters?: GetLifestylesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedLifestyle>>;
    public getLifestyles(requestParameters?: GetLifestylesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const smokingStatusNotExists = requestParameters?.smokingStatusNotExists;
        const smokingStatusExists = requestParameters?.smokingStatusExists;
        const smokingStatus = requestParameters?.smokingStatus;
        const smokingStatusNot = requestParameters?.smokingStatusNot;
        const smokingStatusAnyOf = requestParameters?.smokingStatusAnyOf;
        const smokingStatusNotAnyOf = requestParameters?.smokingStatusNotAnyOf;
        const smokingStatusDescendantsOf = requestParameters?.smokingStatusDescendantsOf;
        const smokingPackyearsNotExists = requestParameters?.smokingPackyearsNotExists;
        const smokingPackyearsExists = requestParameters?.smokingPackyearsExists;
        const smokingPackyearsLessThan = requestParameters?.smokingPackyearsLessThan;
        const smokingPackyearsLessThanOrEqual = requestParameters?.smokingPackyearsLessThanOrEqual;
        const smokingPackyearsGreaterThan = requestParameters?.smokingPackyearsGreaterThan;
        const smokingPackyearsGreaterThanOrEqual = requestParameters?.smokingPackyearsGreaterThanOrEqual;
        const smokingPackyearsEqual = requestParameters?.smokingPackyearsEqual;
        const smokingPackyearsNotEqual = requestParameters?.smokingPackyearsNotEqual;
        const smokingPackyearsBetween = requestParameters?.smokingPackyearsBetween;
        const smokingPackyearsNotBetween = requestParameters?.smokingPackyearsNotBetween;
        const smokingQuitedNotExists = requestParameters?.smokingQuitedNotExists;
        const smokingQuitedExists = requestParameters?.smokingQuitedExists;
        const smokingQuitedLessThan = requestParameters?.smokingQuitedLessThan;
        const smokingQuitedLessThanOrEqual = requestParameters?.smokingQuitedLessThanOrEqual;
        const smokingQuitedGreaterThan = requestParameters?.smokingQuitedGreaterThan;
        const smokingQuitedGreaterThanOrEqual = requestParameters?.smokingQuitedGreaterThanOrEqual;
        const smokingQuitedEqual = requestParameters?.smokingQuitedEqual;
        const smokingQuitedNotEqual = requestParameters?.smokingQuitedNotEqual;
        const smokingQuitedBetween = requestParameters?.smokingQuitedBetween;
        const smokingQuitedNotBetween = requestParameters?.smokingQuitedNotBetween;
        const alcoholConsumptionNotExists = requestParameters?.alcoholConsumptionNotExists;
        const alcoholConsumptionExists = requestParameters?.alcoholConsumptionExists;
        const alcoholConsumption = requestParameters?.alcoholConsumption;
        const alcoholConsumptionNot = requestParameters?.alcoholConsumptionNot;
        const alcoholConsumptionAnyOf = requestParameters?.alcoholConsumptionAnyOf;
        const alcoholConsumptionNotAnyOf = requestParameters?.alcoholConsumptionNotAnyOf;
        const alcoholConsumptionDescendantsOf = requestParameters?.alcoholConsumptionDescendantsOf;
        const nightSleepNotExists = requestParameters?.nightSleepNotExists;
        const nightSleepExists = requestParameters?.nightSleepExists;
        const nightSleepLessThan = requestParameters?.nightSleepLessThan;
        const nightSleepLessThanOrEqual = requestParameters?.nightSleepLessThanOrEqual;
        const nightSleepGreaterThan = requestParameters?.nightSleepGreaterThan;
        const nightSleepGreaterThanOrEqual = requestParameters?.nightSleepGreaterThanOrEqual;
        const nightSleepEqual = requestParameters?.nightSleepEqual;
        const nightSleepNotEqual = requestParameters?.nightSleepNotEqual;
        const nightSleepBetween = requestParameters?.nightSleepBetween;
        const nightSleepNotBetween = requestParameters?.nightSleepNotBetween;
        const recreationalDrugsNotExists = requestParameters?.recreationalDrugsNotExists;
        const recreationalDrugsExists = requestParameters?.recreationalDrugsExists;
        const recreationalDrugs = requestParameters?.recreationalDrugs;
        const recreationalDrugsNot = requestParameters?.recreationalDrugsNot;
        const recreationalDrugsAnyOf = requestParameters?.recreationalDrugsAnyOf;
        const recreationalDrugsNotAnyOf = requestParameters?.recreationalDrugsNotAnyOf;
        const recreationalDrugsDescendantsOf = requestParameters?.recreationalDrugsDescendantsOf;
        const recreationalDrugsAllOf = requestParameters?.recreationalDrugsAllOf;
        const recreationalDrugsNotAllOf = requestParameters?.recreationalDrugsNotAllOf;
        const exposuresNotExists = requestParameters?.exposuresNotExists;
        const exposuresExists = requestParameters?.exposuresExists;
        const exposures = requestParameters?.exposures;
        const exposuresNot = requestParameters?.exposuresNot;
        const exposuresAnyOf = requestParameters?.exposuresAnyOf;
        const exposuresNotAnyOf = requestParameters?.exposuresNotAnyOf;
        const exposuresDescendantsOf = requestParameters?.exposuresDescendantsOf;
        const exposuresAllOf = requestParameters?.exposuresAllOf;
        const exposuresNotAllOf = requestParameters?.exposuresNotAllOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateBefore, 'date.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateAfter, 'date.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrBefore, 'date.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrAfter, 'date.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOn, 'date.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateNotOn, 'date.not.on');
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingStatusNotExists, 'smokingStatus.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingStatusExists, 'smokingStatus.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingStatus, 'smokingStatus');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingStatusNot, 'smokingStatus.not');
        if (smokingStatusAnyOf) {
            smokingStatusAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingStatus.anyOf');
            })
        }
        if (smokingStatusNotAnyOf) {
            smokingStatusNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingStatus.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingStatusDescendantsOf, 'smokingStatus.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsNotExists, 'smokingPackyears.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsExists, 'smokingPackyears.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsLessThan, 'smokingPackyears.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsLessThanOrEqual, 'smokingPackyears.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsGreaterThan, 'smokingPackyears.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsGreaterThanOrEqual, 'smokingPackyears.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsEqual, 'smokingPackyears.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingPackyearsNotEqual, 'smokingPackyears.not.equal');
        if (smokingPackyearsBetween) {
            smokingPackyearsBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingPackyears.between');
            })
        }
        if (smokingPackyearsNotBetween) {
            smokingPackyearsNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingPackyears.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedNotExists, 'smokingQuited.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedExists, 'smokingQuited.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedLessThan, 'smokingQuited.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedLessThanOrEqual, 'smokingQuited.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedGreaterThan, 'smokingQuited.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedGreaterThanOrEqual, 'smokingQuited.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedEqual, 'smokingQuited.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>smokingQuitedNotEqual, 'smokingQuited.not.equal');
        if (smokingQuitedBetween) {
            smokingQuitedBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingQuited.between');
            })
        }
        if (smokingQuitedNotBetween) {
            smokingQuitedNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'smokingQuited.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alcoholConsumptionNotExists, 'alcoholConsumption.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alcoholConsumptionExists, 'alcoholConsumption.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alcoholConsumption, 'alcoholConsumption');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alcoholConsumptionNot, 'alcoholConsumption.not');
        if (alcoholConsumptionAnyOf) {
            alcoholConsumptionAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alcoholConsumption.anyOf');
            })
        }
        if (alcoholConsumptionNotAnyOf) {
            alcoholConsumptionNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alcoholConsumption.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alcoholConsumptionDescendantsOf, 'alcoholConsumption.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepNotExists, 'nightSleep.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepExists, 'nightSleep.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepLessThan, 'nightSleep.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepLessThanOrEqual, 'nightSleep.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepGreaterThan, 'nightSleep.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepGreaterThanOrEqual, 'nightSleep.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepEqual, 'nightSleep.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nightSleepNotEqual, 'nightSleep.not.equal');
        if (nightSleepBetween) {
            nightSleepBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nightSleep.between');
            })
        }
        if (nightSleepNotBetween) {
            nightSleepNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nightSleep.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>recreationalDrugsNotExists, 'recreationalDrugs.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>recreationalDrugsExists, 'recreationalDrugs.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>recreationalDrugs, 'recreationalDrugs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>recreationalDrugsNot, 'recreationalDrugs.not');
        if (recreationalDrugsAnyOf) {
            recreationalDrugsAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recreationalDrugs.anyOf');
            })
        }
        if (recreationalDrugsNotAnyOf) {
            recreationalDrugsNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recreationalDrugs.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>recreationalDrugsDescendantsOf, 'recreationalDrugs.descendantsOf');
        if (recreationalDrugsAllOf) {
            recreationalDrugsAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recreationalDrugs.allOf');
            })
        }
        if (recreationalDrugsNotAllOf) {
            recreationalDrugsNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'recreationalDrugs.not.allOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exposuresNotExists, 'exposures.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exposuresExists, 'exposures.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exposures, 'exposures');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exposuresNot, 'exposures.not');
        if (exposuresAnyOf) {
            exposuresAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'exposures.anyOf');
            })
        }
        if (exposuresNotAnyOf) {
            exposuresNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'exposures.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exposuresDescendantsOf, 'exposures.descendantsOf');
        if (exposuresAllOf) {
            exposuresAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'exposures.allOf');
            })
        }
        if (exposuresNotAllOf) {
            exposuresNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'exposures.not.allOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles`;
        return this.httpClient.request<PaginatedLifestyle>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Lifestyle To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertLifestyleToHistoryEvent(requestParameters: RevertLifestyleToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertLifestyleToHistoryEvent(requestParameters: RevertLifestyleToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertLifestyleToHistoryEvent(requestParameters: RevertLifestyleToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertLifestyleToHistoryEvent(requestParameters: RevertLifestyleToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling revertLifestyleToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertLifestyleToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Lifestyle
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLifestyleById(requestParameters: UpdateLifestyleByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateLifestyleById(requestParameters: UpdateLifestyleByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateLifestyleById(requestParameters: UpdateLifestyleByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateLifestyleById(requestParameters: UpdateLifestyleByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const lifestyleId = requestParameters?.lifestyleId;
        if (lifestyleId === null || lifestyleId === undefined) {
            throw new Error('Required parameter lifestyleId was null or undefined when calling updateLifestyleById.');
        }
        const lifestyleCreate = requestParameters?.lifestyleCreate;
        if (lifestyleCreate === null || lifestyleCreate === undefined) {
            throw new Error('Required parameter lifestyleCreate was null or undefined when calling updateLifestyleById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/lifestyles/${this.configuration.encodeParam({name: "lifestyleId", value: lifestyleId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: lifestyleCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
