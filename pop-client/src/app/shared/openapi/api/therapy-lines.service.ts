/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HistoryEvent } from '../model/history-event';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedHistoryEvent } from '../model/paginated-history-event';
// @ts-ignore
import { PaginatedTherapyLine } from '../model/paginated-therapy-line';
// @ts-ignore
import { TherapyLine } from '../model/therapy-line';
// @ts-ignore
import { TherapyLineCreate } from '../model/therapy-line-create';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    TherapyLinesServiceInterface,
    CreateTherapyLineRequestParams,
    DeleteTherapyLineRequestParams,
    GetAllTherapyLineHistoryEventsRequestParams,
    GetReassignedPatientCaseTherapyLinesRequestParams,
    GetTherapyLineByIdRequestParams,
    GetTherapyLineHistoryEventByIdRequestParams,
    GetTherapyLinesRequestParams,
    RevertTherapyLineToHistoryEventRequestParams,
    UpdateTherapyLineRequestParams
} from './therapy-lines.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class TherapyLinesService extends BaseService implements TherapyLinesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createTherapyLine(requestParameters: CreateTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineCreate = requestParameters?.therapyLineCreate;
        if (therapyLineCreate === null || therapyLineCreate === undefined) {
            throw new Error('Required parameter therapyLineCreate was null or undefined when calling createTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: therapyLineCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteTherapyLine(requestParameters: DeleteTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling deleteTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Therapy Line History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTherapyLineHistoryEvents(requestParameters: GetAllTherapyLineHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEvent>;
    public getAllTherapyLineHistoryEvents(requestParameters: GetAllTherapyLineHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEvent>>;
    public getAllTherapyLineHistoryEvents(requestParameters: GetAllTherapyLineHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEvent>>;
    public getAllTherapyLineHistoryEvents(requestParameters: GetAllTherapyLineHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling getAllTherapyLineHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Reassigned Patient Case Therapy Lines
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<TherapyLine>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<TherapyLine>>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<TherapyLine>>>;
    public getReassignedPatientCaseTherapyLines(requestParameters: GetReassignedPatientCaseTherapyLinesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const caseId = requestParameters?.caseId;
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getReassignedPatientCaseTherapyLines.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "caseId", value: caseId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/re-assignments`;
        return this.httpClient.request<Array<TherapyLine>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Therapy Line By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TherapyLine>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TherapyLine>>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TherapyLine>>;
    public getTherapyLineById(requestParameters: GetTherapyLineByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling getTherapyLineById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<TherapyLine>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Therapy Line History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTherapyLineHistoryEventById(requestParameters: GetTherapyLineHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEvent>;
    public getTherapyLineHistoryEventById(requestParameters: GetTherapyLineHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEvent>>;
    public getTherapyLineHistoryEventById(requestParameters: GetTherapyLineHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEvent>>;
    public getTherapyLineHistoryEventById(requestParameters: GetTherapyLineHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling getTherapyLineHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getTherapyLineHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEvent>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Therapy Lines Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedTherapyLine>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedTherapyLine>>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedTherapyLine>>;
    public getTherapyLines(requestParameters?: GetTherapyLinesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const periodNotExists = requestParameters?.periodNotExists;
        const periodExists = requestParameters?.periodExists;
        const periodOverlaps = requestParameters?.periodOverlaps;
        const periodNotOverlaps = requestParameters?.periodNotOverlaps;
        const periodContains = requestParameters?.periodContains;
        const periodNotContains = requestParameters?.periodNotContains;
        const periodContainedBy = requestParameters?.periodContainedBy;
        const periodNotContainedBy = requestParameters?.periodNotContainedBy;
        const label = requestParameters?.label;
        const labelNot = requestParameters?.labelNot;
        const labelContains = requestParameters?.labelContains;
        const labelNotContains = requestParameters?.labelNotContains;
        const labelBeginsWith = requestParameters?.labelBeginsWith;
        const labelNotBeginsWith = requestParameters?.labelNotBeginsWith;
        const labelEndsWith = requestParameters?.labelEndsWith;
        const labelNotEndsWith = requestParameters?.labelNotEndsWith;
        const progressionFreeSurvivalNotExists = requestParameters?.progressionFreeSurvivalNotExists;
        const progressionFreeSurvivalExists = requestParameters?.progressionFreeSurvivalExists;
        const progressionFreeSurvivalLessThan = requestParameters?.progressionFreeSurvivalLessThan;
        const progressionFreeSurvivalLessThanOrEqual = requestParameters?.progressionFreeSurvivalLessThanOrEqual;
        const progressionFreeSurvivalGreaterThan = requestParameters?.progressionFreeSurvivalGreaterThan;
        const progressionFreeSurvivalGreaterThanOrEqual = requestParameters?.progressionFreeSurvivalGreaterThanOrEqual;
        const progressionFreeSurvivalEqual = requestParameters?.progressionFreeSurvivalEqual;
        const progressionFreeSurvivalNotEqual = requestParameters?.progressionFreeSurvivalNotEqual;
        const progressionFreeSurvivalBetween = requestParameters?.progressionFreeSurvivalBetween;
        const progressionFreeSurvivalNotBetween = requestParameters?.progressionFreeSurvivalNotBetween;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const ordinalLessThan = requestParameters?.ordinalLessThan;
        const ordinalLessThanOrEqual = requestParameters?.ordinalLessThanOrEqual;
        const ordinalGreaterThan = requestParameters?.ordinalGreaterThan;
        const ordinalGreaterThanOrEqual = requestParameters?.ordinalGreaterThanOrEqual;
        const ordinalEqual = requestParameters?.ordinalEqual;
        const ordinalNotEqual = requestParameters?.ordinalNotEqual;
        const ordinalBetween = requestParameters?.ordinalBetween;
        const ordinalNotBetween = requestParameters?.ordinalNotBetween;
        const intent = requestParameters?.intent;
        const intentNot = requestParameters?.intentNot;
        const intentAnyOf = requestParameters?.intentAnyOf;
        const progressionDateNotExists = requestParameters?.progressionDateNotExists;
        const progressionDateExists = requestParameters?.progressionDateExists;
        const progressionDateBefore = requestParameters?.progressionDateBefore;
        const progressionDateAfter = requestParameters?.progressionDateAfter;
        const progressionDateOnOrBefore = requestParameters?.progressionDateOnOrBefore;
        const progressionDateOnOrAfter = requestParameters?.progressionDateOnOrAfter;
        const progressionDateOn = requestParameters?.progressionDateOn;
        const progressionDateNotOn = requestParameters?.progressionDateNotOn;
        const progressionDateBetween = requestParameters?.progressionDateBetween;
        const progressionDateNotBetween = requestParameters?.progressionDateNotBetween;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>periodNotExists, 'period.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>periodExists, 'period.exists');
        if (periodOverlaps) {
            periodOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.overlaps');
            })
        }
        if (periodNotOverlaps) {
            periodNotOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.overlaps');
            })
        }
        if (periodContains) {
            periodContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.contains');
            })
        }
        if (periodNotContains) {
            periodNotContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.contains');
            })
        }
        if (periodContainedBy) {
            periodContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.containedBy');
            })
        }
        if (periodNotContainedBy) {
            periodNotContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.containedBy');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>label, 'label');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelNot, 'label.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelContains, 'label.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelNotContains, 'label.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelBeginsWith, 'label.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelNotBeginsWith, 'label.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelEndsWith, 'label.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>labelNotEndsWith, 'label.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalNotExists, 'progressionFreeSurvival.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalExists, 'progressionFreeSurvival.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalLessThan, 'progressionFreeSurvival.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalLessThanOrEqual, 'progressionFreeSurvival.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalGreaterThan, 'progressionFreeSurvival.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalGreaterThanOrEqual, 'progressionFreeSurvival.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalEqual, 'progressionFreeSurvival.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionFreeSurvivalNotEqual, 'progressionFreeSurvival.not.equal');
        if (progressionFreeSurvivalBetween) {
            progressionFreeSurvivalBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionFreeSurvival.between');
            })
        }
        if (progressionFreeSurvivalNotBetween) {
            progressionFreeSurvivalNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionFreeSurvival.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalLessThan, 'ordinal.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalLessThanOrEqual, 'ordinal.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalGreaterThan, 'ordinal.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalGreaterThanOrEqual, 'ordinal.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalEqual, 'ordinal.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordinalNotEqual, 'ordinal.not.equal');
        if (ordinalBetween) {
            ordinalBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ordinal.between');
            })
        }
        if (ordinalNotBetween) {
            ordinalNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ordinal.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intent, 'intent');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intentNot, 'intent.not');
        if (intentAnyOf) {
            intentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'intent.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateNotExists, 'progressionDate.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateExists, 'progressionDate.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateBefore, 'progressionDate.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateAfter, 'progressionDate.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateOnOrBefore, 'progressionDate.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateOnOrAfter, 'progressionDate.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateOn, 'progressionDate.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>progressionDateNotOn, 'progressionDate.not.on');
        if (progressionDateBetween) {
            progressionDateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionDate.between');
            })
        }
        if (progressionDateNotBetween) {
            progressionDateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'progressionDate.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines`;
        return this.httpClient.request<PaginatedTherapyLine>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Therapy Line To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertTherapyLineToHistoryEvent(requestParameters: RevertTherapyLineToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertTherapyLineToHistoryEvent(requestParameters: RevertTherapyLineToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertTherapyLineToHistoryEvent(requestParameters: RevertTherapyLineToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertTherapyLineToHistoryEvent(requestParameters: RevertTherapyLineToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling revertTherapyLineToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertTherapyLineToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Therapy Line
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateTherapyLine(requestParameters: UpdateTherapyLineRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const therapyLineId = requestParameters?.therapyLineId;
        if (therapyLineId === null || therapyLineId === undefined) {
            throw new Error('Required parameter therapyLineId was null or undefined when calling updateTherapyLine.');
        }
        const therapyLineCreate = requestParameters?.therapyLineCreate;
        if (therapyLineCreate === null || therapyLineCreate === undefined) {
            throw new Error('Required parameter therapyLineCreate was null or undefined when calling updateTherapyLine.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/therapy-lines/${this.configuration.encodeParam({name: "therapyLineId", value: therapyLineId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: therapyLineCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
