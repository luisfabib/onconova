/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { HistoryEvent } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedHistoryEvent } from '../model/models';
import { PaginatedSurgery } from '../model/models';
import { Surgery } from '../model/models';
import { SurgeryCreate } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateSurgeryRequestParams {
    surgeryCreate: SurgeryCreate;
}

export interface DeleteSurgeryByIdRequestParams {
    surgeryId: string;
}

export interface GetAllSurgeryHistoryEventsRequestParams {
    surgeryId: string;
    limit?: number;
    offset?: number;
}

export interface GetSurgeriesRequestParams {
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    procedure?: string;
    procedureNot?: string;
    procedureAnyOf?: Array<string>;
    procedureNotAnyOf?: Array<string>;
    procedureDescendantsOf?: string;
    intent?: string;
    intentNot?: string;
    intentAnyOf?: Array<'curative' | 'palliative'>;
    bodysiteNotExists?: boolean;
    bodysiteExists?: boolean;
    bodysite?: string;
    bodysiteNot?: string;
    bodysiteAnyOf?: Array<string>;
    bodysiteNotAnyOf?: Array<string>;
    bodysiteDescendantsOf?: string;
    bodysiteQualifierNotExists?: boolean;
    bodysiteQualifierExists?: boolean;
    bodysiteQualifier?: string;
    bodysiteQualifierNot?: string;
    bodysiteQualifierAnyOf?: Array<string>;
    bodysiteQualifierNotAnyOf?: Array<string>;
    bodysiteQualifierDescendantsOf?: string;
    bodysiteLateralityNotExists?: boolean;
    bodysiteLateralityExists?: boolean;
    bodysiteLaterality?: string;
    bodysiteLateralityNot?: string;
    bodysiteLateralityAnyOf?: Array<string>;
    bodysiteLateralityNotAnyOf?: Array<string>;
    bodysiteLateralityDescendantsOf?: string;
    outcomeNotExists?: boolean;
    outcomeExists?: boolean;
    outcome?: string;
    outcomeNot?: string;
    outcomeAnyOf?: Array<string>;
    outcomeNotAnyOf?: Array<string>;
    outcomeDescendantsOf?: string;
    therapyLineIdNotExists?: boolean;
    therapyLineIdExists?: boolean;
    therapyLineId?: string;
    therapyLineIdNot?: string;
    therapyLineIdContains?: string;
    therapyLineIdNotContains?: string;
    therapyLineIdBeginsWith?: string;
    therapyLineIdNotBeginsWith?: string;
    therapyLineIdEndsWith?: string;
    therapyLineIdNotEndsWith?: string;
    targetedEntitiesIds?: string;
    targetedEntitiesIdsNot?: string;
    limit?: number;
    offset?: number;
}

export interface GetSurgeryByIdRequestParams {
    surgeryId: string;
}

export interface GetSurgeryHistoryEventByIdRequestParams {
    surgeryId: string;
    eventId: string;
}

export interface RevertSurgeryToHistoryEventRequestParams {
    surgeryId: string;
    eventId: string;
}

export interface UpdateSurgeryByIdRequestParams {
    surgeryId: string;
    surgeryCreate: SurgeryCreate;
}


export interface SurgeriesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Surgery
     * 
* @param requestParameters
     */
    createSurgery(requestParameters: CreateSurgeryRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Surgery
     * 
* @param requestParameters
     */
    deleteSurgeryById(requestParameters: DeleteSurgeryByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Surgery History Events
     * 
* @param requestParameters
     */
    getAllSurgeryHistoryEvents(requestParameters: GetAllSurgeryHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEvent>;

    /**
     * Get All Surgeries Matching The Query
     * 
* @param requestParameters
     */
    getSurgeries(requestParameters: GetSurgeriesRequestParams, extraHttpRequestParams?: any): Observable<PaginatedSurgery>;

    /**
     * Get Surgery By Id
     * 
* @param requestParameters
     */
    getSurgeryById(requestParameters: GetSurgeryByIdRequestParams, extraHttpRequestParams?: any): Observable<Surgery>;

    /**
     * Get Surgery History Event By Id
     * 
* @param requestParameters
     */
    getSurgeryHistoryEventById(requestParameters: GetSurgeryHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEvent>;

    /**
     * Revert Surgery To History Event
     * 
* @param requestParameters
     */
    revertSurgeryToHistoryEvent(requestParameters: RevertSurgeryToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Surgery
     * 
* @param requestParameters
     */
    updateSurgeryById(requestParameters: UpdateSurgeryByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
