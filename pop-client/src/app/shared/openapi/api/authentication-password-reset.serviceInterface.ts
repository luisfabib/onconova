/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAllauthAppV1AuthEmailVerifyResendPost200Response } from '../model/models';
import { ApiAllauthAppV1AuthPasswordResetGet200Response } from '../model/models';
import { AuthenticatedResponse } from '../model/models';
import { AuthenticationResponse } from '../model/models';
import { ConflictResponse } from '../model/models';
import { ErrorResponse } from '../model/models';
import { RequestPassword } from '../model/models';
import { ResetPassword } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface ApiAllauthAppV1AuthPasswordRequestPostRequestParams {
    client: 'app' | 'browser';
    requestPassword: RequestPassword;
}

export interface ApiAllauthAppV1AuthPasswordResetGetRequestParams {
    client: 'app' | 'browser';
    xPasswordResetKey: string;
}

export interface ApiAllauthAppV1AuthPasswordResetPostRequestParams {
    client: 'app' | 'browser';
    resetPassword?: ResetPassword;
}


export interface AuthenticationPasswordResetServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Request password
     * Initiates the password reset procedure. Depending on whether or not &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED&#x60; is &#x60;True&#x60;, the procedure is either stateless or stateful.  In case codes are used, it is stateful, and a new &#x60;password_reset_by_code&#x60; flow is started. In this case, on a successful password reset request, you will receive a 401 indicating the pending status of this flow.  In case password reset is configured to use (stateless) links, you will receive a 200 on a successful password reset request. 
* @param requestParameters
     */
    apiAllauthAppV1AuthPasswordRequestPost(requestParameters: ApiAllauthAppV1AuthPasswordRequestPostRequestParams, extraHttpRequestParams?: any): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;

    /**
     * Get password reset information
     * Used to obtain information on and validate a password reset key.  The key passed is either the key encoded in the password reset URL that the user has received per email, or, the password reset code in case of &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED&#x60;. Note that in case of a code, the number of requests you can make is limited (by &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_MAX_ATTEMPTS&#x60;). 
* @param requestParameters
     */
    apiAllauthAppV1AuthPasswordResetGet(requestParameters: ApiAllauthAppV1AuthPasswordResetGetRequestParams, extraHttpRequestParams?: any): Observable<ApiAllauthAppV1AuthPasswordResetGet200Response>;

    /**
     * Reset password
     * Perform the password reset, by handing over the password reset key and the new password. After successfully completing the password reset, the user is either logged in (in case &#x60;ACCOUNT_LOGIN_ON_PASSWORD_RESET&#x60; is &#x60;True&#x60;), or, the user will need to proceed to the login page.  In case of the former, a &#x60;200&#x60; status code is returned, in case of the latter a 401. 
* @param requestParameters
     */
    apiAllauthAppV1AuthPasswordResetPost(requestParameters: ApiAllauthAppV1AuthPasswordResetPostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

}
