/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiAllauthAppV1AuthEmailVerifyResendPost200Response } from '../model/api-allauth-app-v1-auth-email-verify-resend-post200-response';
// @ts-ignore
import { ApiAllauthAppV1AuthEmailVerifyResendPost429Response } from '../model/api-allauth-app-v1-auth-email-verify-resend-post429-response';
// @ts-ignore
import { AuthenticatedResponse } from '../model/authenticated-response';
// @ts-ignore
import { AuthenticationResponse } from '../model/authentication-response';
// @ts-ignore
import { ConflictResponse } from '../model/conflict-response';
// @ts-ignore
import { EmailVerificationInfo } from '../model/email-verification-info';
// @ts-ignore
import { ErrorResponse } from '../model/error-response';
// @ts-ignore
import { ForbiddenResponse } from '../model/forbidden-response';
// @ts-ignore
import { Login } from '../model/login';
// @ts-ignore
import { Reauthenticate } from '../model/reauthenticate';
// @ts-ignore
import { Signup } from '../model/signup';
// @ts-ignore
import { VerifyEmail } from '../model/verify-email';
// @ts-ignore
import { VerifyPhone } from '../model/verify-phone';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    AuthenticationAccountServiceInterface,
    ApiAllauthAppV1AuthEmailVerifyGetRequestParams,
    ApiAllauthAppV1AuthEmailVerifyPostRequestParams,
    ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams,
    ApiAllauthAppV1AuthLoginPostRequestParams,
    ApiAllauthAppV1AuthPhoneVerifyPostRequestParams,
    ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams,
    ApiAllauthAppV1AuthReauthenticatePostRequestParams,
    ApiAllauthAppV1AuthSignupPostRequestParams
} from './authentication-account.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AuthenticationAccountService extends BaseService implements AuthenticationAccountServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get email verification information
     * Obtain email verification information, given the token that was sent to the user by email. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthEmailVerifyGet(requestParameters: ApiAllauthAppV1AuthEmailVerifyGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<EmailVerificationInfo>;
    public apiAllauthAppV1AuthEmailVerifyGet(requestParameters: ApiAllauthAppV1AuthEmailVerifyGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<EmailVerificationInfo>>;
    public apiAllauthAppV1AuthEmailVerifyGet(requestParameters: ApiAllauthAppV1AuthEmailVerifyGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<EmailVerificationInfo>>;
    public apiAllauthAppV1AuthEmailVerifyGet(requestParameters: ApiAllauthAppV1AuthEmailVerifyGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const xEmailVerificationKey = requestParameters?.xEmailVerificationKey;
        if (xEmailVerificationKey === null || xEmailVerificationKey === undefined) {
            throw new Error('Required parameter xEmailVerificationKey was null or undefined when calling apiAllauthAppV1AuthEmailVerifyGet.');
        }
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthEmailVerifyGet.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xEmailVerificationKey !== undefined && xEmailVerificationKey !== null) {
            localVarHeaders = localVarHeaders.set('X-Email-Verification-Key', String(xEmailVerificationKey));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/email/verify`;
        return this.httpClient.request<EmailVerificationInfo>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verify an email
     * Complete the email verification process. Depending on the configuration, email addresses are either verified by opening a link that is sent to their email address, or, by inputting a code that is sent. On the API, both cases are handled identically. Meaning, the required key is either the one from the link, or, the code itself.  Note that a status code of 401 does not imply failure. It indicates that the email verification was successful, yet, the user is still not signed in. For example, in case &#x60;ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION&#x60; is set to &#x60;False&#x60;, a 401 is returned when verifying as part of login/signup. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthEmailVerifyPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthEmailVerifyPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthEmailVerifyPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthEmailVerifyPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthEmailVerifyPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const verifyEmail = requestParameters?.verifyEmail;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/email/verify`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: verifyEmail,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resend email verification code
     * Requests a new email verification code. Requires &#x60;ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_RESEND &#x3D; True&#x60;. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthEmailVerifyResendPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;
    public apiAllauthAppV1AuthEmailVerifyResendPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthEmailVerifyResendPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthEmailVerifyResendPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthEmailVerifyResendPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/email/verify/resend`;
        return this.httpClient.request<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login
     * Login using a username-password or email-password combination. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthLoginPost(requestParameters: ApiAllauthAppV1AuthLoginPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthLoginPost(requestParameters: ApiAllauthAppV1AuthLoginPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthLoginPost(requestParameters: ApiAllauthAppV1AuthLoginPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthLoginPost(requestParameters: ApiAllauthAppV1AuthLoginPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthLoginPost.');
        }
        const login = requestParameters?.login;
        if (login === null || login === undefined) {
            throw new Error('Required parameter login was null or undefined when calling apiAllauthAppV1AuthLoginPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/login`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: login,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verify a phone number
     * Complete the phone number verification process. Note that a status code of 401 does not imply failure. It merely indicates that the phone number verification was successful, yet, the user is still not signed in. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthPhoneVerifyPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthPhoneVerifyPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthPhoneVerifyPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthPhoneVerifyPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthPhoneVerifyPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const verifyPhone = requestParameters?.verifyPhone;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/phone/verify`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: verifyPhone,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resend phone number verification code
     * Requests a new phone number verification code. Requires &#x60;ACCOUNT_PHONE_VERIFICATION_SUPPORTS_RESEND &#x3D; True&#x60;. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthPhoneVerifyResendPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;
    public apiAllauthAppV1AuthPhoneVerifyResendPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthPhoneVerifyResendPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthPhoneVerifyResendPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthPhoneVerifyResendPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/phone/verify/resend`;
        return this.httpClient.request<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reauthenticate
     * In order to safeguard the account, some actions require the user to be recently authenticated.  If you try to perform such an action without having been recently authenticated, a &#x60;401&#x60; status is returned, listing flows that can be performed to reauthenticate. One such flow is the flow with ID &#x60;reauthenticate&#x60;, which allows for the user to input the password. This is the endpoint related towards that flow. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthReauthenticatePost(requestParameters: ApiAllauthAppV1AuthReauthenticatePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthReauthenticatePost(requestParameters: ApiAllauthAppV1AuthReauthenticatePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthReauthenticatePost(requestParameters: ApiAllauthAppV1AuthReauthenticatePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthReauthenticatePost(requestParameters: ApiAllauthAppV1AuthReauthenticatePostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthReauthenticatePost.');
        }
        const reauthenticate = requestParameters?.reauthenticate;
        if (reauthenticate === null || reauthenticate === undefined) {
            throw new Error('Required parameter reauthenticate was null or undefined when calling apiAllauthAppV1AuthReauthenticatePost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/reauthenticate`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reauthenticate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Signup
     * Whether or not &#x60;username&#x60;, &#x60;email&#x60;, &#x60;phone&#x60; or combination of those are required depends on the configuration of django-allauth. Additionally, if a custom signup form is used there may be other custom properties required. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthSignupPost(requestParameters: ApiAllauthAppV1AuthSignupPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthSignupPost(requestParameters: ApiAllauthAppV1AuthSignupPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthSignupPost(requestParameters: ApiAllauthAppV1AuthSignupPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthSignupPost(requestParameters: ApiAllauthAppV1AuthSignupPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthSignupPost.');
        }
        const signup = requestParameters?.signup;
        if (signup === null || signup === undefined) {
            throw new Error('Required parameter signup was null or undefined when calling apiAllauthAppV1AuthSignupPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/signup`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: signup,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
