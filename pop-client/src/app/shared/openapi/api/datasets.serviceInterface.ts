/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Dataset } from '../model/models';
import { DatasetCreate } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedDataset } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateDatasetRequestParams {
    datasetCreate: DatasetCreate;
}

export interface DeleteDatasetByIdRequestParams {
    datasetId: string;
}

export interface GetDatasetByIdRequestParams {
    datasetId: string;
}

export interface GetDatasetsRequestParams {
    rulesResource?: string;
    rulesResourceNot?: string;
    rulesResourceAnyOf?: Array<'PatientCase' | 'NeoplasticEntity' | 'TNMStaging' | 'FIGOStaging' | 'BinetStaging' | 'RaiStaging' | 'BreslowDepth' | 'ClarkStaging' | 'ISSStaging' | 'RISSStaging' | 'GleasonGrade' | 'INSSStage' | 'INRGSSStage' | 'WilmsStage' | 'RhabdomyosarcomaClinicalGroup' | 'LymphomaStaging' | 'TumorMarker' | 'RiskAssessment' | 'TherapyLine' | 'SystemicTherapy' | 'SystemicTherapyMedication' | 'Surgery' | 'Radiotherapy' | 'RadiotherapyDosage' | 'RadiotherapySetting' | 'AdverseEvent' | 'AdverseEventSuspectedCause' | 'AdverseEventMitigation' | 'TreatmentResponse' | 'TumorBoard' | 'UnspecifiedTumorBoard' | 'MolecularTumorBoard' | 'MolecularTherapeuticRecommendation' | 'PerformanceStatus' | 'Lifestyle' | 'FamilyHistory' | 'Vitals' | 'ComorbiditiesAssessment' | 'GenomicVariant' | 'GenomicSignature' | 'TumorMutationalBurden' | 'MicrosatelliteInstability' | 'LossOfHeterozygosity' | 'HomologousRecombinationDeficiency' | 'TumorNeoantigenBurden' | 'AneuploidScore'>;
    rulesField?: string;
    rulesFieldNot?: string;
    rulesFieldContains?: string;
    rulesFieldNotContains?: string;
    rulesFieldBeginsWith?: string;
    rulesFieldNotBeginsWith?: string;
    rulesFieldEndsWith?: string;
    rulesFieldNotEndsWith?: string;
    rulesTransformNotExists?: boolean;
    rulesTransformExists?: boolean;
    rulesTransform?: string;
    rulesTransformNot?: string;
    rulesTransformContains?: string;
    rulesTransformNotContains?: string;
    rulesTransformBeginsWith?: string;
    rulesTransformNotBeginsWith?: string;
    rulesTransformEndsWith?: string;
    rulesTransformNotEndsWith?: string;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    name?: string;
    nameNot?: string;
    nameContains?: string;
    nameNotContains?: string;
    nameBeginsWith?: string;
    nameNotBeginsWith?: string;
    nameEndsWith?: string;
    nameNotEndsWith?: string;
    isPublic?: boolean;
    createdBy?: string | null;
    limit?: number;
    offset?: number;
}

export interface UpdateDatasetRequestParams {
    datasetId: string;
    datasetCreate: DatasetCreate;
}


export interface DatasetsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Dataset
     * 
* @param requestParameters
     */
    createDataset(requestParameters: CreateDatasetRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Dataset
     * 
* @param requestParameters
     */
    deleteDatasetById(requestParameters: DeleteDatasetByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get Dataset By Id
     * 
* @param requestParameters
     */
    getDatasetById(requestParameters: GetDatasetByIdRequestParams, extraHttpRequestParams?: any): Observable<Dataset>;

    /**
     * Get All Datasets Matching The Query
     * 
* @param requestParameters
     */
    getDatasets(requestParameters: GetDatasetsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedDataset>;

    /**
     * Update Dataset
     * 
* @param requestParameters
     */
    updateDataset(requestParameters: UpdateDatasetRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
