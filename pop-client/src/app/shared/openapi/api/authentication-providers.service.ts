/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiAllauthAppV1AuthProviderSignupGet200Response } from '../model/api-allauth-app-v1-auth-provider-signup-get200-response';
// @ts-ignore
import { AuthenticatedResponse } from '../model/authenticated-response';
// @ts-ignore
import { AuthenticationResponse } from '../model/authentication-response';
// @ts-ignore
import { ConflictResponse } from '../model/conflict-response';
// @ts-ignore
import { ErrorResponse } from '../model/error-response';
// @ts-ignore
import { ForbiddenResponse } from '../model/forbidden-response';
// @ts-ignore
import { ProviderSignup } from '../model/provider-signup';
// @ts-ignore
import { ProviderToken } from '../model/provider-token';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    AuthenticationProvidersServiceInterface,
    ApiAllauthAppV1AuthProviderSignupGetRequestParams,
    ApiAllauthAppV1AuthProviderSignupPostRequestParams,
    ApiAllauthAppV1AuthProviderTokenPostRequestParams
} from './authentication-providers.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AuthenticationProvidersService extends BaseService implements AuthenticationProvidersServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Provider signup information
     * If, while signing up using a third-party provider account, there is insufficient information received from the provider to automatically complete the signup process, an additional step is needed to complete the missing data before the user is fully signed up and authenticated. The information available so far, such as the pending provider account, can be retrieved via this endpoint. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthProviderSignupGet(requestParameters: ApiAllauthAppV1AuthProviderSignupGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthProviderSignupGet200Response>;
    public apiAllauthAppV1AuthProviderSignupGet(requestParameters: ApiAllauthAppV1AuthProviderSignupGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthProviderSignupGet200Response>>;
    public apiAllauthAppV1AuthProviderSignupGet(requestParameters: ApiAllauthAppV1AuthProviderSignupGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthProviderSignupGet200Response>>;
    public apiAllauthAppV1AuthProviderSignupGet(requestParameters: ApiAllauthAppV1AuthProviderSignupGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthProviderSignupGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/provider/signup`;
        return this.httpClient.request<ApiAllauthAppV1AuthProviderSignupGet200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Provider signup
     * If, while signing up using a third-party provider account, there is insufficient information received from the provider to automatically complete the signup process, an additional step is needed to complete the missing data before the user is fully signed up and authenticated. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthProviderSignupPost(requestParameters: ApiAllauthAppV1AuthProviderSignupPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthProviderSignupPost(requestParameters: ApiAllauthAppV1AuthProviderSignupPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthProviderSignupPost(requestParameters: ApiAllauthAppV1AuthProviderSignupPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthProviderSignupPost(requestParameters: ApiAllauthAppV1AuthProviderSignupPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthProviderSignupPost.');
        }
        const providerSignup = requestParameters?.providerSignup;
        if (providerSignup === null || providerSignup === undefined) {
            throw new Error('Required parameter providerSignup was null or undefined when calling apiAllauthAppV1AuthProviderSignupPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/provider/signup`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: providerSignup,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Provider token
     * Authenticates with a third-party provider using provider tokens received by other means. For example, in case of a mobile app, the authentication flow runs completely on the device itself, without any interaction with the API. Then, when the (device) authentication completes and the mobile app receives an access and/or ID token, it can hand over these tokens via this endpoint to authenticate on the server. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthProviderTokenPost(requestParameters: ApiAllauthAppV1AuthProviderTokenPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthProviderTokenPost(requestParameters: ApiAllauthAppV1AuthProviderTokenPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthProviderTokenPost(requestParameters: ApiAllauthAppV1AuthProviderTokenPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthProviderTokenPost(requestParameters: ApiAllauthAppV1AuthProviderTokenPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthProviderTokenPost.');
        }
        const providerToken = requestParameters?.providerToken;
        if (providerToken === null || providerToken === undefined) {
            throw new Error('Required parameter providerToken was null or undefined when calling apiAllauthAppV1AuthProviderTokenPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/provider/token`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: providerToken,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
