/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { HistoryEventWithSchema } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedHistoryEventWithSchema } from '../model/models';
import { PaginatedProject } from '../model/models';
import { PaginatedProjectDataManagerGrant } from '../model/models';
import { Project } from '../model/models';
import { ProjectCreate } from '../model/models';
import { ProjectDataManagerGrant } from '../model/models';
import { ProjectDataManagerGrantCreate } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateProjectRequestParams {
    projectCreate: ProjectCreate;
}

export interface CreateProjectDataManagerGrantRequestParams {
    projectId: string;
    memberId: string;
    projectDataManagerGrantCreate: ProjectDataManagerGrantCreate;
}

export interface DeleteProjectByIdRequestParams {
    projectId: string;
}

export interface GetAllProjectDataManagementGrantHistoryEventsRequestParams {
    projectId: string;
    memberId: string;
    grantId: string;
    limit?: number;
    offset?: number;
}

export interface GetAllProjectHistoryEventsRequestParams {
    projectId: string;
    limit?: number;
    offset?: number;
}

export interface GetProjectByIdRequestParams {
    projectId: string;
}

export interface GetProjectDataManagementGrantHistoryEventByIdRequestParams {
    projectId: string;
    memberId: string;
    grantId: string;
    eventId: string;
}

export interface GetProjectDataManagerGrantRequestParams {
    projectId: string;
    memberId: string;
    limit?: number;
    offset?: number;
}

export interface GetProjectDataManagerGrantByIdRequestParams {
    projectId: string;
    memberId: string;
    grantId: string;
}

export interface GetProjectHistoryEventByIdRequestParams {
    projectId: string;
    eventId: string;
}

export interface GetProjectsRequestParams {
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    idAnyOf?: Array<string>;
    idNotAnyOf?: Array<string>;
    leaderUsername?: string;
    leaderUsernameNot?: string;
    leaderUsernameAnyOf?: Array<string>;
    leaderUsernameNotAnyOf?: string;
    clinicalCenters?: string;
    clinicalCentersNot?: string;
    clinicalCentersContains?: string;
    clinicalCentersNotContains?: string;
    clinicalCentersBeginsWith?: string;
    clinicalCentersNotBeginsWith?: string;
    clinicalCentersEndsWith?: string;
    clinicalCentersNotEndsWith?: string;
    clinicalCentersAnyOf?: Array<string>;
    clinicalCentersNotAnyOf?: Array<string>;
    title?: string;
    titleNot?: string;
    titleContains?: string;
    titleNotContains?: string;
    titleBeginsWith?: string;
    titleNotBeginsWith?: string;
    titleEndsWith?: string;
    titleNotEndsWith?: string;
    titleAnyOf?: Array<string>;
    titleNotAnyOf?: Array<string>;
    summary?: string;
    summaryNot?: string;
    summaryContains?: string;
    summaryNotContains?: string;
    summaryBeginsWith?: string;
    summaryNotBeginsWith?: string;
    summaryEndsWith?: string;
    summaryNotEndsWith?: string;
    summaryAnyOf?: Array<string>;
    summaryNotAnyOf?: Array<string>;
    ethicsApprovalNumber?: string;
    ethicsApprovalNumberNot?: string;
    ethicsApprovalNumberContains?: string;
    ethicsApprovalNumberNotContains?: string;
    ethicsApprovalNumberBeginsWith?: string;
    ethicsApprovalNumberNotBeginsWith?: string;
    ethicsApprovalNumberEndsWith?: string;
    ethicsApprovalNumberNotEndsWith?: string;
    ethicsApprovalNumberAnyOf?: Array<string>;
    ethicsApprovalNumberNotAnyOf?: Array<string>;
    status?: string;
    statusNot?: string;
    statusAnyOf?: Array<'planned' | 'ongoing' | 'completed' | 'aborted'>;
    membersUsername?: string;
    membersUsernameNot?: string;
    membersUsernameAnyOf?: Array<string>;
    membersUsernameNotAnyOf?: string;
    limit?: number;
    offset?: number;
}

export interface RevertProjectDataManagementGrantToHistoryEventRequestParams {
    projectId: string;
    memberId: string;
    grantId: string;
    eventId: string;
}

export interface RevertProjectToHistoryEventRequestParams {
    projectId: string;
    eventId: string;
}

export interface RevokeProjectDataManagerGrantRequestParams {
    projectId: string;
    memberId: string;
    grantId: string;
}

export interface UpdateProjectByIdRequestParams {
    projectId: string;
    projectCreate: ProjectCreate;
}


export interface ProjectsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Project
     * 
* @param requestParameters
     */
    createProject(requestParameters: CreateProjectRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Create Project Data Manager Grant
     * 
* @param requestParameters
     */
    createProjectDataManagerGrant(requestParameters: CreateProjectDataManagerGrantRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Project
     * 
* @param requestParameters
     */
    deleteProjectById(requestParameters: DeleteProjectByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Project Data Management Grant History Events
     * 
* @param requestParameters
     */
    getAllProjectDataManagementGrantHistoryEvents(requestParameters: GetAllProjectDataManagementGrantHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get All Project History Events
     * 
* @param requestParameters
     */
    getAllProjectHistoryEvents(requestParameters: GetAllProjectHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get Project By Id
     * 
* @param requestParameters
     */
    getProjectById(requestParameters: GetProjectByIdRequestParams, extraHttpRequestParams?: any): Observable<Project>;

    /**
     * Get Project Data Management Grant History Event By Id
     * 
* @param requestParameters
     */
    getProjectDataManagementGrantHistoryEventById(requestParameters: GetProjectDataManagementGrantHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get All Project Data Manager Grant
     * 
* @param requestParameters
     */
    getProjectDataManagerGrant(requestParameters: GetProjectDataManagerGrantRequestParams, extraHttpRequestParams?: any): Observable<PaginatedProjectDataManagerGrant>;

    /**
     * Check Project Data Manager Grant
     * 
* @param requestParameters
     */
    getProjectDataManagerGrantById(requestParameters: GetProjectDataManagerGrantByIdRequestParams, extraHttpRequestParams?: any): Observable<ProjectDataManagerGrant>;

    /**
     * Get Project History Event By Id
     * 
* @param requestParameters
     */
    getProjectHistoryEventById(requestParameters: GetProjectHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get All Projects Matching The Query
     * 
* @param requestParameters
     */
    getProjects(requestParameters: GetProjectsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedProject>;

    /**
     * Revert Project Data Management Grant To History Event
     * 
* @param requestParameters
     */
    revertProjectDataManagementGrantToHistoryEvent(requestParameters: RevertProjectDataManagementGrantToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Revert Project To History Event
     * 
* @param requestParameters
     */
    revertProjectToHistoryEvent(requestParameters: RevertProjectToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Revoke Project Data Manager Grant
     * 
* @param requestParameters
     */
    revokeProjectDataManagerGrant(requestParameters: RevokeProjectDataManagerGrantRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Project
     * 
* @param requestParameters
     */
    updateProjectById(requestParameters: UpdateProjectByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
