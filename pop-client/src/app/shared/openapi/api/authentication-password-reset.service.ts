/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiAllauthAppV1AuthEmailVerifyResendPost200Response } from '../model/api-allauth-app-v1-auth-email-verify-resend-post200-response';
// @ts-ignore
import { ApiAllauthAppV1AuthPasswordResetGet200Response } from '../model/api-allauth-app-v1-auth-password-reset-get200-response';
// @ts-ignore
import { AuthenticatedResponse } from '../model/authenticated-response';
// @ts-ignore
import { AuthenticationResponse } from '../model/authentication-response';
// @ts-ignore
import { ConflictResponse } from '../model/conflict-response';
// @ts-ignore
import { ErrorResponse } from '../model/error-response';
// @ts-ignore
import { RequestPassword } from '../model/request-password';
// @ts-ignore
import { ResetPassword } from '../model/reset-password';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    AuthenticationPasswordResetServiceInterface,
    ApiAllauthAppV1AuthPasswordRequestPostRequestParams,
    ApiAllauthAppV1AuthPasswordResetGetRequestParams,
    ApiAllauthAppV1AuthPasswordResetPostRequestParams
} from './authentication-password-reset.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AuthenticationPasswordResetService extends BaseService implements AuthenticationPasswordResetServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Request password
     * Initiates the password reset procedure. Depending on whether or not &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED&#x60; is &#x60;True&#x60;, the procedure is either stateless or stateful.  In case codes are used, it is stateful, and a new &#x60;password_reset_by_code&#x60; flow is started. In this case, on a successful password reset request, you will receive a 401 indicating the pending status of this flow.  In case password reset is configured to use (stateless) links, you will receive a 200 on a successful password reset request. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthPasswordRequestPost(requestParameters: ApiAllauthAppV1AuthPasswordRequestPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;
    public apiAllauthAppV1AuthPasswordRequestPost(requestParameters: ApiAllauthAppV1AuthPasswordRequestPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthPasswordRequestPost(requestParameters: ApiAllauthAppV1AuthPasswordRequestPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AuthPasswordRequestPost(requestParameters: ApiAllauthAppV1AuthPasswordRequestPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthPasswordRequestPost.');
        }
        const requestPassword = requestParameters?.requestPassword;
        if (requestPassword === null || requestPassword === undefined) {
            throw new Error('Required parameter requestPassword was null or undefined when calling apiAllauthAppV1AuthPasswordRequestPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/password/request`;
        return this.httpClient.request<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: requestPassword,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get password reset information
     * Used to obtain information on and validate a password reset key.  The key passed is either the key encoded in the password reset URL that the user has received per email, or, the password reset code in case of &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED&#x60;. Note that in case of a code, the number of requests you can make is limited (by &#x60;ACCOUNT_PASSWORD_RESET_BY_CODE_MAX_ATTEMPTS&#x60;). 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthPasswordResetGet(requestParameters: ApiAllauthAppV1AuthPasswordResetGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthPasswordResetGet200Response>;
    public apiAllauthAppV1AuthPasswordResetGet(requestParameters: ApiAllauthAppV1AuthPasswordResetGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthPasswordResetGet200Response>>;
    public apiAllauthAppV1AuthPasswordResetGet(requestParameters: ApiAllauthAppV1AuthPasswordResetGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthPasswordResetGet200Response>>;
    public apiAllauthAppV1AuthPasswordResetGet(requestParameters: ApiAllauthAppV1AuthPasswordResetGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthPasswordResetGet.');
        }
        const xPasswordResetKey = requestParameters?.xPasswordResetKey;
        if (xPasswordResetKey === null || xPasswordResetKey === undefined) {
            throw new Error('Required parameter xPasswordResetKey was null or undefined when calling apiAllauthAppV1AuthPasswordResetGet.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xPasswordResetKey !== undefined && xPasswordResetKey !== null) {
            localVarHeaders = localVarHeaders.set('X-Password-Reset-Key', String(xPasswordResetKey));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/password/reset`;
        return this.httpClient.request<ApiAllauthAppV1AuthPasswordResetGet200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset password
     * Perform the password reset, by handing over the password reset key and the new password. After successfully completing the password reset, the user is either logged in (in case &#x60;ACCOUNT_LOGIN_ON_PASSWORD_RESET&#x60; is &#x60;True&#x60;), or, the user will need to proceed to the login page.  In case of the former, a &#x60;200&#x60; status code is returned, in case of the latter a 401. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AuthPasswordResetPost(requestParameters: ApiAllauthAppV1AuthPasswordResetPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuthenticatedResponse>;
    public apiAllauthAppV1AuthPasswordResetPost(requestParameters: ApiAllauthAppV1AuthPasswordResetPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthPasswordResetPost(requestParameters: ApiAllauthAppV1AuthPasswordResetPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuthenticatedResponse>>;
    public apiAllauthAppV1AuthPasswordResetPost(requestParameters: ApiAllauthAppV1AuthPasswordResetPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AuthPasswordResetPost.');
        }
        const resetPassword = requestParameters?.resetPassword;

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/auth/password/reset`;
        return this.httpClient.request<AuthenticatedResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: resetPassword,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
