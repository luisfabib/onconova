/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HistoryEventWithSchema } from '../model/history-event-with-schema';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedHistoryEventWithSchema } from '../model/paginated-history-event-with-schema';
// @ts-ignore
import { PaginatedProject } from '../model/paginated-project';
// @ts-ignore
import { PaginatedProjectDataManagerGrant } from '../model/paginated-project-data-manager-grant';
// @ts-ignore
import { Project } from '../model/project';
// @ts-ignore
import { ProjectCreate } from '../model/project-create';
// @ts-ignore
import { ProjectDataManagerGrant } from '../model/project-data-manager-grant';
// @ts-ignore
import { ProjectDataManagerGrantCreate } from '../model/project-data-manager-grant-create';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    ProjectsServiceInterface,
    CreateProjectRequestParams,
    CreateProjectDataManagerGrantRequestParams,
    DeleteProjectByIdRequestParams,
    DeleteProjectDataManagerGrantRequestParams,
    GetAllProjectHistoryEventsRequestParams,
    GetProjectByIdRequestParams,
    GetProjectDataManagerGrantRequestParams,
    GetProjectDataManagerGrantByIdRequestParams,
    GetProjectHistoryEventByIdRequestParams,
    GetProjectsRequestParams,
    RevertProjectToHistoryEventRequestParams,
    UpdateProjectByIdRequestParams
} from './projects.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ProjectsService extends BaseService implements ProjectsServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Project
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProject(requestParameters: CreateProjectRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createProject(requestParameters: CreateProjectRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createProject(requestParameters: CreateProjectRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createProject(requestParameters: CreateProjectRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectCreate = requestParameters?.projectCreate;
        if (projectCreate === null || projectCreate === undefined) {
            throw new Error('Required parameter projectCreate was null or undefined when calling createProject.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: projectCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Project Data Manager Grant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProjectDataManagerGrant(requestParameters: CreateProjectDataManagerGrantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createProjectDataManagerGrant(requestParameters: CreateProjectDataManagerGrantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createProjectDataManagerGrant(requestParameters: CreateProjectDataManagerGrantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createProjectDataManagerGrant(requestParameters: CreateProjectDataManagerGrantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createProjectDataManagerGrant.');
        }
        const memberId = requestParameters?.memberId;
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling createProjectDataManagerGrant.');
        }
        const projectDataManagerGrantCreate = requestParameters?.projectDataManagerGrantCreate;
        if (projectDataManagerGrantCreate === null || projectDataManagerGrantCreate === undefined) {
            throw new Error('Required parameter projectDataManagerGrantCreate was null or undefined when calling createProjectDataManagerGrant.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/members/${this.configuration.encodeParam({name: "memberId", value: memberId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/data-management/grants`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: projectDataManagerGrantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Project
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProjectById(requestParameters: DeleteProjectByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteProjectById(requestParameters: DeleteProjectByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteProjectById(requestParameters: DeleteProjectByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteProjectById(requestParameters: DeleteProjectByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteProjectById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revoke Project Data Manager Grant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProjectDataManagerGrant(requestParameters: DeleteProjectDataManagerGrantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteProjectDataManagerGrant(requestParameters: DeleteProjectDataManagerGrantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteProjectDataManagerGrant(requestParameters: DeleteProjectDataManagerGrantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteProjectDataManagerGrant(requestParameters: DeleteProjectDataManagerGrantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteProjectDataManagerGrant.');
        }
        const memberId = requestParameters?.memberId;
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteProjectDataManagerGrant.');
        }
        const grantId = requestParameters?.grantId;
        if (grantId === null || grantId === undefined) {
            throw new Error('Required parameter grantId was null or undefined when calling deleteProjectDataManagerGrant.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/members/${this.configuration.encodeParam({name: "memberId", value: memberId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/data-management/grants/${this.configuration.encodeParam({name: "grantId", value: grantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Project History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProjectHistoryEvents(requestParameters: GetAllProjectHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEventWithSchema>;
    public getAllProjectHistoryEvents(requestParameters: GetAllProjectHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEventWithSchema>>;
    public getAllProjectHistoryEvents(requestParameters: GetAllProjectHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEventWithSchema>>;
    public getAllProjectHistoryEvents(requestParameters: GetAllProjectHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getAllProjectHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Project By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectById(requestParameters: GetProjectByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Project>;
    public getProjectById(requestParameters: GetProjectByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Project>>;
    public getProjectById(requestParameters: GetProjectByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Project>>;
    public getProjectById(requestParameters: GetProjectByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getProjectById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Project>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Project Data Manager Grant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectDataManagerGrant(requestParameters: GetProjectDataManagerGrantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedProjectDataManagerGrant>;
    public getProjectDataManagerGrant(requestParameters: GetProjectDataManagerGrantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedProjectDataManagerGrant>>;
    public getProjectDataManagerGrant(requestParameters: GetProjectDataManagerGrantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedProjectDataManagerGrant>>;
    public getProjectDataManagerGrant(requestParameters: GetProjectDataManagerGrantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getProjectDataManagerGrant.');
        }
        const memberId = requestParameters?.memberId;
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getProjectDataManagerGrant.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/members/${this.configuration.encodeParam({name: "memberId", value: memberId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/data-management/grants`;
        return this.httpClient.request<PaginatedProjectDataManagerGrant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check Project Data Manager Grant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectDataManagerGrantById(requestParameters: GetProjectDataManagerGrantByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ProjectDataManagerGrant>;
    public getProjectDataManagerGrantById(requestParameters: GetProjectDataManagerGrantByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ProjectDataManagerGrant>>;
    public getProjectDataManagerGrantById(requestParameters: GetProjectDataManagerGrantByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ProjectDataManagerGrant>>;
    public getProjectDataManagerGrantById(requestParameters: GetProjectDataManagerGrantByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getProjectDataManagerGrantById.');
        }
        const memberId = requestParameters?.memberId;
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getProjectDataManagerGrantById.');
        }
        const grantId = requestParameters?.grantId;
        if (grantId === null || grantId === undefined) {
            throw new Error('Required parameter grantId was null or undefined when calling getProjectDataManagerGrantById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/members/${this.configuration.encodeParam({name: "memberId", value: memberId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/data-management/grants/${this.configuration.encodeParam({name: "grantId", value: grantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ProjectDataManagerGrant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Project History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectHistoryEventById(requestParameters: GetProjectHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEventWithSchema>;
    public getProjectHistoryEventById(requestParameters: GetProjectHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEventWithSchema>>;
    public getProjectHistoryEventById(requestParameters: GetProjectHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEventWithSchema>>;
    public getProjectHistoryEventById(requestParameters: GetProjectHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getProjectHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getProjectHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Projects Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjects(requestParameters?: GetProjectsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedProject>;
    public getProjects(requestParameters?: GetProjectsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedProject>>;
    public getProjects(requestParameters?: GetProjectsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedProject>>;
    public getProjects(requestParameters?: GetProjectsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const leaderRole = requestParameters?.leaderRole;
        const leaderRoleNot = requestParameters?.leaderRoleNot;
        const leaderRoleAnyOf = requestParameters?.leaderRoleAnyOf;
        const leaderCanViewCases = requestParameters?.leaderCanViewCases;
        const leaderCanViewProjects = requestParameters?.leaderCanViewProjects;
        const leaderCanViewCohorts = requestParameters?.leaderCanViewCohorts;
        const leaderCanViewUsers = requestParameters?.leaderCanViewUsers;
        const leaderCanViewDatasets = requestParameters?.leaderCanViewDatasets;
        const leaderCanImportData = requestParameters?.leaderCanImportData;
        const leaderCanManageCases = requestParameters?.leaderCanManageCases;
        const leaderCanManageCohorts = requestParameters?.leaderCanManageCohorts;
        const leaderCanManageDatasets = requestParameters?.leaderCanManageDatasets;
        const leaderCanAnalyzeData = requestParameters?.leaderCanAnalyzeData;
        const leaderCanExportData = requestParameters?.leaderCanExportData;
        const leaderCanManageProjects = requestParameters?.leaderCanManageProjects;
        const leaderCanAccessSensitiveData = requestParameters?.leaderCanAccessSensitiveData;
        const leaderCanAuditLogs = requestParameters?.leaderCanAuditLogs;
        const leaderCanManageUsers = requestParameters?.leaderCanManageUsers;
        const leaderIsSystemAdmin = requestParameters?.leaderIsSystemAdmin;
        const leaderIsProvided = requestParameters?.leaderIsProvided;
        const leaderProviderNotExists = requestParameters?.leaderProviderNotExists;
        const leaderProviderExists = requestParameters?.leaderProviderExists;
        const leaderProvider = requestParameters?.leaderProvider;
        const leaderProviderNot = requestParameters?.leaderProviderNot;
        const leaderProviderContains = requestParameters?.leaderProviderContains;
        const leaderProviderNotContains = requestParameters?.leaderProviderNotContains;
        const leaderProviderBeginsWith = requestParameters?.leaderProviderBeginsWith;
        const leaderProviderNotBeginsWith = requestParameters?.leaderProviderNotBeginsWith;
        const leaderProviderEndsWith = requestParameters?.leaderProviderEndsWith;
        const leaderProviderNotEndsWith = requestParameters?.leaderProviderNotEndsWith;
        const leaderLastLoginNotExists = requestParameters?.leaderLastLoginNotExists;
        const leaderLastLoginExists = requestParameters?.leaderLastLoginExists;
        const leaderLastLoginBefore = requestParameters?.leaderLastLoginBefore;
        const leaderLastLoginAfter = requestParameters?.leaderLastLoginAfter;
        const leaderLastLoginOnOrBefore = requestParameters?.leaderLastLoginOnOrBefore;
        const leaderLastLoginOnOrAfter = requestParameters?.leaderLastLoginOnOrAfter;
        const leaderLastLoginOn = requestParameters?.leaderLastLoginOn;
        const leaderLastLoginNotOn = requestParameters?.leaderLastLoginNotOn;
        const leaderLastLoginBetween = requestParameters?.leaderLastLoginBetween;
        const leaderLastLoginNotBetween = requestParameters?.leaderLastLoginNotBetween;
        const leaderUsername = requestParameters?.leaderUsername;
        const leaderUsernameNot = requestParameters?.leaderUsernameNot;
        const leaderUsernameContains = requestParameters?.leaderUsernameContains;
        const leaderUsernameNotContains = requestParameters?.leaderUsernameNotContains;
        const leaderUsernameBeginsWith = requestParameters?.leaderUsernameBeginsWith;
        const leaderUsernameNotBeginsWith = requestParameters?.leaderUsernameNotBeginsWith;
        const leaderUsernameEndsWith = requestParameters?.leaderUsernameEndsWith;
        const leaderUsernameNotEndsWith = requestParameters?.leaderUsernameNotEndsWith;
        const leaderFirstNameNotExists = requestParameters?.leaderFirstNameNotExists;
        const leaderFirstNameExists = requestParameters?.leaderFirstNameExists;
        const leaderFirstName = requestParameters?.leaderFirstName;
        const leaderFirstNameNot = requestParameters?.leaderFirstNameNot;
        const leaderFirstNameContains = requestParameters?.leaderFirstNameContains;
        const leaderFirstNameNotContains = requestParameters?.leaderFirstNameNotContains;
        const leaderFirstNameBeginsWith = requestParameters?.leaderFirstNameBeginsWith;
        const leaderFirstNameNotBeginsWith = requestParameters?.leaderFirstNameNotBeginsWith;
        const leaderFirstNameEndsWith = requestParameters?.leaderFirstNameEndsWith;
        const leaderFirstNameNotEndsWith = requestParameters?.leaderFirstNameNotEndsWith;
        const leaderLastNameNotExists = requestParameters?.leaderLastNameNotExists;
        const leaderLastNameExists = requestParameters?.leaderLastNameExists;
        const leaderLastName = requestParameters?.leaderLastName;
        const leaderLastNameNot = requestParameters?.leaderLastNameNot;
        const leaderLastNameContains = requestParameters?.leaderLastNameContains;
        const leaderLastNameNotContains = requestParameters?.leaderLastNameNotContains;
        const leaderLastNameBeginsWith = requestParameters?.leaderLastNameBeginsWith;
        const leaderLastNameNotBeginsWith = requestParameters?.leaderLastNameNotBeginsWith;
        const leaderLastNameEndsWith = requestParameters?.leaderLastNameEndsWith;
        const leaderLastNameNotEndsWith = requestParameters?.leaderLastNameNotEndsWith;
        const leaderEmailNotExists = requestParameters?.leaderEmailNotExists;
        const leaderEmailExists = requestParameters?.leaderEmailExists;
        const leaderEmail = requestParameters?.leaderEmail;
        const leaderEmailNot = requestParameters?.leaderEmailNot;
        const leaderEmailContains = requestParameters?.leaderEmailContains;
        const leaderEmailNotContains = requestParameters?.leaderEmailNotContains;
        const leaderEmailBeginsWith = requestParameters?.leaderEmailBeginsWith;
        const leaderEmailNotBeginsWith = requestParameters?.leaderEmailNotBeginsWith;
        const leaderEmailEndsWith = requestParameters?.leaderEmailEndsWith;
        const leaderEmailNotEndsWith = requestParameters?.leaderEmailNotEndsWith;
        const leaderIsActive = requestParameters?.leaderIsActive;
        const leaderId = requestParameters?.leaderId;
        const leaderIdNot = requestParameters?.leaderIdNot;
        const leaderIdContains = requestParameters?.leaderIdContains;
        const leaderIdNotContains = requestParameters?.leaderIdNotContains;
        const leaderIdBeginsWith = requestParameters?.leaderIdBeginsWith;
        const leaderIdNotBeginsWith = requestParameters?.leaderIdNotBeginsWith;
        const leaderIdEndsWith = requestParameters?.leaderIdEndsWith;
        const leaderIdNotEndsWith = requestParameters?.leaderIdNotEndsWith;
        const leaderTitleNotExists = requestParameters?.leaderTitleNotExists;
        const leaderTitleExists = requestParameters?.leaderTitleExists;
        const leaderTitle = requestParameters?.leaderTitle;
        const leaderTitleNot = requestParameters?.leaderTitleNot;
        const leaderTitleContains = requestParameters?.leaderTitleContains;
        const leaderTitleNotContains = requestParameters?.leaderTitleNotContains;
        const leaderTitleBeginsWith = requestParameters?.leaderTitleBeginsWith;
        const leaderTitleNotBeginsWith = requestParameters?.leaderTitleNotBeginsWith;
        const leaderTitleEndsWith = requestParameters?.leaderTitleEndsWith;
        const leaderTitleNotEndsWith = requestParameters?.leaderTitleNotEndsWith;
        const leaderOrganizationNotExists = requestParameters?.leaderOrganizationNotExists;
        const leaderOrganizationExists = requestParameters?.leaderOrganizationExists;
        const leaderOrganization = requestParameters?.leaderOrganization;
        const leaderOrganizationNot = requestParameters?.leaderOrganizationNot;
        const leaderOrganizationContains = requestParameters?.leaderOrganizationContains;
        const leaderOrganizationNotContains = requestParameters?.leaderOrganizationNotContains;
        const leaderOrganizationBeginsWith = requestParameters?.leaderOrganizationBeginsWith;
        const leaderOrganizationNotBeginsWith = requestParameters?.leaderOrganizationNotBeginsWith;
        const leaderOrganizationEndsWith = requestParameters?.leaderOrganizationEndsWith;
        const leaderOrganizationNotEndsWith = requestParameters?.leaderOrganizationNotEndsWith;
        const leaderDepartmentNotExists = requestParameters?.leaderDepartmentNotExists;
        const leaderDepartmentExists = requestParameters?.leaderDepartmentExists;
        const leaderDepartment = requestParameters?.leaderDepartment;
        const leaderDepartmentNot = requestParameters?.leaderDepartmentNot;
        const leaderDepartmentContains = requestParameters?.leaderDepartmentContains;
        const leaderDepartmentNotContains = requestParameters?.leaderDepartmentNotContains;
        const leaderDepartmentBeginsWith = requestParameters?.leaderDepartmentBeginsWith;
        const leaderDepartmentNotBeginsWith = requestParameters?.leaderDepartmentNotBeginsWith;
        const leaderDepartmentEndsWith = requestParameters?.leaderDepartmentEndsWith;
        const leaderDepartmentNotEndsWith = requestParameters?.leaderDepartmentNotEndsWith;
        const leaderAccessLevelLessThan = requestParameters?.leaderAccessLevelLessThan;
        const leaderAccessLevelLessThanOrEqual = requestParameters?.leaderAccessLevelLessThanOrEqual;
        const leaderAccessLevelGreaterThan = requestParameters?.leaderAccessLevelGreaterThan;
        const leaderAccessLevelGreaterThanOrEqual = requestParameters?.leaderAccessLevelGreaterThanOrEqual;
        const leaderAccessLevelEqual = requestParameters?.leaderAccessLevelEqual;
        const leaderAccessLevelNotEqual = requestParameters?.leaderAccessLevelNotEqual;
        const leaderAccessLevelBetween = requestParameters?.leaderAccessLevelBetween;
        const leaderAccessLevelNotBetween = requestParameters?.leaderAccessLevelNotBetween;
        const clinicalCenters = requestParameters?.clinicalCenters;
        const clinicalCentersNot = requestParameters?.clinicalCentersNot;
        const clinicalCentersContains = requestParameters?.clinicalCentersContains;
        const clinicalCentersNotContains = requestParameters?.clinicalCentersNotContains;
        const clinicalCentersBeginsWith = requestParameters?.clinicalCentersBeginsWith;
        const clinicalCentersNotBeginsWith = requestParameters?.clinicalCentersNotBeginsWith;
        const clinicalCentersEndsWith = requestParameters?.clinicalCentersEndsWith;
        const clinicalCentersNotEndsWith = requestParameters?.clinicalCentersNotEndsWith;
        const title = requestParameters?.title;
        const titleNot = requestParameters?.titleNot;
        const titleContains = requestParameters?.titleContains;
        const titleNotContains = requestParameters?.titleNotContains;
        const titleBeginsWith = requestParameters?.titleBeginsWith;
        const titleNotBeginsWith = requestParameters?.titleNotBeginsWith;
        const titleEndsWith = requestParameters?.titleEndsWith;
        const titleNotEndsWith = requestParameters?.titleNotEndsWith;
        const summary = requestParameters?.summary;
        const summaryNot = requestParameters?.summaryNot;
        const summaryContains = requestParameters?.summaryContains;
        const summaryNotContains = requestParameters?.summaryNotContains;
        const summaryBeginsWith = requestParameters?.summaryBeginsWith;
        const summaryNotBeginsWith = requestParameters?.summaryNotBeginsWith;
        const summaryEndsWith = requestParameters?.summaryEndsWith;
        const summaryNotEndsWith = requestParameters?.summaryNotEndsWith;
        const ethicsApprovalNumber = requestParameters?.ethicsApprovalNumber;
        const ethicsApprovalNumberNot = requestParameters?.ethicsApprovalNumberNot;
        const ethicsApprovalNumberContains = requestParameters?.ethicsApprovalNumberContains;
        const ethicsApprovalNumberNotContains = requestParameters?.ethicsApprovalNumberNotContains;
        const ethicsApprovalNumberBeginsWith = requestParameters?.ethicsApprovalNumberBeginsWith;
        const ethicsApprovalNumberNotBeginsWith = requestParameters?.ethicsApprovalNumberNotBeginsWith;
        const ethicsApprovalNumberEndsWith = requestParameters?.ethicsApprovalNumberEndsWith;
        const ethicsApprovalNumberNotEndsWith = requestParameters?.ethicsApprovalNumberNotEndsWith;
        const status = requestParameters?.status;
        const statusNot = requestParameters?.statusNot;
        const statusAnyOf = requestParameters?.statusAnyOf;
        const membersRole = requestParameters?.membersRole;
        const membersRoleNot = requestParameters?.membersRoleNot;
        const membersRoleAnyOf = requestParameters?.membersRoleAnyOf;
        const membersCanViewCases = requestParameters?.membersCanViewCases;
        const membersCanViewProjects = requestParameters?.membersCanViewProjects;
        const membersCanViewCohorts = requestParameters?.membersCanViewCohorts;
        const membersCanViewUsers = requestParameters?.membersCanViewUsers;
        const membersCanViewDatasets = requestParameters?.membersCanViewDatasets;
        const membersCanImportData = requestParameters?.membersCanImportData;
        const membersCanManageCases = requestParameters?.membersCanManageCases;
        const membersCanManageCohorts = requestParameters?.membersCanManageCohorts;
        const membersCanManageDatasets = requestParameters?.membersCanManageDatasets;
        const membersCanAnalyzeData = requestParameters?.membersCanAnalyzeData;
        const membersCanExportData = requestParameters?.membersCanExportData;
        const membersCanManageProjects = requestParameters?.membersCanManageProjects;
        const membersCanAccessSensitiveData = requestParameters?.membersCanAccessSensitiveData;
        const membersCanAuditLogs = requestParameters?.membersCanAuditLogs;
        const membersCanManageUsers = requestParameters?.membersCanManageUsers;
        const membersIsSystemAdmin = requestParameters?.membersIsSystemAdmin;
        const membersIsProvided = requestParameters?.membersIsProvided;
        const membersProviderNotExists = requestParameters?.membersProviderNotExists;
        const membersProviderExists = requestParameters?.membersProviderExists;
        const membersProvider = requestParameters?.membersProvider;
        const membersProviderNot = requestParameters?.membersProviderNot;
        const membersProviderContains = requestParameters?.membersProviderContains;
        const membersProviderNotContains = requestParameters?.membersProviderNotContains;
        const membersProviderBeginsWith = requestParameters?.membersProviderBeginsWith;
        const membersProviderNotBeginsWith = requestParameters?.membersProviderNotBeginsWith;
        const membersProviderEndsWith = requestParameters?.membersProviderEndsWith;
        const membersProviderNotEndsWith = requestParameters?.membersProviderNotEndsWith;
        const membersLastLoginNotExists = requestParameters?.membersLastLoginNotExists;
        const membersLastLoginExists = requestParameters?.membersLastLoginExists;
        const membersLastLoginBefore = requestParameters?.membersLastLoginBefore;
        const membersLastLoginAfter = requestParameters?.membersLastLoginAfter;
        const membersLastLoginOnOrBefore = requestParameters?.membersLastLoginOnOrBefore;
        const membersLastLoginOnOrAfter = requestParameters?.membersLastLoginOnOrAfter;
        const membersLastLoginOn = requestParameters?.membersLastLoginOn;
        const membersLastLoginNotOn = requestParameters?.membersLastLoginNotOn;
        const membersLastLoginBetween = requestParameters?.membersLastLoginBetween;
        const membersLastLoginNotBetween = requestParameters?.membersLastLoginNotBetween;
        const membersUsername = requestParameters?.membersUsername;
        const membersUsernameNot = requestParameters?.membersUsernameNot;
        const membersUsernameContains = requestParameters?.membersUsernameContains;
        const membersUsernameNotContains = requestParameters?.membersUsernameNotContains;
        const membersUsernameBeginsWith = requestParameters?.membersUsernameBeginsWith;
        const membersUsernameNotBeginsWith = requestParameters?.membersUsernameNotBeginsWith;
        const membersUsernameEndsWith = requestParameters?.membersUsernameEndsWith;
        const membersUsernameNotEndsWith = requestParameters?.membersUsernameNotEndsWith;
        const membersFirstNameNotExists = requestParameters?.membersFirstNameNotExists;
        const membersFirstNameExists = requestParameters?.membersFirstNameExists;
        const membersFirstName = requestParameters?.membersFirstName;
        const membersFirstNameNot = requestParameters?.membersFirstNameNot;
        const membersFirstNameContains = requestParameters?.membersFirstNameContains;
        const membersFirstNameNotContains = requestParameters?.membersFirstNameNotContains;
        const membersFirstNameBeginsWith = requestParameters?.membersFirstNameBeginsWith;
        const membersFirstNameNotBeginsWith = requestParameters?.membersFirstNameNotBeginsWith;
        const membersFirstNameEndsWith = requestParameters?.membersFirstNameEndsWith;
        const membersFirstNameNotEndsWith = requestParameters?.membersFirstNameNotEndsWith;
        const membersLastNameNotExists = requestParameters?.membersLastNameNotExists;
        const membersLastNameExists = requestParameters?.membersLastNameExists;
        const membersLastName = requestParameters?.membersLastName;
        const membersLastNameNot = requestParameters?.membersLastNameNot;
        const membersLastNameContains = requestParameters?.membersLastNameContains;
        const membersLastNameNotContains = requestParameters?.membersLastNameNotContains;
        const membersLastNameBeginsWith = requestParameters?.membersLastNameBeginsWith;
        const membersLastNameNotBeginsWith = requestParameters?.membersLastNameNotBeginsWith;
        const membersLastNameEndsWith = requestParameters?.membersLastNameEndsWith;
        const membersLastNameNotEndsWith = requestParameters?.membersLastNameNotEndsWith;
        const membersEmailNotExists = requestParameters?.membersEmailNotExists;
        const membersEmailExists = requestParameters?.membersEmailExists;
        const membersEmail = requestParameters?.membersEmail;
        const membersEmailNot = requestParameters?.membersEmailNot;
        const membersEmailContains = requestParameters?.membersEmailContains;
        const membersEmailNotContains = requestParameters?.membersEmailNotContains;
        const membersEmailBeginsWith = requestParameters?.membersEmailBeginsWith;
        const membersEmailNotBeginsWith = requestParameters?.membersEmailNotBeginsWith;
        const membersEmailEndsWith = requestParameters?.membersEmailEndsWith;
        const membersEmailNotEndsWith = requestParameters?.membersEmailNotEndsWith;
        const membersIsActive = requestParameters?.membersIsActive;
        const membersId = requestParameters?.membersId;
        const membersIdNot = requestParameters?.membersIdNot;
        const membersIdContains = requestParameters?.membersIdContains;
        const membersIdNotContains = requestParameters?.membersIdNotContains;
        const membersIdBeginsWith = requestParameters?.membersIdBeginsWith;
        const membersIdNotBeginsWith = requestParameters?.membersIdNotBeginsWith;
        const membersIdEndsWith = requestParameters?.membersIdEndsWith;
        const membersIdNotEndsWith = requestParameters?.membersIdNotEndsWith;
        const membersTitleNotExists = requestParameters?.membersTitleNotExists;
        const membersTitleExists = requestParameters?.membersTitleExists;
        const membersTitle = requestParameters?.membersTitle;
        const membersTitleNot = requestParameters?.membersTitleNot;
        const membersTitleContains = requestParameters?.membersTitleContains;
        const membersTitleNotContains = requestParameters?.membersTitleNotContains;
        const membersTitleBeginsWith = requestParameters?.membersTitleBeginsWith;
        const membersTitleNotBeginsWith = requestParameters?.membersTitleNotBeginsWith;
        const membersTitleEndsWith = requestParameters?.membersTitleEndsWith;
        const membersTitleNotEndsWith = requestParameters?.membersTitleNotEndsWith;
        const membersOrganizationNotExists = requestParameters?.membersOrganizationNotExists;
        const membersOrganizationExists = requestParameters?.membersOrganizationExists;
        const membersOrganization = requestParameters?.membersOrganization;
        const membersOrganizationNot = requestParameters?.membersOrganizationNot;
        const membersOrganizationContains = requestParameters?.membersOrganizationContains;
        const membersOrganizationNotContains = requestParameters?.membersOrganizationNotContains;
        const membersOrganizationBeginsWith = requestParameters?.membersOrganizationBeginsWith;
        const membersOrganizationNotBeginsWith = requestParameters?.membersOrganizationNotBeginsWith;
        const membersOrganizationEndsWith = requestParameters?.membersOrganizationEndsWith;
        const membersOrganizationNotEndsWith = requestParameters?.membersOrganizationNotEndsWith;
        const membersDepartmentNotExists = requestParameters?.membersDepartmentNotExists;
        const membersDepartmentExists = requestParameters?.membersDepartmentExists;
        const membersDepartment = requestParameters?.membersDepartment;
        const membersDepartmentNot = requestParameters?.membersDepartmentNot;
        const membersDepartmentContains = requestParameters?.membersDepartmentContains;
        const membersDepartmentNotContains = requestParameters?.membersDepartmentNotContains;
        const membersDepartmentBeginsWith = requestParameters?.membersDepartmentBeginsWith;
        const membersDepartmentNotBeginsWith = requestParameters?.membersDepartmentNotBeginsWith;
        const membersDepartmentEndsWith = requestParameters?.membersDepartmentEndsWith;
        const membersDepartmentNotEndsWith = requestParameters?.membersDepartmentNotEndsWith;
        const membersAccessLevelLessThan = requestParameters?.membersAccessLevelLessThan;
        const membersAccessLevelLessThanOrEqual = requestParameters?.membersAccessLevelLessThanOrEqual;
        const membersAccessLevelGreaterThan = requestParameters?.membersAccessLevelGreaterThan;
        const membersAccessLevelGreaterThanOrEqual = requestParameters?.membersAccessLevelGreaterThanOrEqual;
        const membersAccessLevelEqual = requestParameters?.membersAccessLevelEqual;
        const membersAccessLevelNotEqual = requestParameters?.membersAccessLevelNotEqual;
        const membersAccessLevelBetween = requestParameters?.membersAccessLevelBetween;
        const membersAccessLevelNotBetween = requestParameters?.membersAccessLevelNotBetween;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderRole, 'leader.role');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderRoleNot, 'leader.role.not');
        if (leaderRoleAnyOf) {
            leaderRoleAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'leader.role.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanViewCases, 'leader.canViewCases');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanViewProjects, 'leader.canViewProjects');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanViewCohorts, 'leader.canViewCohorts');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanViewUsers, 'leader.canViewUsers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanViewDatasets, 'leader.canViewDatasets');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanImportData, 'leader.canImportData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanManageCases, 'leader.canManageCases');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanManageCohorts, 'leader.canManageCohorts');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanManageDatasets, 'leader.canManageDatasets');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanAnalyzeData, 'leader.canAnalyzeData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanExportData, 'leader.canExportData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanManageProjects, 'leader.canManageProjects');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanAccessSensitiveData, 'leader.canAccessSensitiveData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanAuditLogs, 'leader.canAuditLogs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderCanManageUsers, 'leader.canManageUsers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIsSystemAdmin, 'leader.isSystemAdmin');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIsProvided, 'leader.isProvided');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderNotExists, 'leader.provider.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderExists, 'leader.provider.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProvider, 'leader.provider');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderNot, 'leader.provider.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderContains, 'leader.provider.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderNotContains, 'leader.provider.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderBeginsWith, 'leader.provider.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderNotBeginsWith, 'leader.provider.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderEndsWith, 'leader.provider.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderProviderNotEndsWith, 'leader.provider.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginNotExists, 'leader.lastLogin.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginExists, 'leader.lastLogin.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginBefore, 'leader.lastLogin.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginAfter, 'leader.lastLogin.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginOnOrBefore, 'leader.lastLogin.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginOnOrAfter, 'leader.lastLogin.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginOn, 'leader.lastLogin.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastLoginNotOn, 'leader.lastLogin.not.on');
        if (leaderLastLoginBetween) {
            leaderLastLoginBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'leader.lastLogin.between');
            })
        }
        if (leaderLastLoginNotBetween) {
            leaderLastLoginNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'leader.lastLogin.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsername, 'leader.username');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameNot, 'leader.username.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameContains, 'leader.username.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameNotContains, 'leader.username.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameBeginsWith, 'leader.username.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameNotBeginsWith, 'leader.username.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameEndsWith, 'leader.username.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderUsernameNotEndsWith, 'leader.username.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameNotExists, 'leader.firstName.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameExists, 'leader.firstName.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstName, 'leader.firstName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameNot, 'leader.firstName.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameContains, 'leader.firstName.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameNotContains, 'leader.firstName.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameBeginsWith, 'leader.firstName.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameNotBeginsWith, 'leader.firstName.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameEndsWith, 'leader.firstName.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderFirstNameNotEndsWith, 'leader.firstName.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameNotExists, 'leader.lastName.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameExists, 'leader.lastName.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastName, 'leader.lastName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameNot, 'leader.lastName.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameContains, 'leader.lastName.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameNotContains, 'leader.lastName.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameBeginsWith, 'leader.lastName.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameNotBeginsWith, 'leader.lastName.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameEndsWith, 'leader.lastName.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderLastNameNotEndsWith, 'leader.lastName.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailNotExists, 'leader.email.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailExists, 'leader.email.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmail, 'leader.email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailNot, 'leader.email.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailContains, 'leader.email.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailNotContains, 'leader.email.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailBeginsWith, 'leader.email.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailNotBeginsWith, 'leader.email.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailEndsWith, 'leader.email.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderEmailNotEndsWith, 'leader.email.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIsActive, 'leader.isActive');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderId, 'leader.id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdNot, 'leader.id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdContains, 'leader.id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdNotContains, 'leader.id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdBeginsWith, 'leader.id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdNotBeginsWith, 'leader.id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdEndsWith, 'leader.id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderIdNotEndsWith, 'leader.id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleNotExists, 'leader.title.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleExists, 'leader.title.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitle, 'leader.title');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleNot, 'leader.title.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleContains, 'leader.title.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleNotContains, 'leader.title.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleBeginsWith, 'leader.title.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleNotBeginsWith, 'leader.title.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleEndsWith, 'leader.title.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderTitleNotEndsWith, 'leader.title.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationNotExists, 'leader.organization.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationExists, 'leader.organization.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganization, 'leader.organization');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationNot, 'leader.organization.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationContains, 'leader.organization.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationNotContains, 'leader.organization.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationBeginsWith, 'leader.organization.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationNotBeginsWith, 'leader.organization.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationEndsWith, 'leader.organization.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderOrganizationNotEndsWith, 'leader.organization.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentNotExists, 'leader.department.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentExists, 'leader.department.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartment, 'leader.department');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentNot, 'leader.department.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentContains, 'leader.department.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentNotContains, 'leader.department.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentBeginsWith, 'leader.department.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentNotBeginsWith, 'leader.department.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentEndsWith, 'leader.department.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderDepartmentNotEndsWith, 'leader.department.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelLessThan, 'leader.accessLevel.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelLessThanOrEqual, 'leader.accessLevel.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelGreaterThan, 'leader.accessLevel.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelGreaterThanOrEqual, 'leader.accessLevel.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelEqual, 'leader.accessLevel.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>leaderAccessLevelNotEqual, 'leader.accessLevel.not.equal');
        if (leaderAccessLevelBetween) {
            leaderAccessLevelBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'leader.accessLevel.between');
            })
        }
        if (leaderAccessLevelNotBetween) {
            leaderAccessLevelNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'leader.accessLevel.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCenters, 'clinicalCenters');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersNot, 'clinicalCenters.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersContains, 'clinicalCenters.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersNotContains, 'clinicalCenters.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersBeginsWith, 'clinicalCenters.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersNotBeginsWith, 'clinicalCenters.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersEndsWith, 'clinicalCenters.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalCentersNotEndsWith, 'clinicalCenters.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>title, 'title');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleNot, 'title.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleContains, 'title.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleNotContains, 'title.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleBeginsWith, 'title.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleNotBeginsWith, 'title.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleEndsWith, 'title.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>titleNotEndsWith, 'title.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summary, 'summary');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryNot, 'summary.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryContains, 'summary.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryNotContains, 'summary.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryBeginsWith, 'summary.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryNotBeginsWith, 'summary.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryEndsWith, 'summary.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>summaryNotEndsWith, 'summary.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumber, 'ethicsApprovalNumber');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberNot, 'ethicsApprovalNumber.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberContains, 'ethicsApprovalNumber.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberNotContains, 'ethicsApprovalNumber.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberBeginsWith, 'ethicsApprovalNumber.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberNotBeginsWith, 'ethicsApprovalNumber.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberEndsWith, 'ethicsApprovalNumber.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ethicsApprovalNumberNotEndsWith, 'ethicsApprovalNumber.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>status, 'status');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>statusNot, 'status.not');
        if (statusAnyOf) {
            statusAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'status.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersRole, 'members.role');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersRoleNot, 'members.role.not');
        if (membersRoleAnyOf) {
            membersRoleAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'members.role.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanViewCases, 'members.canViewCases');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanViewProjects, 'members.canViewProjects');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanViewCohorts, 'members.canViewCohorts');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanViewUsers, 'members.canViewUsers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanViewDatasets, 'members.canViewDatasets');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanImportData, 'members.canImportData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanManageCases, 'members.canManageCases');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanManageCohorts, 'members.canManageCohorts');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanManageDatasets, 'members.canManageDatasets');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanAnalyzeData, 'members.canAnalyzeData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanExportData, 'members.canExportData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanManageProjects, 'members.canManageProjects');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanAccessSensitiveData, 'members.canAccessSensitiveData');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanAuditLogs, 'members.canAuditLogs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersCanManageUsers, 'members.canManageUsers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIsSystemAdmin, 'members.isSystemAdmin');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIsProvided, 'members.isProvided');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderNotExists, 'members.provider.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderExists, 'members.provider.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProvider, 'members.provider');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderNot, 'members.provider.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderContains, 'members.provider.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderNotContains, 'members.provider.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderBeginsWith, 'members.provider.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderNotBeginsWith, 'members.provider.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderEndsWith, 'members.provider.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersProviderNotEndsWith, 'members.provider.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginNotExists, 'members.lastLogin.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginExists, 'members.lastLogin.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginBefore, 'members.lastLogin.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginAfter, 'members.lastLogin.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginOnOrBefore, 'members.lastLogin.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginOnOrAfter, 'members.lastLogin.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginOn, 'members.lastLogin.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastLoginNotOn, 'members.lastLogin.not.on');
        if (membersLastLoginBetween) {
            membersLastLoginBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'members.lastLogin.between');
            })
        }
        if (membersLastLoginNotBetween) {
            membersLastLoginNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'members.lastLogin.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsername, 'members.username');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameNot, 'members.username.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameContains, 'members.username.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameNotContains, 'members.username.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameBeginsWith, 'members.username.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameNotBeginsWith, 'members.username.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameEndsWith, 'members.username.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersUsernameNotEndsWith, 'members.username.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameNotExists, 'members.firstName.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameExists, 'members.firstName.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstName, 'members.firstName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameNot, 'members.firstName.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameContains, 'members.firstName.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameNotContains, 'members.firstName.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameBeginsWith, 'members.firstName.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameNotBeginsWith, 'members.firstName.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameEndsWith, 'members.firstName.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersFirstNameNotEndsWith, 'members.firstName.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameNotExists, 'members.lastName.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameExists, 'members.lastName.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastName, 'members.lastName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameNot, 'members.lastName.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameContains, 'members.lastName.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameNotContains, 'members.lastName.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameBeginsWith, 'members.lastName.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameNotBeginsWith, 'members.lastName.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameEndsWith, 'members.lastName.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersLastNameNotEndsWith, 'members.lastName.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailNotExists, 'members.email.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailExists, 'members.email.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmail, 'members.email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailNot, 'members.email.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailContains, 'members.email.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailNotContains, 'members.email.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailBeginsWith, 'members.email.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailNotBeginsWith, 'members.email.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailEndsWith, 'members.email.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersEmailNotEndsWith, 'members.email.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIsActive, 'members.isActive');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersId, 'members.id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdNot, 'members.id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdContains, 'members.id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdNotContains, 'members.id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdBeginsWith, 'members.id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdNotBeginsWith, 'members.id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdEndsWith, 'members.id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersIdNotEndsWith, 'members.id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleNotExists, 'members.title.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleExists, 'members.title.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitle, 'members.title');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleNot, 'members.title.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleContains, 'members.title.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleNotContains, 'members.title.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleBeginsWith, 'members.title.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleNotBeginsWith, 'members.title.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleEndsWith, 'members.title.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersTitleNotEndsWith, 'members.title.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationNotExists, 'members.organization.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationExists, 'members.organization.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganization, 'members.organization');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationNot, 'members.organization.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationContains, 'members.organization.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationNotContains, 'members.organization.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationBeginsWith, 'members.organization.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationNotBeginsWith, 'members.organization.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationEndsWith, 'members.organization.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersOrganizationNotEndsWith, 'members.organization.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentNotExists, 'members.department.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentExists, 'members.department.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartment, 'members.department');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentNot, 'members.department.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentContains, 'members.department.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentNotContains, 'members.department.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentBeginsWith, 'members.department.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentNotBeginsWith, 'members.department.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentEndsWith, 'members.department.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersDepartmentNotEndsWith, 'members.department.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelLessThan, 'members.accessLevel.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelLessThanOrEqual, 'members.accessLevel.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelGreaterThan, 'members.accessLevel.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelGreaterThanOrEqual, 'members.accessLevel.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelEqual, 'members.accessLevel.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>membersAccessLevelNotEqual, 'members.accessLevel.not.equal');
        if (membersAccessLevelBetween) {
            membersAccessLevelBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'members.accessLevel.between');
            })
        }
        if (membersAccessLevelNotBetween) {
            membersAccessLevelNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'members.accessLevel.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects`;
        return this.httpClient.request<PaginatedProject>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Project To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertProjectToHistoryEvent(requestParameters: RevertProjectToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertProjectToHistoryEvent(requestParameters: RevertProjectToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertProjectToHistoryEvent(requestParameters: RevertProjectToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertProjectToHistoryEvent(requestParameters: RevertProjectToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling revertProjectToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertProjectToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Project
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProjectById(requestParameters: UpdateProjectByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateProjectById(requestParameters: UpdateProjectByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateProjectById(requestParameters: UpdateProjectByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateProjectById(requestParameters: UpdateProjectByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const projectId = requestParameters?.projectId;
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling updateProjectById.');
        }
        const projectCreate = requestParameters?.projectCreate;
        if (projectCreate === null || projectCreate === undefined) {
            throw new Error('Required parameter projectCreate was null or undefined when calling updateProjectById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/projects/${this.configuration.encodeParam({name: "projectId", value: projectId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: projectCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
