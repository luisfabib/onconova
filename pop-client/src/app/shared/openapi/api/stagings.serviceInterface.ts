/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AnyStaging } from '../model/models';
import { HistoryEvent } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedAnyStaging } from '../model/models';
import { PaginatedHistoryEvent } from '../model/models';
import { Payload } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateStagingRequestParams {
    payload: Payload;
}

export interface DeleteStagingByIdRequestParams {
    stagingId: string;
}

export interface GetAllStagingHistoryEventsRequestParams {
    stagingId: string;
    limit?: number;
    offset?: number;
}

export interface GetStagingByIdRequestParams {
    stagingId: string;
    anonymized?: boolean;
}

export interface GetStagingHistoryEventByIdRequestParams {
    stagingId: string;
    eventId: string;
}

export interface GetStagingsRequestParams {
    stagingDomain?: string;
    stagingDomainNot?: string;
    stagingDomainAnyOf?: Array<'tnm' | 'figo' | 'binet' | 'rai' | 'breslow' | 'clark' | 'iss' | 'riss' | 'inss' | 'inrgss' | 'gleason' | 'rhabdomyosarcoma' | 'wilms' | 'lymphoma'>;
    stage?: string;
    stageNot?: string;
    stageAnyOf?: Array<string>;
    stageNotAnyOf?: Array<string>;
    stageDescendantsOf?: string;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    idAnyOf?: Array<string>;
    idNotAnyOf?: Array<string>;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    caseIdAnyOf?: Array<string>;
    caseIdNotAnyOf?: Array<string>;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    stagedEntitiesIds?: string;
    stagedEntitiesIdsNot?: string;
    stagedEntitiesIdsContains?: string;
    stagedEntitiesIdsNotContains?: string;
    stagedEntitiesIdsBeginsWith?: string;
    stagedEntitiesIdsNotBeginsWith?: string;
    stagedEntitiesIdsEndsWith?: string;
    stagedEntitiesIdsNotEndsWith?: string;
    stagedEntitiesIdsAnyOf?: Array<string>;
    stagedEntitiesIdsNotAnyOf?: Array<string>;
    anonymized?: boolean;
    limit?: number;
    offset?: number;
}

export interface RevertStagingToHistoryEventRequestParams {
    stagingId: string;
    eventId: string;
}

export interface UpdateStagingByIdRequestParams {
    stagingId: string;
    payload: Payload;
}


export interface StagingsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Staging
     * 
* @param requestParameters
     */
    createStaging(requestParameters: CreateStagingRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Staging
     * 
* @param requestParameters
     */
    deleteStagingById(requestParameters: DeleteStagingByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Staging History Events
     * 
* @param requestParameters
     */
    getAllStagingHistoryEvents(requestParameters: GetAllStagingHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEvent>;

    /**
     * Get Staging By Id
     * 
* @param requestParameters
     */
    getStagingById(requestParameters: GetStagingByIdRequestParams, extraHttpRequestParams?: any): Observable<AnyStaging>;

    /**
     * Get Staging History Event By Id
     * 
* @param requestParameters
     */
    getStagingHistoryEventById(requestParameters: GetStagingHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEvent>;

    /**
     * Get All Stagings Matching The Query
     * 
* @param requestParameters
     */
    getStagings(requestParameters: GetStagingsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAnyStaging>;

    /**
     * Revert Staging To History Event
     * 
* @param requestParameters
     */
    revertStagingToHistoryEvent(requestParameters: RevertStagingToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Staging
     * 
* @param requestParameters
     */
    updateStagingById(requestParameters: UpdateStagingByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
