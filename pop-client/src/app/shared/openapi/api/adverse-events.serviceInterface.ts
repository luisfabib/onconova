/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdverseEvent } from '../model/models';
import { AdverseEventCreate } from '../model/models';
import { AdverseEventMitigation } from '../model/models';
import { AdverseEventMitigationCreate } from '../model/models';
import { AdverseEventSuspectedCause } from '../model/models';
import { AdverseEventSuspectedCauseCreate } from '../model/models';
import { HistoryEventWithSchema } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedAdverseEvent } from '../model/models';
import { PaginatedHistoryEventWithSchema } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateAdverseEventRequestParams {
    adverseEventCreate: AdverseEventCreate;
}

export interface CreateAdverseEventMitigationRequestParams {
    adverseEventId: string;
    adverseEventMitigationCreate: AdverseEventMitigationCreate;
}

export interface CreateAdverseEventSuspectedCauseRequestParams {
    adverseEventId: string;
    adverseEventSuspectedCauseCreate: AdverseEventSuspectedCauseCreate;
}

export interface DeleteAdverseEventByIdRequestParams {
    adverseEventId: string;
}

export interface DeleteAdverseEventMitigationRequestParams {
    adverseEventId: string;
    mitigationId: string;
}

export interface DeleteAdverseEventSuspectedCauseRequestParams {
    adverseEventId: string;
    causeId: string;
}

export interface GetAdverseEventByIdRequestParams {
    adverseEventId: string;
}

export interface GetAdverseEventHistoryEventByIdRequestParams {
    adverseEventId: string;
    eventId: string;
}

export interface GetAdverseEventMitigationByIdRequestParams {
    adverseEventId: string;
    mitigationId: string;
}

export interface GetAdverseEventMitigationHistoryEventByIdRequestParams {
    adverseEventId: string;
    mitigationId: string;
    eventId: string;
}

export interface GetAdverseEventMitigationsRequestParams {
    adverseEventId: string;
}

export interface GetAdverseEventSuspectedCauseByIdRequestParams {
    adverseEventId: string;
    causeId: string;
}

export interface GetAdverseEventSuspectedCauseHistoryEventByIdRequestParams {
    adverseEventId: string;
    causeId: string;
    eventId: string;
}

export interface GetAdverseEventSuspectedCausesRequestParams {
    adverseEventId: string;
}

export interface GetAdverseEventsRequestParams {
    suspectedCausesId?: string;
    suspectedCausesIdNot?: string;
    suspectedCausesIdContains?: string;
    suspectedCausesIdNotContains?: string;
    suspectedCausesIdBeginsWith?: string;
    suspectedCausesIdNotBeginsWith?: string;
    suspectedCausesIdEndsWith?: string;
    suspectedCausesIdNotEndsWith?: string;
    suspectedCausesSystemicTherapyIdNotExists?: boolean;
    suspectedCausesSystemicTherapyIdExists?: boolean;
    suspectedCausesSystemicTherapyId?: string;
    suspectedCausesSystemicTherapyIdNot?: string;
    suspectedCausesSystemicTherapyIdContains?: string;
    suspectedCausesSystemicTherapyIdNotContains?: string;
    suspectedCausesSystemicTherapyIdBeginsWith?: string;
    suspectedCausesSystemicTherapyIdNotBeginsWith?: string;
    suspectedCausesSystemicTherapyIdEndsWith?: string;
    suspectedCausesSystemicTherapyIdNotEndsWith?: string;
    suspectedCausesMedicationIdNotExists?: boolean;
    suspectedCausesMedicationIdExists?: boolean;
    suspectedCausesMedicationId?: string;
    suspectedCausesMedicationIdNot?: string;
    suspectedCausesMedicationIdContains?: string;
    suspectedCausesMedicationIdNotContains?: string;
    suspectedCausesMedicationIdBeginsWith?: string;
    suspectedCausesMedicationIdNotBeginsWith?: string;
    suspectedCausesMedicationIdEndsWith?: string;
    suspectedCausesMedicationIdNotEndsWith?: string;
    suspectedCausesRadiotherapyIdNotExists?: boolean;
    suspectedCausesRadiotherapyIdExists?: boolean;
    suspectedCausesRadiotherapyId?: string;
    suspectedCausesRadiotherapyIdNot?: string;
    suspectedCausesRadiotherapyIdContains?: string;
    suspectedCausesRadiotherapyIdNotContains?: string;
    suspectedCausesRadiotherapyIdBeginsWith?: string;
    suspectedCausesRadiotherapyIdNotBeginsWith?: string;
    suspectedCausesRadiotherapyIdEndsWith?: string;
    suspectedCausesRadiotherapyIdNotEndsWith?: string;
    suspectedCausesSurgeryIdNotExists?: boolean;
    suspectedCausesSurgeryIdExists?: boolean;
    suspectedCausesSurgeryId?: string;
    suspectedCausesSurgeryIdNot?: string;
    suspectedCausesSurgeryIdContains?: string;
    suspectedCausesSurgeryIdNotContains?: string;
    suspectedCausesSurgeryIdBeginsWith?: string;
    suspectedCausesSurgeryIdNotBeginsWith?: string;
    suspectedCausesSurgeryIdEndsWith?: string;
    suspectedCausesSurgeryIdNotEndsWith?: string;
    suspectedCausesCausalityNotExists?: boolean;
    suspectedCausesCausalityExists?: boolean;
    suspectedCausesCausality?: string;
    suspectedCausesCausalityNot?: string;
    suspectedCausesCausalityAnyOf?: Array<'unrelated' | 'unlikely-related' | 'possibly-related' | 'probably-related' | 'definitely-related' | 'conditionally-related'>;
    mitigationsId?: string;
    mitigationsIdNot?: string;
    mitigationsIdContains?: string;
    mitigationsIdNotContains?: string;
    mitigationsIdBeginsWith?: string;
    mitigationsIdNotBeginsWith?: string;
    mitigationsIdEndsWith?: string;
    mitigationsIdNotEndsWith?: string;
    mitigationsCategory?: string;
    mitigationsCategoryNot?: string;
    mitigationsCategoryAnyOf?: Array<'adjustment' | 'pharmacological' | 'procedure'>;
    mitigationsAdjustmentNotExists?: boolean;
    mitigationsAdjustmentExists?: boolean;
    mitigationsAdjustment?: string;
    mitigationsAdjustmentNot?: string;
    mitigationsAdjustmentAnyOf?: Array<string>;
    mitigationsAdjustmentNotAnyOf?: Array<string>;
    mitigationsAdjustmentDescendantsOf?: string;
    mitigationsDrugNotExists?: boolean;
    mitigationsDrugExists?: boolean;
    mitigationsDrug?: string;
    mitigationsDrugNot?: string;
    mitigationsDrugAnyOf?: Array<string>;
    mitigationsDrugNotAnyOf?: Array<string>;
    mitigationsDrugDescendantsOf?: string;
    mitigationsProcedureNotExists?: boolean;
    mitigationsProcedureExists?: boolean;
    mitigationsProcedure?: string;
    mitigationsProcedureNot?: string;
    mitigationsProcedureAnyOf?: Array<string>;
    mitigationsProcedureNotAnyOf?: Array<string>;
    mitigationsProcedureDescendantsOf?: string;
    mitigationsManagementNotExists?: boolean;
    mitigationsManagementExists?: boolean;
    mitigationsManagement?: string;
    mitigationsManagementNot?: string;
    mitigationsManagementAnyOf?: Array<string>;
    mitigationsManagementNotAnyOf?: Array<string>;
    mitigationsManagementDescendantsOf?: string;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    event?: string;
    eventNot?: string;
    eventAnyOf?: Array<string>;
    eventNotAnyOf?: Array<string>;
    eventDescendantsOf?: string;
    gradeLessThan?: number;
    gradeLessThanOrEqual?: number;
    gradeGreaterThan?: number;
    gradeGreaterThanOrEqual?: number;
    gradeEqual?: number;
    gradeNotEqual?: number;
    gradeBetween?: Array<any>;
    gradeNotBetween?: Array<any>;
    outcome?: string;
    outcomeNot?: string;
    outcomeAnyOf?: Array<'resolved' | 'resolved-with-sequelae' | 'recovering' | 'ongoing' | 'fatal' | 'unknown'>;
    dateResolvedNotExists?: boolean;
    dateResolvedExists?: boolean;
    dateResolvedBefore?: string;
    dateResolvedAfter?: string;
    dateResolvedOnOrBefore?: string;
    dateResolvedOnOrAfter?: string;
    dateResolvedOn?: string;
    dateResolvedNotOn?: string;
    dateResolvedBetween?: Array<any>;
    dateResolvedNotBetween?: Array<any>;
    limit?: number;
    offset?: number;
}

export interface GetAllAdverseEventHistoryEventsRequestParams {
    adverseEventId: string;
    limit?: number;
    offset?: number;
}

export interface GetAllAdverseEventMitigationHistoryEventsRequestParams {
    adverseEventId: string;
    mitigationId: string;
    limit?: number;
    offset?: number;
}

export interface GetAllAdverseEventSuspectedCauseHistoryEventsRequestParams {
    adverseEventId: string;
    causeId: string;
    limit?: number;
    offset?: number;
}

export interface RevertAdverseEventMitigationToHistoryEventRequestParams {
    adverseEventId: string;
    mitigationId: string;
    eventId: string;
}

export interface RevertAdverseEventSuspectedCauseToHistoryEventRequestParams {
    adverseEventId: string;
    causeId: string;
    eventId: string;
}

export interface RevertAdverseEventToHistoryEventRequestParams {
    adverseEventId: string;
    eventId: string;
}

export interface UpdateAdverseEventRequestParams {
    adverseEventId: string;
    adverseEventCreate: AdverseEventCreate;
}

export interface UpdateAdverseEventMitigationRequestParams {
    adverseEventId: string;
    mitigationId: string;
    adverseEventMitigationCreate: AdverseEventMitigationCreate;
}

export interface UpdateAdverseEventSuspectedCauseRequestParams {
    adverseEventId: string;
    causeId: string;
    adverseEventSuspectedCauseCreate: AdverseEventSuspectedCauseCreate;
}


export interface AdverseEventsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Adverse Event
     * 
* @param requestParameters
     */
    createAdverseEvent(requestParameters: CreateAdverseEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Create Adverse Event Mitigation
     * 
* @param requestParameters
     */
    createAdverseEventMitigation(requestParameters: CreateAdverseEventMitigationRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Create Adverse Event Suspected Cause
     * 
* @param requestParameters
     */
    createAdverseEventSuspectedCause(requestParameters: CreateAdverseEventSuspectedCauseRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Adverse Event
     * 
* @param requestParameters
     */
    deleteAdverseEventById(requestParameters: DeleteAdverseEventByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Adverse Event Mitigation
     * 
* @param requestParameters
     */
    deleteAdverseEventMitigation(requestParameters: DeleteAdverseEventMitigationRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Adverse Event Suspected Cause
     * 
* @param requestParameters
     */
    deleteAdverseEventSuspectedCause(requestParameters: DeleteAdverseEventSuspectedCauseRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get Adverse Event By Id
     * 
* @param requestParameters
     */
    getAdverseEventById(requestParameters: GetAdverseEventByIdRequestParams, extraHttpRequestParams?: any): Observable<AdverseEvent>;

    /**
     * Get Adverse Event History Event By Id
     * 
* @param requestParameters
     */
    getAdverseEventHistoryEventById(requestParameters: GetAdverseEventHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get Adverse Event Mitigation By Id
     * 
* @param requestParameters
     */
    getAdverseEventMitigationById(requestParameters: GetAdverseEventMitigationByIdRequestParams, extraHttpRequestParams?: any): Observable<AdverseEventMitigation>;

    /**
     * Get Adverse Event Mitigation History Event By Id
     * 
* @param requestParameters
     */
    getAdverseEventMitigationHistoryEventById(requestParameters: GetAdverseEventMitigationHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get Adverse Event Mitigations Matching The Query
     * 
* @param requestParameters
     */
    getAdverseEventMitigations(requestParameters: GetAdverseEventMitigationsRequestParams, extraHttpRequestParams?: any): Observable<Array<AdverseEventMitigation>>;

    /**
     * Get Adverse Event Suspected Cause By Id
     * 
* @param requestParameters
     */
    getAdverseEventSuspectedCauseById(requestParameters: GetAdverseEventSuspectedCauseByIdRequestParams, extraHttpRequestParams?: any): Observable<AdverseEventSuspectedCause>;

    /**
     * Get Adverse Event Suspected Cause History Event By Id
     * 
* @param requestParameters
     */
    getAdverseEventSuspectedCauseHistoryEventById(requestParameters: GetAdverseEventSuspectedCauseHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get Adverse Event Suspected Causes Matching The Query
     * 
* @param requestParameters
     */
    getAdverseEventSuspectedCauses(requestParameters: GetAdverseEventSuspectedCausesRequestParams, extraHttpRequestParams?: any): Observable<Array<AdverseEventSuspectedCause>>;

    /**
     * Get All Adverse Events Matching The Query
     * 
* @param requestParameters
     */
    getAdverseEvents(requestParameters: GetAdverseEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAdverseEvent>;

    /**
     * Get All Adverse Event History Events
     * 
* @param requestParameters
     */
    getAllAdverseEventHistoryEvents(requestParameters: GetAllAdverseEventHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get All Adverse Event Mitigation History Events
     * 
* @param requestParameters
     */
    getAllAdverseEventMitigationHistoryEvents(requestParameters: GetAllAdverseEventMitigationHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get All Adverse Event Suspected Cause History Events
     * 
* @param requestParameters
     */
    getAllAdverseEventSuspectedCauseHistoryEvents(requestParameters: GetAllAdverseEventSuspectedCauseHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Revert Adverse Event Mitigation To History Event
     * 
* @param requestParameters
     */
    revertAdverseEventMitigationToHistoryEvent(requestParameters: RevertAdverseEventMitigationToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Revert Adverse Event Suspected Cause To History Event
     * 
* @param requestParameters
     */
    revertAdverseEventSuspectedCauseToHistoryEvent(requestParameters: RevertAdverseEventSuspectedCauseToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Revert Adverse Event To History Event
     * 
* @param requestParameters
     */
    revertAdverseEventToHistoryEvent(requestParameters: RevertAdverseEventToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Adverse Event
     * 
* @param requestParameters
     */
    updateAdverseEvent(requestParameters: UpdateAdverseEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Adverse Event Mitigation
     * 
* @param requestParameters
     */
    updateAdverseEventMitigation(requestParameters: UpdateAdverseEventMitigationRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Adverse Event Suspected Cause
     * 
* @param requestParameters
     */
    updateAdverseEventSuspectedCause(requestParameters: UpdateAdverseEventSuspectedCauseRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
