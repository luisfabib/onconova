/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiAllauthAppV1AccountEmailGet200Response } from '../model/api-allauth-app-v1-account-email-get200-response';
// @ts-ignore
import { ApiAllauthAppV1AccountEmailPatchRequest } from '../model/api-allauth-app-v1-account-email-patch-request';
// @ts-ignore
import { ApiAllauthAppV1AccountEmailPost401Response } from '../model/api-allauth-app-v1-account-email-post401-response';
// @ts-ignore
import { ApiAllauthAppV1AccountEmailPutRequest } from '../model/api-allauth-app-v1-account-email-put-request';
// @ts-ignore
import { ApiAllauthAppV1AuthEmailVerifyResendPost200Response } from '../model/api-allauth-app-v1-auth-email-verify-resend-post200-response';
// @ts-ignore
import { AuthenticationResponse } from '../model/authentication-response';
// @ts-ignore
import { ConflictResponse } from '../model/conflict-response';
// @ts-ignore
import { ErrorResponse } from '../model/error-response';
// @ts-ignore
import { ForbiddenResponse } from '../model/forbidden-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    AccountEmailServiceInterface,
    ApiAllauthAppV1AccountEmailDeleteRequestParams,
    ApiAllauthAppV1AccountEmailGetRequestParams,
    ApiAllauthAppV1AccountEmailPatchRequestParams,
    ApiAllauthAppV1AccountEmailPostRequestParams,
    ApiAllauthAppV1AccountEmailPutRequestParams
} from './account-email.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AccountEmailService extends BaseService implements AccountEmailServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Remove an email address
     * Used to remove an email address. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountEmailDelete(requestParameters: ApiAllauthAppV1AccountEmailDeleteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountEmailGet200Response>;
    public apiAllauthAppV1AccountEmailDelete(requestParameters: ApiAllauthAppV1AccountEmailDeleteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailDelete(requestParameters: ApiAllauthAppV1AccountEmailDeleteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailDelete(requestParameters: ApiAllauthAppV1AccountEmailDeleteRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountEmailDelete.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const apiAllauthAppV1AccountEmailPutRequest = requestParameters?.apiAllauthAppV1AccountEmailPutRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/email`;
        return this.httpClient.request<ApiAllauthAppV1AccountEmailGet200Response>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: apiAllauthAppV1AccountEmailPutRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List email addresses
     * Retrieves the list of email addreses of the account. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountEmailGet(requestParameters: ApiAllauthAppV1AccountEmailGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountEmailGet200Response>;
    public apiAllauthAppV1AccountEmailGet(requestParameters: ApiAllauthAppV1AccountEmailGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailGet(requestParameters: ApiAllauthAppV1AccountEmailGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailGet(requestParameters: ApiAllauthAppV1AccountEmailGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountEmailGet.');
        }
        const xSessionToken = requestParameters?.xSessionToken;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/email`;
        return this.httpClient.request<ApiAllauthAppV1AccountEmailGet200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change primary email address
     * Used to change primary email address to a different one. Note that only verified email addresses can be marked as primary. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountEmailPatch(requestParameters: ApiAllauthAppV1AccountEmailPatchRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountEmailGet200Response>;
    public apiAllauthAppV1AccountEmailPatch(requestParameters: ApiAllauthAppV1AccountEmailPatchRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailPatch(requestParameters: ApiAllauthAppV1AccountEmailPatchRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailPatch(requestParameters: ApiAllauthAppV1AccountEmailPatchRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountEmailPatch.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const apiAllauthAppV1AccountEmailPatchRequest = requestParameters?.apiAllauthAppV1AccountEmailPatchRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/email`;
        return this.httpClient.request<ApiAllauthAppV1AccountEmailGet200Response>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: apiAllauthAppV1AccountEmailPatchRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add/Change email address 
     * The following functionality is available:    - Adding a new email address for an already signed in user (&#x60;ACCOUNT_CHANGE_EMAIL &#x3D; False&#x60;).   - Change to a new email address for an already signed in user   (&#x60;ACCOUNT_CHANGE_EMAIL &#x3D; True&#x60;).   - Change to a new email address during the email verification process at signup (&#x60;ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_CHANGE &#x3D; True&#x60;).  In all cases, an email verification mail will be sent containing a link or code that needs to be verified. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountEmailPost(requestParameters: ApiAllauthAppV1AccountEmailPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AccountEmailGet200Response>;
    public apiAllauthAppV1AccountEmailPost(requestParameters: ApiAllauthAppV1AccountEmailPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailPost(requestParameters: ApiAllauthAppV1AccountEmailPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AccountEmailGet200Response>>;
    public apiAllauthAppV1AccountEmailPost(requestParameters: ApiAllauthAppV1AccountEmailPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountEmailPost.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const apiAllauthAppV1AccountEmailPutRequest = requestParameters?.apiAllauthAppV1AccountEmailPutRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/email`;
        return this.httpClient.request<ApiAllauthAppV1AccountEmailGet200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: apiAllauthAppV1AccountEmailPutRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Request email verification
     * Requests for (another) email verification email to be sent. Note that sending emails is rate limited, so when you send too many requests the email will not be sent. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAllauthAppV1AccountEmailPut(requestParameters: ApiAllauthAppV1AccountEmailPutRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;
    public apiAllauthAppV1AccountEmailPut(requestParameters: ApiAllauthAppV1AccountEmailPutRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AccountEmailPut(requestParameters: ApiAllauthAppV1AccountEmailPutRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>>;
    public apiAllauthAppV1AccountEmailPut(requestParameters: ApiAllauthAppV1AccountEmailPutRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const client = requestParameters?.client;
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling apiAllauthAppV1AccountEmailPut.');
        }
        const xSessionToken = requestParameters?.xSessionToken;
        const apiAllauthAppV1AccountEmailPutRequest = requestParameters?.apiAllauthAppV1AccountEmailPutRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xSessionToken !== undefined && xSessionToken !== null) {
            localVarHeaders = localVarHeaders.set('X-Session-Token', String(xSessionToken));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/allauth/app/v1/account/email`;
        return this.httpClient.request<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: apiAllauthAppV1AccountEmailPutRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
