/**
 * django-allauth: Headless API
 *
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAllauthAppV1AuthEmailVerifyResendPost200Response } from '../model/models';
import { ApiAllauthAppV1AuthEmailVerifyResendPost429Response } from '../model/models';
import { AuthenticatedResponse } from '../model/models';
import { AuthenticationResponse } from '../model/models';
import { ConflictResponse } from '../model/models';
import { EmailVerificationInfo } from '../model/models';
import { ErrorResponse } from '../model/models';
import { ForbiddenResponse } from '../model/models';
import { Login } from '../model/models';
import { Reauthenticate } from '../model/models';
import { Signup } from '../model/models';
import { VerifyEmail } from '../model/models';
import { VerifyPhone } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface ApiAllauthAppV1AuthEmailVerifyGetRequestParams {
    xEmailVerificationKey: string;
    client: 'app' | 'browser';
}

export interface ApiAllauthAppV1AuthEmailVerifyPostRequestParams {
    client: 'app' | 'browser';
    xSessionToken?: string;
    verifyEmail?: VerifyEmail;
}

export interface ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams {
    client: 'app' | 'browser';
    xSessionToken?: string;
}

export interface ApiAllauthAppV1AuthLoginPostRequestParams {
    client: 'app' | 'browser';
    login: Login;
}

export interface ApiAllauthAppV1AuthPhoneVerifyPostRequestParams {
    client: 'app' | 'browser';
    xSessionToken?: string;
    verifyPhone?: VerifyPhone;
}

export interface ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams {
    client: 'app' | 'browser';
    xSessionToken?: string;
}

export interface ApiAllauthAppV1AuthReauthenticatePostRequestParams {
    client: 'app' | 'browser';
    reauthenticate: Reauthenticate;
    xSessionToken?: string;
}

export interface ApiAllauthAppV1AuthSignupPostRequestParams {
    client: 'app' | 'browser';
    signup: Signup;
}


export interface AuthenticationAccountServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get email verification information
     * Obtain email verification information, given the token that was sent to the user by email. 
* @param requestParameters
     */
    apiAllauthAppV1AuthEmailVerifyGet(requestParameters: ApiAllauthAppV1AuthEmailVerifyGetRequestParams, extraHttpRequestParams?: any): Observable<EmailVerificationInfo>;

    /**
     * Verify an email
     * Complete the email verification process. Depending on the configuration, email addresses are either verified by opening a link that is sent to their email address, or, by inputting a code that is sent. On the API, both cases are handled identically. Meaning, the required key is either the one from the link, or, the code itself.  Note that a status code of 401 does not imply failure. It indicates that the email verification was successful, yet, the user is still not signed in. For example, in case &#x60;ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION&#x60; is set to &#x60;False&#x60;, a 401 is returned when verifying as part of login/signup. 
* @param requestParameters
     */
    apiAllauthAppV1AuthEmailVerifyPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyPostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

    /**
     * Resend email verification code
     * Requests a new email verification code. Requires &#x60;ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_RESEND &#x3D; True&#x60;. 
* @param requestParameters
     */
    apiAllauthAppV1AuthEmailVerifyResendPost(requestParameters: ApiAllauthAppV1AuthEmailVerifyResendPostRequestParams, extraHttpRequestParams?: any): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;

    /**
     * Login
     * Login using a username-password or email-password combination. 
* @param requestParameters
     */
    apiAllauthAppV1AuthLoginPost(requestParameters: ApiAllauthAppV1AuthLoginPostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

    /**
     * Verify a phone number
     * Complete the phone number verification process. Note that a status code of 401 does not imply failure. It merely indicates that the phone number verification was successful, yet, the user is still not signed in. 
* @param requestParameters
     */
    apiAllauthAppV1AuthPhoneVerifyPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyPostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

    /**
     * Resend phone number verification code
     * Requests a new phone number verification code. Requires &#x60;ACCOUNT_PHONE_VERIFICATION_SUPPORTS_RESEND &#x3D; True&#x60;. 
* @param requestParameters
     */
    apiAllauthAppV1AuthPhoneVerifyResendPost(requestParameters: ApiAllauthAppV1AuthPhoneVerifyResendPostRequestParams, extraHttpRequestParams?: any): Observable<ApiAllauthAppV1AuthEmailVerifyResendPost200Response>;

    /**
     * Reauthenticate
     * In order to safeguard the account, some actions require the user to be recently authenticated.  If you try to perform such an action without having been recently authenticated, a &#x60;401&#x60; status is returned, listing flows that can be performed to reauthenticate. One such flow is the flow with ID &#x60;reauthenticate&#x60;, which allows for the user to input the password. This is the endpoint related towards that flow. 
* @param requestParameters
     */
    apiAllauthAppV1AuthReauthenticatePost(requestParameters: ApiAllauthAppV1AuthReauthenticatePostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

    /**
     * Signup
     * Whether or not &#x60;username&#x60;, &#x60;email&#x60;, &#x60;phone&#x60; or combination of those are required depends on the configuration of django-allauth. Additionally, if a custom signup form is used there may be other custom properties required. 
* @param requestParameters
     */
    apiAllauthAppV1AuthSignupPost(requestParameters: ApiAllauthAppV1AuthSignupPostRequestParams, extraHttpRequestParams?: any): Observable<AuthenticatedResponse>;

}
