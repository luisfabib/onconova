/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedRadiotherapy } from '../model/paginated-radiotherapy';
// @ts-ignore
import { Radiotherapy } from '../model/radiotherapy';
// @ts-ignore
import { RadiotherapyCreate } from '../model/radiotherapy-create';
// @ts-ignore
import { RadiotherapyDosage } from '../model/radiotherapy-dosage';
// @ts-ignore
import { RadiotherapyDosageCreate } from '../model/radiotherapy-dosage-create';
// @ts-ignore
import { RadiotherapySetting } from '../model/radiotherapy-setting';
// @ts-ignore
import { RadiotherapySettingCreate } from '../model/radiotherapy-setting-create';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    RadiotherapiesServiceInterface,
    CreateRadiotherapyRequestParams,
    CreateRadiotherapyDosageRequestParams,
    CreateRadiotherapySettingRequestParams,
    DeleteRadiotherapyByIdRequestParams,
    DeleteRadiotherapyDosageRequestParams,
    DeleteRadiotherapySettingRequestParams,
    GetRadiotherapiesRequestParams,
    GetRadiotherapyByIdRequestParams,
    GetRadiotherapyDosageByIdRequestParams,
    GetRadiotherapyDosagesRequestParams,
    GetRadiotherapySettingByIdRequestParams,
    GetRadiotherapySettingsRequestParams,
    UpdateRadiotherapyRequestParams,
    UpdateRadiotherapyDosageRequestParams,
    UpdateRadiotherapySettingRequestParams
} from './radiotherapies.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class RadiotherapiesService extends BaseService implements RadiotherapiesServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Radiotherapy
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRadiotherapy(requestParameters: CreateRadiotherapyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createRadiotherapy(requestParameters: CreateRadiotherapyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createRadiotherapy(requestParameters: CreateRadiotherapyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createRadiotherapy(requestParameters: CreateRadiotherapyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyCreate = requestParameters?.radiotherapyCreate;
        if (radiotherapyCreate === null || radiotherapyCreate === undefined) {
            throw new Error('Required parameter radiotherapyCreate was null or undefined when calling createRadiotherapy.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapyCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Radiotherapy Dosage
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRadiotherapyDosage(requestParameters: CreateRadiotherapyDosageRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createRadiotherapyDosage(requestParameters: CreateRadiotherapyDosageRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createRadiotherapyDosage(requestParameters: CreateRadiotherapyDosageRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createRadiotherapyDosage(requestParameters: CreateRadiotherapyDosageRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling createRadiotherapyDosage.');
        }
        const radiotherapyDosageCreate = requestParameters?.radiotherapyDosageCreate;
        if (radiotherapyDosageCreate === null || radiotherapyDosageCreate === undefined) {
            throw new Error('Required parameter radiotherapyDosageCreate was null or undefined when calling createRadiotherapyDosage.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dosages`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapyDosageCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Radiotherapy Setting
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRadiotherapySetting(requestParameters: CreateRadiotherapySettingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createRadiotherapySetting(requestParameters: CreateRadiotherapySettingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createRadiotherapySetting(requestParameters: CreateRadiotherapySettingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createRadiotherapySetting(requestParameters: CreateRadiotherapySettingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling createRadiotherapySetting.');
        }
        const radiotherapySettingCreate = requestParameters?.radiotherapySettingCreate;
        if (radiotherapySettingCreate === null || radiotherapySettingCreate === undefined) {
            throw new Error('Required parameter radiotherapySettingCreate was null or undefined when calling createRadiotherapySetting.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/settings`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapySettingCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Radiotherapy
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRadiotherapyById(requestParameters: DeleteRadiotherapyByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteRadiotherapyById(requestParameters: DeleteRadiotherapyByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteRadiotherapyById(requestParameters: DeleteRadiotherapyByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteRadiotherapyById(requestParameters: DeleteRadiotherapyByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling deleteRadiotherapyById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Radiotherapy Dosage
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRadiotherapyDosage(requestParameters: DeleteRadiotherapyDosageRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteRadiotherapyDosage(requestParameters: DeleteRadiotherapyDosageRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteRadiotherapyDosage(requestParameters: DeleteRadiotherapyDosageRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteRadiotherapyDosage(requestParameters: DeleteRadiotherapyDosageRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling deleteRadiotherapyDosage.');
        }
        const dosageId = requestParameters?.dosageId;
        if (dosageId === null || dosageId === undefined) {
            throw new Error('Required parameter dosageId was null or undefined when calling deleteRadiotherapyDosage.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dosages/${this.configuration.encodeParam({name: "dosageId", value: dosageId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Radiotherapy Setting
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRadiotherapySetting(requestParameters: DeleteRadiotherapySettingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteRadiotherapySetting(requestParameters: DeleteRadiotherapySettingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteRadiotherapySetting(requestParameters: DeleteRadiotherapySettingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteRadiotherapySetting(requestParameters: DeleteRadiotherapySettingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling deleteRadiotherapySetting.');
        }
        const settingId = requestParameters?.settingId;
        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling deleteRadiotherapySetting.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/settings/${this.configuration.encodeParam({name: "settingId", value: settingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Radiotherapies Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapies(requestParameters?: GetRadiotherapiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedRadiotherapy>;
    public getRadiotherapies(requestParameters?: GetRadiotherapiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedRadiotherapy>>;
    public getRadiotherapies(requestParameters?: GetRadiotherapiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedRadiotherapy>>;
    public getRadiotherapies(requestParameters?: GetRadiotherapiesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const dosagesId = requestParameters?.dosagesId;
        const dosagesIdNot = requestParameters?.dosagesIdNot;
        const dosagesIdContains = requestParameters?.dosagesIdContains;
        const dosagesIdNotContains = requestParameters?.dosagesIdNotContains;
        const dosagesIdBeginsWith = requestParameters?.dosagesIdBeginsWith;
        const dosagesIdNotBeginsWith = requestParameters?.dosagesIdNotBeginsWith;
        const dosagesIdEndsWith = requestParameters?.dosagesIdEndsWith;
        const dosagesIdNotEndsWith = requestParameters?.dosagesIdNotEndsWith;
        const dosagesFractionsNotExists = requestParameters?.dosagesFractionsNotExists;
        const dosagesFractionsExists = requestParameters?.dosagesFractionsExists;
        const dosagesFractionsLessThan = requestParameters?.dosagesFractionsLessThan;
        const dosagesFractionsLessThanOrEqual = requestParameters?.dosagesFractionsLessThanOrEqual;
        const dosagesFractionsGreaterThan = requestParameters?.dosagesFractionsGreaterThan;
        const dosagesFractionsGreaterThanOrEqual = requestParameters?.dosagesFractionsGreaterThanOrEqual;
        const dosagesFractionsEqual = requestParameters?.dosagesFractionsEqual;
        const dosagesFractionsNotEqual = requestParameters?.dosagesFractionsNotEqual;
        const dosagesFractionsBetween = requestParameters?.dosagesFractionsBetween;
        const dosagesFractionsNotBetween = requestParameters?.dosagesFractionsNotBetween;
        const dosagesDoseNotExists = requestParameters?.dosagesDoseNotExists;
        const dosagesDoseExists = requestParameters?.dosagesDoseExists;
        const dosagesDoseLessThan = requestParameters?.dosagesDoseLessThan;
        const dosagesDoseLessThanOrEqual = requestParameters?.dosagesDoseLessThanOrEqual;
        const dosagesDoseGreaterThan = requestParameters?.dosagesDoseGreaterThan;
        const dosagesDoseGreaterThanOrEqual = requestParameters?.dosagesDoseGreaterThanOrEqual;
        const dosagesDoseEqual = requestParameters?.dosagesDoseEqual;
        const dosagesDoseNotEqual = requestParameters?.dosagesDoseNotEqual;
        const dosagesDoseBetween = requestParameters?.dosagesDoseBetween;
        const dosagesDoseNotBetween = requestParameters?.dosagesDoseNotBetween;
        const dosagesIrradiatedVolume = requestParameters?.dosagesIrradiatedVolume;
        const dosagesIrradiatedVolumeNot = requestParameters?.dosagesIrradiatedVolumeNot;
        const dosagesIrradiatedVolumeAnyOf = requestParameters?.dosagesIrradiatedVolumeAnyOf;
        const dosagesIrradiatedVolumeNotAnyOf = requestParameters?.dosagesIrradiatedVolumeNotAnyOf;
        const dosagesIrradiatedVolumeDescendantsOf = requestParameters?.dosagesIrradiatedVolumeDescendantsOf;
        const dosagesIrradiatedVolumeMorphologyNotExists = requestParameters?.dosagesIrradiatedVolumeMorphologyNotExists;
        const dosagesIrradiatedVolumeMorphologyExists = requestParameters?.dosagesIrradiatedVolumeMorphologyExists;
        const dosagesIrradiatedVolumeMorphology = requestParameters?.dosagesIrradiatedVolumeMorphology;
        const dosagesIrradiatedVolumeMorphologyNot = requestParameters?.dosagesIrradiatedVolumeMorphologyNot;
        const dosagesIrradiatedVolumeMorphologyAnyOf = requestParameters?.dosagesIrradiatedVolumeMorphologyAnyOf;
        const dosagesIrradiatedVolumeMorphologyNotAnyOf = requestParameters?.dosagesIrradiatedVolumeMorphologyNotAnyOf;
        const dosagesIrradiatedVolumeMorphologyDescendantsOf = requestParameters?.dosagesIrradiatedVolumeMorphologyDescendantsOf;
        const dosagesIrradiatedVolumeQualifierNotExists = requestParameters?.dosagesIrradiatedVolumeQualifierNotExists;
        const dosagesIrradiatedVolumeQualifierExists = requestParameters?.dosagesIrradiatedVolumeQualifierExists;
        const dosagesIrradiatedVolumeQualifier = requestParameters?.dosagesIrradiatedVolumeQualifier;
        const dosagesIrradiatedVolumeQualifierNot = requestParameters?.dosagesIrradiatedVolumeQualifierNot;
        const dosagesIrradiatedVolumeQualifierAnyOf = requestParameters?.dosagesIrradiatedVolumeQualifierAnyOf;
        const dosagesIrradiatedVolumeQualifierNotAnyOf = requestParameters?.dosagesIrradiatedVolumeQualifierNotAnyOf;
        const dosagesIrradiatedVolumeQualifierDescendantsOf = requestParameters?.dosagesIrradiatedVolumeQualifierDescendantsOf;
        const settingsId = requestParameters?.settingsId;
        const settingsIdNot = requestParameters?.settingsIdNot;
        const settingsIdContains = requestParameters?.settingsIdContains;
        const settingsIdNotContains = requestParameters?.settingsIdNotContains;
        const settingsIdBeginsWith = requestParameters?.settingsIdBeginsWith;
        const settingsIdNotBeginsWith = requestParameters?.settingsIdNotBeginsWith;
        const settingsIdEndsWith = requestParameters?.settingsIdEndsWith;
        const settingsIdNotEndsWith = requestParameters?.settingsIdNotEndsWith;
        const settingsModality = requestParameters?.settingsModality;
        const settingsModalityNot = requestParameters?.settingsModalityNot;
        const settingsModalityAnyOf = requestParameters?.settingsModalityAnyOf;
        const settingsModalityNotAnyOf = requestParameters?.settingsModalityNotAnyOf;
        const settingsModalityDescendantsOf = requestParameters?.settingsModalityDescendantsOf;
        const settingsTechnique = requestParameters?.settingsTechnique;
        const settingsTechniqueNot = requestParameters?.settingsTechniqueNot;
        const settingsTechniqueAnyOf = requestParameters?.settingsTechniqueAnyOf;
        const settingsTechniqueNotAnyOf = requestParameters?.settingsTechniqueNotAnyOf;
        const settingsTechniqueDescendantsOf = requestParameters?.settingsTechniqueDescendantsOf;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const periodOverlaps = requestParameters?.periodOverlaps;
        const periodNotOverlaps = requestParameters?.periodNotOverlaps;
        const periodContains = requestParameters?.periodContains;
        const periodNotContains = requestParameters?.periodNotContains;
        const periodContainedBy = requestParameters?.periodContainedBy;
        const periodNotContainedBy = requestParameters?.periodNotContainedBy;
        const sessionsLessThan = requestParameters?.sessionsLessThan;
        const sessionsLessThanOrEqual = requestParameters?.sessionsLessThanOrEqual;
        const sessionsGreaterThan = requestParameters?.sessionsGreaterThan;
        const sessionsGreaterThanOrEqual = requestParameters?.sessionsGreaterThanOrEqual;
        const sessionsEqual = requestParameters?.sessionsEqual;
        const sessionsNotEqual = requestParameters?.sessionsNotEqual;
        const sessionsBetween = requestParameters?.sessionsBetween;
        const sessionsNotBetween = requestParameters?.sessionsNotBetween;
        const intent = requestParameters?.intent;
        const intentNot = requestParameters?.intentNot;
        const intentAnyOf = requestParameters?.intentAnyOf;
        const terminationReasonNotExists = requestParameters?.terminationReasonNotExists;
        const terminationReasonExists = requestParameters?.terminationReasonExists;
        const terminationReason = requestParameters?.terminationReason;
        const terminationReasonNot = requestParameters?.terminationReasonNot;
        const terminationReasonAnyOf = requestParameters?.terminationReasonAnyOf;
        const terminationReasonNotAnyOf = requestParameters?.terminationReasonNotAnyOf;
        const terminationReasonDescendantsOf = requestParameters?.terminationReasonDescendantsOf;
        const therapyLineIdNotExists = requestParameters?.therapyLineIdNotExists;
        const therapyLineIdExists = requestParameters?.therapyLineIdExists;
        const therapyLineId = requestParameters?.therapyLineId;
        const therapyLineIdNot = requestParameters?.therapyLineIdNot;
        const therapyLineIdContains = requestParameters?.therapyLineIdContains;
        const therapyLineIdNotContains = requestParameters?.therapyLineIdNotContains;
        const therapyLineIdBeginsWith = requestParameters?.therapyLineIdBeginsWith;
        const therapyLineIdNotBeginsWith = requestParameters?.therapyLineIdNotBeginsWith;
        const therapyLineIdEndsWith = requestParameters?.therapyLineIdEndsWith;
        const therapyLineIdNotEndsWith = requestParameters?.therapyLineIdNotEndsWith;
        const targetedEntitiesIds = requestParameters?.targetedEntitiesIds;
        const targetedEntitiesIdsNot = requestParameters?.targetedEntitiesIdsNot;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesId, 'dosages.id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdNot, 'dosages.id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdContains, 'dosages.id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdNotContains, 'dosages.id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdBeginsWith, 'dosages.id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdNotBeginsWith, 'dosages.id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdEndsWith, 'dosages.id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIdNotEndsWith, 'dosages.id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsNotExists, 'dosages.fractions.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsExists, 'dosages.fractions.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsLessThan, 'dosages.fractions.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsLessThanOrEqual, 'dosages.fractions.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsGreaterThan, 'dosages.fractions.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsGreaterThanOrEqual, 'dosages.fractions.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsEqual, 'dosages.fractions.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesFractionsNotEqual, 'dosages.fractions.not.equal');
        if (dosagesFractionsBetween) {
            dosagesFractionsBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.fractions.between');
            })
        }
        if (dosagesFractionsNotBetween) {
            dosagesFractionsNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.fractions.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseNotExists, 'dosages.dose.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseExists, 'dosages.dose.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseLessThan, 'dosages.dose.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseLessThanOrEqual, 'dosages.dose.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseGreaterThan, 'dosages.dose.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseGreaterThanOrEqual, 'dosages.dose.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseEqual, 'dosages.dose.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesDoseNotEqual, 'dosages.dose.not.equal');
        if (dosagesDoseBetween) {
            dosagesDoseBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.dose.between');
            })
        }
        if (dosagesDoseNotBetween) {
            dosagesDoseNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.dose.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolume, 'dosages.irradiatedVolume');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeNot, 'dosages.irradiatedVolume.not');
        if (dosagesIrradiatedVolumeAnyOf) {
            dosagesIrradiatedVolumeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolume.anyOf');
            })
        }
        if (dosagesIrradiatedVolumeNotAnyOf) {
            dosagesIrradiatedVolumeNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolume.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeDescendantsOf, 'dosages.irradiatedVolume.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeMorphologyNotExists, 'dosages.irradiatedVolumeMorphology.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeMorphologyExists, 'dosages.irradiatedVolumeMorphology.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeMorphology, 'dosages.irradiatedVolumeMorphology');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeMorphologyNot, 'dosages.irradiatedVolumeMorphology.not');
        if (dosagesIrradiatedVolumeMorphologyAnyOf) {
            dosagesIrradiatedVolumeMorphologyAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolumeMorphology.anyOf');
            })
        }
        if (dosagesIrradiatedVolumeMorphologyNotAnyOf) {
            dosagesIrradiatedVolumeMorphologyNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolumeMorphology.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeMorphologyDescendantsOf, 'dosages.irradiatedVolumeMorphology.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeQualifierNotExists, 'dosages.irradiatedVolumeQualifier.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeQualifierExists, 'dosages.irradiatedVolumeQualifier.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeQualifier, 'dosages.irradiatedVolumeQualifier');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeQualifierNot, 'dosages.irradiatedVolumeQualifier.not');
        if (dosagesIrradiatedVolumeQualifierAnyOf) {
            dosagesIrradiatedVolumeQualifierAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolumeQualifier.anyOf');
            })
        }
        if (dosagesIrradiatedVolumeQualifierNotAnyOf) {
            dosagesIrradiatedVolumeQualifierNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dosages.irradiatedVolumeQualifier.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dosagesIrradiatedVolumeQualifierDescendantsOf, 'dosages.irradiatedVolumeQualifier.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsId, 'settings.id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdNot, 'settings.id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdContains, 'settings.id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdNotContains, 'settings.id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdBeginsWith, 'settings.id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdNotBeginsWith, 'settings.id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdEndsWith, 'settings.id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsIdNotEndsWith, 'settings.id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsModality, 'settings.modality');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsModalityNot, 'settings.modality.not');
        if (settingsModalityAnyOf) {
            settingsModalityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'settings.modality.anyOf');
            })
        }
        if (settingsModalityNotAnyOf) {
            settingsModalityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'settings.modality.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsModalityDescendantsOf, 'settings.modality.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsTechnique, 'settings.technique');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsTechniqueNot, 'settings.technique.not');
        if (settingsTechniqueAnyOf) {
            settingsTechniqueAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'settings.technique.anyOf');
            })
        }
        if (settingsTechniqueNotAnyOf) {
            settingsTechniqueNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'settings.technique.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>settingsTechniqueDescendantsOf, 'settings.technique.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        if (periodOverlaps) {
            periodOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.overlaps');
            })
        }
        if (periodNotOverlaps) {
            periodNotOverlaps.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.overlaps');
            })
        }
        if (periodContains) {
            periodContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.contains');
            })
        }
        if (periodNotContains) {
            periodNotContains.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.contains');
            })
        }
        if (periodContainedBy) {
            periodContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.containedBy');
            })
        }
        if (periodNotContainedBy) {
            periodNotContainedBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'period.not.containedBy');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsLessThan, 'sessions.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsLessThanOrEqual, 'sessions.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsGreaterThan, 'sessions.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsGreaterThanOrEqual, 'sessions.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsEqual, 'sessions.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sessionsNotEqual, 'sessions.not.equal');
        if (sessionsBetween) {
            sessionsBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sessions.between');
            })
        }
        if (sessionsNotBetween) {
            sessionsNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sessions.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intent, 'intent');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>intentNot, 'intent.not');
        if (intentAnyOf) {
            intentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'intent.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>terminationReasonNotExists, 'terminationReason.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>terminationReasonExists, 'terminationReason.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>terminationReason, 'terminationReason');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>terminationReasonNot, 'terminationReason.not');
        if (terminationReasonAnyOf) {
            terminationReasonAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'terminationReason.anyOf');
            })
        }
        if (terminationReasonNotAnyOf) {
            terminationReasonNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'terminationReason.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>terminationReasonDescendantsOf, 'terminationReason.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotExists, 'therapyLineId.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdExists, 'therapyLineId.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineId, 'therapyLineId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNot, 'therapyLineId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdContains, 'therapyLineId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotContains, 'therapyLineId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdBeginsWith, 'therapyLineId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotBeginsWith, 'therapyLineId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdEndsWith, 'therapyLineId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>therapyLineIdNotEndsWith, 'therapyLineId.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>targetedEntitiesIds, 'targetedEntitiesIds');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>targetedEntitiesIdsNot, 'targetedEntitiesIds.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies`;
        return this.httpClient.request<PaginatedRadiotherapy>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Radiotherapy By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapyById(requestParameters: GetRadiotherapyByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Radiotherapy>;
    public getRadiotherapyById(requestParameters: GetRadiotherapyByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Radiotherapy>>;
    public getRadiotherapyById(requestParameters: GetRadiotherapyByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Radiotherapy>>;
    public getRadiotherapyById(requestParameters: GetRadiotherapyByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling getRadiotherapyById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Radiotherapy>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Radiotherapy Dosage By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapyDosageById(requestParameters: GetRadiotherapyDosageByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<RadiotherapyDosage>;
    public getRadiotherapyDosageById(requestParameters: GetRadiotherapyDosageByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RadiotherapyDosage>>;
    public getRadiotherapyDosageById(requestParameters: GetRadiotherapyDosageByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RadiotherapyDosage>>;
    public getRadiotherapyDosageById(requestParameters: GetRadiotherapyDosageByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling getRadiotherapyDosageById.');
        }
        const dosageId = requestParameters?.dosageId;
        if (dosageId === null || dosageId === undefined) {
            throw new Error('Required parameter dosageId was null or undefined when calling getRadiotherapyDosageById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dosages/${this.configuration.encodeParam({name: "dosageId", value: dosageId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<RadiotherapyDosage>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Radiotherapy Dosages Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapyDosages(requestParameters: GetRadiotherapyDosagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<RadiotherapyDosage>>;
    public getRadiotherapyDosages(requestParameters: GetRadiotherapyDosagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<RadiotherapyDosage>>>;
    public getRadiotherapyDosages(requestParameters: GetRadiotherapyDosagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<RadiotherapyDosage>>>;
    public getRadiotherapyDosages(requestParameters: GetRadiotherapyDosagesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling getRadiotherapyDosages.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dosages`;
        return this.httpClient.request<Array<RadiotherapyDosage>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Radiotherapy Setting By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapySettingById(requestParameters: GetRadiotherapySettingByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<RadiotherapySetting>;
    public getRadiotherapySettingById(requestParameters: GetRadiotherapySettingByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RadiotherapySetting>>;
    public getRadiotherapySettingById(requestParameters: GetRadiotherapySettingByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RadiotherapySetting>>;
    public getRadiotherapySettingById(requestParameters: GetRadiotherapySettingByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling getRadiotherapySettingById.');
        }
        const settingId = requestParameters?.settingId;
        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling getRadiotherapySettingById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/settings/${this.configuration.encodeParam({name: "settingId", value: settingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<RadiotherapySetting>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Radiotherapy Settings Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRadiotherapySettings(requestParameters: GetRadiotherapySettingsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<RadiotherapySetting>>;
    public getRadiotherapySettings(requestParameters: GetRadiotherapySettingsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<RadiotherapySetting>>>;
    public getRadiotherapySettings(requestParameters: GetRadiotherapySettingsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<RadiotherapySetting>>>;
    public getRadiotherapySettings(requestParameters: GetRadiotherapySettingsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling getRadiotherapySettings.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/settings`;
        return this.httpClient.request<Array<RadiotherapySetting>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Radiotherapy
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRadiotherapy(requestParameters: UpdateRadiotherapyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateRadiotherapy(requestParameters: UpdateRadiotherapyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateRadiotherapy(requestParameters: UpdateRadiotherapyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateRadiotherapy(requestParameters: UpdateRadiotherapyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling updateRadiotherapy.');
        }
        const radiotherapyCreate = requestParameters?.radiotherapyCreate;
        if (radiotherapyCreate === null || radiotherapyCreate === undefined) {
            throw new Error('Required parameter radiotherapyCreate was null or undefined when calling updateRadiotherapy.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapyCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Radiotherapy Dosage
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRadiotherapyDosage(requestParameters: UpdateRadiotherapyDosageRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateRadiotherapyDosage(requestParameters: UpdateRadiotherapyDosageRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateRadiotherapyDosage(requestParameters: UpdateRadiotherapyDosageRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateRadiotherapyDosage(requestParameters: UpdateRadiotherapyDosageRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling updateRadiotherapyDosage.');
        }
        const dosageId = requestParameters?.dosageId;
        if (dosageId === null || dosageId === undefined) {
            throw new Error('Required parameter dosageId was null or undefined when calling updateRadiotherapyDosage.');
        }
        const radiotherapyDosageCreate = requestParameters?.radiotherapyDosageCreate;
        if (radiotherapyDosageCreate === null || radiotherapyDosageCreate === undefined) {
            throw new Error('Required parameter radiotherapyDosageCreate was null or undefined when calling updateRadiotherapyDosage.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dosages/${this.configuration.encodeParam({name: "dosageId", value: dosageId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapyDosageCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Radiotherapy Setting
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRadiotherapySetting(requestParameters: UpdateRadiotherapySettingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateRadiotherapySetting(requestParameters: UpdateRadiotherapySettingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateRadiotherapySetting(requestParameters: UpdateRadiotherapySettingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateRadiotherapySetting(requestParameters: UpdateRadiotherapySettingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const radiotherapyId = requestParameters?.radiotherapyId;
        if (radiotherapyId === null || radiotherapyId === undefined) {
            throw new Error('Required parameter radiotherapyId was null or undefined when calling updateRadiotherapySetting.');
        }
        const settingId = requestParameters?.settingId;
        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling updateRadiotherapySetting.');
        }
        const radiotherapySettingCreate = requestParameters?.radiotherapySettingCreate;
        if (radiotherapySettingCreate === null || radiotherapySettingCreate === undefined) {
            throw new Error('Required parameter radiotherapySettingCreate was null or undefined when calling updateRadiotherapySetting.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (JWTAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('JWTAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/radiotherapies/${this.configuration.encodeParam({name: "radiotherapyId", value: radiotherapyId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/settings/${this.configuration.encodeParam({name: "settingId", value: settingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: radiotherapySettingCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
