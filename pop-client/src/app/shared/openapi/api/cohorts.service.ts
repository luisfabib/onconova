/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Cohort } from '../model/cohort';
// @ts-ignore
import { CohortContribution } from '../model/cohort-contribution';
// @ts-ignore
import { CohortCreate } from '../model/cohort-create';
// @ts-ignore
import { CohortTraitAverage } from '../model/cohort-trait-average';
// @ts-ignore
import { CohortTraitCounts } from '../model/cohort-trait-counts';
// @ts-ignore
import { CohortTraitMedian } from '../model/cohort-trait-median';
// @ts-ignore
import { DatasetRule } from '../model/dataset-rule';
// @ts-ignore
import { HistoryEventWithSchema } from '../model/history-event-with-schema';
// @ts-ignore
import { KapplerMeierCurve } from '../model/kappler-meier-curve';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedAny } from '../model/paginated-any';
// @ts-ignore
import { PaginatedCohort } from '../model/paginated-cohort';
// @ts-ignore
import { PaginatedHistoryEventWithSchema } from '../model/paginated-history-event-with-schema';
// @ts-ignore
import { PaginatedPatientCase } from '../model/paginated-patient-case';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    CohortsServiceInterface,
    CreateCohortRequestParams,
    DeleteCohortByIdRequestParams,
    ExportCohortDatasetRequestParams,
    GetAllCohortHistoryEventsRequestParams,
    GetCohortByIdRequestParams,
    GetCohortCasesRequestParams,
    GetCohortContributorsRequestParams,
    GetCohortDatasetRequestParams,
    GetCohortDatasetDynamicallyRequestParams,
    GetCohortGenomicsRequestParams,
    GetCohortHistoryEventByIdRequestParams,
    GetCohortOverallSurvivalCurveRequestParams,
    GetCohortProgressionFreeSurvivalCurveRequestParams,
    GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams,
    GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams,
    GetCohortTraitAverageRequestParams,
    GetCohortTraitCountsRequestParams,
    GetCohortTraitMedianRequestParams,
    GetCohortsRequestParams,
    RevertCohortToHistoryEventRequestParams,
    UpdateCohortRequestParams
} from './cohorts.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class CohortsService extends BaseService implements CohortsServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Cohort
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCohort(requestParameters: CreateCohortRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createCohort(requestParameters: CreateCohortRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createCohort(requestParameters: CreateCohortRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createCohort(requestParameters: CreateCohortRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortCreate = requestParameters?.cohortCreate;
        if (cohortCreate === null || cohortCreate === undefined) {
            throw new Error('Required parameter cohortCreate was null or undefined when calling createCohort.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: cohortCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Cohort
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCohortById(requestParameters: DeleteCohortByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteCohortById(requestParameters: DeleteCohortByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteCohortById(requestParameters: DeleteCohortByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteCohortById(requestParameters: DeleteCohortByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling deleteCohortById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export Cohort Dataset
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportCohortDataset(requestParameters: ExportCohortDatasetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public exportCohortDataset(requestParameters: ExportCohortDatasetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public exportCohortDataset(requestParameters: ExportCohortDatasetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public exportCohortDataset(requestParameters: ExportCohortDatasetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling exportCohortDataset.');
        }
        const datasetRule = requestParameters?.datasetRule;
        if (datasetRule === null || datasetRule === undefined) {
            throw new Error('Required parameter datasetRule was null or undefined when calling exportCohortDataset.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dataset/export`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: datasetRule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Cohort History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCohortHistoryEvents(requestParameters: GetAllCohortHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEventWithSchema>;
    public getAllCohortHistoryEvents(requestParameters: GetAllCohortHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEventWithSchema>>;
    public getAllCohortHistoryEvents(requestParameters: GetAllCohortHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEventWithSchema>>;
    public getAllCohortHistoryEvents(requestParameters: GetAllCohortHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getAllCohortHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortById(requestParameters: GetCohortByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Cohort>;
    public getCohortById(requestParameters: GetCohortByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Cohort>>;
    public getCohortById(requestParameters: GetCohortByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Cohort>>;
    public getCohortById(requestParameters: GetCohortByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Cohort>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Cases
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortCases(requestParameters: GetCohortCasesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedPatientCase>;
    public getCohortCases(requestParameters: GetCohortCasesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedPatientCase>>;
    public getCohortCases(requestParameters: GetCohortCasesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedPatientCase>>;
    public getCohortCases(requestParameters: GetCohortCasesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortCases.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/cases`;
        return this.httpClient.request<PaginatedPatientCase>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Contributions
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortContributors(requestParameters: GetCohortContributorsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<CohortContribution>>;
    public getCohortContributors(requestParameters: GetCohortContributorsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<CohortContribution>>>;
    public getCohortContributors(requestParameters: GetCohortContributorsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<CohortContribution>>>;
    public getCohortContributors(requestParameters: GetCohortContributorsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortContributors.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/contributors`;
        return this.httpClient.request<Array<CohortContribution>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Dataset
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortDataset(requestParameters: GetCohortDatasetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedAny>;
    public getCohortDataset(requestParameters: GetCohortDatasetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedAny>>;
    public getCohortDataset(requestParameters: GetCohortDatasetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedAny>>;
    public getCohortDataset(requestParameters: GetCohortDatasetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortDataset.');
        }
        const datasetId = requestParameters?.datasetId;
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling getCohortDataset.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets/${this.configuration.encodeParam({name: "datasetId", value: datasetId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<PaginatedAny>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Construct Cohort Dataset
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortDatasetDynamically(requestParameters: GetCohortDatasetDynamicallyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedAny>;
    public getCohortDatasetDynamically(requestParameters: GetCohortDatasetDynamicallyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedAny>>;
    public getCohortDatasetDynamically(requestParameters: GetCohortDatasetDynamicallyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedAny>>;
    public getCohortDatasetDynamically(requestParameters: GetCohortDatasetDynamicallyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortDatasetDynamically.');
        }
        const datasetRule = requestParameters?.datasetRule;
        if (datasetRule === null || datasetRule === undefined) {
            throw new Error('Required parameter datasetRule was null or undefined when calling getCohortDatasetDynamically.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/dataset`;
        return this.httpClient.request<PaginatedAny>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: datasetRule,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Genomics
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortGenomics(requestParameters: GetCohortGenomicsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<{ [key: string]: any; }>;
    public getCohortGenomics(requestParameters: GetCohortGenomicsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getCohortGenomics(requestParameters: GetCohortGenomicsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getCohortGenomics(requestParameters: GetCohortGenomicsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortGenomics.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/genomics`;
        return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortHistoryEventById(requestParameters: GetCohortHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEventWithSchema>;
    public getCohortHistoryEventById(requestParameters: GetCohortHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEventWithSchema>>;
    public getCohortHistoryEventById(requestParameters: GetCohortHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEventWithSchema>>;
    public getCohortHistoryEventById(requestParameters: GetCohortHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getCohortHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Overall Survival Curve
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortOverallSurvivalCurve(requestParameters: GetCohortOverallSurvivalCurveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<KapplerMeierCurve>;
    public getCohortOverallSurvivalCurve(requestParameters: GetCohortOverallSurvivalCurveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<KapplerMeierCurve>>;
    public getCohortOverallSurvivalCurve(requestParameters: GetCohortOverallSurvivalCurveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<KapplerMeierCurve>>;
    public getCohortOverallSurvivalCurve(requestParameters: GetCohortOverallSurvivalCurveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortOverallSurvivalCurve.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/overall-survival-curve`;
        return this.httpClient.request<KapplerMeierCurve>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Progression Free Survival Curve
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortProgressionFreeSurvivalCurve(requestParameters: GetCohortProgressionFreeSurvivalCurveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<KapplerMeierCurve>;
    public getCohortProgressionFreeSurvivalCurve(requestParameters: GetCohortProgressionFreeSurvivalCurveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<KapplerMeierCurve>>;
    public getCohortProgressionFreeSurvivalCurve(requestParameters: GetCohortProgressionFreeSurvivalCurveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<KapplerMeierCurve>>;
    public getCohortProgressionFreeSurvivalCurve(requestParameters: GetCohortProgressionFreeSurvivalCurveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortProgressionFreeSurvivalCurve.');
        }
        const therapyLine = requestParameters?.therapyLine;
        if (therapyLine === null || therapyLine === undefined) {
            throw new Error('Required parameter therapyLine was null or undefined when calling getCohortProgressionFreeSurvivalCurve.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/progression-free-survival-curve/${this.configuration.encodeParam({name: "therapyLine", value: therapyLine, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<KapplerMeierCurve>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Progression Free Survival Curve By Drug Combinations
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortProgressionFreeSurvivalCurveByDrugCombinations(requestParameters: GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<{ [key: string]: any; }>;
    public getCohortProgressionFreeSurvivalCurveByDrugCombinations(requestParameters: GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getCohortProgressionFreeSurvivalCurveByDrugCombinations(requestParameters: GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getCohortProgressionFreeSurvivalCurveByDrugCombinations(requestParameters: GetCohortProgressionFreeSurvivalCurveByDrugCombinationsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortProgressionFreeSurvivalCurveByDrugCombinations.');
        }
        const therapyLine = requestParameters?.therapyLine;
        if (therapyLine === null || therapyLine === undefined) {
            throw new Error('Required parameter therapyLine was null or undefined when calling getCohortProgressionFreeSurvivalCurveByDrugCombinations.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/progression-free-survival/${this.configuration.encodeParam({name: "therapyLine", value: therapyLine, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/drug-combinations`;
        return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Progression Free Survival Curve By Therapy Classifications
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortProgressionFreeSurvivalCurveByTherapyClassifications(requestParameters: GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<{ [key: string]: any; }>;
    public getCohortProgressionFreeSurvivalCurveByTherapyClassifications(requestParameters: GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getCohortProgressionFreeSurvivalCurveByTherapyClassifications(requestParameters: GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getCohortProgressionFreeSurvivalCurveByTherapyClassifications(requestParameters: GetCohortProgressionFreeSurvivalCurveByTherapyClassificationsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortProgressionFreeSurvivalCurveByTherapyClassifications.');
        }
        const therapyLine = requestParameters?.therapyLine;
        if (therapyLine === null || therapyLine === undefined) {
            throw new Error('Required parameter therapyLine was null or undefined when calling getCohortProgressionFreeSurvivalCurveByTherapyClassifications.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/progression-free-survival/${this.configuration.encodeParam({name: "therapyLine", value: therapyLine, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/therapy-classifications`;
        return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Trait Average
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortTraitAverage(requestParameters: GetCohortTraitAverageRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CohortTraitAverage>;
    public getCohortTraitAverage(requestParameters: GetCohortTraitAverageRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CohortTraitAverage>>;
    public getCohortTraitAverage(requestParameters: GetCohortTraitAverageRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CohortTraitAverage>>;
    public getCohortTraitAverage(requestParameters: GetCohortTraitAverageRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortTraitAverage.');
        }
        const trait = requestParameters?.trait;
        if (trait === null || trait === undefined) {
            throw new Error('Required parameter trait was null or undefined when calling getCohortTraitAverage.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/traits/${this.configuration.encodeParam({name: "trait", value: trait, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/average`;
        return this.httpClient.request<CohortTraitAverage>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Trait Counts
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortTraitCounts(requestParameters: GetCohortTraitCountsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<CohortTraitCounts>>;
    public getCohortTraitCounts(requestParameters: GetCohortTraitCountsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<CohortTraitCounts>>>;
    public getCohortTraitCounts(requestParameters: GetCohortTraitCountsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<CohortTraitCounts>>>;
    public getCohortTraitCounts(requestParameters: GetCohortTraitCountsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortTraitCounts.');
        }
        const trait = requestParameters?.trait;
        if (trait === null || trait === undefined) {
            throw new Error('Required parameter trait was null or undefined when calling getCohortTraitCounts.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/traits/${this.configuration.encodeParam({name: "trait", value: trait, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/counts`;
        return this.httpClient.request<Array<CohortTraitCounts>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cohort Trait Median
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohortTraitMedian(requestParameters: GetCohortTraitMedianRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CohortTraitMedian>;
    public getCohortTraitMedian(requestParameters: GetCohortTraitMedianRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CohortTraitMedian>>;
    public getCohortTraitMedian(requestParameters: GetCohortTraitMedianRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CohortTraitMedian>>;
    public getCohortTraitMedian(requestParameters: GetCohortTraitMedianRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling getCohortTraitMedian.');
        }
        const trait = requestParameters?.trait;
        if (trait === null || trait === undefined) {
            throw new Error('Required parameter trait was null or undefined when calling getCohortTraitMedian.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/traits/${this.configuration.encodeParam({name: "trait", value: trait, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/median`;
        return this.httpClient.request<CohortTraitMedian>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Cohorts Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCohorts(requestParameters?: GetCohortsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedCohort>;
    public getCohorts(requestParameters?: GetCohortsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedCohort>>;
    public getCohorts(requestParameters?: GetCohortsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedCohort>>;
    public getCohorts(requestParameters?: GetCohortsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const populationLessThan = requestParameters?.populationLessThan;
        const populationLessThanOrEqual = requestParameters?.populationLessThanOrEqual;
        const populationGreaterThan = requestParameters?.populationGreaterThan;
        const populationGreaterThanOrEqual = requestParameters?.populationGreaterThanOrEqual;
        const populationEqual = requestParameters?.populationEqual;
        const populationNotEqual = requestParameters?.populationNotEqual;
        const populationBetween = requestParameters?.populationBetween;
        const populationNotBetween = requestParameters?.populationNotBetween;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const name = requestParameters?.name;
        const nameNot = requestParameters?.nameNot;
        const nameContains = requestParameters?.nameContains;
        const nameNotContains = requestParameters?.nameNotContains;
        const nameBeginsWith = requestParameters?.nameBeginsWith;
        const nameNotBeginsWith = requestParameters?.nameNotBeginsWith;
        const nameEndsWith = requestParameters?.nameEndsWith;
        const nameNotEndsWith = requestParameters?.nameNotEndsWith;
        const includeCriteriaNotExists = requestParameters?.includeCriteriaNotExists;
        const includeCriteriaExists = requestParameters?.includeCriteriaExists;
        const excludeCriteriaNotExists = requestParameters?.excludeCriteriaNotExists;
        const excludeCriteriaExists = requestParameters?.excludeCriteriaExists;
        const isPublic = requestParameters?.isPublic;
        const casesIds = requestParameters?.casesIds;
        const casesIdsNot = requestParameters?.casesIdsNot;
        const casesIdsContains = requestParameters?.casesIdsContains;
        const casesIdsNotContains = requestParameters?.casesIdsNotContains;
        const casesIdsBeginsWith = requestParameters?.casesIdsBeginsWith;
        const casesIdsNotBeginsWith = requestParameters?.casesIdsNotBeginsWith;
        const casesIdsEndsWith = requestParameters?.casesIdsEndsWith;
        const casesIdsNotEndsWith = requestParameters?.casesIdsNotEndsWith;
        const manualChoicesIds = requestParameters?.manualChoicesIds;
        const manualChoicesIdsNot = requestParameters?.manualChoicesIdsNot;
        const manualChoicesIdsContains = requestParameters?.manualChoicesIdsContains;
        const manualChoicesIdsNotContains = requestParameters?.manualChoicesIdsNotContains;
        const manualChoicesIdsBeginsWith = requestParameters?.manualChoicesIdsBeginsWith;
        const manualChoicesIdsNotBeginsWith = requestParameters?.manualChoicesIdsNotBeginsWith;
        const manualChoicesIdsEndsWith = requestParameters?.manualChoicesIdsEndsWith;
        const manualChoicesIdsNotEndsWith = requestParameters?.manualChoicesIdsNotEndsWith;
        const frozenSetIds = requestParameters?.frozenSetIds;
        const frozenSetIdsNot = requestParameters?.frozenSetIdsNot;
        const frozenSetIdsContains = requestParameters?.frozenSetIdsContains;
        const frozenSetIdsNotContains = requestParameters?.frozenSetIdsNotContains;
        const frozenSetIdsBeginsWith = requestParameters?.frozenSetIdsBeginsWith;
        const frozenSetIdsNotBeginsWith = requestParameters?.frozenSetIdsNotBeginsWith;
        const frozenSetIdsEndsWith = requestParameters?.frozenSetIdsEndsWith;
        const frozenSetIdsNotEndsWith = requestParameters?.frozenSetIdsNotEndsWith;
        const createdBy = requestParameters?.createdBy;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationLessThan, 'population.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationLessThanOrEqual, 'population.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationGreaterThan, 'population.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationGreaterThanOrEqual, 'population.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationEqual, 'population.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>populationNotEqual, 'population.not.equal');
        if (populationBetween) {
            populationBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'population.between');
            })
        }
        if (populationNotBetween) {
            populationNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'population.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>name, 'name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameNot, 'name.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameContains, 'name.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameNotContains, 'name.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameBeginsWith, 'name.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameNotBeginsWith, 'name.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameEndsWith, 'name.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nameNotEndsWith, 'name.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeCriteriaNotExists, 'includeCriteria.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeCriteriaExists, 'includeCriteria.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>excludeCriteriaNotExists, 'excludeCriteria.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>excludeCriteriaExists, 'excludeCriteria.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isPublic, 'isPublic');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIds, 'casesIds');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsNot, 'casesIds.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsContains, 'casesIds.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsNotContains, 'casesIds.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsBeginsWith, 'casesIds.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsNotBeginsWith, 'casesIds.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsEndsWith, 'casesIds.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>casesIdsNotEndsWith, 'casesIds.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIds, 'manualChoicesIds');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsNot, 'manualChoicesIds.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsContains, 'manualChoicesIds.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsNotContains, 'manualChoicesIds.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsBeginsWith, 'manualChoicesIds.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsNotBeginsWith, 'manualChoicesIds.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsEndsWith, 'manualChoicesIds.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>manualChoicesIdsNotEndsWith, 'manualChoicesIds.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIds, 'frozenSetIds');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsNot, 'frozenSetIds.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsContains, 'frozenSetIds.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsNotContains, 'frozenSetIds.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsBeginsWith, 'frozenSetIds.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsNotBeginsWith, 'frozenSetIds.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsEndsWith, 'frozenSetIds.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frozenSetIdsNotEndsWith, 'frozenSetIds.not.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>createdBy, 'createdBy');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts`;
        return this.httpClient.request<PaginatedCohort>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Cohort To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertCohortToHistoryEvent(requestParameters: RevertCohortToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertCohortToHistoryEvent(requestParameters: RevertCohortToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertCohortToHistoryEvent(requestParameters: RevertCohortToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertCohortToHistoryEvent(requestParameters: RevertCohortToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling revertCohortToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertCohortToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Cohort
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCohort(requestParameters: UpdateCohortRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateCohort(requestParameters: UpdateCohortRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateCohort(requestParameters: UpdateCohortRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateCohort(requestParameters: UpdateCohortRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const cohortId = requestParameters?.cohortId;
        if (cohortId === null || cohortId === undefined) {
            throw new Error('Required parameter cohortId was null or undefined when calling updateCohort.');
        }
        const cohortCreate = requestParameters?.cohortCreate;
        if (cohortCreate === null || cohortCreate === undefined) {
            throw new Error('Required parameter cohortCreate was null or undefined when calling updateCohort.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/cohorts/${this.configuration.encodeParam({name: "cohortId", value: cohortId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: cohortCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
