/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GenomicVariant } from '../model/genomic-variant';
// @ts-ignore
import { GenomicVariantCreate } from '../model/genomic-variant-create';
// @ts-ignore
import { HistoryEventWithSchema } from '../model/history-event-with-schema';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedGenomicVariant } from '../model/paginated-genomic-variant';
// @ts-ignore
import { PaginatedHistoryEventWithSchema } from '../model/paginated-history-event-with-schema';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    GenomicVariantsServiceInterface,
    CreateGenomicVariantRequestParams,
    DeleteGenomicVariantRequestParams,
    GetAllGenomicVariantHistoryEventsRequestParams,
    GetGenomicVariantByIdRequestParams,
    GetGenomicVariantHistoryEventByIdRequestParams,
    GetGenomicVariantsRequestParams,
    RevertGenomicVariantToHistoryEventRequestParams,
    UpdateGenomicVariantRequestParams
} from './genomic-variants.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class GenomicVariantsService extends BaseService implements GenomicVariantsServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling createGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling deleteGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Genomic Variant History Events
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllGenomicVariantHistoryEvents(requestParameters: GetAllGenomicVariantHistoryEventsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedHistoryEventWithSchema>;
    public getAllGenomicVariantHistoryEvents(requestParameters: GetAllGenomicVariantHistoryEventsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedHistoryEventWithSchema>>;
    public getAllGenomicVariantHistoryEvents(requestParameters: GetAllGenomicVariantHistoryEventsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedHistoryEventWithSchema>>;
    public getAllGenomicVariantHistoryEvents(requestParameters: GetAllGenomicVariantHistoryEventsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling getAllGenomicVariantHistoryEvents.');
        }
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events`;
        return this.httpClient.request<PaginatedHistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Genomic Variant By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GenomicVariant>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling getGenomicVariantById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Genomic Variant History Event By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariantHistoryEventById(requestParameters: GetGenomicVariantHistoryEventByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HistoryEventWithSchema>;
    public getGenomicVariantHistoryEventById(requestParameters: GetGenomicVariantHistoryEventByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<HistoryEventWithSchema>>;
    public getGenomicVariantHistoryEventById(requestParameters: GetGenomicVariantHistoryEventByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<HistoryEventWithSchema>>;
    public getGenomicVariantHistoryEventById(requestParameters: GetGenomicVariantHistoryEventByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling getGenomicVariantHistoryEventById.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getGenomicVariantHistoryEventById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<HistoryEventWithSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Genomic Variants Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedGenomicVariant>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const isPathogenicNotExists = requestParameters?.isPathogenicNotExists;
        const isPathogenicExists = requestParameters?.isPathogenicExists;
        const isPathogenic = requestParameters?.isPathogenic;
        const isVUSNotExists = requestParameters?.isVUSNotExists;
        const isVUSExists = requestParameters?.isVUSExists;
        const isVUS = requestParameters?.isVUS;
        const dnaHgvsNotExists = requestParameters?.dnaHgvsNotExists;
        const dnaHgvsExists = requestParameters?.dnaHgvsExists;
        const dnaHgvs = requestParameters?.dnaHgvs;
        const dnaHgvsNot = requestParameters?.dnaHgvsNot;
        const dnaHgvsContains = requestParameters?.dnaHgvsContains;
        const dnaHgvsNotContains = requestParameters?.dnaHgvsNotContains;
        const dnaHgvsBeginsWith = requestParameters?.dnaHgvsBeginsWith;
        const dnaHgvsNotBeginsWith = requestParameters?.dnaHgvsNotBeginsWith;
        const dnaHgvsEndsWith = requestParameters?.dnaHgvsEndsWith;
        const dnaHgvsNotEndsWith = requestParameters?.dnaHgvsNotEndsWith;
        const dnaHgvsAnyOf = requestParameters?.dnaHgvsAnyOf;
        const dnaHgvsNotAnyOf = requestParameters?.dnaHgvsNotAnyOf;
        const dnaReferenceSequenceNotExists = requestParameters?.dnaReferenceSequenceNotExists;
        const dnaReferenceSequenceExists = requestParameters?.dnaReferenceSequenceExists;
        const dnaReferenceSequence = requestParameters?.dnaReferenceSequence;
        const dnaReferenceSequenceNot = requestParameters?.dnaReferenceSequenceNot;
        const dnaReferenceSequenceContains = requestParameters?.dnaReferenceSequenceContains;
        const dnaReferenceSequenceNotContains = requestParameters?.dnaReferenceSequenceNotContains;
        const dnaReferenceSequenceBeginsWith = requestParameters?.dnaReferenceSequenceBeginsWith;
        const dnaReferenceSequenceNotBeginsWith = requestParameters?.dnaReferenceSequenceNotBeginsWith;
        const dnaReferenceSequenceEndsWith = requestParameters?.dnaReferenceSequenceEndsWith;
        const dnaReferenceSequenceNotEndsWith = requestParameters?.dnaReferenceSequenceNotEndsWith;
        const dnaReferenceSequenceAnyOf = requestParameters?.dnaReferenceSequenceAnyOf;
        const dnaReferenceSequenceNotAnyOf = requestParameters?.dnaReferenceSequenceNotAnyOf;
        const dnaChangePositionNotExists = requestParameters?.dnaChangePositionNotExists;
        const dnaChangePositionExists = requestParameters?.dnaChangePositionExists;
        const dnaChangePositionLessThan = requestParameters?.dnaChangePositionLessThan;
        const dnaChangePositionLessThanOrEqual = requestParameters?.dnaChangePositionLessThanOrEqual;
        const dnaChangePositionGreaterThan = requestParameters?.dnaChangePositionGreaterThan;
        const dnaChangePositionGreaterThanOrEqual = requestParameters?.dnaChangePositionGreaterThanOrEqual;
        const dnaChangePositionEqual = requestParameters?.dnaChangePositionEqual;
        const dnaChangePositionNotEqual = requestParameters?.dnaChangePositionNotEqual;
        const dnaChangePositionBetween = requestParameters?.dnaChangePositionBetween;
        const dnaChangePositionNotBetween = requestParameters?.dnaChangePositionNotBetween;
        const dnaChangePositionRangeNotExists = requestParameters?.dnaChangePositionRangeNotExists;
        const dnaChangePositionRangeExists = requestParameters?.dnaChangePositionRangeExists;
        const dnaChangeTypeNotExists = requestParameters?.dnaChangeTypeNotExists;
        const dnaChangeTypeExists = requestParameters?.dnaChangeTypeExists;
        const dnaChangeType = requestParameters?.dnaChangeType;
        const dnaChangeTypeNot = requestParameters?.dnaChangeTypeNot;
        const dnaChangeTypeAnyOf = requestParameters?.dnaChangeTypeAnyOf;
        const rnaHgvsNotExists = requestParameters?.rnaHgvsNotExists;
        const rnaHgvsExists = requestParameters?.rnaHgvsExists;
        const rnaHgvs = requestParameters?.rnaHgvs;
        const rnaHgvsNot = requestParameters?.rnaHgvsNot;
        const rnaHgvsContains = requestParameters?.rnaHgvsContains;
        const rnaHgvsNotContains = requestParameters?.rnaHgvsNotContains;
        const rnaHgvsBeginsWith = requestParameters?.rnaHgvsBeginsWith;
        const rnaHgvsNotBeginsWith = requestParameters?.rnaHgvsNotBeginsWith;
        const rnaHgvsEndsWith = requestParameters?.rnaHgvsEndsWith;
        const rnaHgvsNotEndsWith = requestParameters?.rnaHgvsNotEndsWith;
        const rnaHgvsAnyOf = requestParameters?.rnaHgvsAnyOf;
        const rnaHgvsNotAnyOf = requestParameters?.rnaHgvsNotAnyOf;
        const rnaReferenceSequenceNotExists = requestParameters?.rnaReferenceSequenceNotExists;
        const rnaReferenceSequenceExists = requestParameters?.rnaReferenceSequenceExists;
        const rnaReferenceSequence = requestParameters?.rnaReferenceSequence;
        const rnaReferenceSequenceNot = requestParameters?.rnaReferenceSequenceNot;
        const rnaReferenceSequenceContains = requestParameters?.rnaReferenceSequenceContains;
        const rnaReferenceSequenceNotContains = requestParameters?.rnaReferenceSequenceNotContains;
        const rnaReferenceSequenceBeginsWith = requestParameters?.rnaReferenceSequenceBeginsWith;
        const rnaReferenceSequenceNotBeginsWith = requestParameters?.rnaReferenceSequenceNotBeginsWith;
        const rnaReferenceSequenceEndsWith = requestParameters?.rnaReferenceSequenceEndsWith;
        const rnaReferenceSequenceNotEndsWith = requestParameters?.rnaReferenceSequenceNotEndsWith;
        const rnaReferenceSequenceAnyOf = requestParameters?.rnaReferenceSequenceAnyOf;
        const rnaReferenceSequenceNotAnyOf = requestParameters?.rnaReferenceSequenceNotAnyOf;
        const rnaChangePositionNotExists = requestParameters?.rnaChangePositionNotExists;
        const rnaChangePositionExists = requestParameters?.rnaChangePositionExists;
        const rnaChangePosition = requestParameters?.rnaChangePosition;
        const rnaChangePositionNot = requestParameters?.rnaChangePositionNot;
        const rnaChangePositionContains = requestParameters?.rnaChangePositionContains;
        const rnaChangePositionNotContains = requestParameters?.rnaChangePositionNotContains;
        const rnaChangePositionBeginsWith = requestParameters?.rnaChangePositionBeginsWith;
        const rnaChangePositionNotBeginsWith = requestParameters?.rnaChangePositionNotBeginsWith;
        const rnaChangePositionEndsWith = requestParameters?.rnaChangePositionEndsWith;
        const rnaChangePositionNotEndsWith = requestParameters?.rnaChangePositionNotEndsWith;
        const rnaChangePositionAnyOf = requestParameters?.rnaChangePositionAnyOf;
        const rnaChangePositionNotAnyOf = requestParameters?.rnaChangePositionNotAnyOf;
        const rnaChangeTypeNotExists = requestParameters?.rnaChangeTypeNotExists;
        const rnaChangeTypeExists = requestParameters?.rnaChangeTypeExists;
        const rnaChangeType = requestParameters?.rnaChangeType;
        const rnaChangeTypeNot = requestParameters?.rnaChangeTypeNot;
        const rnaChangeTypeAnyOf = requestParameters?.rnaChangeTypeAnyOf;
        const proteinHgvsNotExists = requestParameters?.proteinHgvsNotExists;
        const proteinHgvsExists = requestParameters?.proteinHgvsExists;
        const proteinHgvs = requestParameters?.proteinHgvs;
        const proteinHgvsNot = requestParameters?.proteinHgvsNot;
        const proteinHgvsContains = requestParameters?.proteinHgvsContains;
        const proteinHgvsNotContains = requestParameters?.proteinHgvsNotContains;
        const proteinHgvsBeginsWith = requestParameters?.proteinHgvsBeginsWith;
        const proteinHgvsNotBeginsWith = requestParameters?.proteinHgvsNotBeginsWith;
        const proteinHgvsEndsWith = requestParameters?.proteinHgvsEndsWith;
        const proteinHgvsNotEndsWith = requestParameters?.proteinHgvsNotEndsWith;
        const proteinHgvsAnyOf = requestParameters?.proteinHgvsAnyOf;
        const proteinHgvsNotAnyOf = requestParameters?.proteinHgvsNotAnyOf;
        const proteinReferenceSequenceNotExists = requestParameters?.proteinReferenceSequenceNotExists;
        const proteinReferenceSequenceExists = requestParameters?.proteinReferenceSequenceExists;
        const proteinReferenceSequence = requestParameters?.proteinReferenceSequence;
        const proteinReferenceSequenceNot = requestParameters?.proteinReferenceSequenceNot;
        const proteinReferenceSequenceContains = requestParameters?.proteinReferenceSequenceContains;
        const proteinReferenceSequenceNotContains = requestParameters?.proteinReferenceSequenceNotContains;
        const proteinReferenceSequenceBeginsWith = requestParameters?.proteinReferenceSequenceBeginsWith;
        const proteinReferenceSequenceNotBeginsWith = requestParameters?.proteinReferenceSequenceNotBeginsWith;
        const proteinReferenceSequenceEndsWith = requestParameters?.proteinReferenceSequenceEndsWith;
        const proteinReferenceSequenceNotEndsWith = requestParameters?.proteinReferenceSequenceNotEndsWith;
        const proteinReferenceSequenceAnyOf = requestParameters?.proteinReferenceSequenceAnyOf;
        const proteinReferenceSequenceNotAnyOf = requestParameters?.proteinReferenceSequenceNotAnyOf;
        const proteinChangeTypeNotExists = requestParameters?.proteinChangeTypeNotExists;
        const proteinChangeTypeExists = requestParameters?.proteinChangeTypeExists;
        const proteinChangeType = requestParameters?.proteinChangeType;
        const proteinChangeTypeNot = requestParameters?.proteinChangeTypeNot;
        const proteinChangeTypeAnyOf = requestParameters?.proteinChangeTypeAnyOf;
        const nucleotidesLengthNotExists = requestParameters?.nucleotidesLengthNotExists;
        const nucleotidesLengthExists = requestParameters?.nucleotidesLengthExists;
        const nucleotidesLengthLessThan = requestParameters?.nucleotidesLengthLessThan;
        const nucleotidesLengthLessThanOrEqual = requestParameters?.nucleotidesLengthLessThanOrEqual;
        const nucleotidesLengthGreaterThan = requestParameters?.nucleotidesLengthGreaterThan;
        const nucleotidesLengthGreaterThanOrEqual = requestParameters?.nucleotidesLengthGreaterThanOrEqual;
        const nucleotidesLengthEqual = requestParameters?.nucleotidesLengthEqual;
        const nucleotidesLengthNotEqual = requestParameters?.nucleotidesLengthNotEqual;
        const nucleotidesLengthBetween = requestParameters?.nucleotidesLengthBetween;
        const nucleotidesLengthNotBetween = requestParameters?.nucleotidesLengthNotBetween;
        const regionsNotExists = requestParameters?.regionsNotExists;
        const regionsExists = requestParameters?.regionsExists;
        const regions = requestParameters?.regions;
        const regionsNot = requestParameters?.regionsNot;
        const regionsContains = requestParameters?.regionsContains;
        const regionsNotContains = requestParameters?.regionsNotContains;
        const regionsBeginsWith = requestParameters?.regionsBeginsWith;
        const regionsNotBeginsWith = requestParameters?.regionsNotBeginsWith;
        const regionsEndsWith = requestParameters?.regionsEndsWith;
        const regionsNotEndsWith = requestParameters?.regionsNotEndsWith;
        const regionsAnyOf = requestParameters?.regionsAnyOf;
        const regionsNotAnyOf = requestParameters?.regionsNotAnyOf;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const idAnyOf = requestParameters?.idAnyOf;
        const idNotAnyOf = requestParameters?.idNotAnyOf;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const caseIdAnyOf = requestParameters?.caseIdAnyOf;
        const caseIdNotAnyOf = requestParameters?.caseIdNotAnyOf;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const genePanelNotExists = requestParameters?.genePanelNotExists;
        const genePanelExists = requestParameters?.genePanelExists;
        const genePanel = requestParameters?.genePanel;
        const genePanelNot = requestParameters?.genePanelNot;
        const genePanelContains = requestParameters?.genePanelContains;
        const genePanelNotContains = requestParameters?.genePanelNotContains;
        const genePanelBeginsWith = requestParameters?.genePanelBeginsWith;
        const genePanelNotBeginsWith = requestParameters?.genePanelNotBeginsWith;
        const genePanelEndsWith = requestParameters?.genePanelEndsWith;
        const genePanelNotEndsWith = requestParameters?.genePanelNotEndsWith;
        const genePanelAnyOf = requestParameters?.genePanelAnyOf;
        const genePanelNotAnyOf = requestParameters?.genePanelNotAnyOf;
        const assessmentNotExists = requestParameters?.assessmentNotExists;
        const assessmentExists = requestParameters?.assessmentExists;
        const assessment = requestParameters?.assessment;
        const assessmentNot = requestParameters?.assessmentNot;
        const assessmentAnyOf = requestParameters?.assessmentAnyOf;
        const confidenceNotExists = requestParameters?.confidenceNotExists;
        const confidenceExists = requestParameters?.confidenceExists;
        const confidence = requestParameters?.confidence;
        const confidenceNot = requestParameters?.confidenceNot;
        const confidenceAnyOf = requestParameters?.confidenceAnyOf;
        const analysisMethodNotExists = requestParameters?.analysisMethodNotExists;
        const analysisMethodExists = requestParameters?.analysisMethodExists;
        const analysisMethod = requestParameters?.analysisMethod;
        const analysisMethodNot = requestParameters?.analysisMethodNot;
        const analysisMethodAnyOf = requestParameters?.analysisMethodAnyOf;
        const analysisMethodNotAnyOf = requestParameters?.analysisMethodNotAnyOf;
        const analysisMethodDescendantsOf = requestParameters?.analysisMethodDescendantsOf;
        const clinicalRelevanceNotExists = requestParameters?.clinicalRelevanceNotExists;
        const clinicalRelevanceExists = requestParameters?.clinicalRelevanceExists;
        const clinicalRelevance = requestParameters?.clinicalRelevance;
        const clinicalRelevanceNot = requestParameters?.clinicalRelevanceNot;
        const clinicalRelevanceAnyOf = requestParameters?.clinicalRelevanceAnyOf;
        const genomeAssemblyVersionNotExists = requestParameters?.genomeAssemblyVersionNotExists;
        const genomeAssemblyVersionExists = requestParameters?.genomeAssemblyVersionExists;
        const genomeAssemblyVersion = requestParameters?.genomeAssemblyVersion;
        const genomeAssemblyVersionNot = requestParameters?.genomeAssemblyVersionNot;
        const genomeAssemblyVersionAnyOf = requestParameters?.genomeAssemblyVersionAnyOf;
        const genomeAssemblyVersionNotAnyOf = requestParameters?.genomeAssemblyVersionNotAnyOf;
        const genomeAssemblyVersionDescendantsOf = requestParameters?.genomeAssemblyVersionDescendantsOf;
        const molecularConsequenceNotExists = requestParameters?.molecularConsequenceNotExists;
        const molecularConsequenceExists = requestParameters?.molecularConsequenceExists;
        const molecularConsequence = requestParameters?.molecularConsequence;
        const molecularConsequenceNot = requestParameters?.molecularConsequenceNot;
        const molecularConsequenceAnyOf = requestParameters?.molecularConsequenceAnyOf;
        const molecularConsequenceNotAnyOf = requestParameters?.molecularConsequenceNotAnyOf;
        const molecularConsequenceDescendantsOf = requestParameters?.molecularConsequenceDescendantsOf;
        const copyNumberNotExists = requestParameters?.copyNumberNotExists;
        const copyNumberExists = requestParameters?.copyNumberExists;
        const copyNumberLessThan = requestParameters?.copyNumberLessThan;
        const copyNumberLessThanOrEqual = requestParameters?.copyNumberLessThanOrEqual;
        const copyNumberGreaterThan = requestParameters?.copyNumberGreaterThan;
        const copyNumberGreaterThanOrEqual = requestParameters?.copyNumberGreaterThanOrEqual;
        const copyNumberEqual = requestParameters?.copyNumberEqual;
        const copyNumberNotEqual = requestParameters?.copyNumberNotEqual;
        const copyNumberBetween = requestParameters?.copyNumberBetween;
        const copyNumberNotBetween = requestParameters?.copyNumberNotBetween;
        const alleleFrequencyNotExists = requestParameters?.alleleFrequencyNotExists;
        const alleleFrequencyExists = requestParameters?.alleleFrequencyExists;
        const alleleFrequencyLessThan = requestParameters?.alleleFrequencyLessThan;
        const alleleFrequencyLessThanOrEqual = requestParameters?.alleleFrequencyLessThanOrEqual;
        const alleleFrequencyGreaterThan = requestParameters?.alleleFrequencyGreaterThan;
        const alleleFrequencyGreaterThanOrEqual = requestParameters?.alleleFrequencyGreaterThanOrEqual;
        const alleleFrequencyEqual = requestParameters?.alleleFrequencyEqual;
        const alleleFrequencyNotEqual = requestParameters?.alleleFrequencyNotEqual;
        const alleleFrequencyBetween = requestParameters?.alleleFrequencyBetween;
        const alleleFrequencyNotBetween = requestParameters?.alleleFrequencyNotBetween;
        const alleleDepthNotExists = requestParameters?.alleleDepthNotExists;
        const alleleDepthExists = requestParameters?.alleleDepthExists;
        const alleleDepthLessThan = requestParameters?.alleleDepthLessThan;
        const alleleDepthLessThanOrEqual = requestParameters?.alleleDepthLessThanOrEqual;
        const alleleDepthGreaterThan = requestParameters?.alleleDepthGreaterThan;
        const alleleDepthGreaterThanOrEqual = requestParameters?.alleleDepthGreaterThanOrEqual;
        const alleleDepthEqual = requestParameters?.alleleDepthEqual;
        const alleleDepthNotEqual = requestParameters?.alleleDepthNotEqual;
        const alleleDepthBetween = requestParameters?.alleleDepthBetween;
        const alleleDepthNotBetween = requestParameters?.alleleDepthNotBetween;
        const zygosityNotExists = requestParameters?.zygosityNotExists;
        const zygosityExists = requestParameters?.zygosityExists;
        const zygosity = requestParameters?.zygosity;
        const zygosityNot = requestParameters?.zygosityNot;
        const zygosityAnyOf = requestParameters?.zygosityAnyOf;
        const zygosityNotAnyOf = requestParameters?.zygosityNotAnyOf;
        const zygosityDescendantsOf = requestParameters?.zygosityDescendantsOf;
        const inheritanceNotExists = requestParameters?.inheritanceNotExists;
        const inheritanceExists = requestParameters?.inheritanceExists;
        const inheritance = requestParameters?.inheritance;
        const inheritanceNot = requestParameters?.inheritanceNot;
        const inheritanceAnyOf = requestParameters?.inheritanceAnyOf;
        const inheritanceNotAnyOf = requestParameters?.inheritanceNotAnyOf;
        const inheritanceDescendantsOf = requestParameters?.inheritanceDescendantsOf;
        const coordinateSystemNotExists = requestParameters?.coordinateSystemNotExists;
        const coordinateSystemExists = requestParameters?.coordinateSystemExists;
        const coordinateSystem = requestParameters?.coordinateSystem;
        const coordinateSystemNot = requestParameters?.coordinateSystemNot;
        const coordinateSystemAnyOf = requestParameters?.coordinateSystemAnyOf;
        const coordinateSystemNotAnyOf = requestParameters?.coordinateSystemNotAnyOf;
        const coordinateSystemDescendantsOf = requestParameters?.coordinateSystemDescendantsOf;
        const clinvarNotExists = requestParameters?.clinvarNotExists;
        const clinvarExists = requestParameters?.clinvarExists;
        const clinvar = requestParameters?.clinvar;
        const clinvarNot = requestParameters?.clinvarNot;
        const clinvarContains = requestParameters?.clinvarContains;
        const clinvarNotContains = requestParameters?.clinvarNotContains;
        const clinvarBeginsWith = requestParameters?.clinvarBeginsWith;
        const clinvarNotBeginsWith = requestParameters?.clinvarNotBeginsWith;
        const clinvarEndsWith = requestParameters?.clinvarEndsWith;
        const clinvarNotEndsWith = requestParameters?.clinvarNotEndsWith;
        const clinvarAnyOf = requestParameters?.clinvarAnyOf;
        const clinvarNotAnyOf = requestParameters?.clinvarNotAnyOf;
        const genes = requestParameters?.genes;
        const genesNot = requestParameters?.genesNot;
        const genesAnyOf = requestParameters?.genesAnyOf;
        const genesNotAnyOf = requestParameters?.genesNotAnyOf;
        const genesDescendantsOf = requestParameters?.genesDescendantsOf;
        const genesAllOf = requestParameters?.genesAllOf;
        const genesNotAllOf = requestParameters?.genesNotAllOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isPathogenicNotExists, 'isPathogenic.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isPathogenicExists, 'isPathogenic.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isPathogenic, 'isPathogenic');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isVUSNotExists, 'isVUS.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isVUSExists, 'isVUS.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>isVUS, 'isVUS');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsNotExists, 'dnaHgvs.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsExists, 'dnaHgvs.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvs, 'dnaHgvs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsNot, 'dnaHgvs.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsContains, 'dnaHgvs.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsNotContains, 'dnaHgvs.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsBeginsWith, 'dnaHgvs.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsNotBeginsWith, 'dnaHgvs.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsEndsWith, 'dnaHgvs.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaHgvsNotEndsWith, 'dnaHgvs.not.endsWith');
        if (dnaHgvsAnyOf) {
            dnaHgvsAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaHgvs.anyOf');
            })
        }
        if (dnaHgvsNotAnyOf) {
            dnaHgvsNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaHgvs.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceNotExists, 'dnaReferenceSequence.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceExists, 'dnaReferenceSequence.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequence, 'dnaReferenceSequence');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceNot, 'dnaReferenceSequence.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceContains, 'dnaReferenceSequence.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceNotContains, 'dnaReferenceSequence.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceBeginsWith, 'dnaReferenceSequence.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceNotBeginsWith, 'dnaReferenceSequence.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceEndsWith, 'dnaReferenceSequence.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaReferenceSequenceNotEndsWith, 'dnaReferenceSequence.not.endsWith');
        if (dnaReferenceSequenceAnyOf) {
            dnaReferenceSequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaReferenceSequence.anyOf');
            })
        }
        if (dnaReferenceSequenceNotAnyOf) {
            dnaReferenceSequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaReferenceSequence.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionNotExists, 'dnaChangePosition.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionExists, 'dnaChangePosition.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionLessThan, 'dnaChangePosition.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionLessThanOrEqual, 'dnaChangePosition.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionGreaterThan, 'dnaChangePosition.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionGreaterThanOrEqual, 'dnaChangePosition.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionEqual, 'dnaChangePosition.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionNotEqual, 'dnaChangePosition.not.equal');
        if (dnaChangePositionBetween) {
            dnaChangePositionBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangePosition.between');
            })
        }
        if (dnaChangePositionNotBetween) {
            dnaChangePositionNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangePosition.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionRangeNotExists, 'dnaChangePositionRange.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangePositionRangeExists, 'dnaChangePositionRange.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangeTypeNotExists, 'dnaChangeType.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangeTypeExists, 'dnaChangeType.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangeType, 'dnaChangeType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dnaChangeTypeNot, 'dnaChangeType.not');
        if (dnaChangeTypeAnyOf) {
            dnaChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangeType.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsNotExists, 'rnaHgvs.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsExists, 'rnaHgvs.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvs, 'rnaHgvs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsNot, 'rnaHgvs.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsContains, 'rnaHgvs.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsNotContains, 'rnaHgvs.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsBeginsWith, 'rnaHgvs.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsNotBeginsWith, 'rnaHgvs.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsEndsWith, 'rnaHgvs.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaHgvsNotEndsWith, 'rnaHgvs.not.endsWith');
        if (rnaHgvsAnyOf) {
            rnaHgvsAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaHgvs.anyOf');
            })
        }
        if (rnaHgvsNotAnyOf) {
            rnaHgvsNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaHgvs.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceNotExists, 'rnaReferenceSequence.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceExists, 'rnaReferenceSequence.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequence, 'rnaReferenceSequence');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceNot, 'rnaReferenceSequence.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceContains, 'rnaReferenceSequence.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceNotContains, 'rnaReferenceSequence.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceBeginsWith, 'rnaReferenceSequence.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceNotBeginsWith, 'rnaReferenceSequence.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceEndsWith, 'rnaReferenceSequence.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaReferenceSequenceNotEndsWith, 'rnaReferenceSequence.not.endsWith');
        if (rnaReferenceSequenceAnyOf) {
            rnaReferenceSequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaReferenceSequence.anyOf');
            })
        }
        if (rnaReferenceSequenceNotAnyOf) {
            rnaReferenceSequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaReferenceSequence.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionNotExists, 'rnaChangePosition.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionExists, 'rnaChangePosition.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePosition, 'rnaChangePosition');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionNot, 'rnaChangePosition.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionContains, 'rnaChangePosition.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionNotContains, 'rnaChangePosition.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionBeginsWith, 'rnaChangePosition.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionNotBeginsWith, 'rnaChangePosition.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionEndsWith, 'rnaChangePosition.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangePositionNotEndsWith, 'rnaChangePosition.not.endsWith');
        if (rnaChangePositionAnyOf) {
            rnaChangePositionAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaChangePosition.anyOf');
            })
        }
        if (rnaChangePositionNotAnyOf) {
            rnaChangePositionNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaChangePosition.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangeTypeNotExists, 'rnaChangeType.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangeTypeExists, 'rnaChangeType.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangeType, 'rnaChangeType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>rnaChangeTypeNot, 'rnaChangeType.not');
        if (rnaChangeTypeAnyOf) {
            rnaChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaChangeType.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsNotExists, 'proteinHgvs.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsExists, 'proteinHgvs.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvs, 'proteinHgvs');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsNot, 'proteinHgvs.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsContains, 'proteinHgvs.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsNotContains, 'proteinHgvs.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsBeginsWith, 'proteinHgvs.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsNotBeginsWith, 'proteinHgvs.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsEndsWith, 'proteinHgvs.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinHgvsNotEndsWith, 'proteinHgvs.not.endsWith');
        if (proteinHgvsAnyOf) {
            proteinHgvsAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinHgvs.anyOf');
            })
        }
        if (proteinHgvsNotAnyOf) {
            proteinHgvsNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinHgvs.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceNotExists, 'proteinReferenceSequence.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceExists, 'proteinReferenceSequence.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequence, 'proteinReferenceSequence');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceNot, 'proteinReferenceSequence.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceContains, 'proteinReferenceSequence.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceNotContains, 'proteinReferenceSequence.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceBeginsWith, 'proteinReferenceSequence.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceNotBeginsWith, 'proteinReferenceSequence.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceEndsWith, 'proteinReferenceSequence.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinReferenceSequenceNotEndsWith, 'proteinReferenceSequence.not.endsWith');
        if (proteinReferenceSequenceAnyOf) {
            proteinReferenceSequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinReferenceSequence.anyOf');
            })
        }
        if (proteinReferenceSequenceNotAnyOf) {
            proteinReferenceSequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinReferenceSequence.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinChangeTypeNotExists, 'proteinChangeType.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinChangeTypeExists, 'proteinChangeType.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinChangeType, 'proteinChangeType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>proteinChangeTypeNot, 'proteinChangeType.not');
        if (proteinChangeTypeAnyOf) {
            proteinChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinChangeType.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthNotExists, 'nucleotidesLength.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthExists, 'nucleotidesLength.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthLessThan, 'nucleotidesLength.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthLessThanOrEqual, 'nucleotidesLength.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthGreaterThan, 'nucleotidesLength.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthGreaterThanOrEqual, 'nucleotidesLength.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthEqual, 'nucleotidesLength.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nucleotidesLengthNotEqual, 'nucleotidesLength.not.equal');
        if (nucleotidesLengthBetween) {
            nucleotidesLengthBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nucleotidesLength.between');
            })
        }
        if (nucleotidesLengthNotBetween) {
            nucleotidesLengthNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nucleotidesLength.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsNotExists, 'regions.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsExists, 'regions.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regions, 'regions');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsNot, 'regions.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsContains, 'regions.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsNotContains, 'regions.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsBeginsWith, 'regions.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsNotBeginsWith, 'regions.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsEndsWith, 'regions.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>regionsNotEndsWith, 'regions.not.endsWith');
        if (regionsAnyOf) {
            regionsAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'regions.anyOf');
            })
        }
        if (regionsNotAnyOf) {
            regionsNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'regions.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>id, 'id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNot, 'id.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idContains, 'id.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotContains, 'id.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idBeginsWith, 'id.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotBeginsWith, 'id.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idEndsWith, 'id.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>idNotEndsWith, 'id.not.endsWith');
        if (idAnyOf) {
            idAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'id.anyOf');
            })
        }
        if (idNotAnyOf) {
            idNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'id.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseId, 'caseId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNot, 'caseId.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdContains, 'caseId.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotContains, 'caseId.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdBeginsWith, 'caseId.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdEndsWith, 'caseId.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        if (caseIdAnyOf) {
            caseIdAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'caseId.anyOf');
            })
        }
        if (caseIdNotAnyOf) {
            caseIdNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'caseId.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateBefore, 'date.before');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateAfter, 'date.after');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrBefore, 'date.onOrBefore');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOnOrAfter, 'date.onOrAfter');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateOn, 'date.on');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateNotOn, 'date.not.on');
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelNotExists, 'genePanel.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelExists, 'genePanel.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanel, 'genePanel');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelNot, 'genePanel.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelContains, 'genePanel.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelNotContains, 'genePanel.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelBeginsWith, 'genePanel.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelNotBeginsWith, 'genePanel.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelEndsWith, 'genePanel.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genePanelNotEndsWith, 'genePanel.not.endsWith');
        if (genePanelAnyOf) {
            genePanelAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genePanel.anyOf');
            })
        }
        if (genePanelNotAnyOf) {
            genePanelNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genePanel.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>assessmentNotExists, 'assessment.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>assessmentExists, 'assessment.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>assessment, 'assessment');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>assessmentNot, 'assessment.not');
        if (assessmentAnyOf) {
            assessmentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'assessment.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>confidenceNotExists, 'confidence.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>confidenceExists, 'confidence.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>confidence, 'confidence');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>confidenceNot, 'confidence.not');
        if (confidenceAnyOf) {
            confidenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'confidence.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisMethodNotExists, 'analysisMethod.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisMethodExists, 'analysisMethod.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisMethod, 'analysisMethod');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisMethodNot, 'analysisMethod.not');
        if (analysisMethodAnyOf) {
            analysisMethodAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.anyOf');
            })
        }
        if (analysisMethodNotAnyOf) {
            analysisMethodNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisMethodDescendantsOf, 'analysisMethod.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalRelevanceNotExists, 'clinicalRelevance.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalRelevanceExists, 'clinicalRelevance.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalRelevance, 'clinicalRelevance');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinicalRelevanceNot, 'clinicalRelevance.not');
        if (clinicalRelevanceAnyOf) {
            clinicalRelevanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'clinicalRelevance.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genomeAssemblyVersionNotExists, 'genomeAssemblyVersion.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genomeAssemblyVersionExists, 'genomeAssemblyVersion.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genomeAssemblyVersion, 'genomeAssemblyVersion');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genomeAssemblyVersionNot, 'genomeAssemblyVersion.not');
        if (genomeAssemblyVersionAnyOf) {
            genomeAssemblyVersionAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.anyOf');
            })
        }
        if (genomeAssemblyVersionNotAnyOf) {
            genomeAssemblyVersionNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genomeAssemblyVersionDescendantsOf, 'genomeAssemblyVersion.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>molecularConsequenceNotExists, 'molecularConsequence.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>molecularConsequenceExists, 'molecularConsequence.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>molecularConsequence, 'molecularConsequence');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>molecularConsequenceNot, 'molecularConsequence.not');
        if (molecularConsequenceAnyOf) {
            molecularConsequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.anyOf');
            })
        }
        if (molecularConsequenceNotAnyOf) {
            molecularConsequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>molecularConsequenceDescendantsOf, 'molecularConsequence.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberNotExists, 'copyNumber.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberExists, 'copyNumber.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberLessThan, 'copyNumber.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberLessThanOrEqual, 'copyNumber.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberGreaterThan, 'copyNumber.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberGreaterThanOrEqual, 'copyNumber.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberEqual, 'copyNumber.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>copyNumberNotEqual, 'copyNumber.not.equal');
        if (copyNumberBetween) {
            copyNumberBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.between');
            })
        }
        if (copyNumberNotBetween) {
            copyNumberNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyNotExists, 'alleleFrequency.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyExists, 'alleleFrequency.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyLessThan, 'alleleFrequency.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyLessThanOrEqual, 'alleleFrequency.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyGreaterThan, 'alleleFrequency.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyGreaterThanOrEqual, 'alleleFrequency.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyEqual, 'alleleFrequency.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleFrequencyNotEqual, 'alleleFrequency.not.equal');
        if (alleleFrequencyBetween) {
            alleleFrequencyBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.between');
            })
        }
        if (alleleFrequencyNotBetween) {
            alleleFrequencyNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthNotExists, 'alleleDepth.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthExists, 'alleleDepth.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthLessThan, 'alleleDepth.lessThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthLessThanOrEqual, 'alleleDepth.lessThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthGreaterThan, 'alleleDepth.greaterThan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthGreaterThanOrEqual, 'alleleDepth.greaterThanOrEqual');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthEqual, 'alleleDepth.equal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>alleleDepthNotEqual, 'alleleDepth.not.equal');
        if (alleleDepthBetween) {
            alleleDepthBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.between');
            })
        }
        if (alleleDepthNotBetween) {
            alleleDepthNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.not.between');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>zygosityNotExists, 'zygosity.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>zygosityExists, 'zygosity.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>zygosity, 'zygosity');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>zygosityNot, 'zygosity.not');
        if (zygosityAnyOf) {
            zygosityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.anyOf');
            })
        }
        if (zygosityNotAnyOf) {
            zygosityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>zygosityDescendantsOf, 'zygosity.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>inheritanceNotExists, 'inheritance.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>inheritanceExists, 'inheritance.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>inheritance, 'inheritance');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>inheritanceNot, 'inheritance.not');
        if (inheritanceAnyOf) {
            inheritanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.anyOf');
            })
        }
        if (inheritanceNotAnyOf) {
            inheritanceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>inheritanceDescendantsOf, 'inheritance.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>coordinateSystemNotExists, 'coordinateSystem.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>coordinateSystemExists, 'coordinateSystem.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>coordinateSystem, 'coordinateSystem');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>coordinateSystemNot, 'coordinateSystem.not');
        if (coordinateSystemAnyOf) {
            coordinateSystemAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.anyOf');
            })
        }
        if (coordinateSystemNotAnyOf) {
            coordinateSystemNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>coordinateSystemDescendantsOf, 'coordinateSystem.descendantsOf');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarNotExists, 'clinvar.not.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarExists, 'clinvar.exists');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvar, 'clinvar');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarNot, 'clinvar.not');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarContains, 'clinvar.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarNotContains, 'clinvar.not.contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarBeginsWith, 'clinvar.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarNotBeginsWith, 'clinvar.not.beginsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarEndsWith, 'clinvar.endsWith');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clinvarNotEndsWith, 'clinvar.not.endsWith');
        if (clinvarAnyOf) {
            clinvarAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'clinvar.anyOf');
            })
        }
        if (clinvarNotAnyOf) {
            clinvarNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'clinvar.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genes, 'genes');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genesNot, 'genes.not');
        if (genesAnyOf) {
            genesAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.anyOf');
            })
        }
        if (genesNotAnyOf) {
            genesNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.anyOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>genesDescendantsOf, 'genes.descendantsOf');
        if (genesAllOf) {
            genesAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.allOf');
            })
        }
        if (genesNotAllOf) {
            genesNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.allOf');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<PaginatedGenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revert Genomic Variant To History Event
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revertGenomicVariantToHistoryEvent(requestParameters: RevertGenomicVariantToHistoryEventRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public revertGenomicVariantToHistoryEvent(requestParameters: RevertGenomicVariantToHistoryEventRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public revertGenomicVariantToHistoryEvent(requestParameters: RevertGenomicVariantToHistoryEventRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public revertGenomicVariantToHistoryEvent(requestParameters: RevertGenomicVariantToHistoryEventRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling revertGenomicVariantToHistoryEvent.');
        }
        const eventId = requestParameters?.eventId;
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling revertGenomicVariantToHistoryEvent.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history/events/${this.configuration.encodeParam({name: "eventId", value: eventId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reversion`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling updateGenomicVariant.');
        }
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling updateGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (XSessionTokenAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('XSessionTokenAuth', 'X-SESSION-TOKEN', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
