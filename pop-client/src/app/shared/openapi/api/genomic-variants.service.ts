/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GenomicVariant } from '../model/genomic-variant';
// @ts-ignore
import { GenomicVariantCreate } from '../model/genomic-variant-create';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedGenomicVariant } from '../model/paginated-genomic-variant';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    GenomicVariantsServiceInterface,
    CreateGenomicVariantRequestParams,
    DeleteGenomicVariantRequestParams,
    GetGenomicVariantByIdRequestParams,
    GetGenomicVariantsRequestParams,
    UpdateGenomicVariantRequestParams
} from './genomic-variants.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class GenomicVariantsService implements GenomicVariantsServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling createGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling deleteGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Genomic Variant By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GenomicVariant>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling getGenomicVariantById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Genomic Variants Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedGenomicVariant>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicHgvsNotExists = requestParameters?.genomicHgvsNotExists;
        const genomicHgvsExists = requestParameters?.genomicHgvsExists;
        const genomicHgvs = requestParameters?.genomicHgvs;
        const genomicHgvsNot = requestParameters?.genomicHgvsNot;
        const genomicHgvsContains = requestParameters?.genomicHgvsContains;
        const genomicHgvsNotContains = requestParameters?.genomicHgvsNotContains;
        const genomicHgvsBeginsWith = requestParameters?.genomicHgvsBeginsWith;
        const genomicHgvsNotBeginsWith = requestParameters?.genomicHgvsNotBeginsWith;
        const genomicHgvsEndsWith = requestParameters?.genomicHgvsEndsWith;
        const genomicHgvsNotEndsWith = requestParameters?.genomicHgvsNotEndsWith;
        const genomicReferenceSequenceNotExists = requestParameters?.genomicReferenceSequenceNotExists;
        const genomicReferenceSequenceExists = requestParameters?.genomicReferenceSequenceExists;
        const genomicReferenceSequence = requestParameters?.genomicReferenceSequence;
        const genomicReferenceSequenceNot = requestParameters?.genomicReferenceSequenceNot;
        const genomicReferenceSequenceContains = requestParameters?.genomicReferenceSequenceContains;
        const genomicReferenceSequenceNotContains = requestParameters?.genomicReferenceSequenceNotContains;
        const genomicReferenceSequenceBeginsWith = requestParameters?.genomicReferenceSequenceBeginsWith;
        const genomicReferenceSequenceNotBeginsWith = requestParameters?.genomicReferenceSequenceNotBeginsWith;
        const genomicReferenceSequenceEndsWith = requestParameters?.genomicReferenceSequenceEndsWith;
        const genomicReferenceSequenceNotEndsWith = requestParameters?.genomicReferenceSequenceNotEndsWith;
        const genomicChangePositionNotExists = requestParameters?.genomicChangePositionNotExists;
        const genomicChangePositionExists = requestParameters?.genomicChangePositionExists;
        const genomicChangePosition = requestParameters?.genomicChangePosition;
        const genomicChangePositionNot = requestParameters?.genomicChangePositionNot;
        const genomicChangePositionContains = requestParameters?.genomicChangePositionContains;
        const genomicChangePositionNotContains = requestParameters?.genomicChangePositionNotContains;
        const genomicChangePositionBeginsWith = requestParameters?.genomicChangePositionBeginsWith;
        const genomicChangePositionNotBeginsWith = requestParameters?.genomicChangePositionNotBeginsWith;
        const genomicChangePositionEndsWith = requestParameters?.genomicChangePositionEndsWith;
        const genomicChangePositionNotEndsWith = requestParameters?.genomicChangePositionNotEndsWith;
        const genomicChangeTypeNotExists = requestParameters?.genomicChangeTypeNotExists;
        const genomicChangeTypeExists = requestParameters?.genomicChangeTypeExists;
        const genomicChangeType = requestParameters?.genomicChangeType;
        const genomicChangeTypeNot = requestParameters?.genomicChangeTypeNot;
        const genomicChangeTypeAnyOf = requestParameters?.genomicChangeTypeAnyOf;
        const dnaHgvsNotExists = requestParameters?.dnaHgvsNotExists;
        const dnaHgvsExists = requestParameters?.dnaHgvsExists;
        const dnaHgvs = requestParameters?.dnaHgvs;
        const dnaHgvsNot = requestParameters?.dnaHgvsNot;
        const dnaHgvsContains = requestParameters?.dnaHgvsContains;
        const dnaHgvsNotContains = requestParameters?.dnaHgvsNotContains;
        const dnaHgvsBeginsWith = requestParameters?.dnaHgvsBeginsWith;
        const dnaHgvsNotBeginsWith = requestParameters?.dnaHgvsNotBeginsWith;
        const dnaHgvsEndsWith = requestParameters?.dnaHgvsEndsWith;
        const dnaHgvsNotEndsWith = requestParameters?.dnaHgvsNotEndsWith;
        const dnaReferenceSequenceNotExists = requestParameters?.dnaReferenceSequenceNotExists;
        const dnaReferenceSequenceExists = requestParameters?.dnaReferenceSequenceExists;
        const dnaReferenceSequence = requestParameters?.dnaReferenceSequence;
        const dnaReferenceSequenceNot = requestParameters?.dnaReferenceSequenceNot;
        const dnaReferenceSequenceContains = requestParameters?.dnaReferenceSequenceContains;
        const dnaReferenceSequenceNotContains = requestParameters?.dnaReferenceSequenceNotContains;
        const dnaReferenceSequenceBeginsWith = requestParameters?.dnaReferenceSequenceBeginsWith;
        const dnaReferenceSequenceNotBeginsWith = requestParameters?.dnaReferenceSequenceNotBeginsWith;
        const dnaReferenceSequenceEndsWith = requestParameters?.dnaReferenceSequenceEndsWith;
        const dnaReferenceSequenceNotEndsWith = requestParameters?.dnaReferenceSequenceNotEndsWith;
        const dnaChangePositionNotExists = requestParameters?.dnaChangePositionNotExists;
        const dnaChangePositionExists = requestParameters?.dnaChangePositionExists;
        const dnaChangePosition = requestParameters?.dnaChangePosition;
        const dnaChangePositionNot = requestParameters?.dnaChangePositionNot;
        const dnaChangePositionContains = requestParameters?.dnaChangePositionContains;
        const dnaChangePositionNotContains = requestParameters?.dnaChangePositionNotContains;
        const dnaChangePositionBeginsWith = requestParameters?.dnaChangePositionBeginsWith;
        const dnaChangePositionNotBeginsWith = requestParameters?.dnaChangePositionNotBeginsWith;
        const dnaChangePositionEndsWith = requestParameters?.dnaChangePositionEndsWith;
        const dnaChangePositionNotEndsWith = requestParameters?.dnaChangePositionNotEndsWith;
        const dnaChangeTypeNotExists = requestParameters?.dnaChangeTypeNotExists;
        const dnaChangeTypeExists = requestParameters?.dnaChangeTypeExists;
        const dnaChangeType = requestParameters?.dnaChangeType;
        const dnaChangeTypeNot = requestParameters?.dnaChangeTypeNot;
        const dnaChangeTypeAnyOf = requestParameters?.dnaChangeTypeAnyOf;
        const rnaHgvsNotExists = requestParameters?.rnaHgvsNotExists;
        const rnaHgvsExists = requestParameters?.rnaHgvsExists;
        const rnaHgvs = requestParameters?.rnaHgvs;
        const rnaHgvsNot = requestParameters?.rnaHgvsNot;
        const rnaHgvsContains = requestParameters?.rnaHgvsContains;
        const rnaHgvsNotContains = requestParameters?.rnaHgvsNotContains;
        const rnaHgvsBeginsWith = requestParameters?.rnaHgvsBeginsWith;
        const rnaHgvsNotBeginsWith = requestParameters?.rnaHgvsNotBeginsWith;
        const rnaHgvsEndsWith = requestParameters?.rnaHgvsEndsWith;
        const rnaHgvsNotEndsWith = requestParameters?.rnaHgvsNotEndsWith;
        const rnaReferenceSequenceNotExists = requestParameters?.rnaReferenceSequenceNotExists;
        const rnaReferenceSequenceExists = requestParameters?.rnaReferenceSequenceExists;
        const rnaReferenceSequence = requestParameters?.rnaReferenceSequence;
        const rnaReferenceSequenceNot = requestParameters?.rnaReferenceSequenceNot;
        const rnaReferenceSequenceContains = requestParameters?.rnaReferenceSequenceContains;
        const rnaReferenceSequenceNotContains = requestParameters?.rnaReferenceSequenceNotContains;
        const rnaReferenceSequenceBeginsWith = requestParameters?.rnaReferenceSequenceBeginsWith;
        const rnaReferenceSequenceNotBeginsWith = requestParameters?.rnaReferenceSequenceNotBeginsWith;
        const rnaReferenceSequenceEndsWith = requestParameters?.rnaReferenceSequenceEndsWith;
        const rnaReferenceSequenceNotEndsWith = requestParameters?.rnaReferenceSequenceNotEndsWith;
        const rnaChangePositionNotExists = requestParameters?.rnaChangePositionNotExists;
        const rnaChangePositionExists = requestParameters?.rnaChangePositionExists;
        const rnaChangePosition = requestParameters?.rnaChangePosition;
        const rnaChangePositionNot = requestParameters?.rnaChangePositionNot;
        const rnaChangePositionContains = requestParameters?.rnaChangePositionContains;
        const rnaChangePositionNotContains = requestParameters?.rnaChangePositionNotContains;
        const rnaChangePositionBeginsWith = requestParameters?.rnaChangePositionBeginsWith;
        const rnaChangePositionNotBeginsWith = requestParameters?.rnaChangePositionNotBeginsWith;
        const rnaChangePositionEndsWith = requestParameters?.rnaChangePositionEndsWith;
        const rnaChangePositionNotEndsWith = requestParameters?.rnaChangePositionNotEndsWith;
        const rnaChangeTypeNotExists = requestParameters?.rnaChangeTypeNotExists;
        const rnaChangeTypeExists = requestParameters?.rnaChangeTypeExists;
        const rnaChangeType = requestParameters?.rnaChangeType;
        const rnaChangeTypeNot = requestParameters?.rnaChangeTypeNot;
        const rnaChangeTypeAnyOf = requestParameters?.rnaChangeTypeAnyOf;
        const proteinHgvsNotExists = requestParameters?.proteinHgvsNotExists;
        const proteinHgvsExists = requestParameters?.proteinHgvsExists;
        const proteinHgvs = requestParameters?.proteinHgvs;
        const proteinHgvsNot = requestParameters?.proteinHgvsNot;
        const proteinHgvsContains = requestParameters?.proteinHgvsContains;
        const proteinHgvsNotContains = requestParameters?.proteinHgvsNotContains;
        const proteinHgvsBeginsWith = requestParameters?.proteinHgvsBeginsWith;
        const proteinHgvsNotBeginsWith = requestParameters?.proteinHgvsNotBeginsWith;
        const proteinHgvsEndsWith = requestParameters?.proteinHgvsEndsWith;
        const proteinHgvsNotEndsWith = requestParameters?.proteinHgvsNotEndsWith;
        const proteinReferenceSequenceNotExists = requestParameters?.proteinReferenceSequenceNotExists;
        const proteinReferenceSequenceExists = requestParameters?.proteinReferenceSequenceExists;
        const proteinReferenceSequence = requestParameters?.proteinReferenceSequence;
        const proteinReferenceSequenceNot = requestParameters?.proteinReferenceSequenceNot;
        const proteinReferenceSequenceContains = requestParameters?.proteinReferenceSequenceContains;
        const proteinReferenceSequenceNotContains = requestParameters?.proteinReferenceSequenceNotContains;
        const proteinReferenceSequenceBeginsWith = requestParameters?.proteinReferenceSequenceBeginsWith;
        const proteinReferenceSequenceNotBeginsWith = requestParameters?.proteinReferenceSequenceNotBeginsWith;
        const proteinReferenceSequenceEndsWith = requestParameters?.proteinReferenceSequenceEndsWith;
        const proteinReferenceSequenceNotEndsWith = requestParameters?.proteinReferenceSequenceNotEndsWith;
        const proteinChangePositionNotExists = requestParameters?.proteinChangePositionNotExists;
        const proteinChangePositionExists = requestParameters?.proteinChangePositionExists;
        const proteinChangePosition = requestParameters?.proteinChangePosition;
        const proteinChangePositionNot = requestParameters?.proteinChangePositionNot;
        const proteinChangePositionContains = requestParameters?.proteinChangePositionContains;
        const proteinChangePositionNotContains = requestParameters?.proteinChangePositionNotContains;
        const proteinChangePositionBeginsWith = requestParameters?.proteinChangePositionBeginsWith;
        const proteinChangePositionNotBeginsWith = requestParameters?.proteinChangePositionNotBeginsWith;
        const proteinChangePositionEndsWith = requestParameters?.proteinChangePositionEndsWith;
        const proteinChangePositionNotEndsWith = requestParameters?.proteinChangePositionNotEndsWith;
        const proteinChangeTypeNotExists = requestParameters?.proteinChangeTypeNotExists;
        const proteinChangeTypeExists = requestParameters?.proteinChangeTypeExists;
        const proteinChangeType = requestParameters?.proteinChangeType;
        const proteinChangeTypeNot = requestParameters?.proteinChangeTypeNot;
        const proteinChangeTypeAnyOf = requestParameters?.proteinChangeTypeAnyOf;
        const nucleotidesLengthNotExists = requestParameters?.nucleotidesLengthNotExists;
        const nucleotidesLengthExists = requestParameters?.nucleotidesLengthExists;
        const nucleotidesLengthLessThan = requestParameters?.nucleotidesLengthLessThan;
        const nucleotidesLengthLessThanOrEqual = requestParameters?.nucleotidesLengthLessThanOrEqual;
        const nucleotidesLengthGreaterThan = requestParameters?.nucleotidesLengthGreaterThan;
        const nucleotidesLengthGreaterThanOrEqual = requestParameters?.nucleotidesLengthGreaterThanOrEqual;
        const nucleotidesLengthEqual = requestParameters?.nucleotidesLengthEqual;
        const nucleotidesLengthNotEqual = requestParameters?.nucleotidesLengthNotEqual;
        const nucleotidesLengthBetween = requestParameters?.nucleotidesLengthBetween;
        const nucleotidesLengthNotBetween = requestParameters?.nucleotidesLengthNotBetween;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const genePanelNotExists = requestParameters?.genePanelNotExists;
        const genePanelExists = requestParameters?.genePanelExists;
        const genePanel = requestParameters?.genePanel;
        const genePanelNot = requestParameters?.genePanelNot;
        const genePanelContains = requestParameters?.genePanelContains;
        const genePanelNotContains = requestParameters?.genePanelNotContains;
        const genePanelBeginsWith = requestParameters?.genePanelBeginsWith;
        const genePanelNotBeginsWith = requestParameters?.genePanelNotBeginsWith;
        const genePanelEndsWith = requestParameters?.genePanelEndsWith;
        const genePanelNotEndsWith = requestParameters?.genePanelNotEndsWith;
        const assessmentNotExists = requestParameters?.assessmentNotExists;
        const assessmentExists = requestParameters?.assessmentExists;
        const assessment = requestParameters?.assessment;
        const assessmentNot = requestParameters?.assessmentNot;
        const assessmentAnyOf = requestParameters?.assessmentAnyOf;
        const confidenceNotExists = requestParameters?.confidenceNotExists;
        const confidenceExists = requestParameters?.confidenceExists;
        const confidence = requestParameters?.confidence;
        const confidenceNot = requestParameters?.confidenceNot;
        const confidenceAnyOf = requestParameters?.confidenceAnyOf;
        const analysisMethodNotExists = requestParameters?.analysisMethodNotExists;
        const analysisMethodExists = requestParameters?.analysisMethodExists;
        const analysisMethod = requestParameters?.analysisMethod;
        const analysisMethodNot = requestParameters?.analysisMethodNot;
        const analysisMethodAnyOf = requestParameters?.analysisMethodAnyOf;
        const analysisMethodNotAnyOf = requestParameters?.analysisMethodNotAnyOf;
        const analysisMethodDescendantsOf = requestParameters?.analysisMethodDescendantsOf;
        const clinicalRelevanceNotExists = requestParameters?.clinicalRelevanceNotExists;
        const clinicalRelevanceExists = requestParameters?.clinicalRelevanceExists;
        const clinicalRelevance = requestParameters?.clinicalRelevance;
        const clinicalRelevanceNot = requestParameters?.clinicalRelevanceNot;
        const clinicalRelevanceAnyOf = requestParameters?.clinicalRelevanceAnyOf;
        const isVusNotExists = requestParameters?.isVusNotExists;
        const isVusExists = requestParameters?.isVusExists;
        const isVus = requestParameters?.isVus;
        const isPathogenic = requestParameters?.isPathogenic;
        const genomeAssemblyVersionNotExists = requestParameters?.genomeAssemblyVersionNotExists;
        const genomeAssemblyVersionExists = requestParameters?.genomeAssemblyVersionExists;
        const genomeAssemblyVersion = requestParameters?.genomeAssemblyVersion;
        const genomeAssemblyVersionNot = requestParameters?.genomeAssemblyVersionNot;
        const genomeAssemblyVersionAnyOf = requestParameters?.genomeAssemblyVersionAnyOf;
        const genomeAssemblyVersionNotAnyOf = requestParameters?.genomeAssemblyVersionNotAnyOf;
        const genomeAssemblyVersionDescendantsOf = requestParameters?.genomeAssemblyVersionDescendantsOf;
        const molecularConsequenceNotExists = requestParameters?.molecularConsequenceNotExists;
        const molecularConsequenceExists = requestParameters?.molecularConsequenceExists;
        const molecularConsequence = requestParameters?.molecularConsequence;
        const molecularConsequenceNot = requestParameters?.molecularConsequenceNot;
        const molecularConsequenceAnyOf = requestParameters?.molecularConsequenceAnyOf;
        const molecularConsequenceNotAnyOf = requestParameters?.molecularConsequenceNotAnyOf;
        const molecularConsequenceDescendantsOf = requestParameters?.molecularConsequenceDescendantsOf;
        const copyNumberNotExists = requestParameters?.copyNumberNotExists;
        const copyNumberExists = requestParameters?.copyNumberExists;
        const copyNumberLessThan = requestParameters?.copyNumberLessThan;
        const copyNumberLessThanOrEqual = requestParameters?.copyNumberLessThanOrEqual;
        const copyNumberGreaterThan = requestParameters?.copyNumberGreaterThan;
        const copyNumberGreaterThanOrEqual = requestParameters?.copyNumberGreaterThanOrEqual;
        const copyNumberEqual = requestParameters?.copyNumberEqual;
        const copyNumberNotEqual = requestParameters?.copyNumberNotEqual;
        const copyNumberBetween = requestParameters?.copyNumberBetween;
        const copyNumberNotBetween = requestParameters?.copyNumberNotBetween;
        const alleleFrequencyNotExists = requestParameters?.alleleFrequencyNotExists;
        const alleleFrequencyExists = requestParameters?.alleleFrequencyExists;
        const alleleFrequencyLessThan = requestParameters?.alleleFrequencyLessThan;
        const alleleFrequencyLessThanOrEqual = requestParameters?.alleleFrequencyLessThanOrEqual;
        const alleleFrequencyGreaterThan = requestParameters?.alleleFrequencyGreaterThan;
        const alleleFrequencyGreaterThanOrEqual = requestParameters?.alleleFrequencyGreaterThanOrEqual;
        const alleleFrequencyEqual = requestParameters?.alleleFrequencyEqual;
        const alleleFrequencyNotEqual = requestParameters?.alleleFrequencyNotEqual;
        const alleleFrequencyBetween = requestParameters?.alleleFrequencyBetween;
        const alleleFrequencyNotBetween = requestParameters?.alleleFrequencyNotBetween;
        const alleleDepthNotExists = requestParameters?.alleleDepthNotExists;
        const alleleDepthExists = requestParameters?.alleleDepthExists;
        const alleleDepthLessThan = requestParameters?.alleleDepthLessThan;
        const alleleDepthLessThanOrEqual = requestParameters?.alleleDepthLessThanOrEqual;
        const alleleDepthGreaterThan = requestParameters?.alleleDepthGreaterThan;
        const alleleDepthGreaterThanOrEqual = requestParameters?.alleleDepthGreaterThanOrEqual;
        const alleleDepthEqual = requestParameters?.alleleDepthEqual;
        const alleleDepthNotEqual = requestParameters?.alleleDepthNotEqual;
        const alleleDepthBetween = requestParameters?.alleleDepthBetween;
        const alleleDepthNotBetween = requestParameters?.alleleDepthNotBetween;
        const zygosityNotExists = requestParameters?.zygosityNotExists;
        const zygosityExists = requestParameters?.zygosityExists;
        const zygosity = requestParameters?.zygosity;
        const zygosityNot = requestParameters?.zygosityNot;
        const zygosityAnyOf = requestParameters?.zygosityAnyOf;
        const zygosityNotAnyOf = requestParameters?.zygosityNotAnyOf;
        const zygosityDescendantsOf = requestParameters?.zygosityDescendantsOf;
        const inheritanceNotExists = requestParameters?.inheritanceNotExists;
        const inheritanceExists = requestParameters?.inheritanceExists;
        const inheritance = requestParameters?.inheritance;
        const inheritanceNot = requestParameters?.inheritanceNot;
        const inheritanceAnyOf = requestParameters?.inheritanceAnyOf;
        const inheritanceNotAnyOf = requestParameters?.inheritanceNotAnyOf;
        const inheritanceDescendantsOf = requestParameters?.inheritanceDescendantsOf;
        const coordinateSystemNotExists = requestParameters?.coordinateSystemNotExists;
        const coordinateSystemExists = requestParameters?.coordinateSystemExists;
        const coordinateSystem = requestParameters?.coordinateSystem;
        const coordinateSystemNot = requestParameters?.coordinateSystemNot;
        const coordinateSystemAnyOf = requestParameters?.coordinateSystemAnyOf;
        const coordinateSystemNotAnyOf = requestParameters?.coordinateSystemNotAnyOf;
        const coordinateSystemDescendantsOf = requestParameters?.coordinateSystemDescendantsOf;
        const clinvarNotExists = requestParameters?.clinvarNotExists;
        const clinvarExists = requestParameters?.clinvarExists;
        const clinvar = requestParameters?.clinvar;
        const clinvarNot = requestParameters?.clinvarNot;
        const clinvarContains = requestParameters?.clinvarContains;
        const clinvarNotContains = requestParameters?.clinvarNotContains;
        const clinvarBeginsWith = requestParameters?.clinvarBeginsWith;
        const clinvarNotBeginsWith = requestParameters?.clinvarNotBeginsWith;
        const clinvarEndsWith = requestParameters?.clinvarEndsWith;
        const clinvarNotEndsWith = requestParameters?.clinvarNotEndsWith;
        const genes = requestParameters?.genes;
        const genesNot = requestParameters?.genesNot;
        const genesAnyOf = requestParameters?.genesAnyOf;
        const genesNotAnyOf = requestParameters?.genesNotAnyOf;
        const genesDescendantsOf = requestParameters?.genesDescendantsOf;
        const genesAllOf = requestParameters?.genesAllOf;
        const genesNotAllOf = requestParameters?.genesNotAllOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (genomicHgvsNotExists !== undefined && genomicHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotExists, 'genomicHgvs.not.exists');
        }
        if (genomicHgvsExists !== undefined && genomicHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsExists, 'genomicHgvs.exists');
        }
        if (genomicHgvs !== undefined && genomicHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvs, 'genomicHgvs');
        }
        if (genomicHgvsNot !== undefined && genomicHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNot, 'genomicHgvs.not');
        }
        if (genomicHgvsContains !== undefined && genomicHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsContains, 'genomicHgvs.contains');
        }
        if (genomicHgvsNotContains !== undefined && genomicHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotContains, 'genomicHgvs.not.contains');
        }
        if (genomicHgvsBeginsWith !== undefined && genomicHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsBeginsWith, 'genomicHgvs.beginsWith');
        }
        if (genomicHgvsNotBeginsWith !== undefined && genomicHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotBeginsWith, 'genomicHgvs.not.beginsWith');
        }
        if (genomicHgvsEndsWith !== undefined && genomicHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsEndsWith, 'genomicHgvs.endsWith');
        }
        if (genomicHgvsNotEndsWith !== undefined && genomicHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotEndsWith, 'genomicHgvs.not.endsWith');
        }
        if (genomicReferenceSequenceNotExists !== undefined && genomicReferenceSequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceNotExists, 'genomicReferenceSequence.not.exists');
        }
        if (genomicReferenceSequenceExists !== undefined && genomicReferenceSequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceExists, 'genomicReferenceSequence.exists');
        }
        if (genomicReferenceSequence !== undefined && genomicReferenceSequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequence, 'genomicReferenceSequence');
        }
        if (genomicReferenceSequenceNot !== undefined && genomicReferenceSequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceNot, 'genomicReferenceSequence.not');
        }
        if (genomicReferenceSequenceContains !== undefined && genomicReferenceSequenceContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceContains, 'genomicReferenceSequence.contains');
        }
        if (genomicReferenceSequenceNotContains !== undefined && genomicReferenceSequenceNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceNotContains, 'genomicReferenceSequence.not.contains');
        }
        if (genomicReferenceSequenceBeginsWith !== undefined && genomicReferenceSequenceBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceBeginsWith, 'genomicReferenceSequence.beginsWith');
        }
        if (genomicReferenceSequenceNotBeginsWith !== undefined && genomicReferenceSequenceNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceNotBeginsWith, 'genomicReferenceSequence.not.beginsWith');
        }
        if (genomicReferenceSequenceEndsWith !== undefined && genomicReferenceSequenceEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceEndsWith, 'genomicReferenceSequence.endsWith');
        }
        if (genomicReferenceSequenceNotEndsWith !== undefined && genomicReferenceSequenceNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicReferenceSequenceNotEndsWith, 'genomicReferenceSequence.not.endsWith');
        }
        if (genomicChangePositionNotExists !== undefined && genomicChangePositionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionNotExists, 'genomicChangePosition.not.exists');
        }
        if (genomicChangePositionExists !== undefined && genomicChangePositionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionExists, 'genomicChangePosition.exists');
        }
        if (genomicChangePosition !== undefined && genomicChangePosition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePosition, 'genomicChangePosition');
        }
        if (genomicChangePositionNot !== undefined && genomicChangePositionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionNot, 'genomicChangePosition.not');
        }
        if (genomicChangePositionContains !== undefined && genomicChangePositionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionContains, 'genomicChangePosition.contains');
        }
        if (genomicChangePositionNotContains !== undefined && genomicChangePositionNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionNotContains, 'genomicChangePosition.not.contains');
        }
        if (genomicChangePositionBeginsWith !== undefined && genomicChangePositionBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionBeginsWith, 'genomicChangePosition.beginsWith');
        }
        if (genomicChangePositionNotBeginsWith !== undefined && genomicChangePositionNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionNotBeginsWith, 'genomicChangePosition.not.beginsWith');
        }
        if (genomicChangePositionEndsWith !== undefined && genomicChangePositionEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionEndsWith, 'genomicChangePosition.endsWith');
        }
        if (genomicChangePositionNotEndsWith !== undefined && genomicChangePositionNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangePositionNotEndsWith, 'genomicChangePosition.not.endsWith');
        }
        if (genomicChangeTypeNotExists !== undefined && genomicChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangeTypeNotExists, 'genomicChangeType.not.exists');
        }
        if (genomicChangeTypeExists !== undefined && genomicChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangeTypeExists, 'genomicChangeType.exists');
        }
        if (genomicChangeType !== undefined && genomicChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangeType, 'genomicChangeType');
        }
        if (genomicChangeTypeNot !== undefined && genomicChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicChangeTypeNot, 'genomicChangeType.not');
        }
        if (genomicChangeTypeAnyOf) {
            genomicChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomicChangeType.anyOf');
            })
        }
        if (dnaHgvsNotExists !== undefined && dnaHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsNotExists, 'dnaHgvs.not.exists');
        }
        if (dnaHgvsExists !== undefined && dnaHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsExists, 'dnaHgvs.exists');
        }
        if (dnaHgvs !== undefined && dnaHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvs, 'dnaHgvs');
        }
        if (dnaHgvsNot !== undefined && dnaHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsNot, 'dnaHgvs.not');
        }
        if (dnaHgvsContains !== undefined && dnaHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsContains, 'dnaHgvs.contains');
        }
        if (dnaHgvsNotContains !== undefined && dnaHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsNotContains, 'dnaHgvs.not.contains');
        }
        if (dnaHgvsBeginsWith !== undefined && dnaHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsBeginsWith, 'dnaHgvs.beginsWith');
        }
        if (dnaHgvsNotBeginsWith !== undefined && dnaHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsNotBeginsWith, 'dnaHgvs.not.beginsWith');
        }
        if (dnaHgvsEndsWith !== undefined && dnaHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsEndsWith, 'dnaHgvs.endsWith');
        }
        if (dnaHgvsNotEndsWith !== undefined && dnaHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaHgvsNotEndsWith, 'dnaHgvs.not.endsWith');
        }
        if (dnaReferenceSequenceNotExists !== undefined && dnaReferenceSequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceNotExists, 'dnaReferenceSequence.not.exists');
        }
        if (dnaReferenceSequenceExists !== undefined && dnaReferenceSequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceExists, 'dnaReferenceSequence.exists');
        }
        if (dnaReferenceSequence !== undefined && dnaReferenceSequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequence, 'dnaReferenceSequence');
        }
        if (dnaReferenceSequenceNot !== undefined && dnaReferenceSequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceNot, 'dnaReferenceSequence.not');
        }
        if (dnaReferenceSequenceContains !== undefined && dnaReferenceSequenceContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceContains, 'dnaReferenceSequence.contains');
        }
        if (dnaReferenceSequenceNotContains !== undefined && dnaReferenceSequenceNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceNotContains, 'dnaReferenceSequence.not.contains');
        }
        if (dnaReferenceSequenceBeginsWith !== undefined && dnaReferenceSequenceBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceBeginsWith, 'dnaReferenceSequence.beginsWith');
        }
        if (dnaReferenceSequenceNotBeginsWith !== undefined && dnaReferenceSequenceNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceNotBeginsWith, 'dnaReferenceSequence.not.beginsWith');
        }
        if (dnaReferenceSequenceEndsWith !== undefined && dnaReferenceSequenceEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceEndsWith, 'dnaReferenceSequence.endsWith');
        }
        if (dnaReferenceSequenceNotEndsWith !== undefined && dnaReferenceSequenceNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaReferenceSequenceNotEndsWith, 'dnaReferenceSequence.not.endsWith');
        }
        if (dnaChangePositionNotExists !== undefined && dnaChangePositionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionNotExists, 'dnaChangePosition.not.exists');
        }
        if (dnaChangePositionExists !== undefined && dnaChangePositionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionExists, 'dnaChangePosition.exists');
        }
        if (dnaChangePosition !== undefined && dnaChangePosition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePosition, 'dnaChangePosition');
        }
        if (dnaChangePositionNot !== undefined && dnaChangePositionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionNot, 'dnaChangePosition.not');
        }
        if (dnaChangePositionContains !== undefined && dnaChangePositionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionContains, 'dnaChangePosition.contains');
        }
        if (dnaChangePositionNotContains !== undefined && dnaChangePositionNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionNotContains, 'dnaChangePosition.not.contains');
        }
        if (dnaChangePositionBeginsWith !== undefined && dnaChangePositionBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionBeginsWith, 'dnaChangePosition.beginsWith');
        }
        if (dnaChangePositionNotBeginsWith !== undefined && dnaChangePositionNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionNotBeginsWith, 'dnaChangePosition.not.beginsWith');
        }
        if (dnaChangePositionEndsWith !== undefined && dnaChangePositionEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionEndsWith, 'dnaChangePosition.endsWith');
        }
        if (dnaChangePositionNotEndsWith !== undefined && dnaChangePositionNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangePositionNotEndsWith, 'dnaChangePosition.not.endsWith');
        }
        if (dnaChangeTypeNotExists !== undefined && dnaChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeNotExists, 'dnaChangeType.not.exists');
        }
        if (dnaChangeTypeExists !== undefined && dnaChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeExists, 'dnaChangeType.exists');
        }
        if (dnaChangeType !== undefined && dnaChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeType, 'dnaChangeType');
        }
        if (dnaChangeTypeNot !== undefined && dnaChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeNot, 'dnaChangeType.not');
        }
        if (dnaChangeTypeAnyOf) {
            dnaChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangeType.anyOf');
            })
        }
        if (rnaHgvsNotExists !== undefined && rnaHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsNotExists, 'rnaHgvs.not.exists');
        }
        if (rnaHgvsExists !== undefined && rnaHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsExists, 'rnaHgvs.exists');
        }
        if (rnaHgvs !== undefined && rnaHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvs, 'rnaHgvs');
        }
        if (rnaHgvsNot !== undefined && rnaHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsNot, 'rnaHgvs.not');
        }
        if (rnaHgvsContains !== undefined && rnaHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsContains, 'rnaHgvs.contains');
        }
        if (rnaHgvsNotContains !== undefined && rnaHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsNotContains, 'rnaHgvs.not.contains');
        }
        if (rnaHgvsBeginsWith !== undefined && rnaHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsBeginsWith, 'rnaHgvs.beginsWith');
        }
        if (rnaHgvsNotBeginsWith !== undefined && rnaHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsNotBeginsWith, 'rnaHgvs.not.beginsWith');
        }
        if (rnaHgvsEndsWith !== undefined && rnaHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsEndsWith, 'rnaHgvs.endsWith');
        }
        if (rnaHgvsNotEndsWith !== undefined && rnaHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaHgvsNotEndsWith, 'rnaHgvs.not.endsWith');
        }
        if (rnaReferenceSequenceNotExists !== undefined && rnaReferenceSequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceNotExists, 'rnaReferenceSequence.not.exists');
        }
        if (rnaReferenceSequenceExists !== undefined && rnaReferenceSequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceExists, 'rnaReferenceSequence.exists');
        }
        if (rnaReferenceSequence !== undefined && rnaReferenceSequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequence, 'rnaReferenceSequence');
        }
        if (rnaReferenceSequenceNot !== undefined && rnaReferenceSequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceNot, 'rnaReferenceSequence.not');
        }
        if (rnaReferenceSequenceContains !== undefined && rnaReferenceSequenceContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceContains, 'rnaReferenceSequence.contains');
        }
        if (rnaReferenceSequenceNotContains !== undefined && rnaReferenceSequenceNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceNotContains, 'rnaReferenceSequence.not.contains');
        }
        if (rnaReferenceSequenceBeginsWith !== undefined && rnaReferenceSequenceBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceBeginsWith, 'rnaReferenceSequence.beginsWith');
        }
        if (rnaReferenceSequenceNotBeginsWith !== undefined && rnaReferenceSequenceNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceNotBeginsWith, 'rnaReferenceSequence.not.beginsWith');
        }
        if (rnaReferenceSequenceEndsWith !== undefined && rnaReferenceSequenceEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceEndsWith, 'rnaReferenceSequence.endsWith');
        }
        if (rnaReferenceSequenceNotEndsWith !== undefined && rnaReferenceSequenceNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaReferenceSequenceNotEndsWith, 'rnaReferenceSequence.not.endsWith');
        }
        if (rnaChangePositionNotExists !== undefined && rnaChangePositionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionNotExists, 'rnaChangePosition.not.exists');
        }
        if (rnaChangePositionExists !== undefined && rnaChangePositionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionExists, 'rnaChangePosition.exists');
        }
        if (rnaChangePosition !== undefined && rnaChangePosition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePosition, 'rnaChangePosition');
        }
        if (rnaChangePositionNot !== undefined && rnaChangePositionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionNot, 'rnaChangePosition.not');
        }
        if (rnaChangePositionContains !== undefined && rnaChangePositionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionContains, 'rnaChangePosition.contains');
        }
        if (rnaChangePositionNotContains !== undefined && rnaChangePositionNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionNotContains, 'rnaChangePosition.not.contains');
        }
        if (rnaChangePositionBeginsWith !== undefined && rnaChangePositionBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionBeginsWith, 'rnaChangePosition.beginsWith');
        }
        if (rnaChangePositionNotBeginsWith !== undefined && rnaChangePositionNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionNotBeginsWith, 'rnaChangePosition.not.beginsWith');
        }
        if (rnaChangePositionEndsWith !== undefined && rnaChangePositionEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionEndsWith, 'rnaChangePosition.endsWith');
        }
        if (rnaChangePositionNotEndsWith !== undefined && rnaChangePositionNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangePositionNotEndsWith, 'rnaChangePosition.not.endsWith');
        }
        if (rnaChangeTypeNotExists !== undefined && rnaChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangeTypeNotExists, 'rnaChangeType.not.exists');
        }
        if (rnaChangeTypeExists !== undefined && rnaChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangeTypeExists, 'rnaChangeType.exists');
        }
        if (rnaChangeType !== undefined && rnaChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangeType, 'rnaChangeType');
        }
        if (rnaChangeTypeNot !== undefined && rnaChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rnaChangeTypeNot, 'rnaChangeType.not');
        }
        if (rnaChangeTypeAnyOf) {
            rnaChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'rnaChangeType.anyOf');
            })
        }
        if (proteinHgvsNotExists !== undefined && proteinHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotExists, 'proteinHgvs.not.exists');
        }
        if (proteinHgvsExists !== undefined && proteinHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsExists, 'proteinHgvs.exists');
        }
        if (proteinHgvs !== undefined && proteinHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvs, 'proteinHgvs');
        }
        if (proteinHgvsNot !== undefined && proteinHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNot, 'proteinHgvs.not');
        }
        if (proteinHgvsContains !== undefined && proteinHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsContains, 'proteinHgvs.contains');
        }
        if (proteinHgvsNotContains !== undefined && proteinHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotContains, 'proteinHgvs.not.contains');
        }
        if (proteinHgvsBeginsWith !== undefined && proteinHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsBeginsWith, 'proteinHgvs.beginsWith');
        }
        if (proteinHgvsNotBeginsWith !== undefined && proteinHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotBeginsWith, 'proteinHgvs.not.beginsWith');
        }
        if (proteinHgvsEndsWith !== undefined && proteinHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsEndsWith, 'proteinHgvs.endsWith');
        }
        if (proteinHgvsNotEndsWith !== undefined && proteinHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotEndsWith, 'proteinHgvs.not.endsWith');
        }
        if (proteinReferenceSequenceNotExists !== undefined && proteinReferenceSequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceNotExists, 'proteinReferenceSequence.not.exists');
        }
        if (proteinReferenceSequenceExists !== undefined && proteinReferenceSequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceExists, 'proteinReferenceSequence.exists');
        }
        if (proteinReferenceSequence !== undefined && proteinReferenceSequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequence, 'proteinReferenceSequence');
        }
        if (proteinReferenceSequenceNot !== undefined && proteinReferenceSequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceNot, 'proteinReferenceSequence.not');
        }
        if (proteinReferenceSequenceContains !== undefined && proteinReferenceSequenceContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceContains, 'proteinReferenceSequence.contains');
        }
        if (proteinReferenceSequenceNotContains !== undefined && proteinReferenceSequenceNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceNotContains, 'proteinReferenceSequence.not.contains');
        }
        if (proteinReferenceSequenceBeginsWith !== undefined && proteinReferenceSequenceBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceBeginsWith, 'proteinReferenceSequence.beginsWith');
        }
        if (proteinReferenceSequenceNotBeginsWith !== undefined && proteinReferenceSequenceNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceNotBeginsWith, 'proteinReferenceSequence.not.beginsWith');
        }
        if (proteinReferenceSequenceEndsWith !== undefined && proteinReferenceSequenceEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceEndsWith, 'proteinReferenceSequence.endsWith');
        }
        if (proteinReferenceSequenceNotEndsWith !== undefined && proteinReferenceSequenceNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinReferenceSequenceNotEndsWith, 'proteinReferenceSequence.not.endsWith');
        }
        if (proteinChangePositionNotExists !== undefined && proteinChangePositionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionNotExists, 'proteinChangePosition.not.exists');
        }
        if (proteinChangePositionExists !== undefined && proteinChangePositionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionExists, 'proteinChangePosition.exists');
        }
        if (proteinChangePosition !== undefined && proteinChangePosition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePosition, 'proteinChangePosition');
        }
        if (proteinChangePositionNot !== undefined && proteinChangePositionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionNot, 'proteinChangePosition.not');
        }
        if (proteinChangePositionContains !== undefined && proteinChangePositionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionContains, 'proteinChangePosition.contains');
        }
        if (proteinChangePositionNotContains !== undefined && proteinChangePositionNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionNotContains, 'proteinChangePosition.not.contains');
        }
        if (proteinChangePositionBeginsWith !== undefined && proteinChangePositionBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionBeginsWith, 'proteinChangePosition.beginsWith');
        }
        if (proteinChangePositionNotBeginsWith !== undefined && proteinChangePositionNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionNotBeginsWith, 'proteinChangePosition.not.beginsWith');
        }
        if (proteinChangePositionEndsWith !== undefined && proteinChangePositionEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionEndsWith, 'proteinChangePosition.endsWith');
        }
        if (proteinChangePositionNotEndsWith !== undefined && proteinChangePositionNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangePositionNotEndsWith, 'proteinChangePosition.not.endsWith');
        }
        if (proteinChangeTypeNotExists !== undefined && proteinChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangeTypeNotExists, 'proteinChangeType.not.exists');
        }
        if (proteinChangeTypeExists !== undefined && proteinChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangeTypeExists, 'proteinChangeType.exists');
        }
        if (proteinChangeType !== undefined && proteinChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangeType, 'proteinChangeType');
        }
        if (proteinChangeTypeNot !== undefined && proteinChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinChangeTypeNot, 'proteinChangeType.not');
        }
        if (proteinChangeTypeAnyOf) {
            proteinChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'proteinChangeType.anyOf');
            })
        }
        if (nucleotidesLengthNotExists !== undefined && nucleotidesLengthNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthNotExists, 'nucleotidesLength.not.exists');
        }
        if (nucleotidesLengthExists !== undefined && nucleotidesLengthExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthExists, 'nucleotidesLength.exists');
        }
        if (nucleotidesLengthLessThan !== undefined && nucleotidesLengthLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthLessThan, 'nucleotidesLength.lessThan');
        }
        if (nucleotidesLengthLessThanOrEqual !== undefined && nucleotidesLengthLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthLessThanOrEqual, 'nucleotidesLength.lessThanOrEqual');
        }
        if (nucleotidesLengthGreaterThan !== undefined && nucleotidesLengthGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthGreaterThan, 'nucleotidesLength.greaterThan');
        }
        if (nucleotidesLengthGreaterThanOrEqual !== undefined && nucleotidesLengthGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthGreaterThanOrEqual, 'nucleotidesLength.greaterThanOrEqual');
        }
        if (nucleotidesLengthEqual !== undefined && nucleotidesLengthEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthEqual, 'nucleotidesLength.equal');
        }
        if (nucleotidesLengthNotEqual !== undefined && nucleotidesLengthNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nucleotidesLengthNotEqual, 'nucleotidesLength.not.equal');
        }
        if (nucleotidesLengthBetween) {
            nucleotidesLengthBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nucleotidesLength.between');
            })
        }
        if (nucleotidesLengthNotBetween) {
            nucleotidesLengthNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'nucleotidesLength.not.between');
            })
        }
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (dateBefore !== undefined && dateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateBefore, 'date.before');
        }
        if (dateAfter !== undefined && dateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateAfter, 'date.after');
        }
        if (dateOnOrBefore !== undefined && dateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrBefore, 'date.onOrBefore');
        }
        if (dateOnOrAfter !== undefined && dateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrAfter, 'date.onOrAfter');
        }
        if (dateOn !== undefined && dateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOn, 'date.on');
        }
        if (dateNotOn !== undefined && dateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateNotOn, 'date.not.on');
        }
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        if (genePanelNotExists !== undefined && genePanelNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotExists, 'genePanel.not.exists');
        }
        if (genePanelExists !== undefined && genePanelExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelExists, 'genePanel.exists');
        }
        if (genePanel !== undefined && genePanel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanel, 'genePanel');
        }
        if (genePanelNot !== undefined && genePanelNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNot, 'genePanel.not');
        }
        if (genePanelContains !== undefined && genePanelContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelContains, 'genePanel.contains');
        }
        if (genePanelNotContains !== undefined && genePanelNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotContains, 'genePanel.not.contains');
        }
        if (genePanelBeginsWith !== undefined && genePanelBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelBeginsWith, 'genePanel.beginsWith');
        }
        if (genePanelNotBeginsWith !== undefined && genePanelNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotBeginsWith, 'genePanel.not.beginsWith');
        }
        if (genePanelEndsWith !== undefined && genePanelEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelEndsWith, 'genePanel.endsWith');
        }
        if (genePanelNotEndsWith !== undefined && genePanelNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotEndsWith, 'genePanel.not.endsWith');
        }
        if (assessmentNotExists !== undefined && assessmentNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentNotExists, 'assessment.not.exists');
        }
        if (assessmentExists !== undefined && assessmentExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentExists, 'assessment.exists');
        }
        if (assessment !== undefined && assessment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessment, 'assessment');
        }
        if (assessmentNot !== undefined && assessmentNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentNot, 'assessment.not');
        }
        if (assessmentAnyOf) {
            assessmentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'assessment.anyOf');
            })
        }
        if (confidenceNotExists !== undefined && confidenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceNotExists, 'confidence.not.exists');
        }
        if (confidenceExists !== undefined && confidenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceExists, 'confidence.exists');
        }
        if (confidence !== undefined && confidence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidence, 'confidence');
        }
        if (confidenceNot !== undefined && confidenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceNot, 'confidence.not');
        }
        if (confidenceAnyOf) {
            confidenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'confidence.anyOf');
            })
        }
        if (analysisMethodNotExists !== undefined && analysisMethodNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodNotExists, 'analysisMethod.not.exists');
        }
        if (analysisMethodExists !== undefined && analysisMethodExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodExists, 'analysisMethod.exists');
        }
        if (analysisMethod !== undefined && analysisMethod !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethod, 'analysisMethod');
        }
        if (analysisMethodNot !== undefined && analysisMethodNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodNot, 'analysisMethod.not');
        }
        if (analysisMethodAnyOf) {
            analysisMethodAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.anyOf');
            })
        }
        if (analysisMethodNotAnyOf) {
            analysisMethodNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.not.anyOf');
            })
        }
        if (analysisMethodDescendantsOf !== undefined && analysisMethodDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodDescendantsOf, 'analysisMethod.descendantsOf');
        }
        if (clinicalRelevanceNotExists !== undefined && clinicalRelevanceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceNotExists, 'clinicalRelevance.not.exists');
        }
        if (clinicalRelevanceExists !== undefined && clinicalRelevanceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceExists, 'clinicalRelevance.exists');
        }
        if (clinicalRelevance !== undefined && clinicalRelevance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevance, 'clinicalRelevance');
        }
        if (clinicalRelevanceNot !== undefined && clinicalRelevanceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceNot, 'clinicalRelevance.not');
        }
        if (clinicalRelevanceAnyOf) {
            clinicalRelevanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'clinicalRelevance.anyOf');
            })
        }
        if (isVusNotExists !== undefined && isVusNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isVusNotExists, 'isVus.not.exists');
        }
        if (isVusExists !== undefined && isVusExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isVusExists, 'isVus.exists');
        }
        if (isVus !== undefined && isVus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isVus, 'isVus');
        }
        if (isPathogenic !== undefined && isPathogenic !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isPathogenic, 'isPathogenic');
        }
        if (genomeAssemblyVersionNotExists !== undefined && genomeAssemblyVersionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionNotExists, 'genomeAssemblyVersion.not.exists');
        }
        if (genomeAssemblyVersionExists !== undefined && genomeAssemblyVersionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionExists, 'genomeAssemblyVersion.exists');
        }
        if (genomeAssemblyVersion !== undefined && genomeAssemblyVersion !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersion, 'genomeAssemblyVersion');
        }
        if (genomeAssemblyVersionNot !== undefined && genomeAssemblyVersionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionNot, 'genomeAssemblyVersion.not');
        }
        if (genomeAssemblyVersionAnyOf) {
            genomeAssemblyVersionAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.anyOf');
            })
        }
        if (genomeAssemblyVersionNotAnyOf) {
            genomeAssemblyVersionNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.not.anyOf');
            })
        }
        if (genomeAssemblyVersionDescendantsOf !== undefined && genomeAssemblyVersionDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionDescendantsOf, 'genomeAssemblyVersion.descendantsOf');
        }
        if (molecularConsequenceNotExists !== undefined && molecularConsequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceNotExists, 'molecularConsequence.not.exists');
        }
        if (molecularConsequenceExists !== undefined && molecularConsequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceExists, 'molecularConsequence.exists');
        }
        if (molecularConsequence !== undefined && molecularConsequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequence, 'molecularConsequence');
        }
        if (molecularConsequenceNot !== undefined && molecularConsequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceNot, 'molecularConsequence.not');
        }
        if (molecularConsequenceAnyOf) {
            molecularConsequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.anyOf');
            })
        }
        if (molecularConsequenceNotAnyOf) {
            molecularConsequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.not.anyOf');
            })
        }
        if (molecularConsequenceDescendantsOf !== undefined && molecularConsequenceDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceDescendantsOf, 'molecularConsequence.descendantsOf');
        }
        if (copyNumberNotExists !== undefined && copyNumberNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberNotExists, 'copyNumber.not.exists');
        }
        if (copyNumberExists !== undefined && copyNumberExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberExists, 'copyNumber.exists');
        }
        if (copyNumberLessThan !== undefined && copyNumberLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberLessThan, 'copyNumber.lessThan');
        }
        if (copyNumberLessThanOrEqual !== undefined && copyNumberLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberLessThanOrEqual, 'copyNumber.lessThanOrEqual');
        }
        if (copyNumberGreaterThan !== undefined && copyNumberGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberGreaterThan, 'copyNumber.greaterThan');
        }
        if (copyNumberGreaterThanOrEqual !== undefined && copyNumberGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberGreaterThanOrEqual, 'copyNumber.greaterThanOrEqual');
        }
        if (copyNumberEqual !== undefined && copyNumberEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberEqual, 'copyNumber.equal');
        }
        if (copyNumberNotEqual !== undefined && copyNumberNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberNotEqual, 'copyNumber.not.equal');
        }
        if (copyNumberBetween) {
            copyNumberBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.between');
            })
        }
        if (copyNumberNotBetween) {
            copyNumberNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.not.between');
            })
        }
        if (alleleFrequencyNotExists !== undefined && alleleFrequencyNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyNotExists, 'alleleFrequency.not.exists');
        }
        if (alleleFrequencyExists !== undefined && alleleFrequencyExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyExists, 'alleleFrequency.exists');
        }
        if (alleleFrequencyLessThan !== undefined && alleleFrequencyLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyLessThan, 'alleleFrequency.lessThan');
        }
        if (alleleFrequencyLessThanOrEqual !== undefined && alleleFrequencyLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyLessThanOrEqual, 'alleleFrequency.lessThanOrEqual');
        }
        if (alleleFrequencyGreaterThan !== undefined && alleleFrequencyGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyGreaterThan, 'alleleFrequency.greaterThan');
        }
        if (alleleFrequencyGreaterThanOrEqual !== undefined && alleleFrequencyGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyGreaterThanOrEqual, 'alleleFrequency.greaterThanOrEqual');
        }
        if (alleleFrequencyEqual !== undefined && alleleFrequencyEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyEqual, 'alleleFrequency.equal');
        }
        if (alleleFrequencyNotEqual !== undefined && alleleFrequencyNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyNotEqual, 'alleleFrequency.not.equal');
        }
        if (alleleFrequencyBetween) {
            alleleFrequencyBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.between');
            })
        }
        if (alleleFrequencyNotBetween) {
            alleleFrequencyNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.not.between');
            })
        }
        if (alleleDepthNotExists !== undefined && alleleDepthNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthNotExists, 'alleleDepth.not.exists');
        }
        if (alleleDepthExists !== undefined && alleleDepthExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthExists, 'alleleDepth.exists');
        }
        if (alleleDepthLessThan !== undefined && alleleDepthLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthLessThan, 'alleleDepth.lessThan');
        }
        if (alleleDepthLessThanOrEqual !== undefined && alleleDepthLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthLessThanOrEqual, 'alleleDepth.lessThanOrEqual');
        }
        if (alleleDepthGreaterThan !== undefined && alleleDepthGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthGreaterThan, 'alleleDepth.greaterThan');
        }
        if (alleleDepthGreaterThanOrEqual !== undefined && alleleDepthGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthGreaterThanOrEqual, 'alleleDepth.greaterThanOrEqual');
        }
        if (alleleDepthEqual !== undefined && alleleDepthEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthEqual, 'alleleDepth.equal');
        }
        if (alleleDepthNotEqual !== undefined && alleleDepthNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthNotEqual, 'alleleDepth.not.equal');
        }
        if (alleleDepthBetween) {
            alleleDepthBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.between');
            })
        }
        if (alleleDepthNotBetween) {
            alleleDepthNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.not.between');
            })
        }
        if (zygosityNotExists !== undefined && zygosityNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityNotExists, 'zygosity.not.exists');
        }
        if (zygosityExists !== undefined && zygosityExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityExists, 'zygosity.exists');
        }
        if (zygosity !== undefined && zygosity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosity, 'zygosity');
        }
        if (zygosityNot !== undefined && zygosityNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityNot, 'zygosity.not');
        }
        if (zygosityAnyOf) {
            zygosityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.anyOf');
            })
        }
        if (zygosityNotAnyOf) {
            zygosityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.not.anyOf');
            })
        }
        if (zygosityDescendantsOf !== undefined && zygosityDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityDescendantsOf, 'zygosity.descendantsOf');
        }
        if (inheritanceNotExists !== undefined && inheritanceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceNotExists, 'inheritance.not.exists');
        }
        if (inheritanceExists !== undefined && inheritanceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceExists, 'inheritance.exists');
        }
        if (inheritance !== undefined && inheritance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritance, 'inheritance');
        }
        if (inheritanceNot !== undefined && inheritanceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceNot, 'inheritance.not');
        }
        if (inheritanceAnyOf) {
            inheritanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.anyOf');
            })
        }
        if (inheritanceNotAnyOf) {
            inheritanceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.not.anyOf');
            })
        }
        if (inheritanceDescendantsOf !== undefined && inheritanceDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceDescendantsOf, 'inheritance.descendantsOf');
        }
        if (coordinateSystemNotExists !== undefined && coordinateSystemNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemNotExists, 'coordinateSystem.not.exists');
        }
        if (coordinateSystemExists !== undefined && coordinateSystemExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemExists, 'coordinateSystem.exists');
        }
        if (coordinateSystem !== undefined && coordinateSystem !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystem, 'coordinateSystem');
        }
        if (coordinateSystemNot !== undefined && coordinateSystemNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemNot, 'coordinateSystem.not');
        }
        if (coordinateSystemAnyOf) {
            coordinateSystemAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.anyOf');
            })
        }
        if (coordinateSystemNotAnyOf) {
            coordinateSystemNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.not.anyOf');
            })
        }
        if (coordinateSystemDescendantsOf !== undefined && coordinateSystemDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemDescendantsOf, 'coordinateSystem.descendantsOf');
        }
        if (clinvarNotExists !== undefined && clinvarNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotExists, 'clinvar.not.exists');
        }
        if (clinvarExists !== undefined && clinvarExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarExists, 'clinvar.exists');
        }
        if (clinvar !== undefined && clinvar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvar, 'clinvar');
        }
        if (clinvarNot !== undefined && clinvarNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNot, 'clinvar.not');
        }
        if (clinvarContains !== undefined && clinvarContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarContains, 'clinvar.contains');
        }
        if (clinvarNotContains !== undefined && clinvarNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotContains, 'clinvar.not.contains');
        }
        if (clinvarBeginsWith !== undefined && clinvarBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarBeginsWith, 'clinvar.beginsWith');
        }
        if (clinvarNotBeginsWith !== undefined && clinvarNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotBeginsWith, 'clinvar.not.beginsWith');
        }
        if (clinvarEndsWith !== undefined && clinvarEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarEndsWith, 'clinvar.endsWith');
        }
        if (clinvarNotEndsWith !== undefined && clinvarNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotEndsWith, 'clinvar.not.endsWith');
        }
        if (genes !== undefined && genes !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genes, 'genes');
        }
        if (genesNot !== undefined && genesNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genesNot, 'genes.not');
        }
        if (genesAnyOf) {
            genesAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.anyOf');
            })
        }
        if (genesNotAnyOf) {
            genesNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.anyOf');
            })
        }
        if (genesDescendantsOf !== undefined && genesDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genesDescendantsOf, 'genes.descendantsOf');
        }
        if (genesAllOf) {
            genesAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.allOf');
            })
        }
        if (genesNotAllOf) {
            genesNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.allOf');
            })
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<PaginatedGenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling updateGenomicVariant.');
        }
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling updateGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
