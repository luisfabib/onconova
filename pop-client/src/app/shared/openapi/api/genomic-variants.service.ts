/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GenomicVariant } from '../model/genomic-variant';
// @ts-ignore
import { GenomicVariantCreate } from '../model/genomic-variant-create';
// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedGenomicVariant } from '../model/paginated-genomic-variant';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    GenomicVariantsServiceInterface,
    CreateGenomicVariantRequestParams,
    DeleteGenomicVariantRequestParams,
    GetGenomicVariantByIdRequestParams,
    GetGenomicVariantsRequestParams,
    UpdateGenomicVariantRequestParams
} from './genomic-variants.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class GenomicVariantsService implements GenomicVariantsServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createGenomicVariant(requestParameters: CreateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling createGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteGenomicVariant(requestParameters: DeleteGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling deleteGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Genomic Variant By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GenomicVariant>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GenomicVariant>>;
    public getGenomicVariantById(requestParameters: GetGenomicVariantByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling getGenomicVariantById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Genomic Variants Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedGenomicVariant>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedGenomicVariant>>;
    public getGenomicVariants(requestParameters?: GetGenomicVariantsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const genePanelNotExists = requestParameters?.genePanelNotExists;
        const genePanelExists = requestParameters?.genePanelExists;
        const genePanel = requestParameters?.genePanel;
        const genePanelNot = requestParameters?.genePanelNot;
        const genePanelContains = requestParameters?.genePanelContains;
        const genePanelNotContains = requestParameters?.genePanelNotContains;
        const genePanelBeginsWith = requestParameters?.genePanelBeginsWith;
        const genePanelNotBeginsWith = requestParameters?.genePanelNotBeginsWith;
        const genePanelEndsWith = requestParameters?.genePanelEndsWith;
        const genePanelNotEndsWith = requestParameters?.genePanelNotEndsWith;
        const assessmentNotExists = requestParameters?.assessmentNotExists;
        const assessmentExists = requestParameters?.assessmentExists;
        const assessment = requestParameters?.assessment;
        const assessmentNot = requestParameters?.assessmentNot;
        const assessmentAnyOf = requestParameters?.assessmentAnyOf;
        const confidenceNotExists = requestParameters?.confidenceNotExists;
        const confidenceExists = requestParameters?.confidenceExists;
        const confidence = requestParameters?.confidence;
        const confidenceNot = requestParameters?.confidenceNot;
        const confidenceAnyOf = requestParameters?.confidenceAnyOf;
        const analysisMethodNotExists = requestParameters?.analysisMethodNotExists;
        const analysisMethodExists = requestParameters?.analysisMethodExists;
        const analysisMethod = requestParameters?.analysisMethod;
        const analysisMethodNot = requestParameters?.analysisMethodNot;
        const analysisMethodAnyOf = requestParameters?.analysisMethodAnyOf;
        const analysisMethodNotAnyOf = requestParameters?.analysisMethodNotAnyOf;
        const analysisMethodDescendantsOf = requestParameters?.analysisMethodDescendantsOf;
        const clinicalRelevanceNotExists = requestParameters?.clinicalRelevanceNotExists;
        const clinicalRelevanceExists = requestParameters?.clinicalRelevanceExists;
        const clinicalRelevance = requestParameters?.clinicalRelevance;
        const clinicalRelevanceNot = requestParameters?.clinicalRelevanceNot;
        const clinicalRelevanceAnyOf = requestParameters?.clinicalRelevanceAnyOf;
        const cytogeneticLocationNotExists = requestParameters?.cytogeneticLocationNotExists;
        const cytogeneticLocationExists = requestParameters?.cytogeneticLocationExists;
        const cytogeneticLocation = requestParameters?.cytogeneticLocation;
        const cytogeneticLocationNot = requestParameters?.cytogeneticLocationNot;
        const cytogeneticLocationContains = requestParameters?.cytogeneticLocationContains;
        const cytogeneticLocationNotContains = requestParameters?.cytogeneticLocationNotContains;
        const cytogeneticLocationBeginsWith = requestParameters?.cytogeneticLocationBeginsWith;
        const cytogeneticLocationNotBeginsWith = requestParameters?.cytogeneticLocationNotBeginsWith;
        const cytogeneticLocationEndsWith = requestParameters?.cytogeneticLocationEndsWith;
        const cytogeneticLocationNotEndsWith = requestParameters?.cytogeneticLocationNotEndsWith;
        const genomeAssemblyVersionNotExists = requestParameters?.genomeAssemblyVersionNotExists;
        const genomeAssemblyVersionExists = requestParameters?.genomeAssemblyVersionExists;
        const genomeAssemblyVersion = requestParameters?.genomeAssemblyVersion;
        const genomeAssemblyVersionNot = requestParameters?.genomeAssemblyVersionNot;
        const genomeAssemblyVersionAnyOf = requestParameters?.genomeAssemblyVersionAnyOf;
        const genomeAssemblyVersionNotAnyOf = requestParameters?.genomeAssemblyVersionNotAnyOf;
        const genomeAssemblyVersionDescendantsOf = requestParameters?.genomeAssemblyVersionDescendantsOf;
        const genomicRefseqNotExists = requestParameters?.genomicRefseqNotExists;
        const genomicRefseqExists = requestParameters?.genomicRefseqExists;
        const genomicRefseq = requestParameters?.genomicRefseq;
        const genomicRefseqNot = requestParameters?.genomicRefseqNot;
        const genomicRefseqContains = requestParameters?.genomicRefseqContains;
        const genomicRefseqNotContains = requestParameters?.genomicRefseqNotContains;
        const genomicRefseqBeginsWith = requestParameters?.genomicRefseqBeginsWith;
        const genomicRefseqNotBeginsWith = requestParameters?.genomicRefseqNotBeginsWith;
        const genomicRefseqEndsWith = requestParameters?.genomicRefseqEndsWith;
        const genomicRefseqNotEndsWith = requestParameters?.genomicRefseqNotEndsWith;
        const transcriptRefseqNotExists = requestParameters?.transcriptRefseqNotExists;
        const transcriptRefseqExists = requestParameters?.transcriptRefseqExists;
        const transcriptRefseq = requestParameters?.transcriptRefseq;
        const transcriptRefseqNot = requestParameters?.transcriptRefseqNot;
        const transcriptRefseqContains = requestParameters?.transcriptRefseqContains;
        const transcriptRefseqNotContains = requestParameters?.transcriptRefseqNotContains;
        const transcriptRefseqBeginsWith = requestParameters?.transcriptRefseqBeginsWith;
        const transcriptRefseqNotBeginsWith = requestParameters?.transcriptRefseqNotBeginsWith;
        const transcriptRefseqEndsWith = requestParameters?.transcriptRefseqEndsWith;
        const transcriptRefseqNotEndsWith = requestParameters?.transcriptRefseqNotEndsWith;
        const codingHgvsNotExists = requestParameters?.codingHgvsNotExists;
        const codingHgvsExists = requestParameters?.codingHgvsExists;
        const codingHgvs = requestParameters?.codingHgvs;
        const codingHgvsNot = requestParameters?.codingHgvsNot;
        const codingHgvsContains = requestParameters?.codingHgvsContains;
        const codingHgvsNotContains = requestParameters?.codingHgvsNotContains;
        const codingHgvsBeginsWith = requestParameters?.codingHgvsBeginsWith;
        const codingHgvsNotBeginsWith = requestParameters?.codingHgvsNotBeginsWith;
        const codingHgvsEndsWith = requestParameters?.codingHgvsEndsWith;
        const codingHgvsNotEndsWith = requestParameters?.codingHgvsNotEndsWith;
        const proteinHgvsNotExists = requestParameters?.proteinHgvsNotExists;
        const proteinHgvsExists = requestParameters?.proteinHgvsExists;
        const proteinHgvs = requestParameters?.proteinHgvs;
        const proteinHgvsNot = requestParameters?.proteinHgvsNot;
        const proteinHgvsContains = requestParameters?.proteinHgvsContains;
        const proteinHgvsNotContains = requestParameters?.proteinHgvsNotContains;
        const proteinHgvsBeginsWith = requestParameters?.proteinHgvsBeginsWith;
        const proteinHgvsNotBeginsWith = requestParameters?.proteinHgvsNotBeginsWith;
        const proteinHgvsEndsWith = requestParameters?.proteinHgvsEndsWith;
        const proteinHgvsNotEndsWith = requestParameters?.proteinHgvsNotEndsWith;
        const genomicHgvsNotExists = requestParameters?.genomicHgvsNotExists;
        const genomicHgvsExists = requestParameters?.genomicHgvsExists;
        const genomicHgvs = requestParameters?.genomicHgvs;
        const genomicHgvsNot = requestParameters?.genomicHgvsNot;
        const genomicHgvsContains = requestParameters?.genomicHgvsContains;
        const genomicHgvsNotContains = requestParameters?.genomicHgvsNotContains;
        const genomicHgvsBeginsWith = requestParameters?.genomicHgvsBeginsWith;
        const genomicHgvsNotBeginsWith = requestParameters?.genomicHgvsNotBeginsWith;
        const genomicHgvsEndsWith = requestParameters?.genomicHgvsEndsWith;
        const genomicHgvsNotEndsWith = requestParameters?.genomicHgvsNotEndsWith;
        const dnaChangeTypeNotExists = requestParameters?.dnaChangeTypeNotExists;
        const dnaChangeTypeExists = requestParameters?.dnaChangeTypeExists;
        const dnaChangeType = requestParameters?.dnaChangeType;
        const dnaChangeTypeNot = requestParameters?.dnaChangeTypeNot;
        const dnaChangeTypeAnyOf = requestParameters?.dnaChangeTypeAnyOf;
        const dnaChangeTypeNotAnyOf = requestParameters?.dnaChangeTypeNotAnyOf;
        const dnaChangeTypeDescendantsOf = requestParameters?.dnaChangeTypeDescendantsOf;
        const aminoacidChangeTypeNotExists = requestParameters?.aminoacidChangeTypeNotExists;
        const aminoacidChangeTypeExists = requestParameters?.aminoacidChangeTypeExists;
        const aminoacidChangeType = requestParameters?.aminoacidChangeType;
        const aminoacidChangeTypeNot = requestParameters?.aminoacidChangeTypeNot;
        const aminoacidChangeTypeAnyOf = requestParameters?.aminoacidChangeTypeAnyOf;
        const aminoacidChangeTypeNotAnyOf = requestParameters?.aminoacidChangeTypeNotAnyOf;
        const aminoacidChangeTypeDescendantsOf = requestParameters?.aminoacidChangeTypeDescendantsOf;
        const molecularConsequenceNotExists = requestParameters?.molecularConsequenceNotExists;
        const molecularConsequenceExists = requestParameters?.molecularConsequenceExists;
        const molecularConsequence = requestParameters?.molecularConsequence;
        const molecularConsequenceNot = requestParameters?.molecularConsequenceNot;
        const molecularConsequenceAnyOf = requestParameters?.molecularConsequenceAnyOf;
        const molecularConsequenceNotAnyOf = requestParameters?.molecularConsequenceNotAnyOf;
        const molecularConsequenceDescendantsOf = requestParameters?.molecularConsequenceDescendantsOf;
        const copyNumberNotExists = requestParameters?.copyNumberNotExists;
        const copyNumberExists = requestParameters?.copyNumberExists;
        const copyNumberLessThan = requestParameters?.copyNumberLessThan;
        const copyNumberLessThanOrEqual = requestParameters?.copyNumberLessThanOrEqual;
        const copyNumberGreaterThan = requestParameters?.copyNumberGreaterThan;
        const copyNumberGreaterThanOrEqual = requestParameters?.copyNumberGreaterThanOrEqual;
        const copyNumberEqual = requestParameters?.copyNumberEqual;
        const copyNumberNotEqual = requestParameters?.copyNumberNotEqual;
        const copyNumberBetween = requestParameters?.copyNumberBetween;
        const copyNumberNotBetween = requestParameters?.copyNumberNotBetween;
        const alleleFrequencyNotExists = requestParameters?.alleleFrequencyNotExists;
        const alleleFrequencyExists = requestParameters?.alleleFrequencyExists;
        const alleleFrequencyLessThan = requestParameters?.alleleFrequencyLessThan;
        const alleleFrequencyLessThanOrEqual = requestParameters?.alleleFrequencyLessThanOrEqual;
        const alleleFrequencyGreaterThan = requestParameters?.alleleFrequencyGreaterThan;
        const alleleFrequencyGreaterThanOrEqual = requestParameters?.alleleFrequencyGreaterThanOrEqual;
        const alleleFrequencyEqual = requestParameters?.alleleFrequencyEqual;
        const alleleFrequencyNotEqual = requestParameters?.alleleFrequencyNotEqual;
        const alleleFrequencyBetween = requestParameters?.alleleFrequencyBetween;
        const alleleFrequencyNotBetween = requestParameters?.alleleFrequencyNotBetween;
        const alleleDepthNotExists = requestParameters?.alleleDepthNotExists;
        const alleleDepthExists = requestParameters?.alleleDepthExists;
        const alleleDepthLessThan = requestParameters?.alleleDepthLessThan;
        const alleleDepthLessThanOrEqual = requestParameters?.alleleDepthLessThanOrEqual;
        const alleleDepthGreaterThan = requestParameters?.alleleDepthGreaterThan;
        const alleleDepthGreaterThanOrEqual = requestParameters?.alleleDepthGreaterThanOrEqual;
        const alleleDepthEqual = requestParameters?.alleleDepthEqual;
        const alleleDepthNotEqual = requestParameters?.alleleDepthNotEqual;
        const alleleDepthBetween = requestParameters?.alleleDepthBetween;
        const alleleDepthNotBetween = requestParameters?.alleleDepthNotBetween;
        const zygosityNotExists = requestParameters?.zygosityNotExists;
        const zygosityExists = requestParameters?.zygosityExists;
        const zygosity = requestParameters?.zygosity;
        const zygosityNot = requestParameters?.zygosityNot;
        const zygosityAnyOf = requestParameters?.zygosityAnyOf;
        const zygosityNotAnyOf = requestParameters?.zygosityNotAnyOf;
        const zygosityDescendantsOf = requestParameters?.zygosityDescendantsOf;
        const inheritanceNotExists = requestParameters?.inheritanceNotExists;
        const inheritanceExists = requestParameters?.inheritanceExists;
        const inheritance = requestParameters?.inheritance;
        const inheritanceNot = requestParameters?.inheritanceNot;
        const inheritanceAnyOf = requestParameters?.inheritanceAnyOf;
        const inheritanceNotAnyOf = requestParameters?.inheritanceNotAnyOf;
        const inheritanceDescendantsOf = requestParameters?.inheritanceDescendantsOf;
        const coordinateSystemNotExists = requestParameters?.coordinateSystemNotExists;
        const coordinateSystemExists = requestParameters?.coordinateSystemExists;
        const coordinateSystem = requestParameters?.coordinateSystem;
        const coordinateSystemNot = requestParameters?.coordinateSystemNot;
        const coordinateSystemAnyOf = requestParameters?.coordinateSystemAnyOf;
        const coordinateSystemNotAnyOf = requestParameters?.coordinateSystemNotAnyOf;
        const coordinateSystemDescendantsOf = requestParameters?.coordinateSystemDescendantsOf;
        const exactGenomicCoordinatesNotExists = requestParameters?.exactGenomicCoordinatesNotExists;
        const exactGenomicCoordinatesExists = requestParameters?.exactGenomicCoordinatesExists;
        const innerGenomicCoordinatesNotExists = requestParameters?.innerGenomicCoordinatesNotExists;
        const innerGenomicCoordinatesExists = requestParameters?.innerGenomicCoordinatesExists;
        const outerGenomicCoordinatesNotExists = requestParameters?.outerGenomicCoordinatesNotExists;
        const outerGenomicCoordinatesExists = requestParameters?.outerGenomicCoordinatesExists;
        const clinvarNotExists = requestParameters?.clinvarNotExists;
        const clinvarExists = requestParameters?.clinvarExists;
        const clinvar = requestParameters?.clinvar;
        const clinvarNot = requestParameters?.clinvarNot;
        const clinvarContains = requestParameters?.clinvarContains;
        const clinvarNotContains = requestParameters?.clinvarNotContains;
        const clinvarBeginsWith = requestParameters?.clinvarBeginsWith;
        const clinvarNotBeginsWith = requestParameters?.clinvarNotBeginsWith;
        const clinvarEndsWith = requestParameters?.clinvarEndsWith;
        const clinvarNotEndsWith = requestParameters?.clinvarNotEndsWith;
        const genes = requestParameters?.genes;
        const genesNot = requestParameters?.genesNot;
        const genesAnyOf = requestParameters?.genesAnyOf;
        const genesNotAnyOf = requestParameters?.genesNotAnyOf;
        const genesDescendantsOf = requestParameters?.genesDescendantsOf;
        const genesAllOf = requestParameters?.genesAllOf;
        const genesNotAllOf = requestParameters?.genesNotAllOf;
        const chromosomesNotExists = requestParameters?.chromosomesNotExists;
        const chromosomesExists = requestParameters?.chromosomesExists;
        const chromosomes = requestParameters?.chromosomes;
        const chromosomesNot = requestParameters?.chromosomesNot;
        const chromosomesAnyOf = requestParameters?.chromosomesAnyOf;
        const chromosomesNotAnyOf = requestParameters?.chromosomesNotAnyOf;
        const chromosomesDescendantsOf = requestParameters?.chromosomesDescendantsOf;
        const chromosomesAllOf = requestParameters?.chromosomesAllOf;
        const chromosomesNotAllOf = requestParameters?.chromosomesNotAllOf;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (dateBefore !== undefined && dateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateBefore, 'date.before');
        }
        if (dateAfter !== undefined && dateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateAfter, 'date.after');
        }
        if (dateOnOrBefore !== undefined && dateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrBefore, 'date.onOrBefore');
        }
        if (dateOnOrAfter !== undefined && dateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrAfter, 'date.onOrAfter');
        }
        if (dateOn !== undefined && dateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOn, 'date.on');
        }
        if (dateNotOn !== undefined && dateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateNotOn, 'date.not.on');
        }
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        if (genePanelNotExists !== undefined && genePanelNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotExists, 'genePanel.not.exists');
        }
        if (genePanelExists !== undefined && genePanelExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelExists, 'genePanel.exists');
        }
        if (genePanel !== undefined && genePanel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanel, 'genePanel');
        }
        if (genePanelNot !== undefined && genePanelNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNot, 'genePanel.not');
        }
        if (genePanelContains !== undefined && genePanelContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelContains, 'genePanel.contains');
        }
        if (genePanelNotContains !== undefined && genePanelNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotContains, 'genePanel.not.contains');
        }
        if (genePanelBeginsWith !== undefined && genePanelBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelBeginsWith, 'genePanel.beginsWith');
        }
        if (genePanelNotBeginsWith !== undefined && genePanelNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotBeginsWith, 'genePanel.not.beginsWith');
        }
        if (genePanelEndsWith !== undefined && genePanelEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelEndsWith, 'genePanel.endsWith');
        }
        if (genePanelNotEndsWith !== undefined && genePanelNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genePanelNotEndsWith, 'genePanel.not.endsWith');
        }
        if (assessmentNotExists !== undefined && assessmentNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentNotExists, 'assessment.not.exists');
        }
        if (assessmentExists !== undefined && assessmentExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentExists, 'assessment.exists');
        }
        if (assessment !== undefined && assessment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessment, 'assessment');
        }
        if (assessmentNot !== undefined && assessmentNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>assessmentNot, 'assessment.not');
        }
        if (assessmentAnyOf) {
            assessmentAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'assessment.anyOf');
            })
        }
        if (confidenceNotExists !== undefined && confidenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceNotExists, 'confidence.not.exists');
        }
        if (confidenceExists !== undefined && confidenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceExists, 'confidence.exists');
        }
        if (confidence !== undefined && confidence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidence, 'confidence');
        }
        if (confidenceNot !== undefined && confidenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>confidenceNot, 'confidence.not');
        }
        if (confidenceAnyOf) {
            confidenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'confidence.anyOf');
            })
        }
        if (analysisMethodNotExists !== undefined && analysisMethodNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodNotExists, 'analysisMethod.not.exists');
        }
        if (analysisMethodExists !== undefined && analysisMethodExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodExists, 'analysisMethod.exists');
        }
        if (analysisMethod !== undefined && analysisMethod !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethod, 'analysisMethod');
        }
        if (analysisMethodNot !== undefined && analysisMethodNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodNot, 'analysisMethod.not');
        }
        if (analysisMethodAnyOf) {
            analysisMethodAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.anyOf');
            })
        }
        if (analysisMethodNotAnyOf) {
            analysisMethodNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'analysisMethod.not.anyOf');
            })
        }
        if (analysisMethodDescendantsOf !== undefined && analysisMethodDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analysisMethodDescendantsOf, 'analysisMethod.descendantsOf');
        }
        if (clinicalRelevanceNotExists !== undefined && clinicalRelevanceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceNotExists, 'clinicalRelevance.not.exists');
        }
        if (clinicalRelevanceExists !== undefined && clinicalRelevanceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceExists, 'clinicalRelevance.exists');
        }
        if (clinicalRelevance !== undefined && clinicalRelevance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevance, 'clinicalRelevance');
        }
        if (clinicalRelevanceNot !== undefined && clinicalRelevanceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinicalRelevanceNot, 'clinicalRelevance.not');
        }
        if (clinicalRelevanceAnyOf) {
            clinicalRelevanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'clinicalRelevance.anyOf');
            })
        }
        if (cytogeneticLocationNotExists !== undefined && cytogeneticLocationNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationNotExists, 'cytogeneticLocation.not.exists');
        }
        if (cytogeneticLocationExists !== undefined && cytogeneticLocationExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationExists, 'cytogeneticLocation.exists');
        }
        if (cytogeneticLocation !== undefined && cytogeneticLocation !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocation, 'cytogeneticLocation');
        }
        if (cytogeneticLocationNot !== undefined && cytogeneticLocationNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationNot, 'cytogeneticLocation.not');
        }
        if (cytogeneticLocationContains !== undefined && cytogeneticLocationContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationContains, 'cytogeneticLocation.contains');
        }
        if (cytogeneticLocationNotContains !== undefined && cytogeneticLocationNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationNotContains, 'cytogeneticLocation.not.contains');
        }
        if (cytogeneticLocationBeginsWith !== undefined && cytogeneticLocationBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationBeginsWith, 'cytogeneticLocation.beginsWith');
        }
        if (cytogeneticLocationNotBeginsWith !== undefined && cytogeneticLocationNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationNotBeginsWith, 'cytogeneticLocation.not.beginsWith');
        }
        if (cytogeneticLocationEndsWith !== undefined && cytogeneticLocationEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationEndsWith, 'cytogeneticLocation.endsWith');
        }
        if (cytogeneticLocationNotEndsWith !== undefined && cytogeneticLocationNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cytogeneticLocationNotEndsWith, 'cytogeneticLocation.not.endsWith');
        }
        if (genomeAssemblyVersionNotExists !== undefined && genomeAssemblyVersionNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionNotExists, 'genomeAssemblyVersion.not.exists');
        }
        if (genomeAssemblyVersionExists !== undefined && genomeAssemblyVersionExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionExists, 'genomeAssemblyVersion.exists');
        }
        if (genomeAssemblyVersion !== undefined && genomeAssemblyVersion !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersion, 'genomeAssemblyVersion');
        }
        if (genomeAssemblyVersionNot !== undefined && genomeAssemblyVersionNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionNot, 'genomeAssemblyVersion.not');
        }
        if (genomeAssemblyVersionAnyOf) {
            genomeAssemblyVersionAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.anyOf');
            })
        }
        if (genomeAssemblyVersionNotAnyOf) {
            genomeAssemblyVersionNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genomeAssemblyVersion.not.anyOf');
            })
        }
        if (genomeAssemblyVersionDescendantsOf !== undefined && genomeAssemblyVersionDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomeAssemblyVersionDescendantsOf, 'genomeAssemblyVersion.descendantsOf');
        }
        if (genomicRefseqNotExists !== undefined && genomicRefseqNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqNotExists, 'genomicRefseq.not.exists');
        }
        if (genomicRefseqExists !== undefined && genomicRefseqExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqExists, 'genomicRefseq.exists');
        }
        if (genomicRefseq !== undefined && genomicRefseq !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseq, 'genomicRefseq');
        }
        if (genomicRefseqNot !== undefined && genomicRefseqNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqNot, 'genomicRefseq.not');
        }
        if (genomicRefseqContains !== undefined && genomicRefseqContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqContains, 'genomicRefseq.contains');
        }
        if (genomicRefseqNotContains !== undefined && genomicRefseqNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqNotContains, 'genomicRefseq.not.contains');
        }
        if (genomicRefseqBeginsWith !== undefined && genomicRefseqBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqBeginsWith, 'genomicRefseq.beginsWith');
        }
        if (genomicRefseqNotBeginsWith !== undefined && genomicRefseqNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqNotBeginsWith, 'genomicRefseq.not.beginsWith');
        }
        if (genomicRefseqEndsWith !== undefined && genomicRefseqEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqEndsWith, 'genomicRefseq.endsWith');
        }
        if (genomicRefseqNotEndsWith !== undefined && genomicRefseqNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicRefseqNotEndsWith, 'genomicRefseq.not.endsWith');
        }
        if (transcriptRefseqNotExists !== undefined && transcriptRefseqNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqNotExists, 'transcriptRefseq.not.exists');
        }
        if (transcriptRefseqExists !== undefined && transcriptRefseqExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqExists, 'transcriptRefseq.exists');
        }
        if (transcriptRefseq !== undefined && transcriptRefseq !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseq, 'transcriptRefseq');
        }
        if (transcriptRefseqNot !== undefined && transcriptRefseqNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqNot, 'transcriptRefseq.not');
        }
        if (transcriptRefseqContains !== undefined && transcriptRefseqContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqContains, 'transcriptRefseq.contains');
        }
        if (transcriptRefseqNotContains !== undefined && transcriptRefseqNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqNotContains, 'transcriptRefseq.not.contains');
        }
        if (transcriptRefseqBeginsWith !== undefined && transcriptRefseqBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqBeginsWith, 'transcriptRefseq.beginsWith');
        }
        if (transcriptRefseqNotBeginsWith !== undefined && transcriptRefseqNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqNotBeginsWith, 'transcriptRefseq.not.beginsWith');
        }
        if (transcriptRefseqEndsWith !== undefined && transcriptRefseqEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqEndsWith, 'transcriptRefseq.endsWith');
        }
        if (transcriptRefseqNotEndsWith !== undefined && transcriptRefseqNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transcriptRefseqNotEndsWith, 'transcriptRefseq.not.endsWith');
        }
        if (codingHgvsNotExists !== undefined && codingHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsNotExists, 'codingHgvs.not.exists');
        }
        if (codingHgvsExists !== undefined && codingHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsExists, 'codingHgvs.exists');
        }
        if (codingHgvs !== undefined && codingHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvs, 'codingHgvs');
        }
        if (codingHgvsNot !== undefined && codingHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsNot, 'codingHgvs.not');
        }
        if (codingHgvsContains !== undefined && codingHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsContains, 'codingHgvs.contains');
        }
        if (codingHgvsNotContains !== undefined && codingHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsNotContains, 'codingHgvs.not.contains');
        }
        if (codingHgvsBeginsWith !== undefined && codingHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsBeginsWith, 'codingHgvs.beginsWith');
        }
        if (codingHgvsNotBeginsWith !== undefined && codingHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsNotBeginsWith, 'codingHgvs.not.beginsWith');
        }
        if (codingHgvsEndsWith !== undefined && codingHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsEndsWith, 'codingHgvs.endsWith');
        }
        if (codingHgvsNotEndsWith !== undefined && codingHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>codingHgvsNotEndsWith, 'codingHgvs.not.endsWith');
        }
        if (proteinHgvsNotExists !== undefined && proteinHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotExists, 'proteinHgvs.not.exists');
        }
        if (proteinHgvsExists !== undefined && proteinHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsExists, 'proteinHgvs.exists');
        }
        if (proteinHgvs !== undefined && proteinHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvs, 'proteinHgvs');
        }
        if (proteinHgvsNot !== undefined && proteinHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNot, 'proteinHgvs.not');
        }
        if (proteinHgvsContains !== undefined && proteinHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsContains, 'proteinHgvs.contains');
        }
        if (proteinHgvsNotContains !== undefined && proteinHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotContains, 'proteinHgvs.not.contains');
        }
        if (proteinHgvsBeginsWith !== undefined && proteinHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsBeginsWith, 'proteinHgvs.beginsWith');
        }
        if (proteinHgvsNotBeginsWith !== undefined && proteinHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotBeginsWith, 'proteinHgvs.not.beginsWith');
        }
        if (proteinHgvsEndsWith !== undefined && proteinHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsEndsWith, 'proteinHgvs.endsWith');
        }
        if (proteinHgvsNotEndsWith !== undefined && proteinHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>proteinHgvsNotEndsWith, 'proteinHgvs.not.endsWith');
        }
        if (genomicHgvsNotExists !== undefined && genomicHgvsNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotExists, 'genomicHgvs.not.exists');
        }
        if (genomicHgvsExists !== undefined && genomicHgvsExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsExists, 'genomicHgvs.exists');
        }
        if (genomicHgvs !== undefined && genomicHgvs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvs, 'genomicHgvs');
        }
        if (genomicHgvsNot !== undefined && genomicHgvsNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNot, 'genomicHgvs.not');
        }
        if (genomicHgvsContains !== undefined && genomicHgvsContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsContains, 'genomicHgvs.contains');
        }
        if (genomicHgvsNotContains !== undefined && genomicHgvsNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotContains, 'genomicHgvs.not.contains');
        }
        if (genomicHgvsBeginsWith !== undefined && genomicHgvsBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsBeginsWith, 'genomicHgvs.beginsWith');
        }
        if (genomicHgvsNotBeginsWith !== undefined && genomicHgvsNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotBeginsWith, 'genomicHgvs.not.beginsWith');
        }
        if (genomicHgvsEndsWith !== undefined && genomicHgvsEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsEndsWith, 'genomicHgvs.endsWith');
        }
        if (genomicHgvsNotEndsWith !== undefined && genomicHgvsNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genomicHgvsNotEndsWith, 'genomicHgvs.not.endsWith');
        }
        if (dnaChangeTypeNotExists !== undefined && dnaChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeNotExists, 'dnaChangeType.not.exists');
        }
        if (dnaChangeTypeExists !== undefined && dnaChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeExists, 'dnaChangeType.exists');
        }
        if (dnaChangeType !== undefined && dnaChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeType, 'dnaChangeType');
        }
        if (dnaChangeTypeNot !== undefined && dnaChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeNot, 'dnaChangeType.not');
        }
        if (dnaChangeTypeAnyOf) {
            dnaChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangeType.anyOf');
            })
        }
        if (dnaChangeTypeNotAnyOf) {
            dnaChangeTypeNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'dnaChangeType.not.anyOf');
            })
        }
        if (dnaChangeTypeDescendantsOf !== undefined && dnaChangeTypeDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnaChangeTypeDescendantsOf, 'dnaChangeType.descendantsOf');
        }
        if (aminoacidChangeTypeNotExists !== undefined && aminoacidChangeTypeNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aminoacidChangeTypeNotExists, 'aminoacidChangeType.not.exists');
        }
        if (aminoacidChangeTypeExists !== undefined && aminoacidChangeTypeExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aminoacidChangeTypeExists, 'aminoacidChangeType.exists');
        }
        if (aminoacidChangeType !== undefined && aminoacidChangeType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aminoacidChangeType, 'aminoacidChangeType');
        }
        if (aminoacidChangeTypeNot !== undefined && aminoacidChangeTypeNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aminoacidChangeTypeNot, 'aminoacidChangeType.not');
        }
        if (aminoacidChangeTypeAnyOf) {
            aminoacidChangeTypeAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'aminoacidChangeType.anyOf');
            })
        }
        if (aminoacidChangeTypeNotAnyOf) {
            aminoacidChangeTypeNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'aminoacidChangeType.not.anyOf');
            })
        }
        if (aminoacidChangeTypeDescendantsOf !== undefined && aminoacidChangeTypeDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aminoacidChangeTypeDescendantsOf, 'aminoacidChangeType.descendantsOf');
        }
        if (molecularConsequenceNotExists !== undefined && molecularConsequenceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceNotExists, 'molecularConsequence.not.exists');
        }
        if (molecularConsequenceExists !== undefined && molecularConsequenceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceExists, 'molecularConsequence.exists');
        }
        if (molecularConsequence !== undefined && molecularConsequence !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequence, 'molecularConsequence');
        }
        if (molecularConsequenceNot !== undefined && molecularConsequenceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceNot, 'molecularConsequence.not');
        }
        if (molecularConsequenceAnyOf) {
            molecularConsequenceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.anyOf');
            })
        }
        if (molecularConsequenceNotAnyOf) {
            molecularConsequenceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'molecularConsequence.not.anyOf');
            })
        }
        if (molecularConsequenceDescendantsOf !== undefined && molecularConsequenceDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>molecularConsequenceDescendantsOf, 'molecularConsequence.descendantsOf');
        }
        if (copyNumberNotExists !== undefined && copyNumberNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberNotExists, 'copyNumber.not.exists');
        }
        if (copyNumberExists !== undefined && copyNumberExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberExists, 'copyNumber.exists');
        }
        if (copyNumberLessThan !== undefined && copyNumberLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberLessThan, 'copyNumber.lessThan');
        }
        if (copyNumberLessThanOrEqual !== undefined && copyNumberLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberLessThanOrEqual, 'copyNumber.lessThanOrEqual');
        }
        if (copyNumberGreaterThan !== undefined && copyNumberGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberGreaterThan, 'copyNumber.greaterThan');
        }
        if (copyNumberGreaterThanOrEqual !== undefined && copyNumberGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberGreaterThanOrEqual, 'copyNumber.greaterThanOrEqual');
        }
        if (copyNumberEqual !== undefined && copyNumberEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberEqual, 'copyNumber.equal');
        }
        if (copyNumberNotEqual !== undefined && copyNumberNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>copyNumberNotEqual, 'copyNumber.not.equal');
        }
        if (copyNumberBetween) {
            copyNumberBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.between');
            })
        }
        if (copyNumberNotBetween) {
            copyNumberNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'copyNumber.not.between');
            })
        }
        if (alleleFrequencyNotExists !== undefined && alleleFrequencyNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyNotExists, 'alleleFrequency.not.exists');
        }
        if (alleleFrequencyExists !== undefined && alleleFrequencyExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyExists, 'alleleFrequency.exists');
        }
        if (alleleFrequencyLessThan !== undefined && alleleFrequencyLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyLessThan, 'alleleFrequency.lessThan');
        }
        if (alleleFrequencyLessThanOrEqual !== undefined && alleleFrequencyLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyLessThanOrEqual, 'alleleFrequency.lessThanOrEqual');
        }
        if (alleleFrequencyGreaterThan !== undefined && alleleFrequencyGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyGreaterThan, 'alleleFrequency.greaterThan');
        }
        if (alleleFrequencyGreaterThanOrEqual !== undefined && alleleFrequencyGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyGreaterThanOrEqual, 'alleleFrequency.greaterThanOrEqual');
        }
        if (alleleFrequencyEqual !== undefined && alleleFrequencyEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyEqual, 'alleleFrequency.equal');
        }
        if (alleleFrequencyNotEqual !== undefined && alleleFrequencyNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleFrequencyNotEqual, 'alleleFrequency.not.equal');
        }
        if (alleleFrequencyBetween) {
            alleleFrequencyBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.between');
            })
        }
        if (alleleFrequencyNotBetween) {
            alleleFrequencyNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleFrequency.not.between');
            })
        }
        if (alleleDepthNotExists !== undefined && alleleDepthNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthNotExists, 'alleleDepth.not.exists');
        }
        if (alleleDepthExists !== undefined && alleleDepthExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthExists, 'alleleDepth.exists');
        }
        if (alleleDepthLessThan !== undefined && alleleDepthLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthLessThan, 'alleleDepth.lessThan');
        }
        if (alleleDepthLessThanOrEqual !== undefined && alleleDepthLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthLessThanOrEqual, 'alleleDepth.lessThanOrEqual');
        }
        if (alleleDepthGreaterThan !== undefined && alleleDepthGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthGreaterThan, 'alleleDepth.greaterThan');
        }
        if (alleleDepthGreaterThanOrEqual !== undefined && alleleDepthGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthGreaterThanOrEqual, 'alleleDepth.greaterThanOrEqual');
        }
        if (alleleDepthEqual !== undefined && alleleDepthEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthEqual, 'alleleDepth.equal');
        }
        if (alleleDepthNotEqual !== undefined && alleleDepthNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>alleleDepthNotEqual, 'alleleDepth.not.equal');
        }
        if (alleleDepthBetween) {
            alleleDepthBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.between');
            })
        }
        if (alleleDepthNotBetween) {
            alleleDepthNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'alleleDepth.not.between');
            })
        }
        if (zygosityNotExists !== undefined && zygosityNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityNotExists, 'zygosity.not.exists');
        }
        if (zygosityExists !== undefined && zygosityExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityExists, 'zygosity.exists');
        }
        if (zygosity !== undefined && zygosity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosity, 'zygosity');
        }
        if (zygosityNot !== undefined && zygosityNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityNot, 'zygosity.not');
        }
        if (zygosityAnyOf) {
            zygosityAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.anyOf');
            })
        }
        if (zygosityNotAnyOf) {
            zygosityNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zygosity.not.anyOf');
            })
        }
        if (zygosityDescendantsOf !== undefined && zygosityDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zygosityDescendantsOf, 'zygosity.descendantsOf');
        }
        if (inheritanceNotExists !== undefined && inheritanceNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceNotExists, 'inheritance.not.exists');
        }
        if (inheritanceExists !== undefined && inheritanceExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceExists, 'inheritance.exists');
        }
        if (inheritance !== undefined && inheritance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritance, 'inheritance');
        }
        if (inheritanceNot !== undefined && inheritanceNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceNot, 'inheritance.not');
        }
        if (inheritanceAnyOf) {
            inheritanceAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.anyOf');
            })
        }
        if (inheritanceNotAnyOf) {
            inheritanceNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'inheritance.not.anyOf');
            })
        }
        if (inheritanceDescendantsOf !== undefined && inheritanceDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>inheritanceDescendantsOf, 'inheritance.descendantsOf');
        }
        if (coordinateSystemNotExists !== undefined && coordinateSystemNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemNotExists, 'coordinateSystem.not.exists');
        }
        if (coordinateSystemExists !== undefined && coordinateSystemExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemExists, 'coordinateSystem.exists');
        }
        if (coordinateSystem !== undefined && coordinateSystem !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystem, 'coordinateSystem');
        }
        if (coordinateSystemNot !== undefined && coordinateSystemNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemNot, 'coordinateSystem.not');
        }
        if (coordinateSystemAnyOf) {
            coordinateSystemAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.anyOf');
            })
        }
        if (coordinateSystemNotAnyOf) {
            coordinateSystemNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'coordinateSystem.not.anyOf');
            })
        }
        if (coordinateSystemDescendantsOf !== undefined && coordinateSystemDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>coordinateSystemDescendantsOf, 'coordinateSystem.descendantsOf');
        }
        if (exactGenomicCoordinatesNotExists !== undefined && exactGenomicCoordinatesNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>exactGenomicCoordinatesNotExists, 'exactGenomicCoordinates.not.exists');
        }
        if (exactGenomicCoordinatesExists !== undefined && exactGenomicCoordinatesExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>exactGenomicCoordinatesExists, 'exactGenomicCoordinates.exists');
        }
        if (innerGenomicCoordinatesNotExists !== undefined && innerGenomicCoordinatesNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>innerGenomicCoordinatesNotExists, 'innerGenomicCoordinates.not.exists');
        }
        if (innerGenomicCoordinatesExists !== undefined && innerGenomicCoordinatesExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>innerGenomicCoordinatesExists, 'innerGenomicCoordinates.exists');
        }
        if (outerGenomicCoordinatesNotExists !== undefined && outerGenomicCoordinatesNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>outerGenomicCoordinatesNotExists, 'outerGenomicCoordinates.not.exists');
        }
        if (outerGenomicCoordinatesExists !== undefined && outerGenomicCoordinatesExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>outerGenomicCoordinatesExists, 'outerGenomicCoordinates.exists');
        }
        if (clinvarNotExists !== undefined && clinvarNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotExists, 'clinvar.not.exists');
        }
        if (clinvarExists !== undefined && clinvarExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarExists, 'clinvar.exists');
        }
        if (clinvar !== undefined && clinvar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvar, 'clinvar');
        }
        if (clinvarNot !== undefined && clinvarNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNot, 'clinvar.not');
        }
        if (clinvarContains !== undefined && clinvarContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarContains, 'clinvar.contains');
        }
        if (clinvarNotContains !== undefined && clinvarNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotContains, 'clinvar.not.contains');
        }
        if (clinvarBeginsWith !== undefined && clinvarBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarBeginsWith, 'clinvar.beginsWith');
        }
        if (clinvarNotBeginsWith !== undefined && clinvarNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotBeginsWith, 'clinvar.not.beginsWith');
        }
        if (clinvarEndsWith !== undefined && clinvarEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarEndsWith, 'clinvar.endsWith');
        }
        if (clinvarNotEndsWith !== undefined && clinvarNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clinvarNotEndsWith, 'clinvar.not.endsWith');
        }
        if (genes !== undefined && genes !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genes, 'genes');
        }
        if (genesNot !== undefined && genesNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genesNot, 'genes.not');
        }
        if (genesAnyOf) {
            genesAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.anyOf');
            })
        }
        if (genesNotAnyOf) {
            genesNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.anyOf');
            })
        }
        if (genesDescendantsOf !== undefined && genesDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>genesDescendantsOf, 'genes.descendantsOf');
        }
        if (genesAllOf) {
            genesAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.allOf');
            })
        }
        if (genesNotAllOf) {
            genesNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'genes.not.allOf');
            })
        }
        if (chromosomesNotExists !== undefined && chromosomesNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chromosomesNotExists, 'chromosomes.not.exists');
        }
        if (chromosomesExists !== undefined && chromosomesExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chromosomesExists, 'chromosomes.exists');
        }
        if (chromosomes !== undefined && chromosomes !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chromosomes, 'chromosomes');
        }
        if (chromosomesNot !== undefined && chromosomesNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chromosomesNot, 'chromosomes.not');
        }
        if (chromosomesAnyOf) {
            chromosomesAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'chromosomes.anyOf');
            })
        }
        if (chromosomesNotAnyOf) {
            chromosomesNotAnyOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'chromosomes.not.anyOf');
            })
        }
        if (chromosomesDescendantsOf !== undefined && chromosomesDescendantsOf !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chromosomesDescendantsOf, 'chromosomes.descendantsOf');
        }
        if (chromosomesAllOf) {
            chromosomesAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'chromosomes.allOf');
            })
        }
        if (chromosomesNotAllOf) {
            chromosomesNotAllOf.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'chromosomes.not.allOf');
            })
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants`;
        return this.httpClient.request<PaginatedGenomicVariant>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Genomic Variant
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateGenomicVariant(requestParameters: UpdateGenomicVariantRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const genomicVariantId = requestParameters?.genomicVariantId;
        if (genomicVariantId === null || genomicVariantId === undefined) {
            throw new Error('Required parameter genomicVariantId was null or undefined when calling updateGenomicVariant.');
        }
        const genomicVariantCreate = requestParameters?.genomicVariantCreate;
        if (genomicVariantCreate === null || genomicVariantCreate === undefined) {
            throw new Error('Required parameter genomicVariantCreate was null or undefined when calling updateGenomicVariant.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/genomic-variants/${this.configuration.encodeParam({name: "genomicVariantId", value: genomicVariantId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: genomicVariantCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
