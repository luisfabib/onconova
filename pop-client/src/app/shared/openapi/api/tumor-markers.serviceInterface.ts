/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AnalyteDetails } from '../model/models';
import { HistoryEventWithSchema } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedHistoryEventWithSchema } from '../model/models';
import { PaginatedTumorMarker } from '../model/models';
import { TumorMarker } from '../model/models';
import { TumorMarkerCreate } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateTumorMarkerRequestParams {
    tumorMarkerCreate: TumorMarkerCreate;
}

export interface DeleteTumorMarkerByIdRequestParams {
    tumorMarkerId: string;
}

export interface GetAllTumorMarkerHistoryEventsRequestParams {
    tumorMarkerId: string;
    limit?: number;
    offset?: number;
}

export interface GetTumorMarkerAnalyteDetailsByCodeRequestParams {
    analyteCode: string;
}

export interface GetTumorMarkerByIdRequestParams {
    tumorMarkerId: string;
}

export interface GetTumorMarkerHistoryEventByIdRequestParams {
    tumorMarkerId: string;
    eventId: string;
}

export interface GetTumorMarkersRequestParams {
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    analyte?: string;
    analyteNot?: string;
    analyteAnyOf?: Array<string>;
    analyteNotAnyOf?: Array<string>;
    analyteDescendantsOf?: string;
    massConcentrationNotExists?: boolean;
    massConcentrationExists?: boolean;
    massConcentrationLessThan?: number;
    massConcentrationLessThanOrEqual?: number;
    massConcentrationGreaterThan?: number;
    massConcentrationGreaterThanOrEqual?: number;
    massConcentrationEqual?: number;
    massConcentrationNotEqual?: number;
    massConcentrationBetween?: Array<any>;
    massConcentrationNotBetween?: Array<any>;
    arbitraryConcentrationNotExists?: boolean;
    arbitraryConcentrationExists?: boolean;
    arbitraryConcentrationLessThan?: number;
    arbitraryConcentrationLessThanOrEqual?: number;
    arbitraryConcentrationGreaterThan?: number;
    arbitraryConcentrationGreaterThanOrEqual?: number;
    arbitraryConcentrationEqual?: number;
    arbitraryConcentrationNotEqual?: number;
    arbitraryConcentrationBetween?: Array<any>;
    arbitraryConcentrationNotBetween?: Array<any>;
    substanceConcentrationNotExists?: boolean;
    substanceConcentrationExists?: boolean;
    substanceConcentrationLessThan?: number;
    substanceConcentrationLessThanOrEqual?: number;
    substanceConcentrationGreaterThan?: number;
    substanceConcentrationGreaterThanOrEqual?: number;
    substanceConcentrationEqual?: number;
    substanceConcentrationNotEqual?: number;
    substanceConcentrationBetween?: Array<any>;
    substanceConcentrationNotBetween?: Array<any>;
    fractionNotExists?: boolean;
    fractionExists?: boolean;
    fractionLessThan?: number;
    fractionLessThanOrEqual?: number;
    fractionGreaterThan?: number;
    fractionGreaterThanOrEqual?: number;
    fractionEqual?: number;
    fractionNotEqual?: number;
    fractionBetween?: Array<any>;
    fractionNotBetween?: Array<any>;
    multipleOfMedianNotExists?: boolean;
    multipleOfMedianExists?: boolean;
    multipleOfMedianLessThan?: number;
    multipleOfMedianLessThanOrEqual?: number;
    multipleOfMedianGreaterThan?: number;
    multipleOfMedianGreaterThanOrEqual?: number;
    multipleOfMedianEqual?: number;
    multipleOfMedianNotEqual?: number;
    multipleOfMedianBetween?: Array<any>;
    multipleOfMedianNotBetween?: Array<any>;
    tumorProportionScoreNotExists?: boolean;
    tumorProportionScoreExists?: boolean;
    tumorProportionScore?: string;
    tumorProportionScoreNot?: string;
    tumorProportionScoreAnyOf?: Array<'TC0' | 'TC1' | 'TC2' | 'TC3'>;
    immuneCellScoreNotExists?: boolean;
    immuneCellScoreExists?: boolean;
    immuneCellScore?: string;
    immuneCellScoreNot?: string;
    immuneCellScoreAnyOf?: Array<'IC0' | 'IC1' | 'IC2' | 'IC3'>;
    combinedPositiveScoreNotExists?: boolean;
    combinedPositiveScoreExists?: boolean;
    combinedPositiveScoreLessThan?: number;
    combinedPositiveScoreLessThanOrEqual?: number;
    combinedPositiveScoreGreaterThan?: number;
    combinedPositiveScoreGreaterThanOrEqual?: number;
    combinedPositiveScoreEqual?: number;
    combinedPositiveScoreNotEqual?: number;
    combinedPositiveScoreBetween?: Array<any>;
    combinedPositiveScoreNotBetween?: Array<any>;
    immunohistochemicalScoreNotExists?: boolean;
    immunohistochemicalScoreExists?: boolean;
    immunohistochemicalScore?: string;
    immunohistochemicalScoreNot?: string;
    immunohistochemicalScoreAnyOf?: Array<'0' | '1+' | '2+' | '3+' | 'indeterminate'>;
    presenceNotExists?: boolean;
    presenceExists?: boolean;
    presence?: string;
    presenceNot?: string;
    presenceAnyOf?: Array<'positive' | 'negative' | 'indeterminate'>;
    nuclearExpressionStatusNotExists?: boolean;
    nuclearExpressionStatusExists?: boolean;
    nuclearExpressionStatus?: string;
    nuclearExpressionStatusNot?: string;
    nuclearExpressionStatusAnyOf?: Array<'intact' | 'loss' | 'indeterminate'>;
    relatedEntitiesIds?: string;
    relatedEntitiesIdsNot?: string;
    relatedEntitiesIdsContains?: string;
    relatedEntitiesIdsNotContains?: string;
    relatedEntitiesIdsBeginsWith?: string;
    relatedEntitiesIdsNotBeginsWith?: string;
    relatedEntitiesIdsEndsWith?: string;
    relatedEntitiesIdsNotEndsWith?: string;
    limit?: number;
    offset?: number;
}

export interface RevertTumorMarkerToHistoryEventRequestParams {
    tumorMarkerId: string;
    eventId: string;
}

export interface UpdateTumorMarkerByIdRequestParams {
    tumorMarkerId: string;
    tumorMarkerCreate: TumorMarkerCreate;
}


export interface TumorMarkersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Tumor Marker
     * 
* @param requestParameters
     */
    createTumorMarker(requestParameters: CreateTumorMarkerRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Tumor Marker
     * 
* @param requestParameters
     */
    deleteTumorMarkerById(requestParameters: DeleteTumorMarkerByIdRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Tumor Marker History Events
     * 
* @param requestParameters
     */
    getAllTumorMarkerHistoryEvents(requestParameters: GetAllTumorMarkerHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get Tumor Marker Analyte Details By Code
     * 
* @param requestParameters
     */
    getTumorMarkerAnalyteDetailsByCode(requestParameters: GetTumorMarkerAnalyteDetailsByCodeRequestParams, extraHttpRequestParams?: any): Observable<AnalyteDetails>;

    /**
     * Get Tumor Marker By Id
     * 
* @param requestParameters
     */
    getTumorMarkerById(requestParameters: GetTumorMarkerByIdRequestParams, extraHttpRequestParams?: any): Observable<TumorMarker>;

    /**
     * Get Tumor Marker History Event By Id
     * 
* @param requestParameters
     */
    getTumorMarkerHistoryEventById(requestParameters: GetTumorMarkerHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get All Tumor Markers Matching The Query
     * 
* @param requestParameters
     */
    getTumorMarkers(requestParameters: GetTumorMarkersRequestParams, extraHttpRequestParams?: any): Observable<PaginatedTumorMarker>;

    /**
     * Revert Tumor Marker To History Event
     * 
* @param requestParameters
     */
    revertTumorMarkerToHistoryEvent(requestParameters: RevertTumorMarkerToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Neoplastic Entity
     * 
* @param requestParameters
     */
    updateTumorMarkerById(requestParameters: UpdateTumorMarkerByIdRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
