/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ModifiedResource } from '../model/modified-resource';
// @ts-ignore
import { PaginatedVitals } from '../model/paginated-vitals';
// @ts-ignore
import { Vitals } from '../model/vitals';
// @ts-ignore
import { VitalsCreate } from '../model/vitals-create';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    VitalsServiceInterface,
    CreateVitalsRequestParams,
    DeleteVitalsByIdRequestParams,
    GetVitalsRequestParams,
    GetVitalsByIdRequestParams,
    UpdateVitalsByIdRequestParams
} from './vitals.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class VitalsService implements VitalsServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create Vitals
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVitals(requestParameters: CreateVitalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public createVitals(requestParameters: CreateVitalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public createVitals(requestParameters: CreateVitalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public createVitals(requestParameters: CreateVitalsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const vitalsCreate = requestParameters?.vitalsCreate;
        if (vitalsCreate === null || vitalsCreate === undefined) {
            throw new Error('Required parameter vitalsCreate was null or undefined when calling createVitals.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/vitals`;
        return this.httpClient.request<ModifiedResource>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: vitalsCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Vitals
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVitalsById(requestParameters: DeleteVitalsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteVitalsById(requestParameters: DeleteVitalsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteVitalsById(requestParameters: DeleteVitalsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteVitalsById(requestParameters: DeleteVitalsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const vitalsId = requestParameters?.vitalsId;
        if (vitalsId === null || vitalsId === undefined) {
            throw new Error('Required parameter vitalsId was null or undefined when calling deleteVitalsById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/vitals/${this.configuration.encodeParam({name: "vitalsId", value: vitalsId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Vitals Matching The Query
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVitals(requestParameters?: GetVitalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedVitals>;
    public getVitals(requestParameters?: GetVitalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedVitals>>;
    public getVitals(requestParameters?: GetVitalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedVitals>>;
    public getVitals(requestParameters?: GetVitalsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const bodyMassIndexNotExists = requestParameters?.bodyMassIndexNotExists;
        const bodyMassIndexExists = requestParameters?.bodyMassIndexExists;
        const bodyMassIndexLessThan = requestParameters?.bodyMassIndexLessThan;
        const bodyMassIndexLessThanOrEqual = requestParameters?.bodyMassIndexLessThanOrEqual;
        const bodyMassIndexGreaterThan = requestParameters?.bodyMassIndexGreaterThan;
        const bodyMassIndexGreaterThanOrEqual = requestParameters?.bodyMassIndexGreaterThanOrEqual;
        const bodyMassIndexEqual = requestParameters?.bodyMassIndexEqual;
        const bodyMassIndexNotEqual = requestParameters?.bodyMassIndexNotEqual;
        const bodyMassIndexBetween = requestParameters?.bodyMassIndexBetween;
        const bodyMassIndexNotBetween = requestParameters?.bodyMassIndexNotBetween;
        const id = requestParameters?.id;
        const idNot = requestParameters?.idNot;
        const idContains = requestParameters?.idContains;
        const idNotContains = requestParameters?.idNotContains;
        const idBeginsWith = requestParameters?.idBeginsWith;
        const idNotBeginsWith = requestParameters?.idNotBeginsWith;
        const idEndsWith = requestParameters?.idEndsWith;
        const idNotEndsWith = requestParameters?.idNotEndsWith;
        const caseId = requestParameters?.caseId;
        const caseIdNot = requestParameters?.caseIdNot;
        const caseIdContains = requestParameters?.caseIdContains;
        const caseIdNotContains = requestParameters?.caseIdNotContains;
        const caseIdBeginsWith = requestParameters?.caseIdBeginsWith;
        const caseIdNotBeginsWith = requestParameters?.caseIdNotBeginsWith;
        const caseIdEndsWith = requestParameters?.caseIdEndsWith;
        const caseIdNotEndsWith = requestParameters?.caseIdNotEndsWith;
        const dateBefore = requestParameters?.dateBefore;
        const dateAfter = requestParameters?.dateAfter;
        const dateOnOrBefore = requestParameters?.dateOnOrBefore;
        const dateOnOrAfter = requestParameters?.dateOnOrAfter;
        const dateOn = requestParameters?.dateOn;
        const dateNotOn = requestParameters?.dateNotOn;
        const dateBetween = requestParameters?.dateBetween;
        const dateNotBetween = requestParameters?.dateNotBetween;
        const heightNotExists = requestParameters?.heightNotExists;
        const heightExists = requestParameters?.heightExists;
        const heightLessThan = requestParameters?.heightLessThan;
        const heightLessThanOrEqual = requestParameters?.heightLessThanOrEqual;
        const heightGreaterThan = requestParameters?.heightGreaterThan;
        const heightGreaterThanOrEqual = requestParameters?.heightGreaterThanOrEqual;
        const heightEqual = requestParameters?.heightEqual;
        const heightNotEqual = requestParameters?.heightNotEqual;
        const heightBetween = requestParameters?.heightBetween;
        const heightNotBetween = requestParameters?.heightNotBetween;
        const weightNotExists = requestParameters?.weightNotExists;
        const weightExists = requestParameters?.weightExists;
        const weightLessThan = requestParameters?.weightLessThan;
        const weightLessThanOrEqual = requestParameters?.weightLessThanOrEqual;
        const weightGreaterThan = requestParameters?.weightGreaterThan;
        const weightGreaterThanOrEqual = requestParameters?.weightGreaterThanOrEqual;
        const weightEqual = requestParameters?.weightEqual;
        const weightNotEqual = requestParameters?.weightNotEqual;
        const weightBetween = requestParameters?.weightBetween;
        const weightNotBetween = requestParameters?.weightNotBetween;
        const bloodPressureSystolicNotExists = requestParameters?.bloodPressureSystolicNotExists;
        const bloodPressureSystolicExists = requestParameters?.bloodPressureSystolicExists;
        const bloodPressureSystolicLessThan = requestParameters?.bloodPressureSystolicLessThan;
        const bloodPressureSystolicLessThanOrEqual = requestParameters?.bloodPressureSystolicLessThanOrEqual;
        const bloodPressureSystolicGreaterThan = requestParameters?.bloodPressureSystolicGreaterThan;
        const bloodPressureSystolicGreaterThanOrEqual = requestParameters?.bloodPressureSystolicGreaterThanOrEqual;
        const bloodPressureSystolicEqual = requestParameters?.bloodPressureSystolicEqual;
        const bloodPressureSystolicNotEqual = requestParameters?.bloodPressureSystolicNotEqual;
        const bloodPressureSystolicBetween = requestParameters?.bloodPressureSystolicBetween;
        const bloodPressureSystolicNotBetween = requestParameters?.bloodPressureSystolicNotBetween;
        const bloodPressureDiastolicNotExists = requestParameters?.bloodPressureDiastolicNotExists;
        const bloodPressureDiastolicExists = requestParameters?.bloodPressureDiastolicExists;
        const bloodPressureDiastolicLessThan = requestParameters?.bloodPressureDiastolicLessThan;
        const bloodPressureDiastolicLessThanOrEqual = requestParameters?.bloodPressureDiastolicLessThanOrEqual;
        const bloodPressureDiastolicGreaterThan = requestParameters?.bloodPressureDiastolicGreaterThan;
        const bloodPressureDiastolicGreaterThanOrEqual = requestParameters?.bloodPressureDiastolicGreaterThanOrEqual;
        const bloodPressureDiastolicEqual = requestParameters?.bloodPressureDiastolicEqual;
        const bloodPressureDiastolicNotEqual = requestParameters?.bloodPressureDiastolicNotEqual;
        const bloodPressureDiastolicBetween = requestParameters?.bloodPressureDiastolicBetween;
        const bloodPressureDiastolicNotBetween = requestParameters?.bloodPressureDiastolicNotBetween;
        const temperatureNotExists = requestParameters?.temperatureNotExists;
        const temperatureExists = requestParameters?.temperatureExists;
        const temperatureLessThan = requestParameters?.temperatureLessThan;
        const temperatureLessThanOrEqual = requestParameters?.temperatureLessThanOrEqual;
        const temperatureGreaterThan = requestParameters?.temperatureGreaterThan;
        const temperatureGreaterThanOrEqual = requestParameters?.temperatureGreaterThanOrEqual;
        const temperatureEqual = requestParameters?.temperatureEqual;
        const temperatureNotEqual = requestParameters?.temperatureNotEqual;
        const temperatureBetween = requestParameters?.temperatureBetween;
        const temperatureNotBetween = requestParameters?.temperatureNotBetween;
        const limit = requestParameters?.limit;
        const offset = requestParameters?.offset;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bodyMassIndexNotExists !== undefined && bodyMassIndexNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexNotExists, 'body_mass_index.not.exists');
        }
        if (bodyMassIndexExists !== undefined && bodyMassIndexExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexExists, 'body_mass_index.exists');
        }
        if (bodyMassIndexLessThan !== undefined && bodyMassIndexLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexLessThan, 'body_mass_index.lessThan');
        }
        if (bodyMassIndexLessThanOrEqual !== undefined && bodyMassIndexLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexLessThanOrEqual, 'body_mass_index.lessThanOrEqual');
        }
        if (bodyMassIndexGreaterThan !== undefined && bodyMassIndexGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexGreaterThan, 'body_mass_index.greaterThan');
        }
        if (bodyMassIndexGreaterThanOrEqual !== undefined && bodyMassIndexGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexGreaterThanOrEqual, 'body_mass_index.greaterThanOrEqual');
        }
        if (bodyMassIndexEqual !== undefined && bodyMassIndexEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexEqual, 'body_mass_index.equal');
        }
        if (bodyMassIndexNotEqual !== undefined && bodyMassIndexNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bodyMassIndexNotEqual, 'body_mass_index.not.equal');
        }
        if (bodyMassIndexBetween) {
            bodyMassIndexBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'body_mass_index.between');
            })
        }
        if (bodyMassIndexNotBetween) {
            bodyMassIndexNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'body_mass_index.not.between');
            })
        }
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (idNot !== undefined && idNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNot, 'id.not');
        }
        if (idContains !== undefined && idContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idContains, 'id.contains');
        }
        if (idNotContains !== undefined && idNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotContains, 'id.not.contains');
        }
        if (idBeginsWith !== undefined && idBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idBeginsWith, 'id.beginsWith');
        }
        if (idNotBeginsWith !== undefined && idNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotBeginsWith, 'id.not.beginsWith');
        }
        if (idEndsWith !== undefined && idEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idEndsWith, 'id.endsWith');
        }
        if (idNotEndsWith !== undefined && idNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>idNotEndsWith, 'id.not.endsWith');
        }
        if (caseId !== undefined && caseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseId, 'caseId');
        }
        if (caseIdNot !== undefined && caseIdNot !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNot, 'caseId.not');
        }
        if (caseIdContains !== undefined && caseIdContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdContains, 'caseId.contains');
        }
        if (caseIdNotContains !== undefined && caseIdNotContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotContains, 'caseId.not.contains');
        }
        if (caseIdBeginsWith !== undefined && caseIdBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdBeginsWith, 'caseId.beginsWith');
        }
        if (caseIdNotBeginsWith !== undefined && caseIdNotBeginsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotBeginsWith, 'caseId.not.beginsWith');
        }
        if (caseIdEndsWith !== undefined && caseIdEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdEndsWith, 'caseId.endsWith');
        }
        if (caseIdNotEndsWith !== undefined && caseIdNotEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseIdNotEndsWith, 'caseId.not.endsWith');
        }
        if (dateBefore !== undefined && dateBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateBefore, 'date.before');
        }
        if (dateAfter !== undefined && dateAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateAfter, 'date.after');
        }
        if (dateOnOrBefore !== undefined && dateOnOrBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrBefore, 'date.onOrBefore');
        }
        if (dateOnOrAfter !== undefined && dateOnOrAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOnOrAfter, 'date.onOrAfter');
        }
        if (dateOn !== undefined && dateOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateOn, 'date.on');
        }
        if (dateNotOn !== undefined && dateNotOn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateNotOn, 'date.not.on');
        }
        if (dateBetween) {
            dateBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.between');
            })
        }
        if (dateNotBetween) {
            dateNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'date.not.between');
            })
        }
        if (heightNotExists !== undefined && heightNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightNotExists, 'height.not.exists');
        }
        if (heightExists !== undefined && heightExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightExists, 'height.exists');
        }
        if (heightLessThan !== undefined && heightLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightLessThan, 'height.lessThan');
        }
        if (heightLessThanOrEqual !== undefined && heightLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightLessThanOrEqual, 'height.lessThanOrEqual');
        }
        if (heightGreaterThan !== undefined && heightGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightGreaterThan, 'height.greaterThan');
        }
        if (heightGreaterThanOrEqual !== undefined && heightGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightGreaterThanOrEqual, 'height.greaterThanOrEqual');
        }
        if (heightEqual !== undefined && heightEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightEqual, 'height.equal');
        }
        if (heightNotEqual !== undefined && heightNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>heightNotEqual, 'height.not.equal');
        }
        if (heightBetween) {
            heightBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'height.between');
            })
        }
        if (heightNotBetween) {
            heightNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'height.not.between');
            })
        }
        if (weightNotExists !== undefined && weightNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightNotExists, 'weight.not.exists');
        }
        if (weightExists !== undefined && weightExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightExists, 'weight.exists');
        }
        if (weightLessThan !== undefined && weightLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightLessThan, 'weight.lessThan');
        }
        if (weightLessThanOrEqual !== undefined && weightLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightLessThanOrEqual, 'weight.lessThanOrEqual');
        }
        if (weightGreaterThan !== undefined && weightGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightGreaterThan, 'weight.greaterThan');
        }
        if (weightGreaterThanOrEqual !== undefined && weightGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightGreaterThanOrEqual, 'weight.greaterThanOrEqual');
        }
        if (weightEqual !== undefined && weightEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightEqual, 'weight.equal');
        }
        if (weightNotEqual !== undefined && weightNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>weightNotEqual, 'weight.not.equal');
        }
        if (weightBetween) {
            weightBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'weight.between');
            })
        }
        if (weightNotBetween) {
            weightNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'weight.not.between');
            })
        }
        if (bloodPressureSystolicNotExists !== undefined && bloodPressureSystolicNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicNotExists, 'bloodPressureSystolic.not.exists');
        }
        if (bloodPressureSystolicExists !== undefined && bloodPressureSystolicExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicExists, 'bloodPressureSystolic.exists');
        }
        if (bloodPressureSystolicLessThan !== undefined && bloodPressureSystolicLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicLessThan, 'bloodPressureSystolic.lessThan');
        }
        if (bloodPressureSystolicLessThanOrEqual !== undefined && bloodPressureSystolicLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicLessThanOrEqual, 'bloodPressureSystolic.lessThanOrEqual');
        }
        if (bloodPressureSystolicGreaterThan !== undefined && bloodPressureSystolicGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicGreaterThan, 'bloodPressureSystolic.greaterThan');
        }
        if (bloodPressureSystolicGreaterThanOrEqual !== undefined && bloodPressureSystolicGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicGreaterThanOrEqual, 'bloodPressureSystolic.greaterThanOrEqual');
        }
        if (bloodPressureSystolicEqual !== undefined && bloodPressureSystolicEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicEqual, 'bloodPressureSystolic.equal');
        }
        if (bloodPressureSystolicNotEqual !== undefined && bloodPressureSystolicNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureSystolicNotEqual, 'bloodPressureSystolic.not.equal');
        }
        if (bloodPressureSystolicBetween) {
            bloodPressureSystolicBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bloodPressureSystolic.between');
            })
        }
        if (bloodPressureSystolicNotBetween) {
            bloodPressureSystolicNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bloodPressureSystolic.not.between');
            })
        }
        if (bloodPressureDiastolicNotExists !== undefined && bloodPressureDiastolicNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicNotExists, 'bloodPressureDiastolic.not.exists');
        }
        if (bloodPressureDiastolicExists !== undefined && bloodPressureDiastolicExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicExists, 'bloodPressureDiastolic.exists');
        }
        if (bloodPressureDiastolicLessThan !== undefined && bloodPressureDiastolicLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicLessThan, 'bloodPressureDiastolic.lessThan');
        }
        if (bloodPressureDiastolicLessThanOrEqual !== undefined && bloodPressureDiastolicLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicLessThanOrEqual, 'bloodPressureDiastolic.lessThanOrEqual');
        }
        if (bloodPressureDiastolicGreaterThan !== undefined && bloodPressureDiastolicGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicGreaterThan, 'bloodPressureDiastolic.greaterThan');
        }
        if (bloodPressureDiastolicGreaterThanOrEqual !== undefined && bloodPressureDiastolicGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicGreaterThanOrEqual, 'bloodPressureDiastolic.greaterThanOrEqual');
        }
        if (bloodPressureDiastolicEqual !== undefined && bloodPressureDiastolicEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicEqual, 'bloodPressureDiastolic.equal');
        }
        if (bloodPressureDiastolicNotEqual !== undefined && bloodPressureDiastolicNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bloodPressureDiastolicNotEqual, 'bloodPressureDiastolic.not.equal');
        }
        if (bloodPressureDiastolicBetween) {
            bloodPressureDiastolicBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bloodPressureDiastolic.between');
            })
        }
        if (bloodPressureDiastolicNotBetween) {
            bloodPressureDiastolicNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'bloodPressureDiastolic.not.between');
            })
        }
        if (temperatureNotExists !== undefined && temperatureNotExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureNotExists, 'temperature.not.exists');
        }
        if (temperatureExists !== undefined && temperatureExists !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureExists, 'temperature.exists');
        }
        if (temperatureLessThan !== undefined && temperatureLessThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureLessThan, 'temperature.lessThan');
        }
        if (temperatureLessThanOrEqual !== undefined && temperatureLessThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureLessThanOrEqual, 'temperature.lessThanOrEqual');
        }
        if (temperatureGreaterThan !== undefined && temperatureGreaterThan !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureGreaterThan, 'temperature.greaterThan');
        }
        if (temperatureGreaterThanOrEqual !== undefined && temperatureGreaterThanOrEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureGreaterThanOrEqual, 'temperature.greaterThanOrEqual');
        }
        if (temperatureEqual !== undefined && temperatureEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureEqual, 'temperature.equal');
        }
        if (temperatureNotEqual !== undefined && temperatureNotEqual !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>temperatureNotEqual, 'temperature.not.equal');
        }
        if (temperatureBetween) {
            temperatureBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'temperature.between');
            })
        }
        if (temperatureNotBetween) {
            temperatureNotBetween.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'temperature.not.between');
            })
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/vitals`;
        return this.httpClient.request<PaginatedVitals>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Vitals By Id
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVitalsById(requestParameters: GetVitalsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Vitals>;
    public getVitalsById(requestParameters: GetVitalsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Vitals>>;
    public getVitalsById(requestParameters: GetVitalsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Vitals>>;
    public getVitalsById(requestParameters: GetVitalsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const vitalsId = requestParameters?.vitalsId;
        if (vitalsId === null || vitalsId === undefined) {
            throw new Error('Required parameter vitalsId was null or undefined when calling getVitalsById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/vitals/${this.configuration.encodeParam({name: "vitalsId", value: vitalsId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Vitals>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Vitals
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVitalsById(requestParameters: UpdateVitalsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ModifiedResource>;
    public updateVitalsById(requestParameters: UpdateVitalsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ModifiedResource>>;
    public updateVitalsById(requestParameters: UpdateVitalsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ModifiedResource>>;
    public updateVitalsById(requestParameters: UpdateVitalsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const vitalsId = requestParameters?.vitalsId;
        if (vitalsId === null || vitalsId === undefined) {
            throw new Error('Required parameter vitalsId was null or undefined when calling updateVitalsById.');
        }
        const vitalsCreate = requestParameters?.vitalsCreate;
        if (vitalsCreate === null || vitalsCreate === undefined) {
            throw new Error('Required parameter vitalsCreate was null or undefined when calling updateVitalsById.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (JWTAuth) required
        localVarCredential = this.configuration.lookupCredential('JWTAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/vitals/${this.configuration.encodeParam({name: "vitalsId", value: vitalsId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ModifiedResource>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: vitalsCreate,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
