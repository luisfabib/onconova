/**
 * POP API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ComorbiditiesAssessment } from '../model/models';
import { ComorbiditiesAssessmentCreate } from '../model/models';
import { ComorbiditiesPanel } from '../model/models';
import { HistoryEventWithSchema } from '../model/models';
import { ModifiedResource } from '../model/models';
import { PaginatedComorbiditiesAssessment } from '../model/models';
import { PaginatedHistoryEventWithSchema } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateComorbiditiesAssessmentRequestParams {
    comorbiditiesAssessmentCreate: ComorbiditiesAssessmentCreate;
}

export interface DeleteComorbiditiesAssessmentRequestParams {
    comorbiditiesAssessmentId: string;
}

export interface GetAllComorbiditiesAssessmentHistoryEventsRequestParams {
    comorbiditiesAssessmentId: string;
    limit?: number;
    offset?: number;
}

export interface GetComorbiditiesAssessmentByIdRequestParams {
    comorbiditiesAssessmentId: string;
}

export interface GetComorbiditiesAssessmentHistoryEventByIdRequestParams {
    comorbiditiesAssessmentId: string;
    eventId: string;
}

export interface GetComorbiditiesAssessmentsRequestParams {
    scoreNotExists?: boolean;
    scoreExists?: boolean;
    scoreLessThan?: number;
    scoreLessThanOrEqual?: number;
    scoreGreaterThan?: number;
    scoreGreaterThanOrEqual?: number;
    scoreEqual?: number;
    scoreNotEqual?: number;
    scoreBetween?: Array<any>;
    scoreNotBetween?: Array<any>;
    id?: string;
    idNot?: string;
    idContains?: string;
    idNotContains?: string;
    idBeginsWith?: string;
    idNotBeginsWith?: string;
    idEndsWith?: string;
    idNotEndsWith?: string;
    caseId?: string;
    caseIdNot?: string;
    caseIdContains?: string;
    caseIdNotContains?: string;
    caseIdBeginsWith?: string;
    caseIdNotBeginsWith?: string;
    caseIdEndsWith?: string;
    caseIdNotEndsWith?: string;
    dateBefore?: string;
    dateAfter?: string;
    dateOnOrBefore?: string;
    dateOnOrAfter?: string;
    dateOn?: string;
    dateNotOn?: string;
    dateBetween?: Array<any>;
    dateNotBetween?: Array<any>;
    indexConditionId?: string;
    indexConditionIdNot?: string;
    indexConditionIdContains?: string;
    indexConditionIdNotContains?: string;
    indexConditionIdBeginsWith?: string;
    indexConditionIdNotBeginsWith?: string;
    indexConditionIdEndsWith?: string;
    indexConditionIdNotEndsWith?: string;
    panelNotExists?: boolean;
    panelExists?: boolean;
    panel?: string;
    panelNot?: string;
    panelAnyOf?: Array<'Charlson' | 'Elixhauser' | 'NCI'>;
    presentConditionsNotExists?: boolean;
    presentConditionsExists?: boolean;
    presentConditions?: string;
    presentConditionsNot?: string;
    presentConditionsAnyOf?: Array<string>;
    presentConditionsNotAnyOf?: Array<string>;
    presentConditionsDescendantsOf?: string;
    presentConditionsAllOf?: Array<string>;
    presentConditionsNotAllOf?: Array<string>;
    absentConditionsNotExists?: boolean;
    absentConditionsExists?: boolean;
    absentConditions?: string;
    absentConditionsNot?: string;
    absentConditionsAnyOf?: Array<string>;
    absentConditionsNotAnyOf?: Array<string>;
    absentConditionsDescendantsOf?: string;
    absentConditionsAllOf?: Array<string>;
    absentConditionsNotAllOf?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface GetComorbiditiesPanelsByNameRequestParams {
    panel: string;
}

export interface RevertComorbiditiesAssessmentToHistoryEventRequestParams {
    comorbiditiesAssessmentId: string;
    eventId: string;
}

export interface UpdateComorbiditiesAssessmentRequestParams {
    comorbiditiesAssessmentId: string;
    comorbiditiesAssessmentCreate: ComorbiditiesAssessmentCreate;
}


export interface ComorbiditiesAssessmentsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Comorbidities Assessment
     * 
* @param requestParameters
     */
    createComorbiditiesAssessment(requestParameters: CreateComorbiditiesAssessmentRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Delete Comorbidities Assessment
     * 
* @param requestParameters
     */
    deleteComorbiditiesAssessment(requestParameters: DeleteComorbiditiesAssessmentRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get All Comorbidities Assessment History Events
     * 
* @param requestParameters
     */
    getAllComorbiditiesAssessmentHistoryEvents(requestParameters: GetAllComorbiditiesAssessmentHistoryEventsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedHistoryEventWithSchema>;

    /**
     * Get Comorbidities Assessment By Id
     * 
* @param requestParameters
     */
    getComorbiditiesAssessmentById(requestParameters: GetComorbiditiesAssessmentByIdRequestParams, extraHttpRequestParams?: any): Observable<ComorbiditiesAssessment>;

    /**
     * Get Comorbidities Assessment History Event By Id
     * 
* @param requestParameters
     */
    getComorbiditiesAssessmentHistoryEventById(requestParameters: GetComorbiditiesAssessmentHistoryEventByIdRequestParams, extraHttpRequestParams?: any): Observable<HistoryEventWithSchema>;

    /**
     * Get All Comorbidities Assessments Matching The Query
     * 
* @param requestParameters
     */
    getComorbiditiesAssessments(requestParameters: GetComorbiditiesAssessmentsRequestParams, extraHttpRequestParams?: any): Observable<PaginatedComorbiditiesAssessment>;

    /**
     * Get All Comorbidities Panels
     * 
*/
    getComorbiditiesPanels(extraHttpRequestParams?: any): Observable<Array<ComorbiditiesPanel>>;

    /**
     * Get Comorbidities Panel By Name
     * 
* @param requestParameters
     */
    getComorbiditiesPanelsByName(requestParameters: GetComorbiditiesPanelsByNameRequestParams, extraHttpRequestParams?: any): Observable<ComorbiditiesPanel>;

    /**
     * Revert Comorbidities Assessment To History Event
     * 
* @param requestParameters
     */
    revertComorbiditiesAssessmentToHistoryEvent(requestParameters: RevertComorbiditiesAssessmentToHistoryEventRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

    /**
     * Update Comorbidities Assessment
     * 
* @param requestParameters
     */
    updateComorbiditiesAssessment(requestParameters: UpdateComorbiditiesAssessmentRequestParams, extraHttpRequestParams?: any): Observable<ModifiedResource>;

}
