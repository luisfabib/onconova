# Generated by Django 5.1 on 2025-08-28 08:53

import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import onconova.core.auth.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_service_account', models.BooleanField(default=False, help_text='Whether the user is a technical service account', verbose_name='Is service account?')),
                ('title', models.CharField(blank=True, help_text='Personal title of the user', max_length=100, null=True, verbose_name='Title')),
                ('organization', models.CharField(blank=True, help_text='Organization to which the user belongs to', max_length=100, null=True, verbose_name='Organization')),
                ('department', models.CharField(blank=True, help_text='Department within an organization to which the user belongs to', max_length=100, null=True, verbose_name='Department')),
                ('access_level', models.IntegerField(default=0, help_text='Level of access of the user in terms of permissions', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name='Access level')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('access_level__gte', 0), ('access_level__lte', 4)), name='access_level_must_be_between_0_and_4')],
            },
            managers=[
                ('objects', onconova.core.auth.models.QueryablePropertiesUserManager()),
            ],
        ),
    ]
