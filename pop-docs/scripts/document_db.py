import os
import django
from django.apps import apps
from django.db import models

# Setup Django environment if needed
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pop.settings")
django.setup()

def generate_schema_markdown(output_path="./scripts/db_schema.md"):
    with open(output_path, "w", encoding="utf-8") as md_file:
        md_file.write("# Database Schema Documentation\n\n")
        md_file.write("This is an autogenerated documentation of the POP database tables.\n\n")

        for app_config in apps.get_app_configs():
            models_in_app = list(app_config.get_models())
            if not models_in_app:
                continue
            md_file.write(f"## {app_config.label.title()} Tables\n\n") 
            for model in models_in_app:
                md_file.write(f"### {model._meta.verbose_name.title()}\n\n")
                md_file.write(f"**Table Name**: `{model._meta.db_table}`\n\n")

                md_file.write("| Field Name | Type | Description | Relation | Constraints |\n")
                md_file.write("|------------|------|-------------|----------|--------------|\n")

                for field in model._meta.get_fields():
                    # Skip reverse relations
                    if field.auto_created and not field.concrete:
                        continue

                    field_name = field.name
                    field_type = field.get_internal_type()
                    if field_type.endswith('Field'):
                        field_type = field_type.replace('Field','').lower()

                    # Description from help_text or verbose_name
                    description = getattr(field, 'help_text', '') or str(getattr(field, 'verbose_name', '')).capitalize()

                    # Relations
                    if isinstance(field, models.ForeignKey):
                        relation = f"ForeignKey to `{field.related_model.__name__}`"
                    elif isinstance(field, models.OneToOneField):
                        relation = f"OneToOne to `{field.related_model.__name__}`"
                    elif isinstance(field, models.ManyToManyField):
                        relation = f"ManyToMany with `{field.related_model.__name__}`"
                    else:
                        relation = ""

                    # Constraints
                    constraints = []
                    if getattr(field, 'primary_key', False):
                        constraints.append("PRIMARY KEY")
                    if getattr(field, 'unique', False):
                        constraints.append("UNIQUE")
                    if getattr(field, 'null', False):
                        constraints.append("NULLABLE")
                    if not getattr(field, 'blank', True):
                        constraints.append("REQUIRED")

                    constraints_str = ", ".join(constraints) if constraints else ""

                    md_file.write(f"| `{field_name}` | `{field_type}` | {description} | {relation} | {constraints_str} |\n")

                md_file.write("\n---\n\n")

    print(f"âœ… Markdown schema generated at `{output_path}`")
    
if __name__ == "__main__":
    generate_schema_markdown()