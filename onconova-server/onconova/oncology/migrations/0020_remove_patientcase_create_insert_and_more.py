# Generated by Django 5.1 on 2025-08-27 10:01

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models

def set_patientcase_vital_status_alive(apps, schema_editor):
    PatientCase = apps.get_model('oncology', 'PatientCase')
    PatientCase.objects.all().update(
        date_of_death=None,
        cause_of_death=None,
        vital_status='alive'
    )

class Migration(migrations.Migration):

    dependencies = [
        ('oncology', '0019_alter_adverseevent_id_alter_adverseeventevent_id_and_more'),
        ('terminology', '0010_alter_adjunctivetherapyrole_id_and_more'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='patientcase',
            name='create_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='patientcase',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='patientcase',
            name='delete_delete',
        ),
        migrations.RemoveField(
            model_name='patientcase',
            name='is_deceased',
        ),
        migrations.RemoveField(
            model_name='patientcaseevent',
            name='is_deceased',
        ),
        migrations.AddField(
            model_name='patientcase',
            name='end_of_records',
            field=models.DateField(blank=True, help_text='Date of the last known record about the patient if lost to followup or vital status is unknown.', null=True, verbose_name='End of records'),
        ),
        migrations.AddField(
            model_name='patientcase',
            name='vital_status',
            field=models.CharField(choices=[('alive', 'Alive'), ('deceased', 'Deceased'), ('unknown', 'Unknown')], default='unknown', help_text='Whether the patient is known to be alive or decaeased or is unknkown.', max_length=20, verbose_name='Vital status'),
        ),
        migrations.RunPython(set_patientcase_vital_status_alive, reverse_code=migrations.RunPython.noop),
        migrations.AddField(
            model_name='patientcaseevent',
            name='end_of_records',
            field=models.DateField(blank=True, help_text='Date of the last known record about the patient if lost to followup or vital status is unknown.', null=True, verbose_name='End of records'),
        ),
        migrations.AddField(
            model_name='patientcaseevent',
            name='vital_status',
            field=models.CharField(choices=[('alive', 'Alive'), ('deceased', 'Deceased'), ('unknown', 'Unknown')], default='unknown', help_text='Whether the patient is known to be alive or decaeased or is unknkown.', max_length=20, null=True, verbose_name='Vital status'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (NEW."cause_of_death_id", NEW."clinical_center", NEW."clinical_identifier", NEW."consent_status", NEW."date_of_birth", NEW."date_of_death", NEW."end_of_records", NEW."external_source", NEW."external_source_id", NEW."gender_id", NEW."gender_identity_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."pseudoidentifier", NEW."race_id", NEW."sex_at_birth_id", NEW."vital_status"); RETURN NULL;', hash='6e1318e969f1db1222840864458487cb4eaa7d95', operation='INSERT', pgid='pgtrigger_create_insert_8b48e', table='oncology_patientcase', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (NEW."cause_of_death_id", NEW."clinical_center", NEW."clinical_identifier", NEW."consent_status", NEW."date_of_birth", NEW."date_of_death", NEW."end_of_records", NEW."external_source", NEW."external_source_id", NEW."gender_id", NEW."gender_identity_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."pseudoidentifier", NEW."race_id", NEW."sex_at_birth_id", NEW."vital_status"); RETURN NULL;', hash='9e80c2cbc1bbcd3ebf30d3ce5c9a71cede36f23b', operation='UPDATE', pgid='pgtrigger_update_update_66852', table='oncology_patientcase', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (OLD."cause_of_death_id", OLD."clinical_center", OLD."clinical_identifier", OLD."consent_status", OLD."date_of_birth", OLD."date_of_death", OLD."end_of_records", OLD."external_source", OLD."external_source_id", OLD."gender_id", OLD."gender_identity_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."pseudoidentifier", OLD."race_id", OLD."sex_at_birth_id", OLD."vital_status"); RETURN NULL;', hash='a63aadfba66e4fcc434ff0c44aa0ba5a2dd0785d', operation='DELETE', pgid='pgtrigger_delete_delete_5505c', table='oncology_patientcase', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('end_of_records__day', 1)), name='end_of_records_must_be_first_of_month', violation_error_message='End of records must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'alive'), ('date_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'unknown'), ('date_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'deceased'), ('date_of_death__isnull', True))), then=models.Value(False)), default=True), name='vital_status_date_of_death_combinations', violation_error_message='Invalid vital status and date of death combination'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'unknown'), ('end_of_records__isnull', True))), then=models.Value(False)), default=True), name='unknown_vital_status_requires_end_of_records', violation_error_message='Unknown vital status requires a valid end of records date.'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'alive'), ('cause_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'unknown'), ('cause_of_death__isnull', False))), then=models.Value(False)), default=True), name='cause_of_death_only_for_deceased', violation_error_message='Cause of death can only be assigned to deceased cases.'),
        ),
    ]
