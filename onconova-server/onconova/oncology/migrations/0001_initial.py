# Generated by Django 5.1 on 2025-02-12 13:58

import uuid

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.fields
import django.db.models.functions.text
import measurement.measures.distance
import measurement.measures.mass
from django.conf import settings
from django.db import migrations, models

import onconova.core.measures.fields
import onconova.core.measures.measures


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("terminology", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GenomicSignature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the patient's genomic signature was assessed.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Staging",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the staging was performed and recorded.",
                        verbose_name="Staging date",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TumorBoard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Date at which the tumor board took place and/or when the board provided a recommendation.",
                        verbose_name="Date",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recommendations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Recommendation(s) provided by the board regarding the patient's care",
                        related_name="+",
                        to="terminology.tumorboardrecommendation",
                        verbose_name="Recommendations",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NeoplasticEntity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("primary", "Primary"),
                            ("metastatic", "Metastatic"),
                            ("local_recurrence", "Local Recurrence"),
                            ("regional_recurrence", "Regional Recurrence"),
                        ],
                        help_text="Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.",
                        max_length=30,
                        verbose_name="Neoplastic relationship",
                    ),
                ),
                (
                    "assertion_date",
                    models.DateField(
                        help_text="The date on which the existence of the neoplasm(s) was first asserted or acknowledged",
                        verbose_name="Assertion date",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "differentitation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Morphologic differentitation characteristics of the neoplasm(s)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.histologydifferentiation",
                        verbose_name="Differentiation",
                    ),
                ),
                (
                    "laterality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Laterality qualifier for the location of the neoplasm(s)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.lateralityqualifier",
                        verbose_name="Laterality",
                    ),
                ),
                (
                    "morphology",
                    models.ForeignKey(
                        help_text="Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancermorphology",
                        verbose_name="Morphology",
                    ),
                ),
                (
                    "related_primary",
                    models.ForeignKey(
                        blank=True,
                        help_text="Reference to the primary neoplasm of which the neoplasm(s) originated from.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recurrences",
                        to="oncology.neoplasticentity",
                        verbose_name="Related primary neoplasm",
                    ),
                ),
                (
                    "topography",
                    models.ForeignKey(
                        help_text="Anatomical location of the neoplasm(s)",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancertopography",
                        verbose_name="Topography",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Neoplastic Entity",
                "verbose_name_plural": "Neoplastic Entities",
            },
        ),
        migrations.CreateModel(
            name="PatientCase",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "pseudoidentifier",
                    models.CharField(
                        editable=False,
                        help_text="Pseudoidentifier of the patient",
                        max_length=40,
                        unique=True,
                        verbose_name="Pseudoidentifier",
                    ),
                ),
                (
                    "clinical_center",
                    models.CharField(
                        help_text="Medical center where the patient data originally resides",
                        max_length=200,
                        verbose_name="Medical center",
                    ),
                ),
                (
                    "clinical_identifier",
                    models.CharField(
                        help_text="Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient",
                        max_length=100,
                        verbose_name="Clinical identifier",
                    ),
                ),
                (
                    "consent_status",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("revoked", "Revoked"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Status of the general consent by the patient for the use of their data for research purposes",
                        max_length=20,
                        verbose_name="Consent status",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        help_text="Anonymized date of birth (year/month). The day is set to the first day of the month by convention.",
                        verbose_name="Date of birth",
                    ),
                ),
                (
                    "is_deceased",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                models.Q(
                                    ("date_of_death__isnull", False),
                                    ("cause_of_death__isnull", False),
                                    _connector="OR",
                                ),
                                then=models.Value(True),
                            ),
                            default=models.Value(False),
                            output_field=models.BooleanField(),
                        ),
                        help_text="Indicates if the individual is deceased or not (determined automatically based on existence of a date of death)",
                        output_field=models.BooleanField(),
                        verbose_name="Is deceased",
                    ),
                ),
                (
                    "date_of_death",
                    models.DateField(
                        blank=True,
                        help_text="Anonymized date of death (year/month). The day is set to the first day of the month by convention.",
                        null=True,
                        verbose_name="Date of death",
                    ),
                ),
                (
                    "cause_of_death",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the cause of death.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.causeofdeath",
                        verbose_name="Cause of death",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "gender",
                    models.ForeignKey(
                        help_text="Gender for administrative purposes",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.administrativegender",
                        verbose_name="Gender",
                    ),
                ),
                (
                    "gender_identity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.genderidentity",
                        verbose_name="Gender identity",
                    ),
                ),
                (
                    "race",
                    models.ForeignKey(
                        blank=True,
                        help_text="Race of the patient",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.racecategory",
                        verbose_name="Race",
                    ),
                ),
                (
                    "sex_at_birth",
                    models.ForeignKey(
                        blank=True,
                        help_text="Sex assigned at birth",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.birthsex",
                        verbose_name="Birth sex",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdverseEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the adverse event ocurred.",
                        verbose_name="Event date",
                    ),
                ),
                (
                    "grade",
                    models.PositiveSmallIntegerField(
                        help_text="The grade associated with the severity of an adverse event, using CTCAE criteria.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Grade",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("resolved", "Resolved"),
                            ("resolved-with-sequelae", "Resolved With Sequelae"),
                            ("recovering", "Recovering"),
                            ("ongoing", "Ongoind"),
                            ("fatal", "Fatal"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="The date when the adverse event ended or returned to baseline.",
                        max_length=50,
                        verbose_name="Date resolved",
                    ),
                ),
                (
                    "date_resolved",
                    models.DateField(
                        blank=True,
                        help_text="The date when the adverse event ended or returned to baseline.",
                        null=True,
                        verbose_name="Date resolved",
                    ),
                ),
                (
                    "is_resolved",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                models.Q(
                                    ("outcome", "resolved"),
                                    ("outcome", "resolved-with-sequelae"),
                                    _connector="OR",
                                ),
                                then=models.Value(True),
                            ),
                            default=models.Value(False),
                            output_field=models.BooleanField(),
                        ),
                        help_text="Indicates whether the adverse event has been resolved",
                        output_field=models.BooleanField(),
                        verbose_name="Is resolved",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Classification of the adverse event using CTCAE criteria",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.adverseeventterm",
                        verbose_name="Adverse event",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who had the adverse event being recorded",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adverse_events",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AdverseEventMitigation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("adjustment", "Adjustment"),
                            ("pharmacological", "Pharmacological"),
                            ("procedure", "Procedire"),
                        ],
                        help_text="Type of mitigation employed",
                        max_length=50,
                        verbose_name="Mitigation category",
                    ),
                ),
                (
                    "adjustment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.adverseeventmitigationtreatmentadjustment",
                        verbose_name="Treatment Adjustment",
                    ),
                ),
                (
                    "adverse_event",
                    models.ForeignKey(
                        help_text="Adverse event to which this mitigation belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mitigations",
                        to="oncology.adverseevent",
                        verbose_name="Adverse event",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "drug",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.adverseeventmitigationdrug",
                        verbose_name="Pharmacological drug",
                    ),
                ),
                (
                    "management",
                    models.ForeignKey(
                        blank=True,
                        help_text="Management type of the adverse event mitigation",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.adverseeventmitigationmanagement",
                        verbose_name="Management",
                    ),
                ),
                (
                    "procedure",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.adverseeventmitigationprocedure",
                        verbose_name="Procedure",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AneuploidScore",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="aneuploid_score",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.SmallIntegerField(
                        help_text="The actual aneuploid score (AS) value in total altered arms",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(39),
                        ],
                        verbose_name="Value",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="HomologousRecombinationDeficiency",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="homologous_recombination_deficiency",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        blank=True,
                        help_text="Homologous recombination deficiency (HRD) score value",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Value",
                    ),
                ),
                (
                    "interpretation",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("positive", "Positive"),
                            ("negative", "Negative"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Homologous recombination deficiency (HRD) interpretation",
                        null=True,
                        verbose_name="Interpretation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="LossOfHeterozygosity",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="loss_of_heterozygosity",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        help_text="Loss of heterozygosity (LOH) as a percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Value",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="TumorMutationalBurden",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="tumor_mutational_burden",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        help_text="The actual tumor mutational burden (TMB) value in mutations/Mb",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Value",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low"),
                            ("high", "High"),
                            ("intermediate", "Intermediate"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Cclassification of the tumor mutational burden (TMB) status",
                        null=True,
                        verbose_name="Status",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="TumorNeoantigenBurden",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="tumor_neoantigen_burden",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        help_text="The actual tumor neoantigen burden (TNB) value in neoantigens/Mb",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Value",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="BreslowDepth",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="breslow",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "depth",
                    models.FloatField(
                        help_text="Breslow depth given in milimeters",
                        verbose_name="Breslow depth",
                    ),
                ),
                (
                    "is_ulcered",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the primary tumour presents ulceration",
                        null=True,
                        verbose_name="Ulcered",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="GenomicVariant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the genomic variant was detected and/or reported.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "gene_panel",
                    models.CharField(
                        blank=True,
                        help_text="Commercial or official name of the gene panel tested to identify the variant",
                        max_length=200,
                        null=True,
                        verbose_name="Gene panel",
                    ),
                ),
                (
                    "assessment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("present", "Present"),
                            ("absent", "Absent"),
                            ("no-call", "Nocall"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.",
                        max_length=15,
                        null=True,
                        verbose_name="Assessment",
                    ),
                ),
                (
                    "confidence",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low"),
                            ("high", "High"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.",
                        max_length=15,
                        null=True,
                        verbose_name="Confidence",
                    ),
                ),
                (
                    "clinical_relevance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pathogenic", "Pathogenic"),
                            ("likely_pathogenic", "Likely Pathogenic"),
                            ("uncertain_significance", "Uncertain Significance"),
                            ("ambiguous", "Ambiguous"),
                            ("likely_benign", "Likely Benign"),
                            ("benign", "Benign"),
                        ],
                        help_text="Classification of the clinical relevance or pathogenicity of the variant.",
                        null=True,
                        verbose_name="Clinical relevance",
                    ),
                ),
                (
                    "is_vus",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                models.Q(("clinical_relevance__isnull", True)),
                                then=models.Value(None),
                            ),
                            models.When(
                                models.Q(
                                    ("clinical_relevance", "uncertain_significance")
                                ),
                                then=models.Value(True),
                            ),
                            default=models.Value(False),
                            output_field=models.BooleanField(),
                        ),
                        help_text="Indicates if the variant is of unknown signfiance (determined automatically based on the clinical relevance classification)",
                        null=True,
                        output_field=models.BooleanField(),
                        verbose_name="Is pathogenic",
                    ),
                ),
                (
                    "is_pathogenic",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                models.Q(("clinical_relevance__isnull", True)),
                                then=models.Value(None),
                            ),
                            models.When(
                                models.Q(
                                    ("clinical_relevance", "likely_pathogenic"),
                                    ("clinical_relevance", "pathogenic"),
                                    _connector="OR",
                                ),
                                then=models.Value(True),
                            ),
                            default=models.Value(False),
                            output_field=models.BooleanField(),
                        ),
                        help_text="Indicates if the variant is pathogenic (determined automatically based on the clinical relevance classification)",
                        output_field=models.BooleanField(),
                        verbose_name="Is pathogenic",
                    ),
                ),
                (
                    "cytogenetic_location",
                    models.CharField(
                        blank=True,
                        help_text="The genetic address of the variant specifying the relevant chromosomal region.",
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(?:[1-9]|1[0-9]|2[0-2]|X|Y)([pq])(\\d+)(\\d+)(?:\\.(\\d+))?$",
                                "The string should be a valid cytogenetic location (chromosomal locus).",
                            )
                        ],
                        verbose_name="Cytogenetic location",
                    ),
                ),
                (
                    "genomic_refseq",
                    models.CharField(
                        blank=True,
                        help_text="\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NC_...' or 'NG...'), and LRG ('LRG...')",
                        max_length=200,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(?:NG|NC|LRG)(.*)$",
                                "The string should be a valid transcript RefSeq identifier.",
                            )
                        ],
                        verbose_name="Genomic RefSeq",
                    ),
                ),
                (
                    "transcript_refseq",
                    models.CharField(
                        blank=True,
                        help_text="\n            Identifier the transcript reference sequence, which includes transcribed and non transcribed stretches. \n            Can be an NCBI's RefSeq ('NM_...' or 'NG...'), Ensembl ('ENST...'), and LRG ('LRG...' plus 't1' to indicate transcript)",
                        max_length=200,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(?:NM|NG|ENST|LRG)(.*)$",
                                "The string should be a valid transcript RefSeq identifier.",
                            )
                        ],
                        verbose_name="Transcript RefSeq",
                    ),
                ),
                (
                    "coding_hgvs",
                    models.CharField(
                        blank=True,
                        help_text="Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(.*):c\\.(.*)$",
                                "The string should be a valid coding DNA HGVS expression.",
                            )
                        ],
                        verbose_name="Coding DNA change expression (cHGVS)",
                    ),
                ),
                (
                    "protein_hgvs",
                    models.CharField(
                        blank=True,
                        help_text="Description of the protein (aminoacid) sequence change using a valid HGVS-formatted expression, e.g. NP_000050.2:p.(Asn1836Lys)",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(.*):p\\.(.*)$",
                                "The string should be a valid protein HGVS expression.",
                            )
                        ],
                        verbose_name="Protein/aminoacid change expression (pHGVS)",
                    ),
                ),
                (
                    "genomic_hgvs",
                    models.CharField(
                        blank=True,
                        help_text="Description of the genomic (gDNA) sequence change using a valid HGVS-formatted expression, e.g. NC_000016.9:g.2124200_2138612dup",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(.*):g\\.(.*)$",
                                "The string should be a valid genomic HGVS expression.",
                            )
                        ],
                        verbose_name="Genomic change expression (gHGVS)",
                    ),
                ),
                (
                    "copy_number",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.",
                        null=True,
                        verbose_name="Copy number",
                    ),
                ),
                (
                    "allele_frequency",
                    models.FloatField(
                        blank=True,
                        help_text="The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Allele frequency",
                    ),
                ),
                (
                    "allele_depth",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.",
                        null=True,
                        verbose_name="Allele depth (reads)",
                    ),
                ),
                (
                    "exact_genomic_coordinates",
                    django.contrib.postgres.fields.ranges.BigIntegerRangeField(
                        blank=True,
                        help_text='The exact integer-based genomic coordinates of the start and end of the variant region. "High" can be omitted for single nucleotide variants.',
                        null=True,
                        verbose_name="Exact genomic coordinates",
                    ),
                ),
                (
                    "inner_genomic_coordinates",
                    django.contrib.postgres.fields.ranges.BigIntegerRangeField(
                        blank=True,
                        help_text="The genomic coordinates of the narrowest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
                        null=True,
                        verbose_name="Inner genomic coordinates",
                    ),
                ),
                (
                    "outer_genomic_coordinates",
                    django.contrib.postgres.fields.ranges.BigIntegerRangeField(
                        blank=True,
                        help_text="The genomic coordinates of the widest genomic range in which the variant might reside. Used when the exact boundaries of the variant are not clear.",
                        null=True,
                        verbose_name="Outer genomic coordinates",
                    ),
                ),
                (
                    "clinvar",
                    models.CharField(
                        blank=True,
                        help_text="Accession number in the ClinVar variant database, given for cross-reference.",
                        null=True,
                        verbose_name="ClinVar accession number",
                    ),
                ),
                (
                    "aminoacid_change_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the amino acid change type",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.aminoacidchangetype",
                        verbose_name="Aminoacid change type",
                    ),
                ),
                (
                    "analysis_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Analysis method used to detect the variant",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.structuralvariantanalysismethod",
                        verbose_name="Analysis method",
                    ),
                ),
                (
                    "chromosomes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Chromosome(s) affected by this variant",
                        related_name="+",
                        to="terminology.chromosomeidentifier",
                        verbose_name="Chromosome(s)",
                    ),
                ),
                (
                    "coordinate_system",
                    models.ForeignKey(
                        blank=True,
                        help_text="Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.genomiccoordinatesystem",
                        verbose_name="Coordinate system",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dna_change_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the DNA change type of the variant.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.dnachangetype",
                        verbose_name="Coding DNA change type",
                    ),
                ),
                (
                    "genes",
                    models.ManyToManyField(
                        help_text="Gene(s) affected by this variant",
                        related_name="+",
                        to="terminology.gene",
                        verbose_name="Gene(s)",
                    ),
                ),
                (
                    "genome_assembly_version",
                    models.ForeignKey(
                        blank=True,
                        help_text="The reference genome assembly versionused in this analysis.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.referencegenomebuild",
                        verbose_name="Genome assembly version",
                    ),
                ),
                (
                    "inheritance",
                    models.ForeignKey(
                        blank=True,
                        help_text="Variant inheritance origin (if known).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.variantinheritance",
                        verbose_name="Inheritance",
                    ),
                ),
                (
                    "molecular_consequence",
                    models.ForeignKey(
                        blank=True,
                        help_text="The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.molecularconsequence",
                        verbose_name="Molecular consequence",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "zygosity",
                    models.ForeignKey(
                        blank=True,
                        help_text="The observed level of occurrence of the variant in the set of chromosomes.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.zygosity",
                        verbose_name="Zygosity",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who' genomic variant is described",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="genomic_variants",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnspecifiedTumorBoard",
            fields=[
                (
                    "tumor_board",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="unspecified",
                        serialize=False,
                        to="oncology.tumorboard",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.tumorboard",),
        ),
        migrations.AddField(
            model_name="tumorboard",
            name="related_entities",
            field=models.ManyToManyField(
                help_text="References to the neoplastic entities that were the focus of the tumor board.",
                related_name="+",
                to="oncology.neoplasticentity",
                verbose_name="Related neoplastic entities",
            ),
        ),
        migrations.AddField(
            model_name="staging",
            name="staged_entities",
            field=models.ManyToManyField(
                help_text="References to the neoplastic entities that were the focus of the staging.",
                related_name="stagings",
                to="oncology.neoplasticentity",
                verbose_name="Staged neoplastic entities",
            ),
        ),
        migrations.AddField(
            model_name="tumorboard",
            name="case",
            field=models.ForeignKey(
                help_text="Indicates the case of the patient which was discussed at the tumor board",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tumor_boards",
                to="oncology.patientcase",
                verbose_name="Patient case",
            ),
        ),
        migrations.AddField(
            model_name="staging",
            name="case",
            field=models.ForeignKey(
                help_text="Indicates the case of the patient who's cancer is staged",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stagings",
                to="oncology.patientcase",
                verbose_name="Patient case",
            ),
        ),
        migrations.AddField(
            model_name="neoplasticentity",
            name="case",
            field=models.ForeignKey(
                help_text="Indicates the case of the patient who's neoplasm(s) are recorded",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="neoplastic_entities",
                to="oncology.patientcase",
                verbose_name="Patient case",
            ),
        ),
        migrations.CreateModel(
            name="Lifestyle",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the patient's lifetyle was assessed and recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "smoking_packyears",
                    models.FloatField(
                        blank=True,
                        help_text="Smoking pack-years (if applicable)",
                        null=True,
                        verbose_name="Smoking packyears",
                    ),
                ),
                (
                    "smoking_quited",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Estimated time since quitting smoking (if applicable)",
                        measurement=onconova.core.measures.measures.Time,
                        null=True,
                        verbose_name="Time since quitted smoking",
                    ),
                ),
                (
                    "night_sleep",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Estimated average sleep time per night",
                        measurement=onconova.core.measures.measures.Time,
                        null=True,
                        verbose_name="Night sleep",
                    ),
                ),
                (
                    "alcohol_consumption",
                    models.ForeignKey(
                        blank=True,
                        help_text="Frequency of alcohol consumption",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.alcoholconsumptionfrequency",
                        verbose_name="Alcohol consumption",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exposures",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Environmental or occupational exposures to hazards or carcinogenic agents",
                        related_name="+",
                        to="terminology.exposureagent",
                        verbose_name="Exposures",
                    ),
                ),
                (
                    "recreational_drugs",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Any recreational drug(s) used by the patient",
                        related_name="+",
                        to="terminology.recreationaldrug",
                        verbose_name="Recreational drugs",
                    ),
                ),
                (
                    "smoking_status",
                    models.ForeignKey(
                        blank=True,
                        help_text="Frequency of alcohol consumption",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.smokingstatus",
                        verbose_name="Alcohol consumption",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's lifestyle is assesed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lifestyles",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="genomicsignature",
            name="case",
            field=models.ForeignKey(
                help_text="Indicates the case of the patient who's lifestyle is assesed",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="genomic_signatures",
                to="oncology.patientcase",
                verbose_name="Patient case",
            ),
        ),
        migrations.CreateModel(
            name="FamilyHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the patient's family history was assessed and recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "had_cancer",
                    models.BooleanField(
                        help_text="Whether the family member has a history of cancer",
                        verbose_name="Had cancer",
                    ),
                ),
                (
                    "contributed_to_death",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the cancer contributed to the cause of death of the family member",
                        null=True,
                        verbose_name="Contributed to death",
                    ),
                ),
                (
                    "onset_age",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Age at which the family member's cancer manifested",
                        null=True,
                        verbose_name="Onset age",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "morphology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Morphology of the family member's cancer (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancermorphology",
                        verbose_name="Morphology",
                    ),
                ),
                (
                    "relationship",
                    models.ForeignKey(
                        help_text="Relationship to the patient",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.familymembertype",
                        verbose_name="Relationship",
                    ),
                ),
                (
                    "topography",
                    models.ForeignKey(
                        blank=True,
                        help_text="Estimated or actual topography of the family member's cancer",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancertopography",
                        verbose_name="Topography",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's family's history is being recorded",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="family_histories",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComorbiditiesAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the patient's comorbidities were assessed and recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "panel",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Charlson", "Charlson"),
                            ("Elixhauser", "Elixhauser"),
                            ("NCI", "Nci"),
                        ],
                        help_text="Comorbidities panel",
                        max_length=30,
                        null=True,
                        verbose_name="Panel",
                    ),
                ),
                (
                    "absent_conditions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Absent comorbid conditions",
                        related_name="+",
                        to="terminology.icd10condition",
                        verbose_name="Absent comorbid conditions",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "present_conditions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Present comorbid conditions",
                        related_name="+",
                        to="terminology.icd10condition",
                        verbose_name="Present comorbid conditions",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "indexCondition",
                    models.ForeignKey(
                        help_text="The primary neoplastic entity against which comorbidities are assessed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comorbidities",
                        to="oncology.neoplasticentity",
                        verbose_name="Index neoplastic entity",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's comorbidities are being recorded",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comorbidities",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientCaseDataCompletion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("comorbidities-assessments", "Comorbidities Assessments"),
                            ("family-histories", "Family Histories"),
                            ("genomic-signatures", "Genomic Signatures"),
                            ("genomic-variants", "Genomic Variants"),
                            ("lifestyles", "Lifestyles"),
                            ("comorbidities", "Comorbidities"),
                            ("neoplastic-entities", "Neoplastic Entities"),
                            ("performance-status", "Performance Status"),
                            ("radiotherapies", "Radiotherapies"),
                            ("risk-assessments", "Risk Assessments"),
                            ("stagings", "Stagins"),
                            ("surgeries", "Surgeries"),
                            ("systemic-therapies", "Systemic Therapies"),
                            ("tumor-markers", "Tumor Markers"),
                            ("vitals", "Vitals"),
                            ("tumor-board-reviews", "Tumor Board Reviews"),
                            ("adverse-events", "Adverse Events"),
                            ("therapy-responses", "Therapy Responses"),
                        ],
                        help_text="Indicates the categories of a patient case, whose data entries are deemed to be complete and/or up-to-date with the primary records.",
                        max_length=500,
                        verbose_name="Finalized data category",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Patient case who's data category has been marked as completed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completed_data_categories",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PerformanceStatus",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the performance score was performed and recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "ecog_score",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="ECOG Performance Status Score",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="ECOG Score",
                    ),
                ),
                (
                    "karnofsky_score",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Karnofsky Performance Status Score",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Karnofsky Score",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's performance status is assesed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_status",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Radiotherapy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "period",
                    django.contrib.postgres.fields.ranges.DateRangeField(
                        help_text="Clinically-relevant period during which the radiotherapy was administered to the patient.",
                        verbose_name="Treatment period",
                    ),
                ),
                (
                    "sessions",
                    models.PositiveIntegerField(
                        help_text="The total number of radiotherapy sessions over the treatment period.",
                        verbose_name="Total sessions",
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("curative", "Curative"),
                            ("palliative", "Palliative"),
                        ],
                        help_text="Treatment intent of the system therapy",
                        max_length=30,
                        verbose_name="Intent",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who received the radiotherapy",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="radiotherapies",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "targeted_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that were targeted by the radiotherapy",
                        related_name="radiotherapies",
                        to="oncology.neoplasticentity",
                        verbose_name="Targeted neoplastic entities",
                    ),
                ),
                (
                    "termination_reason",
                    models.ForeignKey(
                        blank=True,
                        help_text="Explanation for the premature or planned termination of the radiotherapy",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.treatmentterminationreason",
                        verbose_name="Termination reason",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RadiotherapyDosage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "fractions",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The total number of radiotherapy fractions delivered over the treatment period.",
                        null=True,
                        verbose_name="Total fractions",
                    ),
                ),
                (
                    "dose",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Total radiation dose delivered over the full radiotherapy course",
                        measurement=onconova.core.measures.measures.RadiationDose,
                        null=True,
                        verbose_name="Total radiation dose",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "irradiated_volume",
                    models.ForeignKey(
                        help_text="Anatomical location of the irradiated volume",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.radiotherapytreatmentlocation",
                        verbose_name="Irradiated volume",
                    ),
                ),
                (
                    "irradiated_volume_morphology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Morphology of the anatomical location of the irradiated volume",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.radiotherapyvolumetype",
                        verbose_name="Irradiated volume morphology",
                    ),
                ),
                (
                    "irradiated_volume_qualifier",
                    models.ForeignKey(
                        blank=True,
                        help_text="General qualifier for the anatomical location of the irradiated volume",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.radiotherapytreatmentlocationqualifier",
                        verbose_name="Irradiated volume qualifier",
                    ),
                ),
                (
                    "radiotherapy",
                    models.ForeignKey(
                        help_text="Indicates the radoptherapy where this dosage was delivered",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dosages",
                        to="oncology.radiotherapy",
                        verbose_name="Radiotherapy",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RadiotherapySetting",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modality",
                    models.ForeignKey(
                        help_text="Modality of external beam or brachytherapy radiation procedures",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.radiotherapymodality",
                        verbose_name="Modality",
                    ),
                ),
                (
                    "radiotherapy",
                    models.ForeignKey(
                        help_text="Indicates the radoptherapy where this dosage was delivered",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to="oncology.radiotherapy",
                        verbose_name="Radiotherapy",
                    ),
                ),
                (
                    "technique",
                    models.ForeignKey(
                        help_text="Technique of external beam or brachytherapy radiation procedures",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.radiotherapytechnique",
                        verbose_name="Technique",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RiskAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the risk assessment was performed and recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        blank=True,
                        help_text="Quantitative score used to classify the risk",
                        null=True,
                        verbose_name="Score",
                    ),
                ),
                (
                    "assessed_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that were assessed to estimate the risk.",
                        related_name="risk_assessments",
                        to="oncology.neoplasticentity",
                        verbose_name="Assessed neoplastic entities",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's cancer risk is assesed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        help_text="Indicates the method or type of risk assessment",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancerriskassessmentmethod",
                        verbose_name="Assessment methodology",
                    ),
                ),
                (
                    "risk",
                    models.ForeignKey(
                        help_text="Assessed risk",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancerriskassessmentclassification",
                        verbose_name="Risk",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Surgery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date of the surgical procedure.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("curative", "Curative"),
                            ("palliative", "Palliative"),
                        ],
                        help_text="Therapeutic intent of the surgery",
                        max_length=30,
                        verbose_name="Intent",
                    ),
                ),
                (
                    "bodysite",
                    models.ForeignKey(
                        blank=True,
                        help_text="Anatomical location of the surgery",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancertopography",
                        verbose_name="Anatomical location",
                    ),
                ),
                (
                    "bodysite_laterality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Laterality for the anatomical location of the surgery",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.lateralityqualifier",
                        verbose_name="Anatomical location laterality",
                    ),
                ),
                (
                    "bodysite_qualifier",
                    models.ForeignKey(
                        blank=True,
                        help_text="General qualifier for the anatomical location of the surgery",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.bodylocationqualifier",
                        verbose_name="Anatomical location qualifier",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who received the surgical procedure",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="surgeries",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "outcome",
                    models.ForeignKey(
                        blank=True,
                        help_text="The outcome of the surgery",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.procedureoutcome",
                        verbose_name="Outcome",
                    ),
                ),
                (
                    "procedure",
                    models.ForeignKey(
                        help_text="The specific surgical procedure that was performed",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.surgicalprocedure",
                        verbose_name="Surgical procedure",
                    ),
                ),
                (
                    "targeted_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that were targeted by the surgery",
                        related_name="surgeries",
                        to="oncology.neoplasticentity",
                        verbose_name="Targeted neoplastic entities",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SystemicTherapy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "period",
                    django.contrib.postgres.fields.ranges.DateRangeField(
                        help_text="Clinically-relevant period during which the therapy was administered to the patient.",
                        verbose_name="Treatment period",
                    ),
                ),
                (
                    "cycles",
                    models.PositiveIntegerField(
                        help_text="The total number of treatment cycles during the treatment period.",
                        verbose_name="Cycles",
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("curative", "Curative"),
                            ("palliative", "Palliative"),
                        ],
                        help_text="Treatment intent of the system therapy",
                        max_length=30,
                        verbose_name="Intent",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who received the systemic therapy",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="systemic_therapies",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Indicates the role of this therapy in the overall treatment strategy.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.treatmentcategory",
                        verbose_name="Treatment Role",
                    ),
                ),
                (
                    "targeted_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that were targeted by the systemic therapy",
                        related_name="systemic_therapies",
                        to="oncology.neoplasticentity",
                        verbose_name="Targeted neoplastic entities",
                    ),
                ),
                (
                    "termination_reason",
                    models.ForeignKey(
                        blank=True,
                        help_text="Explanation for the premature or planned termination of the systemic therapy",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.treatmentterminationreason",
                        verbose_name="Termination reason",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SystemicTherapyMedication",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "used_offlabel",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates whether a medication was used off-label at the time of administration",
                        null=True,
                        verbose_name="Off-label use",
                    ),
                ),
                (
                    "within_soc",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates whether a medication was within standard of care (SOC) at the time of administration.",
                        null=True,
                        verbose_name="Within SOC",
                    ),
                ),
                (
                    "dosage_mass_concentration",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage of the medication expressed in mass concentration (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.MassConcentration,
                        null=True,
                        verbose_name="Dosage - Mass concentration",
                    ),
                ),
                (
                    "dosage_mass",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage of the medication expressed in a fixed mass (if revelant/appliccable)",
                        measurement=measurement.measures.mass.Mass,
                        null=True,
                        verbose_name="Dosage - Fixed Mass",
                    ),
                ),
                (
                    "dosage_volume",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage of the medication expressed in a volume (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.Volume,
                        null=True,
                        verbose_name="Dosage - Volume",
                    ),
                ),
                (
                    "dosage_mass_surface",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.MassPerArea,
                        null=True,
                        verbose_name="Dosage - Mass per body surface",
                    ),
                ),
                (
                    "dosage_rate_mass_concentration",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.MassConcentrationPerTime,
                        null=True,
                        verbose_name="Dosage rate - Mass concentration",
                    ),
                ),
                (
                    "dosage_rate_mass",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.MassPerTime,
                        null=True,
                        verbose_name="Dosage rate - Fixed Mass",
                    ),
                ),
                (
                    "dosage_rate_volume",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage rate of the medication expressed in a volume (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.VolumePerTime,
                        null=True,
                        verbose_name="Dosage rate - Volume",
                    ),
                ),
                (
                    "dosage_rate_mass_surface",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)",
                        measurement=onconova.core.measures.measures.MassPerAreaPerTime,
                        null=True,
                        verbose_name="Dosage rate - Mass per body surface",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "drug",
                    models.ForeignKey(
                        help_text="Antineoplastic drug/medication administered to the patient",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.antineoplasticagent",
                        verbose_name="Antineoplastic Drug",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        blank=True,
                        help_text="Drug administration route",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.dosageroute",
                        verbose_name="Route",
                    ),
                ),
                (
                    "systemic_therapy",
                    models.ForeignKey(
                        help_text="The systemic therapy to which this medication belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medications",
                        to="oncology.systemictherapy",
                        verbose_name="Systemic therapy",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AdverseEventSuspectedCause",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "causality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("unrelated", "Unrelated"),
                            ("unlikely-related", "Unlekely Related"),
                            ("possibly-related", "Possibly Related"),
                            ("probably-related", "Probably Related"),
                            ("definitely-related", "Definitely Related"),
                            ("conditionally-related", "Conditionally Related"),
                        ],
                        help_text="Assessment of the potential causality",
                        max_length=50,
                        null=True,
                        verbose_name="Causality",
                    ),
                ),
                (
                    "adverse_event",
                    models.ForeignKey(
                        help_text="Adverse event to which this suspected cause belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suspected_causes",
                        to="oncology.adverseevent",
                        verbose_name="Adverse event",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "radiotherapy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Radiotherapy suspected to be the cause of the adverse event",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adverse_events",
                        to="oncology.radiotherapy",
                        verbose_name="Suspected radiotherapy",
                    ),
                ),
                (
                    "surgery",
                    models.ForeignKey(
                        blank=True,
                        help_text="Surgery suspected to be the cause of the adverse event",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adverse_events",
                        to="oncology.surgery",
                        verbose_name="Suspected surgery",
                    ),
                ),
                (
                    "systemic_therapy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Systemic therapy suspected to be the cause of the adverse event",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adverse_events",
                        to="oncology.systemictherapy",
                        verbose_name="Suspected systemic therapy",
                    ),
                ),
                (
                    "medication",
                    models.ForeignKey(
                        blank=True,
                        help_text="Systemic therapy medication suspected to be the cause of the adverse event",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adverse_events",
                        to="oncology.systemictherapymedication",
                        verbose_name="Suspected systemic therapy medication",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TherapyLine",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "ordinal",
                    models.PositiveIntegerField(
                        help_text="Number indicating the sequence in which this block of treatments were administered to the patient",
                        verbose_name="Line ordinal number",
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("curative", "Curative"),
                            ("palliative", "Palliative"),
                        ],
                        help_text="Treatment intent of the system therapy",
                        max_length=30,
                        verbose_name="Intent",
                    ),
                ),
                (
                    "progression_date",
                    models.DateField(
                        blank=True,
                        help_text="Date at which progression was first detected, if applicable",
                        null=True,
                        verbose_name="Begin of progression",
                    ),
                ),
                (
                    "label",
                    models.GeneratedField(
                        db_persist=True,
                        expression=django.db.models.functions.text.Concat(
                            django.db.models.functions.text.Upper(
                                django.db.models.functions.text.Left("intent", 1)
                            ),
                            models.Value("LoT"),
                            "ordinal",
                            output_field=django.db.models.fields.CharField,
                        ),
                        output_field=models.CharField(),
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient to whom this therapy line is associated",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="therapy_lines",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="systemictherapy",
            name="therapy_line",
            field=models.ForeignKey(
                blank=True,
                help_text="Therapy line to which the systemic therapy is assigned to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="systemic_therapies",
                to="oncology.therapyline",
                verbose_name="Therapy line",
            ),
        ),
        migrations.AddField(
            model_name="surgery",
            name="therapy_line",
            field=models.ForeignKey(
                blank=True,
                help_text="Therapy line to which the surgery is assigned to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="surgeries",
                to="oncology.therapyline",
                verbose_name="Therapy line",
            ),
        ),
        migrations.AddField(
            model_name="radiotherapy",
            name="therapy_line",
            field=models.ForeignKey(
                blank=True,
                help_text="Therapy line to which the radiotherapy is assigned to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="radiotherapies",
                to="oncology.therapyline",
                verbose_name="Therapy line",
            ),
        ),
        migrations.CreateModel(
            name="TreatmentResponse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date of the treatment response assessment",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "recist_interpreted",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates whether the RECIST value was interpreted or taken from the radiology report",
                        null=True,
                        verbose_name="RECIST Interpreted?",
                    ),
                ),
                (
                    "assessed_bodysites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Anatomical location assessed to determine the treatment response",
                        related_name="+",
                        to="terminology.observationbodysite",
                        verbose_name="Assessed anatomical location",
                    ),
                ),
                (
                    "assessed_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that were assesed for treatment response",
                        related_name="treatment_responses",
                        to="oncology.neoplasticentity",
                        verbose_name="Assessed neoplastic entities",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's treatment response is asseessed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="treatment_responses",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        help_text="Method used to assess and classify the treatment response",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancertreatmentresponseobservationmethod",
                        verbose_name="Assessment method",
                    ),
                ),
                (
                    "recist",
                    models.ForeignKey(
                        help_text="The classification of the treatment response according to RECIST",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.cancertreatmentresponse",
                        verbose_name="RECIST",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TumorMarker",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the tumor marker was analyzed.",
                        verbose_name="Date",
                    ),
                ),
                (
                    "mass_concentration",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Mass concentration of the analyte (if revelant/measured)",
                        measurement=onconova.core.measures.measures.MassConcentration,
                        null=True,
                        verbose_name="Mass concentration",
                    ),
                ),
                (
                    "arbitrary_concentration",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Arbitrary concentration of the analyte (if revelant/measured)",
                        measurement=onconova.core.measures.measures.ArbitraryConcentration,
                        null=True,
                        verbose_name="Arbitrary concentration",
                    ),
                ),
                (
                    "substance_concentration",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Substance concentration of the analyte (if revelant/measured)",
                        measurement=onconova.core.measures.measures.SubstanceConcentration,
                        null=True,
                        verbose_name="Substance concentration",
                    ),
                ),
                (
                    "fraction",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Analyte fraction (if revelant/measured)",
                        measurement=onconova.core.measures.measures.Fraction,
                        null=True,
                        verbose_name="Fraction",
                    ),
                ),
                (
                    "multiple_of_median",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Multiples of the median analyte (if revelant/measured)",
                        measurement=onconova.core.measures.measures.MultipleOfMedian,
                        null=True,
                        verbose_name="Multiples of the median",
                    ),
                ),
                (
                    "tumor_proportion_score",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("TC0", "Tp0"),
                            ("TC1", "Tc1"),
                            ("TC2", "Tc2"),
                            ("TC3", "Tc3"),
                        ],
                        help_text="Categorization of the percentage of cells in a tumor that express PD-L1",
                        max_length=50,
                        null=True,
                        verbose_name="Immune Cells Score (ICS)",
                    ),
                ),
                (
                    "immune_cell_score",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("IC0", "Ic0"),
                            ("IC1", "Ic1"),
                            ("IC2", "Ic2"),
                            ("IC3", "Ic3"),
                        ],
                        help_text="Categorization of the percentage of PD-L1 positive immune cells",
                        max_length=50,
                        null=True,
                        verbose_name="Immune Cells Score (ICS)",
                    ),
                ),
                (
                    "combined_positive_score",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100",
                        measurement=onconova.core.measures.measures.Fraction,
                        null=True,
                        verbose_name="Combined Positive Score (CPS)",
                    ),
                ),
                (
                    "immunohistochemical_score",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0", "Zero"),
                            ("1+", "One"),
                            ("2+", "Two"),
                            ("3+", "Three"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Categorization of the number of analyte-positive cells in a sample",
                        max_length=50,
                        null=True,
                        verbose_name="Immunohistochemical Score",
                    ),
                ),
                (
                    "presence",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("positive", "Positive"),
                            ("negative", "Negative"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Whether an analyte has tested positive or negative.",
                        max_length=50,
                        null=True,
                        verbose_name="Presence",
                    ),
                ),
                (
                    "nuclear_expression_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("intact", "Intact"),
                            ("loss", "Loss"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        help_text="Categorization of the status of expression of the analyte",
                        max_length=50,
                        null=True,
                        verbose_name="Nuclear expression status",
                    ),
                ),
                (
                    "analyte",
                    models.ForeignKey(
                        help_text="The chemical or biological substance/agent that is analyzed.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tumormarkeranalyte",
                        verbose_name="Analyte",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient related to the tumor marker result",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tumor_markers",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_entities",
                    models.ManyToManyField(
                        help_text="References to the neoplastic entities that are related or the focus of the tumor marker analysis.",
                        related_name="tumor_markers",
                        to="oncology.neoplasticentity",
                        verbose_name="Related neoplastic entities",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Vitals",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Clinically-relevant date at which the vitals were recorded.",
                        verbose_name="Assessment date",
                    ),
                ),
                (
                    "height",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Height of the patient",
                        measurement=measurement.measures.distance.Distance,
                        null=True,
                        verbose_name="Height",
                    ),
                ),
                (
                    "weight",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Weight of the patient",
                        measurement=measurement.measures.mass.Mass,
                        null=True,
                        verbose_name="Weight",
                    ),
                ),
                (
                    "body_mass_index",
                    models.GeneratedField(
                        db_persist=True,
                        expression=django.db.models.expressions.CombinedExpression(
                            models.F("weight"),
                            "/",
                            django.db.models.expressions.CombinedExpression(
                                models.F("height"), "*", models.F("height")
                            ),
                        ),
                        help_text="Bodymass index of the patient",
                        output_field=onconova.core.measures.fields.MeasurementField(
                            measurement=onconova.core.measures.measures.MassPerArea
                        ),
                        verbose_name="Bodymass",
                    ),
                ),
                (
                    "blood_pressure_systolic",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Systolic blood pressure of the patient",
                        measurement=onconova.core.measures.measures.Pressure,
                        null=True,
                        verbose_name="Systolic blood pressure",
                    ),
                ),
                (
                    "blood_pressure_diastolic",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Diastolic blood pressure of the patient",
                        measurement=onconova.core.measures.measures.Pressure,
                        null=True,
                        verbose_name="Diastolic blood pressure",
                    ),
                ),
                (
                    "temperature",
                    onconova.core.measures.fields.MeasurementField(
                        blank=True,
                        help_text="Temperature of the patient",
                        measurement=onconova.core.measures.measures.Temperature,
                        null=True,
                        verbose_name="Temperature",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Indicates the case of the patient who's vitals are assesed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vitals",
                        to="oncology.patientcase",
                        verbose_name="Patient case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MicrosatelliteInstability",
            fields=[
                (
                    "genomic_signature",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="microsatellite_instability",
                        serialize=False,
                        to="oncology.genomicsignature",
                    ),
                ),
                (
                    "value",
                    models.ForeignKey(
                        help_text="Microsatellite instability (MSI) classification",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.microsatelliteinstabilitystate",
                        verbose_name="Value",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.genomicsignature",),
        ),
        migrations.CreateModel(
            name="BinetStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="binet",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Binet stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.binetstage",
                        verbose_name="Binet Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="ClarkStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="clark",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Clark level stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.clarklevel",
                        verbose_name="Clark Level Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="FIGOStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="figo",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Methodology used for the FIGO staging",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.figostagingmethod",
                        verbose_name="FIGO staging methodology",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the FIGO stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.figostage",
                        verbose_name="FIGO Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="GleasonGrade",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="gleason",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Gleason grade stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.gleasongradegroupstage",
                        verbose_name="Gleason grade Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="INRGSSStage",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="inrgss",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the INRGSS stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.neuroblastomainrgssstage",
                        verbose_name="INRGSS Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="INSSStage",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="inss",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the INSS stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.neuroblastomainssstage",
                        verbose_name="INSS Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="ISSStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="iss",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of theISS stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.myelomaissstage",
                        verbose_name="ISS Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="LymphomaStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="lymphoma",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "bulky",
                    models.BooleanField(
                        blank=True,
                        help_text="Bulky modifier indicating if the lymphoma has the presence of bulky disease.",
                        null=True,
                        verbose_name="Bulky disease modifier",
                    ),
                ),
                (
                    "pathological",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the staging was based on clinical or pathologic evidence.",
                        null=True,
                        verbose_name="Pathological staging",
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Methodology used for the Lymphoma staging",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.lymphomastagingmethod",
                        verbose_name="Lymphoma staging methodology",
                    ),
                ),
                (
                    "modifiers",
                    models.ManyToManyField(
                        help_text="Qualifier acting as modifier for the lymphoma stage",
                        related_name="+",
                        to="terminology.lymphomastagevaluemodifier",
                        verbose_name="Lymphoma stage modifier",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Lymphoma stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.lymphomastage",
                        verbose_name="Lymphoma Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="RaiStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="rai",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Methodology used for the Rai staging",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.raistagingmethod",
                        verbose_name="Rai staging methodology",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Rai stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.raistage",
                        verbose_name="Rai Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="RhabdomyosarcomaClinicalGroup",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="rhabdomyosarcoma",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the rhabdomyosarcoma clinical group",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.rhabdomyosarcomaclinicalgroup",
                        verbose_name="Rhabdomyosarcoma clinical group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="RISSStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="riss",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the RISS stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.myelomarissstage",
                        verbose_name="RISS Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="TNMStaging",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="tnm",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "pathological",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the staging was based on pathological (true) or clinical (false) evidence.",
                        null=True,
                        verbose_name="Pathological staging",
                    ),
                ),
                (
                    "distantMetastases",
                    models.ForeignKey(
                        blank=True,
                        help_text="M stage (presence of distant metastasis)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmdistantmetastasescategory",
                        verbose_name="M Stage",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        help_text="G stage (grade of the cancer cells)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmgradecategory",
                        verbose_name="G Stage",
                    ),
                ),
                (
                    "lymphaticInvasion",
                    models.ForeignKey(
                        blank=True,
                        help_text="L stage (invasion into lymphatic vessels)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmlymphaticinvasioncategory",
                        verbose_name="L Stage",
                    ),
                ),
                (
                    "methodology",
                    models.ForeignKey(
                        blank=True,
                        help_text="Methodology used for TNM staging",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmstagingmethod",
                        verbose_name="TNM Staging methodology",
                    ),
                ),
                (
                    "perineuralInvasion",
                    models.ForeignKey(
                        blank=True,
                        help_text="Pn stage (invasion into adjunct nerves)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmperineuralinvasioncategory",
                        verbose_name="Pn Stage",
                    ),
                ),
                (
                    "primaryTumor",
                    models.ForeignKey(
                        blank=True,
                        help_text="T stage (extent of the primary tumor)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmprimarytumorcategory",
                        verbose_name="T Stage",
                    ),
                ),
                (
                    "regionalNodes",
                    models.ForeignKey(
                        blank=True,
                        help_text="N stage (degree of spread to regional lymph nodes)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmregionalnodescategory",
                        verbose_name="N Stage",
                    ),
                ),
                (
                    "residualTumor",
                    models.ForeignKey(
                        blank=True,
                        help_text="R stage (extent of residual tumor cells after operation)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmresidualtumorcategory",
                        verbose_name="R Stage",
                    ),
                ),
                (
                    "serumTumorMarkerLevel",
                    models.ForeignKey(
                        blank=True,
                        help_text="S stage (serum tumor marker level)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmserumtumormarkerlevelcategory",
                        verbose_name="S Stage",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The information determined as a result of making the observation, if the information has a simple value",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmstage",
                        verbose_name="TNM Stage",
                    ),
                ),
                (
                    "venousInvasion",
                    models.ForeignKey(
                        blank=True,
                        help_text="V stage (invasion into venous vessels)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.tnmvenousinvasioncategory",
                        verbose_name="V Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="WilmsStage",
            fields=[
                (
                    "staging",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="wilms",
                        serialize=False,
                        to="oncology.staging",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        help_text="The value of the Wilms stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.wilmstumorstage",
                        verbose_name="Wilms Stage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.staging",),
        ),
        migrations.CreateModel(
            name="MolecularTumorBoard",
            fields=[
                (
                    "tumor_board",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="molecular",
                        serialize=False,
                        to="oncology.tumorboard",
                    ),
                ),
                (
                    "conducted_molecular_comparison",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates whether a molecular comparison was conducted during the molecular tumor board",
                        null=True,
                        verbose_name="Conducted molecular comparison?",
                    ),
                ),
                (
                    "conducted_cup_characterization",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.",
                        null=True,
                        verbose_name="Conducted CUP characterization?",
                    ),
                ),
                (
                    "characterized_cup",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the cancer of unknown primary (CUP) characterization was successful.",
                        null=True,
                        verbose_name="Successful CUP characterization?",
                    ),
                ),
                (
                    "reviewed_reports",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Reviewed genomics reports",
                    ),
                ),
                (
                    "molecular_comparison_match",
                    models.ForeignKey(
                        blank=True,
                        help_text="The neoplastic entity that was matched during the molecular comparison",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="oncology.neoplasticentity",
                        verbose_name="Molecular comparison match",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("oncology.tumorboard",),
        ),
        migrations.CreateModel(
            name="MolecularTherapeuticRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_source",
                    models.CharField(
                        blank=True,
                        help_text="The digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source",
                    ),
                ),
                (
                    "external_source_id",
                    models.CharField(
                        blank=True,
                        help_text="The data identifier at the digital source of the data, relevant for automated data",
                        null=True,
                        verbose_name="External data source Id",
                    ),
                ),
                (
                    "clinical_trial",
                    models.CharField(
                        blank=True,
                        help_text="Clinical trial (NCT-Iddentifier) recommended by the board for enrollment",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator("^NCT\\d{8}$")
                        ],
                        verbose_name="Recommended clinical trial",
                    ),
                ),
                (
                    "off_label_use",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the medication(s) recommended were off-label",
                        null=True,
                        verbose_name="Off-label use",
                    ),
                ),
                (
                    "within_soc",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the medication(s) recommended were within standard of care",
                        null=True,
                        verbose_name="Within SOC",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user who created the original data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "drugs",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Drugs(s) being recommended",
                        related_name="+",
                        to="terminology.antineoplasticagent",
                        verbose_name="Drug(s)",
                    ),
                ),
                (
                    "expected_effect",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of the expected effect of the drug",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="terminology.expecteddrugaction",
                        verbose_name="Expected medication action",
                    ),
                ),
                (
                    "supporting_genomic_signatures",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Genomic signatures that support the recommendation",
                        related_name="+",
                        to="oncology.genomicsignature",
                        verbose_name="Supporting genomic signatures",
                    ),
                ),
                (
                    "supporting_genomic_variants",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Genomic variants that support the recommendation",
                        related_name="+",
                        to="oncology.genomicvariant",
                        verbose_name="Supporting genomic variants",
                    ),
                ),
                (
                    "updated_by",
                    models.ManyToManyField(
                        help_text="The user(s) who updated the data since its creation",
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supporting_tumor_markers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tumor markers that support the recommendation",
                        related_name="+",
                        to="oncology.tumormarker",
                        verbose_name="Supporting tumor markers",
                    ),
                ),
                (
                    "molecular_tumor_board",
                    models.ForeignKey(
                        help_text="Molecular tumor board where the recommendation was issued",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="therapeutic_recommendations",
                        to="oncology.moleculartumorboard",
                        verbose_name="Molecular tumor board",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="patientcase",
            constraint=models.UniqueConstraint(
                fields=("clinical_center", "clinical_identifier"),
                name="unique_clinical_identifier_per_center",
            ),
        ),
        migrations.AddConstraint(
            model_name="patientcase",
            constraint=models.CheckConstraint(
                condition=models.Q(("date_of_birth__day", 1)),
                name="date_of_birth_must_be_first_of_month",
                violation_error_message="Birthdate must be the first day of the month",
            ),
        ),
        migrations.AddConstraint(
            model_name="patientcase",
            constraint=models.CheckConstraint(
                condition=models.Q(("date_of_death__day", 1)),
                name="date_of_death_must_be_first_of_month",
                violation_error_message="Birthdate must be the first day of the month",
            ),
        ),
        migrations.AddConstraint(
            model_name="neoplasticentity",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("related_primary", None), ("relationship", "primary")),
                    models.Q(("relationship", "primary"), _negated=True),
                    _connector="OR",
                ),
                name="primary_cannot_have_a_related_primary",
                violation_error_message="A primary neoplasm cannot have a related primary",
            ),
        ),
        migrations.AddConstraint(
            model_name="patientcasedatacompletion",
            constraint=models.UniqueConstraint(
                fields=("case", "category"),
                name="unique_data_categories",
                violation_error_message="Data categories cannot be repeated for a patient case",
            ),
        ),
        migrations.AddConstraint(
            model_name="performancestatus",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("ecog_score__isnull", False),
                    ("karnofsky_score__isnull", False),
                    _connector="OR",
                ),
                name="at_least_one_score_must_be_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="tumormarker",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("mass_concentration__isnull", False),
                    ("arbitrary_concentration__isnull", False),
                    ("substance_concentration__isnull", False),
                    ("fraction__isnull", False),
                    ("multiple_of_median__isnull", False),
                    ("tumor_proportion_score__isnull", False),
                    ("immune_cell_score__isnull", False),
                    ("combined_positive_score__isnull", False),
                    ("immunohistochemical_score__isnull", False),
                    ("presence__isnull", False),
                    ("nuclear_expression_status__isnull", False),
                    _connector="OR",
                ),
                name="tumor marker must at least have one value",
            ),
        ),
    ]
        ),
    ]
