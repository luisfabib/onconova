# Generated by Django 5.1 on 2025-08-28 08:52

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import django.db.models.fields
import django.db.models.functions.text
import measurement.measures.distance
import measurement.measures.mass
import onconova.core.measures.fields
import onconova.core.measures.measures
import pghistory.utils
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('terminology', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenomicSignature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's genomic signature was assessed.", verbose_name='Assessment date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AneuploidScoreEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.SmallIntegerField(help_text='The actual aneuploid score (AS) value in total altered arms', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(39)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Staging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the staging was performed and recorded.', verbose_name='Staging date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BreslowDepthEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('depth', onconova.core.measures.fields.MeasurementField(default_unit='mm', help_text='Breslow depth', measurement=measurement.measures.distance.Distance, null=True, verbose_name='Breslow depth')),
                ('is_ulcered', models.BooleanField(blank=True, help_text='Whether the primary tumour presents ulceration', null=True, verbose_name='Ulcered')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HomologousRecombinationDeficiencyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(blank=True, help_text='Homologous recombination deficiency (HRD) score value', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('interpretation', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate')], help_text='Homologous recombination deficiency (HRD) interpretation', null=True, verbose_name='Interpretation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LossOfHeterozygosityEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='Loss of heterozygosity (LOH) as a percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TumorBoard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Date at which the tumor board took place and/or when the board provided a recommendation.', verbose_name='Date')),
                ('recommendations', models.ManyToManyField(blank=True, help_text="Recommendation(s) provided by the board regarding the patient's care", related_name='+', to='terminology.tumorboardrecommendation', verbose_name='Recommendations')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NeoplasticEntity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('relationship', models.CharField(choices=[('primary', 'Primary'), ('metastatic', 'Metastatic'), ('local_recurrence', 'Local Recurrence'), ('regional_recurrence', 'Regional Recurrence')], help_text='Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.', max_length=30, verbose_name='Neoplastic relationship')),
                ('assertion_date', models.DateField(help_text='The date on which the existence of the neoplasm(s) was first asserted or acknowledged', verbose_name='Assertion date')),
                ('differentitation', models.ForeignKey(blank=True, help_text='Morphologic differentitation characteristics of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.histologydifferentiation', verbose_name='Differentiation')),
                ('laterality', models.ForeignKey(blank=True, help_text='Laterality qualifier for the location of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lateralityqualifier', verbose_name='Laterality')),
                ('morphology', models.ForeignKey(help_text='Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancermorphology', verbose_name='Morphology')),
                ('related_primary', models.ForeignKey(blank=True, help_text='Reference to the primary neoplasm of which the neoplasm(s) originated from.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrences', to='oncology.neoplasticentity', verbose_name='Related primary neoplasm')),
                ('topography', models.ForeignKey(help_text='Anatomical location of the neoplasm(s)', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertopography', verbose_name='Topography')),
            ],
            options={
                'verbose_name': 'Neoplastic Entity',
                'verbose_name_plural': 'Neoplastic Entities',
            },
        ),
        migrations.CreateModel(
            name='PatientCase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('pseudoidentifier', models.CharField(editable=False, help_text='Pseudoidentifier of the patient', max_length=40, unique=True, verbose_name='Pseudoidentifier')),
                ('clinical_center', models.CharField(help_text='Medical center where the patient data originally resides', max_length=200, verbose_name='Medical center')),
                ('clinical_identifier', models.CharField(help_text='Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient', max_length=100, verbose_name='Clinical identifier')),
                ('consent_status', models.CharField(choices=[('valid', 'Valid'), ('revoked', 'Revoked'), ('unknown', 'Unknown')], default='unknown', help_text='Status of the general consent by the patient for the use of their data for research purposes', max_length=20, verbose_name='Consent status')),
                ('date_of_birth', models.DateField(help_text='Anonymized date of birth (year/month). The day is set to the first day of the month by convention.', verbose_name='Date of birth')),
                ('vital_status', models.CharField(choices=[('alive', 'Alive'), ('deceased', 'Deceased'), ('unknown', 'Unknown')], default='unknown', help_text='Whether the patient is known to be alive or decaeased or is unknkown.', max_length=20, verbose_name='Vital status')),
                ('date_of_death', models.DateField(blank=True, help_text='Anonymized date of death (year/month). The day is set to the first day of the month by convention.', null=True, verbose_name='Date of death')),
                ('end_of_records', models.DateField(blank=True, help_text='Date of the last known record about the patient if lost to followup or vital status is unknown.', null=True, verbose_name='End of records')),
                ('cause_of_death', models.ForeignKey(blank=True, help_text='Classification of the cause of death.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.causeofdeath', verbose_name='Cause of death')),
                ('gender', models.ForeignKey(help_text='Gender of the patient for legal/administrative purposes', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.administrativegender', verbose_name='Gender')),
                ('gender_identity', models.ForeignKey(blank=True, help_text="The patient's innate sense of their gender as reported", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.genderidentity', verbose_name='Gender identity')),
                ('race', models.ForeignKey(blank=True, help_text='Race of the patient', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.race', verbose_name='Race')),
                ('sex_at_birth', models.ForeignKey(blank=True, help_text='Sex assigned at birth', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.birthsex', verbose_name='Birth sex')),
            ],
        ),
        migrations.CreateModel(
            name='TumorMutationalBurdenEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor mutational burden (TMB) value in mutations/Mb', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('status', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('intermediate', 'Intermediate'), ('indeterminate', 'Indeterminate')], help_text='Cclassification of the tumor mutational burden (TMB) status', null=True, verbose_name='Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TumorNeoantigenBurdenEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor neoantigen burden (TNB) value in neoantigens/Mb', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnspecifiedTumorBoardEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('tumor_board', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.tumorboard')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the adverse event ocurred.', verbose_name='Event date')),
                ('grade', models.PositiveSmallIntegerField(help_text='The grade associated with the severity of an adverse event, using CTCAE criteria.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Grade')),
                ('outcome', models.CharField(choices=[('resolved', 'Resolved'), ('resolved-with-sequelae', 'Resolved With Sequelae'), ('recovering', 'Recovering'), ('ongoing', 'Ongoind'), ('fatal', 'Fatal'), ('unknown', 'Unknown')], help_text='The date when the adverse event ended or returned to baseline.', max_length=50, verbose_name='Date resolved')),
                ('date_resolved', models.DateField(blank=True, help_text='The date when the adverse event ended or returned to baseline.', null=True, verbose_name='Date resolved')),
                ('is_resolved', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('outcome', 'resolved'), ('outcome', 'resolved-with-sequelae'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates whether the adverse event has been resolved', output_field=models.BooleanField(), verbose_name='Is resolved')),
                ('event', models.ForeignKey(help_text='Classification of the adverse event using CTCAE criteria', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventterm', verbose_name='Adverse event')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient who had the adverse event being recorded', on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventMitigation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('category', models.CharField(choices=[('adjustment', 'Adjustment'), ('pharmacological', 'Pharmacological'), ('procedure', 'Procedire')], help_text='Type of mitigation employed', max_length=50, verbose_name='Mitigation category')),
                ('adjustment', models.ForeignKey(blank=True, help_text='Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationtreatmentadjustment', verbose_name='Treatment Adjustment')),
                ('adverse_event', models.ForeignKey(help_text='Adverse event to which this mitigation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='mitigations', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('drug', models.ForeignKey(blank=True, help_text='Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationdrug', verbose_name='Pharmacological drug')),
                ('management', models.ForeignKey(blank=True, help_text='Management type of the adverse event mitigation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationmanagement', verbose_name='Management')),
                ('procedure', models.ForeignKey(blank=True, help_text='Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adverseeventmitigationprocedure', verbose_name='Procedure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventMitigationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('category', models.CharField(choices=[('adjustment', 'Adjustment'), ('pharmacological', 'Pharmacological'), ('procedure', 'Procedire')], help_text='Type of mitigation employed', max_length=50, null=True, verbose_name='Mitigation category')),
                ('adjustment', models.ForeignKey(blank=True, db_constraint=False, help_text='Classification of the adjustment of systemic anti-cancer treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adverseeventmitigationtreatmentadjustment', verbose_name='Treatment Adjustment')),
                ('adverse_event', models.ForeignKey(db_constraint=False, help_text='Adverse event to which this mitigation belongs to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('drug', models.ForeignKey(blank=True, db_constraint=False, help_text='Classification of the pharmacological treatment used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adverseeventmitigationdrug', verbose_name='Pharmacological drug')),
                ('management', models.ForeignKey(blank=True, db_constraint=False, help_text='Management type of the adverse event mitigation', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adverseeventmitigationmanagement', verbose_name='Management')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.adverseeventmitigation')),
                ('procedure', models.ForeignKey(blank=True, db_constraint=False, help_text='Classification of the non-pharmacological procedure used to mitigate the adverse event (if applicable)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adverseeventmitigationprocedure', verbose_name='Procedure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AneuploidScore',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='aneuploid_score', serialize=False, to='oncology.genomicsignature')),
                ('value', models.SmallIntegerField(help_text='The actual aneuploid score (AS) value in total altered arms', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(39)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='HomologousRecombinationDeficiency',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='homologous_recombination_deficiency', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(blank=True, help_text='Homologous recombination deficiency (HRD) score value', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('interpretation', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate')], help_text='Homologous recombination deficiency (HRD) interpretation', null=True, verbose_name='Interpretation')),
            ],
            options={
                'verbose_name_plural': 'Homologous Recombination Deficiencies',
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='LossOfHeterozygosity',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='loss_of_heterozygosity', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='Loss of heterozygosity (LOH) as a percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Value')),
            ],
            options={
                'verbose_name_plural': 'Losses of Heterozygosity',
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='MicrosatelliteInstability',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='microsatellite_instability', serialize=False, to='oncology.genomicsignature')),
            ],
            options={
                'verbose_name_plural': 'Microsatellite Instabilities',
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='TumorMutationalBurden',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tumor_mutational_burden', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor mutational burden (TMB) value in mutations/Mb', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
                ('status', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('intermediate', 'Intermediate'), ('indeterminate', 'Indeterminate')], help_text='Cclassification of the tumor mutational burden (TMB) status', null=True, verbose_name='Status')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='TumorNeoantigenBurden',
            fields=[
                ('genomic_signature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tumor_neoantigen_burden', serialize=False, to='oncology.genomicsignature')),
                ('value', models.FloatField(help_text='The actual tumor neoantigen burden (TNB) value in neoantigens/Mb', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.genomicsignature',),
        ),
        migrations.CreateModel(
            name='BinetStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='binet', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='BreslowDepth',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='breslow', serialize=False, to='oncology.staging')),
                ('depth', onconova.core.measures.fields.MeasurementField(default_unit='mm', help_text='Breslow depth', measurement=measurement.measures.distance.Distance, verbose_name='Breslow depth')),
                ('is_ulcered', models.BooleanField(blank=True, help_text='Whether the primary tumour presents ulceration', null=True, verbose_name='Ulcered')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='ClarkStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='clark', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='FIGOStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='figo', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='GleasonGrade',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gleason', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='INRGSSStage',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='inrgss', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='INSSStage',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='inss', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='ISSStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='iss', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='LymphomaStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='lymphoma', serialize=False, to='oncology.staging')),
                ('bulky', models.BooleanField(blank=True, help_text='Bulky modifier indicating if the lymphoma has the presence of bulky disease.', null=True, verbose_name='Bulky disease modifier')),
                ('pathological', models.BooleanField(blank=True, help_text='Whether the staging was based on clinical or pathologic evidence.', null=True, verbose_name='Pathological staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='RaiStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='rai', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='RhabdomyosarcomaClinicalGroup',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='rhabdomyosarcoma', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='RISSStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='riss', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='TNMStaging',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='tnm', serialize=False, to='oncology.staging')),
                ('pathological', models.BooleanField(blank=True, help_text='Whether the staging was based on pathological (true) or clinical (false) evidence.', null=True, verbose_name='Pathological staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='WilmsStage',
            fields=[
                ('staging', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='wilms', serialize=False, to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.staging',),
        ),
        migrations.CreateModel(
            name='BinetStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Binet stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.binetstage', verbose_name='Binet Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClarkStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Clark level stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.clarklevel', verbose_name='Clark Level Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComorbiditiesAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's comorbidities were assessed and recorded.", verbose_name='Assessment date')),
                ('panel', models.CharField(blank=True, choices=[('Charlson', 'Charlson'), ('Elixhauser', 'Elixhauser'), ('NCI', 'Nci')], help_text='Comorbidities panel', max_length=30, null=True, verbose_name='Panel')),
                ('absent_conditions', models.ManyToManyField(blank=True, help_text='Absent comorbid conditions', related_name='+', to='terminology.icd10condition', verbose_name='Absent comorbid conditions')),
                ('present_conditions', models.ManyToManyField(blank=True, help_text='Present comorbid conditions', related_name='+', to='terminology.icd10condition', verbose_name='Present comorbid conditions')),
                ('index_condition', models.ForeignKey(help_text='The primary neoplastic entity against which comorbidities are assessed', on_delete=django.db.models.deletion.CASCADE, related_name='comorbidities', to='oncology.neoplasticentity', verbose_name='Index neoplastic entity')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's comorbidities are being recorded", on_delete=django.db.models.deletion.CASCADE, related_name='comorbidities', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FamilyHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's family history was assessed and recorded.", verbose_name='Assessment date')),
                ('had_cancer', models.BooleanField(help_text='Whether the family member has a history of cancer', verbose_name='Had cancer')),
                ('contributed_to_death', models.BooleanField(blank=True, help_text='Whether the cancer contributed to the cause of death of the family member', null=True, verbose_name='Contributed to death')),
                ('onset_age', models.PositiveSmallIntegerField(blank=True, help_text="Age at which the family member's cancer manifested", null=True, verbose_name='Onset age')),
                ('morphology', models.ForeignKey(blank=True, help_text="Morphology of the family member's cancer (if known)", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancermorphology', verbose_name='Morphology')),
                ('relationship', models.ForeignKey(help_text='Relationship to the patient', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.familymembertype', verbose_name='Relationship')),
                ('topography', models.ForeignKey(blank=True, help_text="Estimated or actual topography of the family member's cancer", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertopography', verbose_name='Topography')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's family's history is being recorded", on_delete=django.db.models.deletion.CASCADE, related_name='family_histories', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FIGOStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('methodology', models.ForeignKey(blank=True, db_constraint=False, help_text='Methodology used for the FIGO staging', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.figostagingmethod', verbose_name='FIGO staging methodology')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the FIGO stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.figostage', verbose_name='FIGO Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenomicVariant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the genomic variant (e.g. the specimen collection date).', verbose_name='Date')),
                ('assessment_date', models.DateField(blank=True, help_text='Date at which the genomic variant was assessed and/or reported.', null=True, verbose_name='Assessment date')),
                ('gene_panel', models.CharField(blank=True, help_text='Commercial or official name of the gene panel tested to identify the variant', max_length=200, null=True, verbose_name='Gene panel')),
                ('assessment', models.CharField(blank=True, choices=[('present', 'Present'), ('absent', 'Absent'), ('no-call', 'Nocall'), ('indeterminate', 'Indeterminate')], help_text='Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.', max_length=15, null=True, verbose_name='Assessment')),
                ('confidence', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('indeterminate', 'Indeterminate')], help_text='Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.', max_length=15, null=True, verbose_name='Confidence')),
                ('clinical_relevance', models.CharField(blank=True, choices=[('pathogenic', 'Pathogenic'), ('likely_pathogenic', 'Likely Pathogenic'), ('uncertain_significance', 'Uncertain Significance'), ('ambiguous', 'Ambiguous'), ('likely_benign', 'Likely Benign'), ('benign', 'Benign')], help_text='Classification of the clinical relevance or pathogenicity of the variant.', null=True, verbose_name='Clinical relevance')),
                ('is_vus', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'uncertain_significance')), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is of unknown signfiance (determined automatically based on the clinical relevance classification)', null=True, output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('is_pathogenic', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'likely_pathogenic'), ('clinical_relevance', 'pathogenic'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is pathogenic (determined automatically based on the clinical relevance classification)', output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('dna_hgvs', models.CharField(blank=True, help_text='Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T', max_length=500, null=True, verbose_name='HGVS DNA-level expression')),
                ('rna_hgvs', models.CharField(blank=True, help_text='Description of the RNA sequence change using a valid HGVS-formatted expression, e.g. NM_000016.9:r.1212a>c', max_length=500, null=True, verbose_name='HGVS RNA-level expression')),
                ('protein_hgvs', models.CharField(blank=True, help_text='Description of the amino-acid sequence change using a valid HGVS-formatted expression, e.g. NP_000016.9:p.Leu24Tyr', max_length=500, null=True, verbose_name='HGVS protein-level expression')),
                ('copy_number', models.PositiveSmallIntegerField(blank=True, help_text='Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.', null=True, verbose_name='Copy number')),
                ('allele_frequency', models.FloatField(blank=True, help_text='The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Allele frequency')),
                ('allele_depth', models.PositiveIntegerField(blank=True, help_text='Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.', null=True, verbose_name='Allele depth (reads)')),
                ('clinvar', models.CharField(blank=True, help_text='Accession number in the ClinVar variant database, given for cross-reference.', null=True, verbose_name='ClinVar accession number')),
                ('analysis_method', models.ForeignKey(blank=True, help_text='Analysis method used to detect the variant', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.structuralvariantanalysismethod', verbose_name='Analysis method')),
                ('coordinate_system', models.ForeignKey(blank=True, help_text='Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.genomiccoordinatesystem', verbose_name='Coordinate system')),
                ('genes', models.ManyToManyField(help_text='Gene(s) affected by this variant', related_name='+', to='terminology.gene', verbose_name='Gene(s)')),
                ('genome_assembly_version', models.ForeignKey(blank=True, help_text='The reference genome assembly versionused in this analysis.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.referencegenomebuild', verbose_name='Genome assembly version')),
                ('inheritance', models.ForeignKey(blank=True, help_text='Variant inheritance origin (if known).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.variantinheritance', verbose_name='Inheritance')),
                ('molecular_consequence', models.ForeignKey(blank=True, help_text='The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.molecularconsequence', verbose_name='Molecular consequence')),
                ('zygosity', models.ForeignKey(blank=True, help_text='The observed level of occurrence of the variant in the set of chromosomes.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.zygosity', verbose_name='Zygosity')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who' genomic variant is described", on_delete=django.db.models.deletion.CASCADE, related_name='genomic_variants', to='oncology.patientcase', verbose_name='Patient case')),
            ],
        ),
        migrations.CreateModel(
            name='GleasonGradeEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Gleason grade stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.gleasongradegroupstage', verbose_name='Gleason grade Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='INRGSSStageEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the INRGSS stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.neuroblastomainrgssstage', verbose_name='INRGSS Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='INSSStageEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the INSS stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.neuroblastomainssstage', verbose_name='INSS Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ISSStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of theISS stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.myelomaissstage', verbose_name='ISS Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lifestyle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's lifetyle was assessed and recorded.", verbose_name='Assessment date')),
                ('smoking_packyears', models.FloatField(blank=True, help_text='Smoking pack-years (if applicable)', null=True, verbose_name='Smoking packyears')),
                ('smoking_quited', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='year', help_text='Estimated time since quitting smoking (if applicable)', measurement=onconova.core.measures.measures.Time, null=True, verbose_name='Time since quitted smoking')),
                ('night_sleep', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='hour', help_text='Estimated average sleep time per night', measurement=onconova.core.measures.measures.Time, null=True, verbose_name='Night sleep')),
                ('alcohol_consumption', models.ForeignKey(blank=True, help_text='Frequency of alcohol consumption', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.alcoholconsumptionfrequency', verbose_name='Alcohol consumption')),
                ('exposures', models.ManyToManyField(blank=True, help_text='Environmental or occupational exposures to hazards or carcinogenic agents', related_name='+', to='terminology.exposureagent', verbose_name='Exposures')),
                ('recreational_drugs', models.ManyToManyField(blank=True, help_text='Any recreational drug(s) used by the patient', related_name='+', to='terminology.recreationaldrug', verbose_name='Recreational drugs')),
                ('smoking_status', models.ForeignKey(blank=True, help_text='Tobacco consumption status', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.smokingstatus', verbose_name='Smoking Status')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's lifestyle is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='lifestyles', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LymphomaStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('bulky', models.BooleanField(blank=True, help_text='Bulky modifier indicating if the lymphoma has the presence of bulky disease.', null=True, verbose_name='Bulky disease modifier')),
                ('pathological', models.BooleanField(blank=True, help_text='Whether the staging was based on clinical or pathologic evidence.', null=True, verbose_name='Pathological staging')),
                ('methodology', models.ForeignKey(blank=True, db_constraint=False, help_text='Methodology used for the Lymphoma staging', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.lymphomastagingmethod', verbose_name='Lymphoma staging methodology')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Lymphoma stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.lymphomastage', verbose_name='Lymphoma Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MicrosatelliteInstabilityEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('genomic_signature', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.genomicsignature')),
                ('value', models.ForeignKey(db_constraint=False, help_text='Microsatellite instability (MSI) classification', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.microsatelliteinstabilitystate', verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MolecularTherapeuticRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_trial', models.CharField(blank=True, help_text='Clinical trial (NCT-Iddentifier) recommended by the board for enrollment', max_length=15, null=True, validators=[django.core.validators.RegexValidator('^NCT\\d{8}$')], verbose_name='Recommended clinical trial')),
                ('off_label_use', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were off-label', null=True, verbose_name='Off-label use')),
                ('within_soc', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were within standard of care', null=True, verbose_name='Within SOC')),
                ('drugs', models.ManyToManyField(blank=True, help_text='Drugs(s) being recommended', related_name='+', to='terminology.antineoplasticagent', verbose_name='Drug(s)')),
                ('expected_effect', models.ForeignKey(blank=True, help_text='Classification of the expected effect of the drug', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.expecteddrugaction', verbose_name='Expected medication action')),
                ('supporting_genomic_signatures', models.ManyToManyField(blank=True, help_text='Genomic signatures that support the recommendation', related_name='+', to='oncology.genomicsignature', verbose_name='Supporting genomic signatures')),
                ('supporting_genomic_variants', models.ManyToManyField(blank=True, help_text='Genomic variants that support the recommendation', related_name='+', to='oncology.genomicvariant', verbose_name='Supporting genomic variants')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MolecularTherapeuticRecommendationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_trial', models.CharField(blank=True, help_text='Clinical trial (NCT-Iddentifier) recommended by the board for enrollment', max_length=15, null=True, validators=[django.core.validators.RegexValidator('^NCT\\d{8}$')], verbose_name='Recommended clinical trial')),
                ('off_label_use', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were off-label', null=True, verbose_name='Off-label use')),
                ('within_soc', models.BooleanField(blank=True, help_text='Whether the medication(s) recommended were within standard of care', null=True, verbose_name='Within SOC')),
                ('expected_effect', models.ForeignKey(blank=True, db_constraint=False, help_text='Classification of the expected effect of the drug', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.expecteddrugaction', verbose_name='Expected medication action')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.moleculartherapeuticrecommendation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MolecularTumorBoard',
            fields=[
                ('tumor_board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='molecular', serialize=False, to='oncology.tumorboard')),
                ('conducted_molecular_comparison', models.BooleanField(blank=True, help_text='Indicates whether a molecular comparison was conducted during the molecular tumor board', null=True, verbose_name='Conducted molecular comparison?')),
                ('conducted_cup_characterization', models.BooleanField(blank=True, help_text='Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.', null=True, verbose_name='Conducted CUP characterization?')),
                ('characterized_cup', models.BooleanField(blank=True, help_text='Whether the cancer of unknown primary (CUP) characterization was successful.', null=True, verbose_name='Successful CUP characterization?')),
                ('reviewed_reports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, default=list, help_text='List of genomic reports reviewed during the board meeting.', size=None, verbose_name='Reviewed genomics reports')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.tumorboard',),
        ),
        migrations.CreateModel(
            name='UnspecifiedTumorBoard',
            fields=[
                ('tumor_board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='unspecified', serialize=False, to='oncology.tumorboard')),
            ],
            options={
                'abstract': False,
            },
            bases=('oncology.tumorboard',),
        ),
        migrations.AddField(
            model_name='tumorboard',
            name='related_entities',
            field=models.ManyToManyField(help_text='References to the neoplastic entities that were the focus of the tumor board.', related_name='+', to='oncology.neoplasticentity', verbose_name='Related neoplastic entities'),
        ),
        migrations.AddField(
            model_name='staging',
            name='staged_entities',
            field=models.ManyToManyField(help_text='References to the neoplastic entities that were the focus of the staging.', related_name='stagings', to='oncology.neoplasticentity', verbose_name='Staged neoplastic entities'),
        ),
        migrations.CreateModel(
            name='MolecularTumorBoardEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('tumor_board', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.tumorboard')),
                ('conducted_molecular_comparison', models.BooleanField(blank=True, help_text='Indicates whether a molecular comparison was conducted during the molecular tumor board', null=True, verbose_name='Conducted molecular comparison?')),
                ('conducted_cup_characterization', models.BooleanField(blank=True, help_text='Whether there was a cancer of unknown primary (CUP) characterization during the molecular tumor board.', null=True, verbose_name='Conducted CUP characterization?')),
                ('characterized_cup', models.BooleanField(blank=True, help_text='Whether the cancer of unknown primary (CUP) characterization was successful.', null=True, verbose_name='Successful CUP characterization?')),
                ('reviewed_reports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, default=list, help_text='List of genomic reports reviewed during the board meeting.', null=True, size=None, verbose_name='Reviewed genomics reports')),
                ('molecular_comparison_match', models.ForeignKey(blank=True, db_constraint=False, help_text='The neoplastic entity that was matched during the molecular comparison', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.neoplasticentity', verbose_name='Molecular comparison match')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tumorboard',
            name='case',
            field=models.ForeignKey(help_text='Indicates the case of the patient which was discussed at the tumor board', on_delete=django.db.models.deletion.CASCADE, related_name='tumor_boards', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.AddField(
            model_name='staging',
            name='case',
            field=models.ForeignKey(help_text="Indicates the case of the patient who's cancer is staged", on_delete=django.db.models.deletion.CASCADE, related_name='stagings', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.CreateModel(
            name='NeoplasticEntityEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('relationship', models.CharField(choices=[('primary', 'Primary'), ('metastatic', 'Metastatic'), ('local_recurrence', 'Local Recurrence'), ('regional_recurrence', 'Regional Recurrence')], help_text='Relationship linking secondary and recurrent tumors to their primary origin or for distinguishing between different phases of the disease.', max_length=30, null=True, verbose_name='Neoplastic relationship')),
                ('assertion_date', models.DateField(help_text='The date on which the existence of the neoplasm(s) was first asserted or acknowledged', null=True, verbose_name='Assertion date')),
                ('differentitation', models.ForeignKey(blank=True, db_constraint=False, help_text='Morphologic differentitation characteristics of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.histologydifferentiation', verbose_name='Differentiation')),
                ('laterality', models.ForeignKey(blank=True, db_constraint=False, help_text='Laterality qualifier for the location of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.lateralityqualifier', verbose_name='Laterality')),
                ('morphology', models.ForeignKey(db_constraint=False, help_text='Describes the cell type of the tumor and its biologic activity, in other words, the characteristics of the tumor itself', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancermorphology', verbose_name='Morphology')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.neoplasticentity')),
                ('related_primary', models.ForeignKey(blank=True, db_constraint=False, help_text='Reference to the primary neoplasm of which the neoplasm(s) originated from.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.neoplasticentity', verbose_name='Related primary neoplasm')),
                ('topography', models.ForeignKey(db_constraint=False, help_text='Anatomical location of the neoplasm(s)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancertopography', verbose_name='Topography')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's neoplasm(s) are recorded", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='neoplasticentity',
            name='case',
            field=models.ForeignKey(help_text="Indicates the case of the patient who's neoplasm(s) are recorded", on_delete=django.db.models.deletion.CASCADE, related_name='neoplastic_entities', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.CreateModel(
            name='LifestyleEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's lifetyle was assessed and recorded.", null=True, verbose_name='Assessment date')),
                ('smoking_packyears', models.FloatField(blank=True, help_text='Smoking pack-years (if applicable)', null=True, verbose_name='Smoking packyears')),
                ('smoking_quited', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='year', help_text='Estimated time since quitting smoking (if applicable)', measurement=onconova.core.measures.measures.Time, null=True, verbose_name='Time since quitted smoking')),
                ('night_sleep', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='hour', help_text='Estimated average sleep time per night', measurement=onconova.core.measures.measures.Time, null=True, verbose_name='Night sleep')),
                ('alcohol_consumption', models.ForeignKey(blank=True, db_constraint=False, help_text='Frequency of alcohol consumption', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.alcoholconsumptionfrequency', verbose_name='Alcohol consumption')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.lifestyle')),
                ('smoking_status', models.ForeignKey(blank=True, db_constraint=False, help_text='Tobacco consumption status', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.smokingstatus', verbose_name='Smoking Status')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's lifestyle is assesed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenomicVariantEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the genomic variant (e.g. the specimen collection date).', null=True, verbose_name='Date')),
                ('assessment_date', models.DateField(blank=True, help_text='Date at which the genomic variant was assessed and/or reported.', null=True, verbose_name='Assessment date')),
                ('gene_panel', models.CharField(blank=True, help_text='Commercial or official name of the gene panel tested to identify the variant', max_length=200, null=True, verbose_name='Gene panel')),
                ('assessment', models.CharField(blank=True, choices=[('present', 'Present'), ('absent', 'Absent'), ('no-call', 'Nocall'), ('indeterminate', 'Indeterminate')], help_text='Classification of whether the variant is present or absent in the analysis results. Relevant for genomic studies that report presence and absence of variants.', max_length=15, null=True, verbose_name='Assessment')),
                ('confidence', models.CharField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('indeterminate', 'Indeterminate')], help_text='Classification of the confidence for a true positive variant call based e.g. calling thresholds or phred-scaled confidence scores.', max_length=15, null=True, verbose_name='Confidence')),
                ('clinical_relevance', models.CharField(blank=True, choices=[('pathogenic', 'Pathogenic'), ('likely_pathogenic', 'Likely Pathogenic'), ('uncertain_significance', 'Uncertain Significance'), ('ambiguous', 'Ambiguous'), ('likely_benign', 'Likely Benign'), ('benign', 'Benign')], help_text='Classification of the clinical relevance or pathogenicity of the variant.', null=True, verbose_name='Clinical relevance')),
                ('is_vus', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'uncertain_significance')), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is of unknown signfiance (determined automatically based on the clinical relevance classification)', null=True, output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('is_pathogenic', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('clinical_relevance__isnull', True)), then=models.Value(None)), models.When(models.Q(('clinical_relevance', 'likely_pathogenic'), ('clinical_relevance', 'pathogenic'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates if the variant is pathogenic (determined automatically based on the clinical relevance classification)', null=True, output_field=models.BooleanField(), verbose_name='Is pathogenic')),
                ('dna_hgvs', models.CharField(blank=True, help_text='Description of the coding (cDNA) sequence change using a valid HGVS-formatted expression, e.g. NM_005228.5:c.2369C>T', max_length=500, null=True, verbose_name='HGVS DNA-level expression')),
                ('rna_hgvs', models.CharField(blank=True, help_text='Description of the RNA sequence change using a valid HGVS-formatted expression, e.g. NM_000016.9:r.1212a>c', max_length=500, null=True, verbose_name='HGVS RNA-level expression')),
                ('protein_hgvs', models.CharField(blank=True, help_text='Description of the amino-acid sequence change using a valid HGVS-formatted expression, e.g. NP_000016.9:p.Leu24Tyr', max_length=500, null=True, verbose_name='HGVS protein-level expression')),
                ('copy_number', models.PositiveSmallIntegerField(blank=True, help_text='Genomic structural variant copy number. It is a unit-less value. Note that a copy number of 1 can imply a deletion.', null=True, verbose_name='Copy number')),
                ('allele_frequency', models.FloatField(blank=True, help_text='The relative frequency (value in range [0,1]) of the allele at a given locus in the sample.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Allele frequency')),
                ('allele_depth', models.PositiveIntegerField(blank=True, help_text='Specifies the number of reads that identified the allele in question whether it consists of one or a small sequence of contiguous nucleotides.', null=True, verbose_name='Allele depth (reads)')),
                ('clinvar', models.CharField(blank=True, help_text='Accession number in the ClinVar variant database, given for cross-reference.', null=True, verbose_name='ClinVar accession number')),
                ('analysis_method', models.ForeignKey(blank=True, db_constraint=False, help_text='Analysis method used to detect the variant', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.structuralvariantanalysismethod', verbose_name='Analysis method')),
                ('coordinate_system', models.ForeignKey(blank=True, db_constraint=False, help_text='Genomic coordinate system used for identifying nucleotides or amino acids within a sequence.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.genomiccoordinatesystem', verbose_name='Coordinate system')),
                ('genome_assembly_version', models.ForeignKey(blank=True, db_constraint=False, help_text='The reference genome assembly versionused in this analysis.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.referencegenomebuild', verbose_name='Genome assembly version')),
                ('inheritance', models.ForeignKey(blank=True, db_constraint=False, help_text='Variant inheritance origin (if known).', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.variantinheritance', verbose_name='Inheritance')),
                ('molecular_consequence', models.ForeignKey(blank=True, db_constraint=False, help_text='The calculated or observed effect of a variant on its downstream transcript and, if applicable, ensuing protein sequence.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.molecularconsequence', verbose_name='Molecular consequence')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.genomicvariant')),
                ('zygosity', models.ForeignKey(blank=True, db_constraint=False, help_text='The observed level of occurrence of the variant in the set of chromosomes.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.zygosity', verbose_name='Zygosity')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who' genomic variant is described", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenomicSignatureEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's genomic signature was assessed.", null=True, verbose_name='Assessment date')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_events', related_query_name='parent_events', to='oncology.genomicsignature')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's lifestyle is assesed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='genomicsignature',
            name='case',
            field=models.ForeignKey(help_text="Indicates the case of the patient who's lifestyle is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='genomic_signatures', to='oncology.patientcase', verbose_name='Patient case'),
        ),
        migrations.CreateModel(
            name='FamilyHistoryEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's family history was assessed and recorded.", null=True, verbose_name='Assessment date')),
                ('had_cancer', models.BooleanField(help_text='Whether the family member has a history of cancer', null=True, verbose_name='Had cancer')),
                ('contributed_to_death', models.BooleanField(blank=True, help_text='Whether the cancer contributed to the cause of death of the family member', null=True, verbose_name='Contributed to death')),
                ('onset_age', models.PositiveSmallIntegerField(blank=True, help_text="Age at which the family member's cancer manifested", null=True, verbose_name='Onset age')),
                ('morphology', models.ForeignKey(blank=True, db_constraint=False, help_text="Morphology of the family member's cancer (if known)", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancermorphology', verbose_name='Morphology')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.familyhistory')),
                ('relationship', models.ForeignKey(db_constraint=False, help_text='Relationship to the patient', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.familymembertype', verbose_name='Relationship')),
                ('topography', models.ForeignKey(blank=True, db_constraint=False, help_text="Estimated or actual topography of the family member's cancer", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancertopography', verbose_name='Topography')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's family's history is being recorded", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComorbiditiesAssessmentEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text="Clinically-relevant date at which the patient's comorbidities were assessed and recorded.", null=True, verbose_name='Assessment date')),
                ('panel', models.CharField(blank=True, choices=[('Charlson', 'Charlson'), ('Elixhauser', 'Elixhauser'), ('NCI', 'Nci')], help_text='Comorbidities panel', max_length=30, null=True, verbose_name='Panel')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.comorbiditiesassessment')),
                ('index_condition', models.ForeignKey(db_constraint=False, help_text='The primary neoplastic entity against which comorbidities are assessed', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.neoplasticentity', verbose_name='Index neoplastic entity')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's comorbidities are being recorded", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the adverse event ocurred.', null=True, verbose_name='Event date')),
                ('grade', models.PositiveSmallIntegerField(help_text='The grade associated with the severity of an adverse event, using CTCAE criteria.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Grade')),
                ('outcome', models.CharField(choices=[('resolved', 'Resolved'), ('resolved-with-sequelae', 'Resolved With Sequelae'), ('recovering', 'Recovering'), ('ongoing', 'Ongoind'), ('fatal', 'Fatal'), ('unknown', 'Unknown')], help_text='The date when the adverse event ended or returned to baseline.', max_length=50, null=True, verbose_name='Date resolved')),
                ('date_resolved', models.DateField(blank=True, help_text='The date when the adverse event ended or returned to baseline.', null=True, verbose_name='Date resolved')),
                ('is_resolved', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('outcome', 'resolved'), ('outcome', 'resolved-with-sequelae'), _connector='OR'), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates whether the adverse event has been resolved', null=True, output_field=models.BooleanField(), verbose_name='Is resolved')),
                ('event', models.ForeignKey(db_constraint=False, help_text='Classification of the adverse event using CTCAE criteria', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adverseeventterm', verbose_name='Adverse event')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.adverseevent')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient who had the adverse event being recorded', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientCaseDataCompletion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('category', models.CharField(blank=True, choices=[('comorbidities-assessments', 'Comorbidities Assessments'), ('family-histories', 'Family Histories'), ('genomic-signatures', 'Genomic Signatures'), ('genomic-variants', 'Genomic Variants'), ('lifestyles', 'Lifestyles'), ('comorbidities', 'Comorbidities'), ('neoplastic-entities', 'Neoplastic Entities'), ('performance-status', 'Performance Status'), ('radiotherapies', 'Radiotherapies'), ('risk-assessments', 'Risk Assessments'), ('stagings', 'Stagins'), ('surgeries', 'Surgeries'), ('systemic-therapies', 'Systemic Therapies'), ('tumor-markers', 'Tumor Markers'), ('vitals', 'Vitals'), ('tumor-board-reviews', 'Tumor Board Reviews'), ('adverse-events', 'Adverse Events'), ('therapy-responses', 'Therapy Responses')], help_text='Indicates the categories of a patient case, whose data entries are deemed to be complete and/or up-to-date with the primary records.', max_length=500, verbose_name='Finalized data category')),
                ('case', models.ForeignKey(help_text="Patient case who's data category has been marked as completed.", on_delete=django.db.models.deletion.CASCADE, related_name='completed_data_categories', to='oncology.patientcase', verbose_name='Patient case')),
            ],
        ),
        migrations.CreateModel(
            name='PatientCaseDataCompletionEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('category', models.CharField(blank=True, choices=[('comorbidities-assessments', 'Comorbidities Assessments'), ('family-histories', 'Family Histories'), ('genomic-signatures', 'Genomic Signatures'), ('genomic-variants', 'Genomic Variants'), ('lifestyles', 'Lifestyles'), ('comorbidities', 'Comorbidities'), ('neoplastic-entities', 'Neoplastic Entities'), ('performance-status', 'Performance Status'), ('radiotherapies', 'Radiotherapies'), ('risk-assessments', 'Risk Assessments'), ('stagings', 'Stagins'), ('surgeries', 'Surgeries'), ('systemic-therapies', 'Systemic Therapies'), ('tumor-markers', 'Tumor Markers'), ('vitals', 'Vitals'), ('tumor-board-reviews', 'Tumor Board Reviews'), ('adverse-events', 'Adverse Events'), ('therapy-responses', 'Therapy Responses')], help_text='Indicates the categories of a patient case, whose data entries are deemed to be complete and/or up-to-date with the primary records.', max_length=500, null=True, verbose_name='Finalized data category')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Patient case who's data category has been marked as completed.", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.patientcasedatacompletion')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientCaseEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('pseudoidentifier', models.CharField(editable=False, help_text='Pseudoidentifier of the patient', max_length=40, null=True, verbose_name='Pseudoidentifier')),
                ('clinical_center', models.CharField(help_text='Medical center where the patient data originally resides', max_length=200, null=True, verbose_name='Medical center')),
                ('clinical_identifier', models.CharField(help_text='Unique clinical identifier (typically the clinical information system identifier) unique for a physical patient', max_length=100, null=True, verbose_name='Clinical identifier')),
                ('consent_status', models.CharField(choices=[('valid', 'Valid'), ('revoked', 'Revoked'), ('unknown', 'Unknown')], default='unknown', help_text='Status of the general consent by the patient for the use of their data for research purposes', max_length=20, null=True, verbose_name='Consent status')),
                ('date_of_birth', models.DateField(help_text='Anonymized date of birth (year/month). The day is set to the first day of the month by convention.', null=True, verbose_name='Date of birth')),
                ('vital_status', models.CharField(choices=[('alive', 'Alive'), ('deceased', 'Deceased'), ('unknown', 'Unknown')], default='unknown', help_text='Whether the patient is known to be alive or decaeased or is unknkown.', max_length=20, null=True, verbose_name='Vital status')),
                ('date_of_death', models.DateField(blank=True, help_text='Anonymized date of death (year/month). The day is set to the first day of the month by convention.', null=True, verbose_name='Date of death')),
                ('end_of_records', models.DateField(blank=True, help_text='Date of the last known record about the patient if lost to followup or vital status is unknown.', null=True, verbose_name='End of records')),
                ('cause_of_death', models.ForeignKey(blank=True, db_constraint=False, help_text='Classification of the cause of death.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.causeofdeath', verbose_name='Cause of death')),
                ('gender', models.ForeignKey(db_constraint=False, help_text='Gender of the patient for legal/administrative purposes', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.administrativegender', verbose_name='Gender')),
                ('gender_identity', models.ForeignKey(blank=True, db_constraint=False, help_text="The patient's innate sense of their gender as reported", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.genderidentity', verbose_name='Gender identity')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.patientcase')),
                ('race', models.ForeignKey(blank=True, db_constraint=False, help_text='Race of the patient', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.race', verbose_name='Race')),
                ('sex_at_birth', models.ForeignKey(blank=True, db_constraint=False, help_text='Sex assigned at birth', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.birthsex', verbose_name='Birth sex')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PerformanceStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the performance score was performed and recorded.', verbose_name='Assessment date')),
                ('ecog_score', models.PositiveSmallIntegerField(blank=True, help_text='ECOG Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='ECOG Score')),
                ('karnofsky_score', models.PositiveSmallIntegerField(blank=True, help_text='Karnofsky Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Karnofsky Score')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's performance status is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='performance_status', to='oncology.patientcase', verbose_name='Patient case')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceStatusEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the performance score was performed and recorded.', null=True, verbose_name='Assessment date')),
                ('ecog_score', models.PositiveSmallIntegerField(blank=True, help_text='ECOG Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='ECOG Score')),
                ('karnofsky_score', models.PositiveSmallIntegerField(blank=True, help_text='Karnofsky Performance Status Score', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Karnofsky Score')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's performance status is assesed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.performancestatus')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Radiotherapy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Clinically-relevant period during which the radiotherapy was administered to the patient.', verbose_name='Treatment period')),
                ('sessions', models.PositiveIntegerField(help_text='The total number of radiotherapy sessions over the treatment period.', verbose_name='Total sessions')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, verbose_name='Intent')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient who received the radiotherapy', on_delete=django.db.models.deletion.CASCADE, related_name='radiotherapies', to='oncology.patientcase', verbose_name='Patient case')),
                ('targeted_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were targeted by the radiotherapy', related_name='radiotherapies', to='oncology.neoplasticentity', verbose_name='Targeted neoplastic entities')),
                ('termination_reason', models.ForeignKey(blank=True, help_text='Explanation for the premature or planned termination of the radiotherapy', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.treatmentterminationreason', verbose_name='Termination reason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapyDosage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('fractions', models.PositiveIntegerField(blank=True, help_text='The total number of radiotherapy fractions delivered over the treatment period.', null=True, verbose_name='Total fractions')),
                ('dose', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Total radiation dose delivered over the full radiotherapy course', measurement=onconova.core.measures.measures.RadiationDose, null=True, verbose_name='Total radiation dose')),
                ('irradiated_volume', models.ForeignKey(help_text='Anatomical location of the irradiated volume', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.radiotherapytreatmentlocation', verbose_name='Irradiated volume')),
                ('irradiated_volume_morphology', models.ForeignKey(blank=True, help_text='Morphology of the anatomical location of the irradiated volume', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.radiotherapyvolumetype', verbose_name='Irradiated volume morphology')),
                ('irradiated_volume_qualifier', models.ForeignKey(blank=True, help_text='General qualifier for the anatomical location of the irradiated volume', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.radiotherapytreatmentlocationqualifier', verbose_name='Irradiated volume qualifier')),
                ('radiotherapy', models.ForeignKey(help_text='Indicates the radoptherapy where this dosage was delivered', on_delete=django.db.models.deletion.CASCADE, related_name='dosages', to='oncology.radiotherapy', verbose_name='Radiotherapy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapyDosageEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('fractions', models.PositiveIntegerField(blank=True, help_text='The total number of radiotherapy fractions delivered over the treatment period.', null=True, verbose_name='Total fractions')),
                ('dose', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Total radiation dose delivered over the full radiotherapy course', measurement=onconova.core.measures.measures.RadiationDose, null=True, verbose_name='Total radiation dose')),
                ('irradiated_volume', models.ForeignKey(db_constraint=False, help_text='Anatomical location of the irradiated volume', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.radiotherapytreatmentlocation', verbose_name='Irradiated volume')),
                ('irradiated_volume_morphology', models.ForeignKey(blank=True, db_constraint=False, help_text='Morphology of the anatomical location of the irradiated volume', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.radiotherapyvolumetype', verbose_name='Irradiated volume morphology')),
                ('irradiated_volume_qualifier', models.ForeignKey(blank=True, db_constraint=False, help_text='General qualifier for the anatomical location of the irradiated volume', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.radiotherapytreatmentlocationqualifier', verbose_name='Irradiated volume qualifier')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.radiotherapydosage')),
                ('radiotherapy', models.ForeignKey(db_constraint=False, help_text='Indicates the radoptherapy where this dosage was delivered', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.radiotherapy', verbose_name='Radiotherapy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapySetting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('modality', models.ForeignKey(help_text='Modality of external beam or brachytherapy radiation procedures', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.radiotherapymodality', verbose_name='Modality')),
                ('radiotherapy', models.ForeignKey(help_text='Indicates the radoptherapy where this dosage was delivered', on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='oncology.radiotherapy', verbose_name='Radiotherapy')),
                ('technique', models.ForeignKey(help_text='Technique of external beam or brachytherapy radiation procedures', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.radiotherapytechnique', verbose_name='Technique')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiotherapySettingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('modality', models.ForeignKey(db_constraint=False, help_text='Modality of external beam or brachytherapy radiation procedures', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.radiotherapymodality', verbose_name='Modality')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.radiotherapysetting')),
                ('radiotherapy', models.ForeignKey(db_constraint=False, help_text='Indicates the radoptherapy where this dosage was delivered', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.radiotherapy', verbose_name='Radiotherapy')),
                ('technique', models.ForeignKey(db_constraint=False, help_text='Technique of external beam or brachytherapy radiation procedures', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.radiotherapytechnique', verbose_name='Technique')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RaiStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('methodology', models.ForeignKey(blank=True, db_constraint=False, help_text='Methodology used for the Rai staging', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.raistagingmethod', verbose_name='Rai staging methodology')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Rai stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.raistage', verbose_name='Rai Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RhabdomyosarcomaClinicalGroupEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the rhabdomyosarcoma clinical group', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.rhabdomyosarcomaclinicalgroup', verbose_name='Rhabdomyosarcoma clinical group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the risk assessment was performed and recorded.', verbose_name='Assessment date')),
                ('score', models.FloatField(blank=True, help_text='Quantitative score used to classify the risk', null=True, verbose_name='Score')),
                ('assessed_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were assessed to estimate the risk.', related_name='risk_assessments', to='oncology.neoplasticentity', verbose_name='Assessed neoplastic entities')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's cancer risk is assesed", on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='oncology.patientcase', verbose_name='Patient case')),
                ('methodology', models.ForeignKey(help_text='Indicates the method or type of risk assessment', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancerriskassessmentmethod', verbose_name='Assessment methodology')),
                ('risk', models.ForeignKey(help_text='Assessed risk', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancerriskassessmentclassification', verbose_name='Risk')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiskAssessmentEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the risk assessment was performed and recorded.', null=True, verbose_name='Assessment date')),
                ('score', models.FloatField(blank=True, help_text='Quantitative score used to classify the risk', null=True, verbose_name='Score')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's cancer risk is assesed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('methodology', models.ForeignKey(db_constraint=False, help_text='Indicates the method or type of risk assessment', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancerriskassessmentmethod', verbose_name='Assessment methodology')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.riskassessment')),
                ('risk', models.ForeignKey(db_constraint=False, help_text='Assessed risk', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancerriskassessmentclassification', verbose_name='Risk')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RISSStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the RISS stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.myelomarissstage', verbose_name='RISS Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the staging was performed and recorded.', null=True, verbose_name='Staging date')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's cancer is staged", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_events', related_query_name='parent_events', to='oncology.staging')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Surgery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the surgical procedure.', verbose_name='Assessment date')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Therapeutic intent of the surgery', max_length=30, verbose_name='Intent')),
                ('bodysite', models.ForeignKey(blank=True, help_text='Anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertopography', verbose_name='Anatomical location')),
                ('bodysite_laterality', models.ForeignKey(blank=True, help_text='Laterality for the anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lateralityqualifier', verbose_name='Anatomical location laterality')),
                ('bodysite_qualifier', models.ForeignKey(blank=True, help_text='General qualifier for the anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.bodylocationqualifier', verbose_name='Anatomical location qualifier')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient who received the surgical procedure', on_delete=django.db.models.deletion.CASCADE, related_name='surgeries', to='oncology.patientcase', verbose_name='Patient case')),
                ('outcome', models.ForeignKey(blank=True, help_text='The outcome of the surgery', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.procedureoutcome', verbose_name='Outcome')),
                ('procedure', models.ForeignKey(help_text='The specific surgical procedure that was performed', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.surgicalprocedure', verbose_name='Surgical procedure')),
                ('targeted_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were targeted by the surgery', related_name='surgeries', to='oncology.neoplasticentity', verbose_name='Targeted neoplastic entities')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SystemicTherapy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Clinically-relevant period during which the therapy was administered to the patient.', verbose_name='Treatment period')),
                ('cycles', models.PositiveIntegerField(blank=True, help_text='The total number of treatment cycles during the treatment period.', null=True, verbose_name='Cycles')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, verbose_name='Intent')),
                ('is_adjunctive', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('adjunctive_role__isnull', False)), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates whether it is adjunctive therapy instead of a primary therapy ', output_field=models.BooleanField(), verbose_name='Treatment Role')),
                ('adjunctive_role', models.ForeignKey(blank=True, help_text='Indicates the role of the adjunctive therapy (if applicable).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.adjunctivetherapyrole', verbose_name='Treatment Role')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient who received the systemic therapy', on_delete=django.db.models.deletion.CASCADE, related_name='systemic_therapies', to='oncology.patientcase', verbose_name='Patient case')),
                ('targeted_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were targeted by the systemic therapy', related_name='systemic_therapies', to='oncology.neoplasticentity', verbose_name='Targeted neoplastic entities')),
                ('termination_reason', models.ForeignKey(blank=True, help_text='Explanation for the premature or planned termination of the systemic therapy', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.treatmentterminationreason', verbose_name='Termination reason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventSuspectedCause',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('causality', models.CharField(blank=True, choices=[('unrelated', 'Unrelated'), ('unlikely-related', 'Unlekely Related'), ('possibly-related', 'Possibly Related'), ('probably-related', 'Probably Related'), ('definitely-related', 'Definitely Related'), ('conditionally-related', 'Conditionally Related')], help_text='Assessment of the potential causality', max_length=50, null=True, verbose_name='Causality')),
                ('adverse_event', models.ForeignKey(help_text='Adverse event to which this suspected cause belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='suspected_causes', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('radiotherapy', models.ForeignKey(blank=True, help_text='Radiotherapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.radiotherapy', verbose_name='Suspected radiotherapy')),
                ('surgery', models.ForeignKey(blank=True, help_text='Surgery suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.surgery', verbose_name='Suspected surgery')),
                ('systemic_therapy', models.ForeignKey(blank=True, help_text='Systemic therapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.systemictherapy', verbose_name='Suspected systemic therapy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SystemicTherapyMedication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('used_offlabel', models.BooleanField(blank=True, help_text='Indicates whether a medication was used off-label at the time of administration', null=True, verbose_name='Off-label use')),
                ('within_soc', models.BooleanField(blank=True, help_text='Indicates whether a medication was within standard of care (SOC) at the time of administration.', null=True, verbose_name='Within SOC')),
                ('dosage_mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in mass concentration (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassConcentration, null=True, verbose_name='Dosage - Mass concentration')),
                ('dosage_mass', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a fixed mass (if revelant/appliccable)', measurement=measurement.measures.mass.Mass, null=True, verbose_name='Dosage - Fixed Mass')),
                ('dosage_volume', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a volume (if revelant/appliccable)', measurement=onconova.core.measures.measures.Volume, null=True, verbose_name='Dosage - Volume')),
                ('dosage_mass_surface', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerArea, null=True, verbose_name='Dosage - Mass per body surface')),
                ('dosage_rate_mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassConcentrationPerTime, null=True, verbose_name='Dosage rate - Mass concentration')),
                ('dosage_rate_mass', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerTime, null=True, verbose_name='Dosage rate - Fixed Mass')),
                ('dosage_rate_volume', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a volume (if revelant/appliccable)', measurement=onconova.core.measures.measures.VolumePerTime, null=True, verbose_name='Dosage rate - Volume')),
                ('dosage_rate_mass_surface', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerAreaPerTime, null=True, verbose_name='Dosage rate - Mass per body surface')),
                ('drug', models.ForeignKey(help_text='Antineoplastic drug/medication administered to the patient', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.antineoplasticagent', verbose_name='Antineoplastic Drug')),
                ('route', models.ForeignKey(blank=True, help_text='Drug administration route', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.dosageroute', verbose_name='Route')),
                ('systemic_therapy', models.ForeignKey(help_text='The systemic therapy to which this medication belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='oncology.systemictherapy', verbose_name='Systemic therapy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventSuspectedCauseEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('causality', models.CharField(blank=True, choices=[('unrelated', 'Unrelated'), ('unlikely-related', 'Unlekely Related'), ('possibly-related', 'Possibly Related'), ('probably-related', 'Probably Related'), ('definitely-related', 'Definitely Related'), ('conditionally-related', 'Conditionally Related')], help_text='Assessment of the potential causality', max_length=50, null=True, verbose_name='Causality')),
                ('adverse_event', models.ForeignKey(db_constraint=False, help_text='Adverse event to which this suspected cause belongs to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.adverseevent', verbose_name='Adverse event')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.adverseeventsuspectedcause')),
                ('radiotherapy', models.ForeignKey(blank=True, db_constraint=False, help_text='Radiotherapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.radiotherapy', verbose_name='Suspected radiotherapy')),
                ('surgery', models.ForeignKey(blank=True, db_constraint=False, help_text='Surgery suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.surgery', verbose_name='Suspected surgery')),
                ('systemic_therapy', models.ForeignKey(blank=True, db_constraint=False, help_text='Systemic therapy suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.systemictherapy', verbose_name='Suspected systemic therapy')),
                ('medication', models.ForeignKey(blank=True, db_constraint=False, help_text='Systemic therapy medication suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.systemictherapymedication', verbose_name='Suspected systemic therapy medication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='adverseeventsuspectedcause',
            name='medication',
            field=models.ForeignKey(blank=True, help_text='Systemic therapy medication suspected to be the cause of the adverse event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adverse_events', to='oncology.systemictherapymedication', verbose_name='Suspected systemic therapy medication'),
        ),
        migrations.CreateModel(
            name='SystemicTherapyMedicationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('used_offlabel', models.BooleanField(blank=True, help_text='Indicates whether a medication was used off-label at the time of administration', null=True, verbose_name='Off-label use')),
                ('within_soc', models.BooleanField(blank=True, help_text='Indicates whether a medication was within standard of care (SOC) at the time of administration.', null=True, verbose_name='Within SOC')),
                ('dosage_mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in mass concentration (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassConcentration, null=True, verbose_name='Dosage - Mass concentration')),
                ('dosage_mass', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a fixed mass (if revelant/appliccable)', measurement=measurement.measures.mass.Mass, null=True, verbose_name='Dosage - Fixed Mass')),
                ('dosage_volume', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a volume (if revelant/appliccable)', measurement=onconova.core.measures.measures.Volume, null=True, verbose_name='Dosage - Volume')),
                ('dosage_mass_surface', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage of the medication expressed in a mass per body surface area (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerArea, null=True, verbose_name='Dosage - Mass per body surface')),
                ('dosage_rate_mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in mass concentration (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassConcentrationPerTime, null=True, verbose_name='Dosage rate - Mass concentration')),
                ('dosage_rate_mass', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a fixed mass (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerTime, null=True, verbose_name='Dosage rate - Fixed Mass')),
                ('dosage_rate_volume', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a volume (if revelant/appliccable)', measurement=onconova.core.measures.measures.VolumePerTime, null=True, verbose_name='Dosage rate - Volume')),
                ('dosage_rate_mass_surface', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Dosage rate of the medication expressed in a mass per body surface area (if revelant/appliccable)', measurement=onconova.core.measures.measures.MassPerAreaPerTime, null=True, verbose_name='Dosage rate - Mass per body surface')),
                ('drug', models.ForeignKey(db_constraint=False, help_text='Antineoplastic drug/medication administered to the patient', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.antineoplasticagent', verbose_name='Antineoplastic Drug')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.systemictherapymedication')),
                ('route', models.ForeignKey(blank=True, db_constraint=False, help_text='Drug administration route', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.dosageroute', verbose_name='Route')),
                ('systemic_therapy', models.ForeignKey(db_constraint=False, help_text='The systemic therapy to which this medication belongs to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.systemictherapy', verbose_name='Systemic therapy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TherapyLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('ordinal', models.PositiveIntegerField(help_text='Number indicating the sequence in which this block of treatments were administered to the patient', verbose_name='Line ordinal number')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, verbose_name='Intent')),
                ('progression_date', models.DateField(blank=True, help_text='Date at which progression was first detected, if applicable', null=True, verbose_name='Begin of progression')),
                ('label', models.GeneratedField(db_persist=True, expression=django.db.models.functions.text.Concat(django.db.models.functions.text.Upper(django.db.models.functions.text.Left('intent', 1)), models.Value('LoT'), 'ordinal', output_field=django.db.models.fields.CharField), output_field=models.CharField())),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient to whom this therapy line is associated', on_delete=django.db.models.deletion.CASCADE, related_name='therapy_lines', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SystemicTherapyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Clinically-relevant period during which the therapy was administered to the patient.', null=True, verbose_name='Treatment period')),
                ('cycles', models.PositiveIntegerField(blank=True, help_text='The total number of treatment cycles during the treatment period.', null=True, verbose_name='Cycles')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, null=True, verbose_name='Intent')),
                ('is_adjunctive', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('adjunctive_role__isnull', False)), then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()), help_text='Indicates whether it is adjunctive therapy instead of a primary therapy ', null=True, output_field=models.BooleanField(), verbose_name='Treatment Role')),
                ('adjunctive_role', models.ForeignKey(blank=True, db_constraint=False, help_text='Indicates the role of the adjunctive therapy (if applicable).', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.adjunctivetherapyrole', verbose_name='Treatment Role')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient who received the systemic therapy', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.systemictherapy')),
                ('termination_reason', models.ForeignKey(blank=True, db_constraint=False, help_text='Explanation for the premature or planned termination of the systemic therapy', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.treatmentterminationreason', verbose_name='Termination reason')),
                ('therapy_line', models.ForeignKey(blank=True, db_constraint=False, help_text='Therapy line to which the systemic therapy is assigned to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.therapyline', verbose_name='Therapy line')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='systemictherapy',
            name='therapy_line',
            field=models.ForeignKey(blank=True, help_text='Therapy line to which the systemic therapy is assigned to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='systemic_therapies', to='oncology.therapyline', verbose_name='Therapy line'),
        ),
        migrations.CreateModel(
            name='SurgeryEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the surgical procedure.', null=True, verbose_name='Assessment date')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Therapeutic intent of the surgery', max_length=30, null=True, verbose_name='Intent')),
                ('bodysite', models.ForeignKey(blank=True, db_constraint=False, help_text='Anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancertopography', verbose_name='Anatomical location')),
                ('bodysite_laterality', models.ForeignKey(blank=True, db_constraint=False, help_text='Laterality for the anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.lateralityqualifier', verbose_name='Anatomical location laterality')),
                ('bodysite_qualifier', models.ForeignKey(blank=True, db_constraint=False, help_text='General qualifier for the anatomical location of the surgery', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.bodylocationqualifier', verbose_name='Anatomical location qualifier')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient who received the surgical procedure', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('outcome', models.ForeignKey(blank=True, db_constraint=False, help_text='The outcome of the surgery', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.procedureoutcome', verbose_name='Outcome')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.surgery')),
                ('procedure', models.ForeignKey(db_constraint=False, help_text='The specific surgical procedure that was performed', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.surgicalprocedure', verbose_name='Surgical procedure')),
                ('therapy_line', models.ForeignKey(blank=True, db_constraint=False, help_text='Therapy line to which the surgery is assigned to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.therapyline', verbose_name='Therapy line')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='surgery',
            name='therapy_line',
            field=models.ForeignKey(blank=True, help_text='Therapy line to which the surgery is assigned to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surgeries', to='oncology.therapyline', verbose_name='Therapy line'),
        ),
        migrations.CreateModel(
            name='RadiotherapyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Clinically-relevant period during which the radiotherapy was administered to the patient.', null=True, verbose_name='Treatment period')),
                ('sessions', models.PositiveIntegerField(help_text='The total number of radiotherapy sessions over the treatment period.', null=True, verbose_name='Total sessions')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, null=True, verbose_name='Intent')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient who received the radiotherapy', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.radiotherapy')),
                ('termination_reason', models.ForeignKey(blank=True, db_constraint=False, help_text='Explanation for the premature or planned termination of the radiotherapy', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.treatmentterminationreason', verbose_name='Termination reason')),
                ('therapy_line', models.ForeignKey(blank=True, db_constraint=False, help_text='Therapy line to which the radiotherapy is assigned to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.therapyline', verbose_name='Therapy line')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='radiotherapy',
            name='therapy_line',
            field=models.ForeignKey(blank=True, help_text='Therapy line to which the radiotherapy is assigned to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='radiotherapies', to='oncology.therapyline', verbose_name='Therapy line'),
        ),
        migrations.CreateModel(
            name='TherapyLineEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('ordinal', models.PositiveIntegerField(help_text='Number indicating the sequence in which this block of treatments were administered to the patient', null=True, verbose_name='Line ordinal number')),
                ('intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative')], help_text='Treatment intent of the system therapy', max_length=30, null=True, verbose_name='Intent')),
                ('progression_date', models.DateField(blank=True, help_text='Date at which progression was first detected, if applicable', null=True, verbose_name='Begin of progression')),
                ('label', models.GeneratedField(db_persist=True, expression=django.db.models.functions.text.Concat(django.db.models.functions.text.Upper(django.db.models.functions.text.Left('intent', 1)), models.Value('LoT'), 'ordinal', output_field=django.db.models.fields.CharField), null=True, output_field=models.CharField())),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient to whom this therapy line is associated', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.therapyline')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TNMStagingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('pathological', models.BooleanField(blank=True, help_text='Whether the staging was based on pathological (true) or clinical (false) evidence.', null=True, verbose_name='Pathological staging')),
                ('distantMetastases', models.ForeignKey(blank=True, db_constraint=False, help_text='M stage (presence of distant metastasis)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmdistantmetastasescategory', verbose_name='M Stage')),
                ('grade', models.ForeignKey(blank=True, db_constraint=False, help_text='G stage (grade of the cancer cells)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmgradecategory', verbose_name='G Stage')),
                ('lymphaticInvasion', models.ForeignKey(blank=True, db_constraint=False, help_text='L stage (invasion into lymphatic vessels)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmlymphaticinvasioncategory', verbose_name='L Stage')),
                ('methodology', models.ForeignKey(blank=True, db_constraint=False, help_text='Methodology used for TNM staging', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmstagingmethod', verbose_name='TNM Staging methodology')),
                ('perineuralInvasion', models.ForeignKey(blank=True, db_constraint=False, help_text='Pn stage (invasion into adjunct nerves)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmperineuralinvasioncategory', verbose_name='Pn Stage')),
                ('primaryTumor', models.ForeignKey(blank=True, db_constraint=False, help_text='T stage (extent of the primary tumor)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmprimarytumorcategory', verbose_name='T Stage')),
                ('regionalNodes', models.ForeignKey(blank=True, db_constraint=False, help_text='N stage (degree of spread to regional lymph nodes)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmregionalnodescategory', verbose_name='N Stage')),
                ('residualTumor', models.ForeignKey(blank=True, db_constraint=False, help_text='R stage (extent of residual tumor cells after operation)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmresidualtumorcategory', verbose_name='R Stage')),
                ('serumTumorMarkerLevel', models.ForeignKey(blank=True, db_constraint=False, help_text='S stage (serum tumor marker level)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmserumtumormarkerlevelcategory', verbose_name='S Stage')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The classification of the TNM stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmstage', verbose_name='TNM Stage')),
                ('venousInvasion', models.ForeignKey(blank=True, db_constraint=False, help_text='V stage (invasion into venous vessels)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tnmvenousinvasioncategory', verbose_name='V Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the treatment response assessment', verbose_name='Assessment date')),
                ('recist_interpreted', models.BooleanField(blank=True, help_text='Indicates whether the RECIST value was interpreted or taken from the radiology report', null=True, verbose_name='RECIST Interpreted?')),
                ('assessed_bodysites', models.ManyToManyField(blank=True, help_text='Anatomical location assessed to determine the treatment response', related_name='+', to='terminology.observationbodysite', verbose_name='Assessed anatomical location')),
                ('assessed_entities', models.ManyToManyField(help_text='References to the neoplastic entities that were assesed for treatment response', related_name='treatment_responses', to='oncology.neoplasticentity', verbose_name='Assessed neoplastic entities')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's treatment response is asseessed", on_delete=django.db.models.deletion.CASCADE, related_name='treatment_responses', to='oncology.patientcase', verbose_name='Patient case')),
                ('methodology', models.ForeignKey(help_text='Method used to assess and classify the treatment response', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertreatmentresponseobservationmethod', verbose_name='Assessment method')),
                ('recist', models.ForeignKey(help_text='The classification of the treatment response according to RECIST', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.cancertreatmentresponse', verbose_name='RECIST')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentResponseEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date of the treatment response assessment', null=True, verbose_name='Assessment date')),
                ('recist_interpreted', models.BooleanField(blank=True, help_text='Indicates whether the RECIST value was interpreted or taken from the radiology report', null=True, verbose_name='RECIST Interpreted?')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's treatment response is asseessed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('methodology', models.ForeignKey(db_constraint=False, help_text='Method used to assess and classify the treatment response', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancertreatmentresponseobservationmethod', verbose_name='Assessment method')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.treatmentresponse')),
                ('recist', models.ForeignKey(db_constraint=False, help_text='The classification of the treatment response according to RECIST', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.cancertreatmentresponse', verbose_name='RECIST')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TumorBoardEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Date at which the tumor board took place and/or when the board provided a recommendation.', null=True, verbose_name='Date')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient which was discussed at the tumor board', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_events', related_query_name='parent_events', to='oncology.tumorboard')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TumorMarker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the tumor marker was analyzed.', verbose_name='Date')),
                ('mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Mass concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.MassConcentration, null=True, verbose_name='Mass concentration')),
                ('arbitrary_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='kIU__l', help_text='Arbitrary concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.ArbitraryConcentration, null=True, verbose_name='Arbitrary concentration')),
                ('substance_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Substance concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.SubstanceConcentration, null=True, verbose_name='Substance concentration')),
                ('fraction', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Analyte fraction (if revelant/measured)', measurement=onconova.core.measures.measures.Fraction, null=True, verbose_name='Fraction')),
                ('multiple_of_median', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Multiples of the median analyte (if revelant/measured)', measurement=onconova.core.measures.measures.MultipleOfMedian, null=True, verbose_name='Multiples of the median')),
                ('tumor_proportion_score', models.CharField(blank=True, choices=[('TC0', 'Tp0'), ('TC1', 'Tc1'), ('TC2', 'Tc2'), ('TC3', 'Tc3')], help_text='Categorization of the percentage of cells in a tumor that express PD-L1', max_length=50, null=True, verbose_name='Immune Cells Score (ICS)')),
                ('immune_cell_score', models.CharField(blank=True, choices=[('IC0', 'Ic0'), ('IC1', 'Ic1'), ('IC2', 'Ic2'), ('IC3', 'Ic3')], help_text='Categorization of the percentage of PD-L1 positive immune cells', max_length=50, null=True, verbose_name='Immune Cells Score (ICS)')),
                ('combined_positive_score', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100', measurement=onconova.core.measures.measures.Fraction, null=True, verbose_name='Combined Positive Score (CPS)')),
                ('immunohistochemical_score', models.CharField(blank=True, choices=[('0', 'Zero'), ('1+', 'One'), ('2+', 'Two'), ('3+', 'Three'), ('indeterminate', 'Indeterminate')], help_text='Categorization of the number of analyte-positive cells in a sample', max_length=50, null=True, verbose_name='Immunohistochemical Score')),
                ('presence', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate')], help_text='Whether an analyte has tested positive or negative.', max_length=50, null=True, verbose_name='Presence')),
                ('nuclear_expression_status', models.CharField(blank=True, choices=[('intact', 'Intact'), ('loss', 'Loss'), ('indeterminate', 'Indeterminate')], help_text='Categorization of the status of expression of the analyte', max_length=50, null=True, verbose_name='Nuclear expression status')),
                ('analyte', models.ForeignKey(help_text='The chemical or biological substance/agent that is analyzed.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tumormarkeranalyte', verbose_name='Analyte')),
                ('case', models.ForeignKey(help_text='Indicates the case of the patient related to the tumor marker result', on_delete=django.db.models.deletion.CASCADE, related_name='tumor_markers', to='oncology.patientcase', verbose_name='Patient case')),
                ('related_entities', models.ManyToManyField(help_text='References to the neoplastic entities that are related or the focus of the tumor marker analysis.', related_name='tumor_markers', to='oncology.neoplasticentity', verbose_name='Related neoplastic entities')),
            ],
        ),
        migrations.AddField(
            model_name='moleculartherapeuticrecommendation',
            name='supporting_tumor_markers',
            field=models.ManyToManyField(blank=True, help_text='Tumor markers that support the recommendation', related_name='+', to='oncology.tumormarker', verbose_name='Supporting tumor markers'),
        ),
        migrations.CreateModel(
            name='TumorMarkerEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the tumor marker was analyzed.', null=True, verbose_name='Date')),
                ('mass_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Mass concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.MassConcentration, null=True, verbose_name='Mass concentration')),
                ('arbitrary_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='kIU__l', help_text='Arbitrary concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.ArbitraryConcentration, null=True, verbose_name='Arbitrary concentration')),
                ('substance_concentration', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Substance concentration of the analyte (if revelant/measured)', measurement=onconova.core.measures.measures.SubstanceConcentration, null=True, verbose_name='Substance concentration')),
                ('fraction', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Analyte fraction (if revelant/measured)', measurement=onconova.core.measures.measures.Fraction, null=True, verbose_name='Fraction')),
                ('multiple_of_median', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='Multiples of the median analyte (if revelant/measured)', measurement=onconova.core.measures.measures.MultipleOfMedian, null=True, verbose_name='Multiples of the median')),
                ('tumor_proportion_score', models.CharField(blank=True, choices=[('TC0', 'Tp0'), ('TC1', 'Tc1'), ('TC2', 'Tc2'), ('TC3', 'Tc3')], help_text='Categorization of the percentage of cells in a tumor that express PD-L1', max_length=50, null=True, verbose_name='Immune Cells Score (ICS)')),
                ('immune_cell_score', models.CharField(blank=True, choices=[('IC0', 'Ic0'), ('IC1', 'Ic1'), ('IC2', 'Ic2'), ('IC3', 'Ic3')], help_text='Categorization of the percentage of PD-L1 positive immune cells', max_length=50, null=True, verbose_name='Immune Cells Score (ICS)')),
                ('combined_positive_score', onconova.core.measures.fields.MeasurementField(blank=True, default_unit=None, help_text='The number of PD-L1 positive cells, including tumor cells, lymphocytes, and macrophages divided by the total number of viable tumor cells multiplied by 100', measurement=onconova.core.measures.measures.Fraction, null=True, verbose_name='Combined Positive Score (CPS)')),
                ('immunohistochemical_score', models.CharField(blank=True, choices=[('0', 'Zero'), ('1+', 'One'), ('2+', 'Two'), ('3+', 'Three'), ('indeterminate', 'Indeterminate')], help_text='Categorization of the number of analyte-positive cells in a sample', max_length=50, null=True, verbose_name='Immunohistochemical Score')),
                ('presence', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('indeterminate', 'Indeterminate')], help_text='Whether an analyte has tested positive or negative.', max_length=50, null=True, verbose_name='Presence')),
                ('nuclear_expression_status', models.CharField(blank=True, choices=[('intact', 'Intact'), ('loss', 'Loss'), ('indeterminate', 'Indeterminate')], help_text='Categorization of the status of expression of the analyte', max_length=50, null=True, verbose_name='Nuclear expression status')),
                ('analyte', models.ForeignKey(db_constraint=False, help_text='The chemical or biological substance/agent that is analyzed.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.tumormarkeranalyte', verbose_name='Analyte')),
                ('case', models.ForeignKey(db_constraint=False, help_text='Indicates the case of the patient related to the tumor marker result', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.tumormarker')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vitals',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the vitals were recorded.', verbose_name='Assessment date')),
                ('height', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='m', help_text='Height of the patient', measurement=measurement.measures.distance.Distance, null=True, verbose_name='Height')),
                ('weight', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='kg', help_text='Weight of the patient', measurement=measurement.measures.mass.Mass, null=True, verbose_name='Weight')),
                ('blood_pressure_systolic', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='mmHg', help_text='Systolic blood pressure of the patient', measurement=onconova.core.measures.measures.Pressure, null=True, verbose_name='Systolic blood pressure')),
                ('blood_pressure_diastolic', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='mmHg', help_text='Diastolic blood pressure of the patient', measurement=onconova.core.measures.measures.Pressure, null=True, verbose_name='Diastolic blood pressure')),
                ('temperature', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='celsius', help_text='Temperature of the patient', measurement=onconova.core.measures.measures.Temperature, null=True, verbose_name='Temperature')),
                ('case', models.ForeignKey(help_text="Indicates the case of the patient who's vitals are assesed", on_delete=django.db.models.deletion.CASCADE, related_name='vitals', to='oncology.patientcase', verbose_name='Patient case')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VitalsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('date', models.DateField(help_text='Clinically-relevant date at which the vitals were recorded.', null=True, verbose_name='Assessment date')),
                ('height', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='m', help_text='Height of the patient', measurement=measurement.measures.distance.Distance, null=True, verbose_name='Height')),
                ('weight', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='kg', help_text='Weight of the patient', measurement=measurement.measures.mass.Mass, null=True, verbose_name='Weight')),
                ('blood_pressure_systolic', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='mmHg', help_text='Systolic blood pressure of the patient', measurement=onconova.core.measures.measures.Pressure, null=True, verbose_name='Systolic blood pressure')),
                ('blood_pressure_diastolic', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='mmHg', help_text='Diastolic blood pressure of the patient', measurement=onconova.core.measures.measures.Pressure, null=True, verbose_name='Diastolic blood pressure')),
                ('temperature', onconova.core.measures.fields.MeasurementField(blank=True, default_unit='celsius', help_text='Temperature of the patient', measurement=onconova.core.measures.measures.Temperature, null=True, verbose_name='Temperature')),
                ('case', models.ForeignKey(db_constraint=False, help_text="Indicates the case of the patient who's vitals are assesed", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.patientcase', verbose_name='Patient case')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.vitals')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WilmsStageEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('staging', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', related_query_name='+', serialize=False, to='oncology.staging')),
                ('stage', models.ForeignKey(db_constraint=False, help_text='The value of the Wilms stage', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='terminology.wilmstumorstage', verbose_name='Wilms Stage')),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventmitigation',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventmitigationevent" ("adjustment_id", "adverse_event_id", "category", "drug_id", "external_source", "external_source_id", "id", "management_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id") VALUES (NEW."adjustment_id", NEW."adverse_event_id", NEW."category", NEW."drug_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."management_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."procedure_id"); RETURN NULL;', hash='6bf8d5d8c0045f7257a3b2fe9f48c4b6ae7ed211', operation='INSERT', pgid='pgtrigger_create_insert_fad12', table='oncology_adverseeventmitigation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventmitigation',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_adverseeventmitigationevent" ("adjustment_id", "adverse_event_id", "category", "drug_id", "external_source", "external_source_id", "id", "management_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id") VALUES (NEW."adjustment_id", NEW."adverse_event_id", NEW."category", NEW."drug_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."management_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."procedure_id"); RETURN NULL;', hash='41250ca5f165f08004faff73ea6da99c7526c495', operation='UPDATE', pgid='pgtrigger_update_update_e8306', table='oncology_adverseeventmitigation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventmitigation',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventmitigationevent" ("adjustment_id", "adverse_event_id", "category", "drug_id", "external_source", "external_source_id", "id", "management_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id") VALUES (OLD."adjustment_id", OLD."adverse_event_id", OLD."category", OLD."drug_id", OLD."external_source", OLD."external_source_id", OLD."id", OLD."management_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."procedure_id"); RETURN NULL;', hash='6902afdc90e06952828f7a901d138e0911ffac05', operation='DELETE', pgid='pgtrigger_delete_delete_27e40', table='oncology_adverseeventmitigation', when='AFTER')),
        ),
        migrations.AddField(
            model_name='aneuploidscoreevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.aneuploidscore'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='aneuploidscore',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_aneuploidscoreevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='c7843b9a61cffa87aba221947564f2f407054851', operation='INSERT', pgid='pgtrigger_create_insert_3893e', table='oncology_aneuploidscore', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='aneuploidscore',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."value" IS DISTINCT FROM (NEW."value"))', func='INSERT INTO "oncology_aneuploidscoreevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='5c9b11b65b63415f57894f630912ced8ccf1a583', operation='UPDATE', pgid='pgtrigger_update_update_c1117', table='oncology_aneuploidscore', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='aneuploidscore',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_aneuploidscoreevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (OLD."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."value"); RETURN NULL;', hash='698a1101520e2799ae314a6c303e22ad589068af', operation='DELETE', pgid='pgtrigger_delete_delete_dfa15', table='oncology_aneuploidscore', when='AFTER')),
        ),
        migrations.AddField(
            model_name='homologousrecombinationdeficiencyevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.homologousrecombinationdeficiency'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='homologousrecombinationdeficiency',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_homologousrecombinationdeficiencyevent" ("genomic_signature_id", "interpretation", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", NEW."interpretation", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='8693addcbb06766c61b91bbbca9f577f85eb139c', operation='INSERT', pgid='pgtrigger_create_insert_0c727', table='oncology_homologousrecombinationdeficiency', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='homologousrecombinationdeficiency',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."interpretation" IS DISTINCT FROM (NEW."interpretation") OR OLD."value" IS DISTINCT FROM (NEW."value"))', func='INSERT INTO "oncology_homologousrecombinationdeficiencyevent" ("genomic_signature_id", "interpretation", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", NEW."interpretation", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='1d7f688fc8676c47596a2192df6419cc5ca0b28b', operation='UPDATE', pgid='pgtrigger_update_update_4f0e9', table='oncology_homologousrecombinationdeficiency', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='homologousrecombinationdeficiency',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_homologousrecombinationdeficiencyevent" ("genomic_signature_id", "interpretation", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (OLD."genomic_signature_id", OLD."interpretation", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."value"); RETURN NULL;', hash='32001c6e3b2c156034c8edfc4c4cf56bdb9fd9dd', operation='DELETE', pgid='pgtrigger_delete_delete_6f60c', table='oncology_homologousrecombinationdeficiency', when='AFTER')),
        ),
        migrations.AddField(
            model_name='lossofheterozygosityevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.lossofheterozygosity'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lossofheterozygosity',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lossofheterozygosityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='156248dca924cdf807015ecd35090b5a84ca4f9e', operation='INSERT', pgid='pgtrigger_create_insert_7812c', table='oncology_lossofheterozygosity', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lossofheterozygosity',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."value" IS DISTINCT FROM (NEW."value"))', func='INSERT INTO "oncology_lossofheterozygosityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='2cef32c14503a5efb7b4243a7e0bbd65221fd5fa', operation='UPDATE', pgid='pgtrigger_update_update_8f636', table='oncology_lossofheterozygosity', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lossofheterozygosity',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lossofheterozygosityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (OLD."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."value"); RETURN NULL;', hash='6f1319a62934bf4ec0efb4c0832530e34f4f3fc8', operation='DELETE', pgid='pgtrigger_delete_delete_d6af4', table='oncology_lossofheterozygosity', when='AFTER')),
        ),
        migrations.AddField(
            model_name='microsatelliteinstabilityevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.microsatelliteinstability'),
        ),
        migrations.AddField(
            model_name='microsatelliteinstability',
            name='value',
            field=models.ForeignKey(help_text='Microsatellite instability (MSI) classification', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.microsatelliteinstabilitystate', verbose_name='Value'),
        ),
        migrations.AddField(
            model_name='tumormutationalburdenevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.tumormutationalburden'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormutationalburden',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumormutationalburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."status", NEW."value"); RETURN NULL;', hash='d9f4db08e8228b36b8d5ed7e5d36f5a37fdb4aa1', operation='INSERT', pgid='pgtrigger_create_insert_d01d4', table='oncology_tumormutationalburden', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormutationalburden',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."status" IS DISTINCT FROM (NEW."status") OR OLD."value" IS DISTINCT FROM (NEW."value"))', func='INSERT INTO "oncology_tumormutationalburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."status", NEW."value"); RETURN NULL;', hash='d2b6227a8f0fe22968b6e8bf895ea0ae2383ff9b', operation='UPDATE', pgid='pgtrigger_update_update_b9351', table='oncology_tumormutationalburden', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormutationalburden',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumormutationalburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "value") VALUES (OLD."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."status", OLD."value"); RETURN NULL;', hash='506ec3f7ce6a9069efff8eacdeb6107bc7834e58', operation='DELETE', pgid='pgtrigger_delete_delete_a8ed4', table='oncology_tumormutationalburden', when='AFTER')),
        ),
        migrations.AddField(
            model_name='tumorneoantigenburdenevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.tumorneoantigenburden'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorneoantigenburden',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumorneoantigenburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='d94467f67684e29008fc91836c8304461ae5e42b', operation='INSERT', pgid='pgtrigger_create_insert_d5f57', table='oncology_tumorneoantigenburden', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorneoantigenburden',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."value" IS DISTINCT FROM (NEW."value"))', func='INSERT INTO "oncology_tumorneoantigenburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."value"); RETURN NULL;', hash='8e5035765f71d844b6bb06db1f86b129b14da194', operation='UPDATE', pgid='pgtrigger_update_update_4ca43', table='oncology_tumorneoantigenburden', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorneoantigenburden',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumorneoantigenburdenevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value") VALUES (OLD."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."value"); RETURN NULL;', hash='75c23a949a64ed7818add94cf2be222a8e680ea5', operation='DELETE', pgid='pgtrigger_delete_delete_c697c', table='oncology_tumorneoantigenburden', when='AFTER')),
        ),
        migrations.AddField(
            model_name='binetstagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.binetstaging'),
        ),
        migrations.AddField(
            model_name='binetstaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Binet stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.binetstage', verbose_name='Binet Stage'),
        ),
        migrations.AddField(
            model_name='breslowdepthevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.breslowdepth'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='breslowdepth',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_breslowdepthevent" ("depth", "is_ulcered", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "staging_id") VALUES (NEW."depth", NEW."is_ulcered", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."staging_id"); RETURN NULL;', hash='ac6d257cfbdd649b70a46645d31e519d0ba65454', operation='INSERT', pgid='pgtrigger_create_insert_3f60e', table='oncology_breslowdepth', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='breslowdepth',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."depth" IS DISTINCT FROM (NEW."depth") OR OLD."is_ulcered" IS DISTINCT FROM (NEW."is_ulcered") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_breslowdepthevent" ("depth", "is_ulcered", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "staging_id") VALUES (NEW."depth", NEW."is_ulcered", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."staging_id"); RETURN NULL;', hash='77517697492b3c6d3b6e9c7f69e540defcbdde7a', operation='UPDATE', pgid='pgtrigger_update_update_28047', table='oncology_breslowdepth', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='breslowdepth',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_breslowdepthevent" ("depth", "is_ulcered", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "staging_id") VALUES (OLD."depth", OLD."is_ulcered", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."staging_id"); RETURN NULL;', hash='d04a88de5cd621c8e15e7febb1c814c83001b0da', operation='DELETE', pgid='pgtrigger_delete_delete_f24c8', table='oncology_breslowdepth', when='AFTER')),
        ),
        migrations.AddField(
            model_name='clarkstagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.clarkstaging'),
        ),
        migrations.AddField(
            model_name='clarkstaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Clark level stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.clarklevel', verbose_name='Clark Level Stage'),
        ),
        migrations.AddField(
            model_name='figostagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.figostaging'),
        ),
        migrations.AddField(
            model_name='figostaging',
            name='methodology',
            field=models.ForeignKey(blank=True, help_text='Methodology used for the FIGO staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.figostagingmethod', verbose_name='FIGO staging methodology'),
        ),
        migrations.AddField(
            model_name='figostaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the FIGO stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.figostage', verbose_name='FIGO Stage'),
        ),
        migrations.AddField(
            model_name='gleasongradeevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.gleasongrade'),
        ),
        migrations.AddField(
            model_name='gleasongrade',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Gleason grade stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.gleasongradegroupstage', verbose_name='Gleason grade Stage'),
        ),
        migrations.AddField(
            model_name='inrgssstageevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.inrgssstage'),
        ),
        migrations.AddField(
            model_name='inrgssstage',
            name='stage',
            field=models.ForeignKey(help_text='The value of the INRGSS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.neuroblastomainrgssstage', verbose_name='INRGSS Stage'),
        ),
        migrations.AddField(
            model_name='inssstageevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.inssstage'),
        ),
        migrations.AddField(
            model_name='inssstage',
            name='stage',
            field=models.ForeignKey(help_text='The value of the INSS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.neuroblastomainssstage', verbose_name='INSS Stage'),
        ),
        migrations.AddField(
            model_name='issstagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.issstaging'),
        ),
        migrations.AddField(
            model_name='issstaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of theISS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.myelomaissstage', verbose_name='ISS Stage'),
        ),
        migrations.AddField(
            model_name='lymphomastagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.lymphomastaging'),
        ),
        migrations.AddField(
            model_name='lymphomastaging',
            name='methodology',
            field=models.ForeignKey(blank=True, help_text='Methodology used for the Lymphoma staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lymphomastagingmethod', verbose_name='Lymphoma staging methodology'),
        ),
        migrations.AddField(
            model_name='lymphomastaging',
            name='modifiers',
            field=models.ManyToManyField(help_text='Qualifier acting as modifier for the lymphoma stage', related_name='+', to='terminology.lymphomastagevaluemodifier', verbose_name='Lymphoma stage modifier'),
        ),
        migrations.AddField(
            model_name='lymphomastaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Lymphoma stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.lymphomastage', verbose_name='Lymphoma Stage'),
        ),
        migrations.AddField(
            model_name='raistagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.raistaging'),
        ),
        migrations.AddField(
            model_name='raistaging',
            name='methodology',
            field=models.ForeignKey(blank=True, help_text='Methodology used for the Rai staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.raistagingmethod', verbose_name='Rai staging methodology'),
        ),
        migrations.AddField(
            model_name='raistaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Rai stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.raistage', verbose_name='Rai Stage'),
        ),
        migrations.AddField(
            model_name='rhabdomyosarcomaclinicalgroupevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.rhabdomyosarcomaclinicalgroup'),
        ),
        migrations.AddField(
            model_name='rhabdomyosarcomaclinicalgroup',
            name='stage',
            field=models.ForeignKey(help_text='The value of the rhabdomyosarcoma clinical group', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.rhabdomyosarcomaclinicalgroup', verbose_name='Rhabdomyosarcoma clinical group'),
        ),
        migrations.AddField(
            model_name='rissstagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.rissstaging'),
        ),
        migrations.AddField(
            model_name='rissstaging',
            name='stage',
            field=models.ForeignKey(help_text='The value of the RISS stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.myelomarissstage', verbose_name='RISS Stage'),
        ),
        migrations.AddField(
            model_name='tnmstagingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.tnmstaging'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='distantMetastases',
            field=models.ForeignKey(blank=True, help_text='M stage (presence of distant metastasis)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmdistantmetastasescategory', verbose_name='M Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='grade',
            field=models.ForeignKey(blank=True, help_text='G stage (grade of the cancer cells)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmgradecategory', verbose_name='G Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='lymphaticInvasion',
            field=models.ForeignKey(blank=True, help_text='L stage (invasion into lymphatic vessels)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmlymphaticinvasioncategory', verbose_name='L Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='methodology',
            field=models.ForeignKey(blank=True, help_text='Methodology used for TNM staging', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmstagingmethod', verbose_name='TNM Staging methodology'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='perineuralInvasion',
            field=models.ForeignKey(blank=True, help_text='Pn stage (invasion into adjunct nerves)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmperineuralinvasioncategory', verbose_name='Pn Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='primaryTumor',
            field=models.ForeignKey(blank=True, help_text='T stage (extent of the primary tumor)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmprimarytumorcategory', verbose_name='T Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='regionalNodes',
            field=models.ForeignKey(blank=True, help_text='N stage (degree of spread to regional lymph nodes)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmregionalnodescategory', verbose_name='N Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='residualTumor',
            field=models.ForeignKey(blank=True, help_text='R stage (extent of residual tumor cells after operation)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmresidualtumorcategory', verbose_name='R Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='serumTumorMarkerLevel',
            field=models.ForeignKey(blank=True, help_text='S stage (serum tumor marker level)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmserumtumormarkerlevelcategory', verbose_name='S Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='stage',
            field=models.ForeignKey(help_text='The classification of the TNM stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmstage', verbose_name='TNM Stage'),
        ),
        migrations.AddField(
            model_name='tnmstaging',
            name='venousInvasion',
            field=models.ForeignKey(blank=True, help_text='V stage (invasion into venous vessels)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.tnmvenousinvasioncategory', verbose_name='V Stage'),
        ),
        migrations.AddField(
            model_name='wilmsstageevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.wilmsstage'),
        ),
        migrations.AddField(
            model_name='wilmsstage',
            name='stage',
            field=models.ForeignKey(help_text='The value of the Wilms stage', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='terminology.wilmstumorstage', verbose_name='Wilms Stage'),
        ),
        migrations.AddField(
            model_name='moleculartumorboardevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.moleculartumorboard'),
        ),
        migrations.AddField(
            model_name='moleculartumorboard',
            name='molecular_comparison_match',
            field=models.ForeignKey(blank=True, help_text='The neoplastic entity that was matched during the molecular comparison', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='oncology.neoplasticentity', verbose_name='Molecular comparison match'),
        ),
        migrations.AddField(
            model_name='moleculartherapeuticrecommendationevent',
            name='molecular_tumor_board',
            field=models.ForeignKey(db_constraint=False, help_text='Molecular tumor board where the recommendation was issued', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='oncology.moleculartumorboard', verbose_name='Molecular tumor board'),
        ),
        migrations.AddField(
            model_name='moleculartherapeuticrecommendation',
            name='molecular_tumor_board',
            field=models.ForeignKey(help_text='Molecular tumor board where the recommendation was issued', on_delete=django.db.models.deletion.CASCADE, related_name='therapeutic_recommendations', to='oncology.moleculartumorboard', verbose_name='Molecular tumor board'),
        ),
        migrations.AddField(
            model_name='unspecifiedtumorboardevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='oncology.unspecifiedtumorboard'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='unspecifiedtumorboard',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_unspecifiedtumorboardevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "tumor_board_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."tumor_board_id", NEW."tumor_board_id"); RETURN NULL;', hash='9c2b54f9cba4782e61842ae7c98beb7615e84901', operation='INSERT', pgid='pgtrigger_create_insert_fad47', table='oncology_unspecifiedtumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='unspecifiedtumorboard',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."tumor_board_id" IS DISTINCT FROM (NEW."tumor_board_id"))', func='INSERT INTO "oncology_unspecifiedtumorboardevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "tumor_board_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."tumor_board_id", NEW."tumor_board_id"); RETURN NULL;', hash='5ed768bb8655f653535412f794e207cd90c07398', operation='UPDATE', pgid='pgtrigger_update_update_4acf5', table='oncology_unspecifiedtumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='unspecifiedtumorboard',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_unspecifiedtumorboardevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "tumor_board_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."tumor_board_id", OLD."tumor_board_id"); RETURN NULL;', hash='00492b95d347e31358a4196bdc05aa7c75831025', operation='DELETE', pgid='pgtrigger_delete_delete_aa6dc', table='oncology_unspecifiedtumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorboard',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumorboardevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='5cd778207ddd8ab26be24afa7d90e4cb499b6a64', operation='INSERT', pgid='pgtrigger_create_insert_bfe8f', table='oncology_tumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorboard',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_tumorboardevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='b5af61aeee435d8ae7807cc03d20ad7f974f52be', operation='UPDATE', pgid='pgtrigger_update_update_e1980', table='oncology_tumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumorboard',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumorboardevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='41978a95e42eac516caea9e678c0a0296e943fa7', operation='DELETE', pgid='pgtrigger_delete_delete_f4750', table='oncology_tumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='staging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_stagingevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='1aa8f7a690bff49831670779f71bef30d0a76104', operation='INSERT', pgid='pgtrigger_create_insert_9e36c', table='oncology_staging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='staging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_stagingevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='bb2714429b54f8b7a51780a5b6846667a4c63aee', operation='UPDATE', pgid='pgtrigger_update_update_f5ee3', table='oncology_staging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='staging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_stagingevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='7e763a4dace5a34efab302d8da6858b77f9df278', operation='DELETE', pgid='pgtrigger_delete_delete_e0fba', table='oncology_staging', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.UniqueConstraint(fields=('clinical_center', 'clinical_identifier'), name='unique_clinical_identifier_per_center'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('date_of_birth__day', 1)), name='date_of_birth_must_be_first_of_month', violation_error_message='Birthdate must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('date_of_death__day', 1)), name='date_of_death_must_be_first_of_month', violation_error_message='Birthdate must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Q(('end_of_records__day', 1)), name='end_of_records_must_be_first_of_month', violation_error_message='End of records must be the first day of the month'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'alive'), ('date_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'unknown'), ('date_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'deceased'), ('date_of_death__isnull', True))), then=models.Value(False)), default=True), name='vital_status_date_of_death_combinations', violation_error_message='Invalid vital status and date of death combination'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'unknown'), ('end_of_records__isnull', True))), then=models.Value(False)), default=True), name='unknown_vital_status_requires_end_of_records', violation_error_message='Unknown vital status requires a valid end of records date.'),
        ),
        migrations.AddConstraint(
            model_name='patientcase',
            constraint=models.CheckConstraint(condition=models.Case(models.When(models.Q(models.Q(('vital_status', 'alive'), ('cause_of_death__isnull', False))), then=models.Value(False)), models.When(models.Q(models.Q(('vital_status', 'unknown'), ('cause_of_death__isnull', False))), then=models.Value(False)), default=True), name='cause_of_death_only_for_deceased', violation_error_message='Cause of death can only be assigned to deceased cases.'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (NEW."cause_of_death_id", NEW."clinical_center", NEW."clinical_identifier", NEW."consent_status", NEW."date_of_birth", NEW."date_of_death", NEW."end_of_records", NEW."external_source", NEW."external_source_id", NEW."gender_id", NEW."gender_identity_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."pseudoidentifier", NEW."race_id", NEW."sex_at_birth_id", NEW."vital_status"); RETURN NULL;', hash='6e1318e969f1db1222840864458487cb4eaa7d95', operation='INSERT', pgid='pgtrigger_create_insert_8b48e', table='oncology_patientcase', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (NEW."cause_of_death_id", NEW."clinical_center", NEW."clinical_identifier", NEW."consent_status", NEW."date_of_birth", NEW."date_of_death", NEW."end_of_records", NEW."external_source", NEW."external_source_id", NEW."gender_id", NEW."gender_identity_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."pseudoidentifier", NEW."race_id", NEW."sex_at_birth_id", NEW."vital_status"); RETURN NULL;', hash='9e80c2cbc1bbcd3ebf30d3ce5c9a71cede36f23b', operation='UPDATE', pgid='pgtrigger_update_update_66852', table='oncology_patientcase', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcase',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcaseevent" ("cause_of_death_id", "clinical_center", "clinical_identifier", "consent_status", "date_of_birth", "date_of_death", "end_of_records", "external_source", "external_source_id", "gender_id", "gender_identity_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pseudoidentifier", "race_id", "sex_at_birth_id", "vital_status") VALUES (OLD."cause_of_death_id", OLD."clinical_center", OLD."clinical_identifier", OLD."consent_status", OLD."date_of_birth", OLD."date_of_death", OLD."end_of_records", OLD."external_source", OLD."external_source_id", OLD."gender_id", OLD."gender_identity_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."pseudoidentifier", OLD."race_id", OLD."sex_at_birth_id", OLD."vital_status"); RETURN NULL;', hash='a63aadfba66e4fcc434ff0c44aa0ba5a2dd0785d', operation='DELETE', pgid='pgtrigger_delete_delete_5505c', table='oncology_patientcase', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='neoplasticentity',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('related_primary', None), ('relationship', 'primary')), models.Q(('relationship', 'primary'), _negated=True), _connector='OR'), name='primary_cannot_have_a_related_primary', violation_error_message='A primary neoplasm cannot have a related primary'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='neoplasticentity',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_neoplasticentityevent" ("assertion_date", "case_id", "differentitation_id", "external_source", "external_source_id", "id", "laterality_id", "morphology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "related_primary_id", "relationship", "topography_id") VALUES (NEW."assertion_date", NEW."case_id", NEW."differentitation_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."laterality_id", NEW."morphology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."related_primary_id", NEW."relationship", NEW."topography_id"); RETURN NULL;', hash='ba7574235bff7d4ce6b24b3932cfad562b21b7b7', operation='INSERT', pgid='pgtrigger_create_insert_b95e5', table='oncology_neoplasticentity', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='neoplasticentity',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_neoplasticentityevent" ("assertion_date", "case_id", "differentitation_id", "external_source", "external_source_id", "id", "laterality_id", "morphology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "related_primary_id", "relationship", "topography_id") VALUES (NEW."assertion_date", NEW."case_id", NEW."differentitation_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."laterality_id", NEW."morphology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."related_primary_id", NEW."relationship", NEW."topography_id"); RETURN NULL;', hash='9df1f21e7e379a2ea353df76a8dbe63f8dacd71c', operation='UPDATE', pgid='pgtrigger_update_update_1f913', table='oncology_neoplasticentity', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='neoplasticentity',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_neoplasticentityevent" ("assertion_date", "case_id", "differentitation_id", "external_source", "external_source_id", "id", "laterality_id", "morphology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "related_primary_id", "relationship", "topography_id") VALUES (OLD."assertion_date", OLD."case_id", OLD."differentitation_id", OLD."external_source", OLD."external_source_id", OLD."id", OLD."laterality_id", OLD."morphology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."related_primary_id", OLD."relationship", OLD."topography_id"); RETURN NULL;', hash='38fa2d53b646c9d505c47189651c0655252d2f7e', operation='DELETE', pgid='pgtrigger_delete_delete_c67bf', table='oncology_neoplasticentity', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lifestyle',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lifestyleevent" ("alcohol_consumption_id", "case_id", "date", "external_source", "external_source_id", "id", "night_sleep", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "smoking_packyears", "smoking_quited", "smoking_status_id") VALUES (NEW."alcohol_consumption_id", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."night_sleep", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."smoking_packyears", NEW."smoking_quited", NEW."smoking_status_id"); RETURN NULL;', hash='ee6279029bcc781e6947e8b0e8690751cffa5a4f', operation='INSERT', pgid='pgtrigger_create_insert_e98a3', table='oncology_lifestyle', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lifestyle',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_lifestyleevent" ("alcohol_consumption_id", "case_id", "date", "external_source", "external_source_id", "id", "night_sleep", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "smoking_packyears", "smoking_quited", "smoking_status_id") VALUES (NEW."alcohol_consumption_id", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."night_sleep", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."smoking_packyears", NEW."smoking_quited", NEW."smoking_status_id"); RETURN NULL;', hash='4b141e91b8b4472ca2d6d001f0e4d9a11164482e', operation='UPDATE', pgid='pgtrigger_update_update_602bd', table='oncology_lifestyle', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lifestyle',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lifestyleevent" ("alcohol_consumption_id", "case_id", "date", "external_source", "external_source_id", "id", "night_sleep", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "smoking_packyears", "smoking_quited", "smoking_status_id") VALUES (OLD."alcohol_consumption_id", OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", OLD."night_sleep", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."smoking_packyears", OLD."smoking_quited", OLD."smoking_status_id"); RETURN NULL;', hash='b0d8c827a79aed9608773361ca646d599028b768', operation='DELETE', pgid='pgtrigger_delete_delete_db2da', table='oncology_lifestyle', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='genomicvariant',
            constraint=models.CheckConstraint(condition=models.Q(('dna_hgvs__isnull', True), ('dna_hgvs__regex', '(?:(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g)|(?:(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+))?\\(?((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3}))\\)?:)?c))\\.((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+>(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins\\[(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\]\\sand\\s(?:(?:(?:(?:NC_|AC_|NG_|NT_|NW_|NZ_|GCF_)\\d+(?:\\.\\d{1,3})?)|(?:ENSG\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+)):)?g\\.(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:A|C|G|T|B|D|H|K|M|N|R|S|V|W|Y|X|-)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|gom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|lom|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))\\|met=)'), _connector='OR'), name='valid_dna_hgvs', violation_error_message="DNA HGVS must be a valid 'c.'-HGVS expression."),
        ),
        migrations.AddConstraint(
            model_name='genomicvariant',
            constraint=models.CheckConstraint(condition=models.Q(('rna_hgvs__isnull', True), ('rna_hgvs__regex', '(?:((?:(?:NM_|NR_|XM_|XR_)\\d+(?:\\.\\d{1,3})?)|(?:ENST\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+t\\d{1,3})):)?r\\.\\(?((?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))=|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+>(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))delins(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))ins(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+|(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))))|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))del|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))dup|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))inv|(?:(?:(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\))_(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))|(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))|\\((?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))_(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+))\\)))(?:(?:a|c|g|t|b|d|h|k|m|n|r|s|v|w|y)+)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\])\\)?'), _connector='OR'), name='valid_rna_hgvs', violation_error_message="RNA HGVS must be a valid 'r.'-HGVS expression."),
        ),
        migrations.AddConstraint(
            model_name='genomicvariant',
            constraint=models.CheckConstraint(condition=models.Q(('protein_hgvs__isnull', True), ('protein_hgvs__regex', '(?:((?:(?:AP_|NP_|YP_|XP_|WP_)\\d+(?:\\.\\d{1,3})?)|(?:ENSP\\d+(?:\\.\\d{1,3})?)|(?:LRG_\\d+p\\d{1,3})):)?p\\.\\(?(0\\??|\\?|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))delins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))del|(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))ins(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))dup|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:Ter|\\*)|(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)?fs(?:Ter)?(?:(?:(?:(?:\\*\\d+(?:[\\+-]\\d+)?)|(?:-\\d+(?:[\\+-]\\d+)?)|(?:(?:(?:\\+|-)\\d+)|(?:(?:\\?|\\*|\\d+)(?:\\+|-)\\d+)))|(?:\\?|\\*|\\d+)))*|(?:(?:Met1ext-\\d+)|(?:Ter\\d+(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)extTer\\d+))|\\(?(?:(?:(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))_(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\)))))\\)?\\[(?:\\d+|(?:\\(\\d+_\\d+\\)))\\]|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))+)|(?:(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+|(?:(?:\\(\\?_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_\\?\\))|(?:\\((?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+_(?:Ter|(?:Gly|Ala|Val|Leu|Ile|Met|Phe|Trp|Pro|Ser|Thr|Cys|Tyr|Asn|Gln|Asp|Glu|Lys|Arg|His))\\d+\\))))=)\\)?'), _connector='OR'), name='valid_protein_hgvs', violation_error_message="Protein HGVS must be a valid 'p.'-HGVS expression."),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicvariant',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_genomicvariantevent" ("allele_depth", "allele_frequency", "analysis_method_id", "assessment", "assessment_date", "case_id", "clinical_relevance", "clinvar", "confidence", "coordinate_system_id", "copy_number", "date", "dna_hgvs", "external_source", "external_source_id", "gene_panel", "genome_assembly_version_id", "id", "inheritance_id", "molecular_consequence_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "protein_hgvs", "rna_hgvs", "zygosity_id") VALUES (NEW."allele_depth", NEW."allele_frequency", NEW."analysis_method_id", NEW."assessment", NEW."assessment_date", NEW."case_id", NEW."clinical_relevance", NEW."clinvar", NEW."confidence", NEW."coordinate_system_id", NEW."copy_number", NEW."date", NEW."dna_hgvs", NEW."external_source", NEW."external_source_id", NEW."gene_panel", NEW."genome_assembly_version_id", NEW."id", NEW."inheritance_id", NEW."molecular_consequence_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."protein_hgvs", NEW."rna_hgvs", NEW."zygosity_id"); RETURN NULL;', hash='9764e6ce4c19e77ff2153700952cfe746e42cafe', operation='INSERT', pgid='pgtrigger_create_insert_9a498', table='oncology_genomicvariant', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicvariant',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_genomicvariantevent" ("allele_depth", "allele_frequency", "analysis_method_id", "assessment", "assessment_date", "case_id", "clinical_relevance", "clinvar", "confidence", "coordinate_system_id", "copy_number", "date", "dna_hgvs", "external_source", "external_source_id", "gene_panel", "genome_assembly_version_id", "id", "inheritance_id", "molecular_consequence_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "protein_hgvs", "rna_hgvs", "zygosity_id") VALUES (NEW."allele_depth", NEW."allele_frequency", NEW."analysis_method_id", NEW."assessment", NEW."assessment_date", NEW."case_id", NEW."clinical_relevance", NEW."clinvar", NEW."confidence", NEW."coordinate_system_id", NEW."copy_number", NEW."date", NEW."dna_hgvs", NEW."external_source", NEW."external_source_id", NEW."gene_panel", NEW."genome_assembly_version_id", NEW."id", NEW."inheritance_id", NEW."molecular_consequence_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."protein_hgvs", NEW."rna_hgvs", NEW."zygosity_id"); RETURN NULL;', hash='da65f3d280fed2f57b072da0a9d5582dbdaae724', operation='UPDATE', pgid='pgtrigger_update_update_5a801', table='oncology_genomicvariant', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicvariant',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_genomicvariantevent" ("allele_depth", "allele_frequency", "analysis_method_id", "assessment", "assessment_date", "case_id", "clinical_relevance", "clinvar", "confidence", "coordinate_system_id", "copy_number", "date", "dna_hgvs", "external_source", "external_source_id", "gene_panel", "genome_assembly_version_id", "id", "inheritance_id", "molecular_consequence_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "protein_hgvs", "rna_hgvs", "zygosity_id") VALUES (OLD."allele_depth", OLD."allele_frequency", OLD."analysis_method_id", OLD."assessment", OLD."assessment_date", OLD."case_id", OLD."clinical_relevance", OLD."clinvar", OLD."confidence", OLD."coordinate_system_id", OLD."copy_number", OLD."date", OLD."dna_hgvs", OLD."external_source", OLD."external_source_id", OLD."gene_panel", OLD."genome_assembly_version_id", OLD."id", OLD."inheritance_id", OLD."molecular_consequence_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."protein_hgvs", OLD."rna_hgvs", OLD."zygosity_id"); RETURN NULL;', hash='58b10a4fd49e29d541533a441c46fa4d22582bae', operation='DELETE', pgid='pgtrigger_delete_delete_43385', table='oncology_genomicvariant', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicsignature',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_genomicsignatureevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='e2a718af2cc408d2528ae77376264813216f8da5', operation='INSERT', pgid='pgtrigger_create_insert_acddc', table='oncology_genomicsignature', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicsignature',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_genomicsignatureevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='fe912d814e0396c169a822cfffefb83179e016c1', operation='UPDATE', pgid='pgtrigger_update_update_cca52', table='oncology_genomicsignature', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='genomicsignature',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_genomicsignatureevent" ("case_id", "date", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='88965ad06058103c5f6d8ae361d4684d23d19eaa', operation='DELETE', pgid='pgtrigger_delete_delete_9e3eb', table='oncology_genomicsignature', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='familyhistory',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_familyhistoryevent" ("case_id", "contributed_to_death", "date", "external_source", "external_source_id", "had_cancer", "id", "morphology_id", "onset_age", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_id", "topography_id") VALUES (NEW."case_id", NEW."contributed_to_death", NEW."date", NEW."external_source", NEW."external_source_id", NEW."had_cancer", NEW."id", NEW."morphology_id", NEW."onset_age", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."relationship_id", NEW."topography_id"); RETURN NULL;', hash='9241c3c4295978f7a5577bd7066cc1d71514ed11', operation='INSERT', pgid='pgtrigger_create_insert_aba29', table='oncology_familyhistory', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='familyhistory',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_familyhistoryevent" ("case_id", "contributed_to_death", "date", "external_source", "external_source_id", "had_cancer", "id", "morphology_id", "onset_age", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_id", "topography_id") VALUES (NEW."case_id", NEW."contributed_to_death", NEW."date", NEW."external_source", NEW."external_source_id", NEW."had_cancer", NEW."id", NEW."morphology_id", NEW."onset_age", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."relationship_id", NEW."topography_id"); RETURN NULL;', hash='a3d53614b0945d6d2da1490ff5b320d9227218cc', operation='UPDATE', pgid='pgtrigger_update_update_5220b', table='oncology_familyhistory', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='familyhistory',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_familyhistoryevent" ("case_id", "contributed_to_death", "date", "external_source", "external_source_id", "had_cancer", "id", "morphology_id", "onset_age", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_id", "topography_id") VALUES (OLD."case_id", OLD."contributed_to_death", OLD."date", OLD."external_source", OLD."external_source_id", OLD."had_cancer", OLD."id", OLD."morphology_id", OLD."onset_age", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."relationship_id", OLD."topography_id"); RETURN NULL;', hash='633d93b7770bb0b2d235b7e1bb70cb36c512eb71', operation='DELETE', pgid='pgtrigger_delete_delete_9a6f2', table='oncology_familyhistory', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comorbiditiesassessment',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_comorbiditiesassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "index_condition_id", "panel", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."index_condition_id", NEW."panel", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='c46741c65a982e445883b498561f2dd9a0bcafa6', operation='INSERT', pgid='pgtrigger_create_insert_8160a', table='oncology_comorbiditiesassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comorbiditiesassessment',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_comorbiditiesassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "index_condition_id", "panel", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."index_condition_id", NEW."panel", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='11132bc8d1f0ddc05aae38ba7d8dc6fb6fa8cc87', operation='UPDATE', pgid='pgtrigger_update_update_cc395', table='oncology_comorbiditiesassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='comorbiditiesassessment',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_comorbiditiesassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "index_condition_id", "panel", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", OLD."index_condition_id", OLD."panel", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='1ea057f99a85b42571dbab33d0a9ba87bc2743a7', operation='DELETE', pgid='pgtrigger_delete_delete_ab82c', table='oncology_comorbiditiesassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseevent',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventevent" ("case_id", "date", "date_resolved", "event_id", "external_source", "external_source_id", "grade", "id", "outcome", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."date_resolved", NEW."event_id", NEW."external_source", NEW."external_source_id", NEW."grade", NEW."id", NEW."outcome", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='b8a131ac1b20bade7017e93e12c49653728506f9', operation='INSERT', pgid='pgtrigger_create_insert_8bc1d', table='oncology_adverseevent', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseevent',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_adverseeventevent" ("case_id", "date", "date_resolved", "event_id", "external_source", "external_source_id", "grade", "id", "outcome", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."date_resolved", NEW."event_id", NEW."external_source", NEW."external_source_id", NEW."grade", NEW."id", NEW."outcome", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='efc98948a2e472c9f4227300929ba8b125726136', operation='UPDATE', pgid='pgtrigger_update_update_b0c1d', table='oncology_adverseevent', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseevent',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventevent" ("case_id", "date", "date_resolved", "event_id", "external_source", "external_source_id", "grade", "id", "outcome", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."date_resolved", OLD."event_id", OLD."external_source", OLD."external_source_id", OLD."grade", OLD."id", OLD."outcome", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='1a2a68d60507b56c516d8af7d9b51288a4407689', operation='DELETE', pgid='pgtrigger_delete_delete_f21d1', table='oncology_adverseevent', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='patientcasedatacompletion',
            constraint=models.UniqueConstraint(fields=('case', 'category'), name='unique_data_categories', violation_error_message='Data categories cannot be repeated for a patient case'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcasedatacompletion',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcasedatacompletionevent" ("case_id", "category", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."category", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='a60591764dd3b9d331baf30f28c4a4c30a9f65ec', operation='INSERT', pgid='pgtrigger_create_insert_abc44', table='oncology_patientcasedatacompletion', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcasedatacompletion',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_patientcasedatacompletionevent" ("case_id", "category", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."category", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='31298120fbd7a6e86d3058633819061d701341ca', operation='UPDATE', pgid='pgtrigger_update_update_acc3b', table='oncology_patientcasedatacompletion', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='patientcasedatacompletion',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_patientcasedatacompletionevent" ("case_id", "category", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."category", OLD."external_source", OLD."external_source_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='d47ad25cdc28d3d0f3d23653fbd1409a2a62edd1', operation='DELETE', pgid='pgtrigger_delete_delete_805aa', table='oncology_patientcasedatacompletion', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='performancestatus',
            constraint=models.CheckConstraint(condition=models.Q(('ecog_score__isnull', False), ('karnofsky_score__isnull', False), _connector='OR'), name='at_least_one_score_must_be_set'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='performancestatus',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_performancestatusevent" ("case_id", "date", "ecog_score", "external_source", "external_source_id", "id", "karnofsky_score", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."ecog_score", NEW."external_source", NEW."external_source_id", NEW."id", NEW."karnofsky_score", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id"); RETURN NULL;', hash='a09c99f0013bc587081dc78c1bcab62fbb2771ed', operation='INSERT', pgid='pgtrigger_create_insert_665eb', table='oncology_performancestatus', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='performancestatus',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_performancestatusevent" ("case_id", "date", "ecog_score", "external_source", "external_source_id", "id", "karnofsky_score", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."case_id", NEW."date", NEW."ecog_score", NEW."external_source", NEW."external_source_id", NEW."id", NEW."karnofsky_score", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id"); RETURN NULL;', hash='a3e15689676b9f77af16089df62025346a73ec67', operation='UPDATE', pgid='pgtrigger_update_update_c3cf4', table='oncology_performancestatus', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='performancestatus',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_performancestatusevent" ("case_id", "date", "ecog_score", "external_source", "external_source_id", "id", "karnofsky_score", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."case_id", OLD."date", OLD."ecog_score", OLD."external_source", OLD."external_source_id", OLD."id", OLD."karnofsky_score", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id"); RETURN NULL;', hash='625c130020f8d42711447c895378752f9134ec13', operation='DELETE', pgid='pgtrigger_delete_delete_6ca9b', table='oncology_performancestatus', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapydosage',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapydosageevent" ("dose", "external_source", "external_source_id", "fractions", "id", "irradiated_volume_id", "irradiated_volume_morphology_id", "irradiated_volume_qualifier_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id") VALUES (NEW."dose", NEW."external_source", NEW."external_source_id", NEW."fractions", NEW."id", NEW."irradiated_volume_id", NEW."irradiated_volume_morphology_id", NEW."irradiated_volume_qualifier_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."radiotherapy_id"); RETURN NULL;', hash='afff25996570dc0570cc36efdd2b79b5832206ba', operation='INSERT', pgid='pgtrigger_create_insert_ef546', table='oncology_radiotherapydosage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapydosage',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_radiotherapydosageevent" ("dose", "external_source", "external_source_id", "fractions", "id", "irradiated_volume_id", "irradiated_volume_morphology_id", "irradiated_volume_qualifier_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id") VALUES (NEW."dose", NEW."external_source", NEW."external_source_id", NEW."fractions", NEW."id", NEW."irradiated_volume_id", NEW."irradiated_volume_morphology_id", NEW."irradiated_volume_qualifier_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."radiotherapy_id"); RETURN NULL;', hash='2a284b2832bdf4099d838f600e6d6d411fc9071f', operation='UPDATE', pgid='pgtrigger_update_update_e525b', table='oncology_radiotherapydosage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapydosage',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapydosageevent" ("dose", "external_source", "external_source_id", "fractions", "id", "irradiated_volume_id", "irradiated_volume_morphology_id", "irradiated_volume_qualifier_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id") VALUES (OLD."dose", OLD."external_source", OLD."external_source_id", OLD."fractions", OLD."id", OLD."irradiated_volume_id", OLD."irradiated_volume_morphology_id", OLD."irradiated_volume_qualifier_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."radiotherapy_id"); RETURN NULL;', hash='461359ff39085c5bee7249d67e1141df3273dba2', operation='DELETE', pgid='pgtrigger_delete_delete_2cff8', table='oncology_radiotherapydosage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapysetting',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapysettingevent" ("external_source", "external_source_id", "id", "modality_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "technique_id") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."modality_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."radiotherapy_id", NEW."technique_id"); RETURN NULL;', hash='cde2804af2b5864ed35c40bf90078cabe02f8898', operation='INSERT', pgid='pgtrigger_create_insert_d4326', table='oncology_radiotherapysetting', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapysetting',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_radiotherapysettingevent" ("external_source", "external_source_id", "id", "modality_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "technique_id") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."modality_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."radiotherapy_id", NEW."technique_id"); RETURN NULL;', hash='c66498fc2172899b397e75dab181636015e86597', operation='UPDATE', pgid='pgtrigger_update_update_8271e', table='oncology_radiotherapysetting', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapysetting',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapysettingevent" ("external_source", "external_source_id", "id", "modality_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "technique_id") VALUES (OLD."external_source", OLD."external_source_id", OLD."id", OLD."modality_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."radiotherapy_id", OLD."technique_id"); RETURN NULL;', hash='59c6ef1e7ce566883aeb29cf7cfcea28bc38eba8', operation='DELETE', pgid='pgtrigger_delete_delete_0bf39', table='oncology_radiotherapysetting', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='riskassessment',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_riskassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "risk_id", "score") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."risk_id", NEW."score"); RETURN NULL;', hash='d73c2fc7ca3a453fc8bf0773f1f833971c7773ba', operation='INSERT', pgid='pgtrigger_create_insert_84acf', table='oncology_riskassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='riskassessment',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_riskassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "risk_id", "score") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."risk_id", NEW."score"); RETURN NULL;', hash='1abdae375d8d8d3428266f741d5ad385e3416a38', operation='UPDATE', pgid='pgtrigger_update_update_d8af8', table='oncology_riskassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='riskassessment',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_riskassessmentevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "risk_id", "score") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", OLD."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."risk_id", OLD."score"); RETURN NULL;', hash='2d152606e8d06a34732b7880eb8c7133c6f607e9', operation='DELETE', pgid='pgtrigger_delete_delete_50091', table='oncology_riskassessment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapymedication',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_systemictherapymedicationevent" ("dosage_mass", "dosage_mass_concentration", "dosage_mass_surface", "dosage_rate_mass", "dosage_rate_mass_concentration", "dosage_rate_mass_surface", "dosage_rate_volume", "dosage_volume", "drug_id", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "route_id", "systemic_therapy_id", "used_offlabel", "within_soc") VALUES (NEW."dosage_mass", NEW."dosage_mass_concentration", NEW."dosage_mass_surface", NEW."dosage_rate_mass", NEW."dosage_rate_mass_concentration", NEW."dosage_rate_mass_surface", NEW."dosage_rate_volume", NEW."dosage_volume", NEW."drug_id", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."route_id", NEW."systemic_therapy_id", NEW."used_offlabel", NEW."within_soc"); RETURN NULL;', hash='8cc4b9ec584f7aa3fd52578d6a229a4c9823efd5', operation='INSERT', pgid='pgtrigger_create_insert_28482', table='oncology_systemictherapymedication', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapymedication',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_systemictherapymedicationevent" ("dosage_mass", "dosage_mass_concentration", "dosage_mass_surface", "dosage_rate_mass", "dosage_rate_mass_concentration", "dosage_rate_mass_surface", "dosage_rate_volume", "dosage_volume", "drug_id", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "route_id", "systemic_therapy_id", "used_offlabel", "within_soc") VALUES (NEW."dosage_mass", NEW."dosage_mass_concentration", NEW."dosage_mass_surface", NEW."dosage_rate_mass", NEW."dosage_rate_mass_concentration", NEW."dosage_rate_mass_surface", NEW."dosage_rate_volume", NEW."dosage_volume", NEW."drug_id", NEW."external_source", NEW."external_source_id", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."route_id", NEW."systemic_therapy_id", NEW."used_offlabel", NEW."within_soc"); RETURN NULL;', hash='10a52c20f41224fdb62487e640d516ae781bbeaf', operation='UPDATE', pgid='pgtrigger_update_update_74a89', table='oncology_systemictherapymedication', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapymedication',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_systemictherapymedicationevent" ("dosage_mass", "dosage_mass_concentration", "dosage_mass_surface", "dosage_rate_mass", "dosage_rate_mass_concentration", "dosage_rate_mass_surface", "dosage_rate_volume", "dosage_volume", "drug_id", "external_source", "external_source_id", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "route_id", "systemic_therapy_id", "used_offlabel", "within_soc") VALUES (OLD."dosage_mass", OLD."dosage_mass_concentration", OLD."dosage_mass_surface", OLD."dosage_rate_mass", OLD."dosage_rate_mass_concentration", OLD."dosage_rate_mass_surface", OLD."dosage_rate_volume", OLD."dosage_volume", OLD."drug_id", OLD."external_source", OLD."external_source_id", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."route_id", OLD."systemic_therapy_id", OLD."used_offlabel", OLD."within_soc"); RETURN NULL;', hash='6c715066156086c04878581c115a0571150df1d3', operation='DELETE', pgid='pgtrigger_delete_delete_9cd60', table='oncology_systemictherapymedication', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventsuspectedcause',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventsuspectedcauseevent" ("adverse_event_id", "causality", "external_source", "external_source_id", "id", "medication_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "surgery_id", "systemic_therapy_id") VALUES (NEW."adverse_event_id", NEW."causality", NEW."external_source", NEW."external_source_id", NEW."id", NEW."medication_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."radiotherapy_id", NEW."surgery_id", NEW."systemic_therapy_id"); RETURN NULL;', hash='5f16d66d1bbacb28d282f01e7cdcfbd313019265', operation='INSERT', pgid='pgtrigger_create_insert_2d716', table='oncology_adverseeventsuspectedcause', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventsuspectedcause',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_adverseeventsuspectedcauseevent" ("adverse_event_id", "causality", "external_source", "external_source_id", "id", "medication_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "surgery_id", "systemic_therapy_id") VALUES (NEW."adverse_event_id", NEW."causality", NEW."external_source", NEW."external_source_id", NEW."id", NEW."medication_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."radiotherapy_id", NEW."surgery_id", NEW."systemic_therapy_id"); RETURN NULL;', hash='d893124ec3bdf2945f4b3526c4dc48f93eb472ce', operation='UPDATE', pgid='pgtrigger_update_update_04bad', table='oncology_adverseeventsuspectedcause', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='adverseeventsuspectedcause',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_adverseeventsuspectedcauseevent" ("adverse_event_id", "causality", "external_source", "external_source_id", "id", "medication_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "radiotherapy_id", "surgery_id", "systemic_therapy_id") VALUES (OLD."adverse_event_id", OLD."causality", OLD."external_source", OLD."external_source_id", OLD."id", OLD."medication_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."radiotherapy_id", OLD."surgery_id", OLD."systemic_therapy_id"); RETURN NULL;', hash='12ed952f69ff276b7e0858721392c00f33de0747', operation='DELETE', pgid='pgtrigger_delete_delete_94b7b', table='oncology_adverseeventsuspectedcause', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='therapyline',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_therapylineevent" ("case_id", "external_source", "external_source_id", "id", "intent", "ordinal", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "progression_date") VALUES (NEW."case_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."ordinal", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."progression_date"); RETURN NULL;', hash='b3a41b2ed3a29365aac7ba4ebc7b972fc49c2642', operation='INSERT', pgid='pgtrigger_create_insert_a0b4d', table='oncology_therapyline', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='therapyline',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_therapylineevent" ("case_id", "external_source", "external_source_id", "id", "intent", "ordinal", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "progression_date") VALUES (NEW."case_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."ordinal", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."progression_date"); RETURN NULL;', hash='93c96b5d2ec1a47dfddc1fe92177c81b0d676e69', operation='UPDATE', pgid='pgtrigger_update_update_dda2b', table='oncology_therapyline', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='therapyline',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_therapylineevent" ("case_id", "external_source", "external_source_id", "id", "intent", "ordinal", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "progression_date") VALUES (OLD."case_id", OLD."external_source", OLD."external_source_id", OLD."id", OLD."intent", OLD."ordinal", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."progression_date"); RETURN NULL;', hash='61b2d780d023d7cdddf05a151ab1abac7737da20', operation='DELETE', pgid='pgtrigger_delete_delete_f5ba7', table='oncology_therapyline', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapy',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_systemictherapyevent" ("adjunctive_role_id", "case_id", "cycles", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "termination_reason_id", "therapy_line_id") VALUES (NEW."adjunctive_role_id", NEW."case_id", NEW."cycles", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."termination_reason_id", NEW."therapy_line_id"); RETURN NULL;', hash='1c9353777c48c95d9acacfbcd59b2be7106d4376', operation='INSERT', pgid='pgtrigger_create_insert_b1c76', table='oncology_systemictherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapy',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_systemictherapyevent" ("adjunctive_role_id", "case_id", "cycles", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "termination_reason_id", "therapy_line_id") VALUES (NEW."adjunctive_role_id", NEW."case_id", NEW."cycles", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."termination_reason_id", NEW."therapy_line_id"); RETURN NULL;', hash='c0115e86b87d6fd7838fb5caca1222f9985c72a1', operation='UPDATE', pgid='pgtrigger_update_update_86fe4', table='oncology_systemictherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='systemictherapy',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_systemictherapyevent" ("adjunctive_role_id", "case_id", "cycles", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "termination_reason_id", "therapy_line_id") VALUES (OLD."adjunctive_role_id", OLD."case_id", OLD."cycles", OLD."external_source", OLD."external_source_id", OLD."id", OLD."intent", OLD."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."termination_reason_id", OLD."therapy_line_id"); RETURN NULL;', hash='e5713a8fe586a51400cad4a116bc652719a9723e', operation='DELETE', pgid='pgtrigger_delete_delete_7ed74', table='oncology_systemictherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='surgery',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_surgeryevent" ("bodysite_id", "bodysite_laterality_id", "bodysite_qualifier_id", "case_id", "date", "external_source", "external_source_id", "id", "intent", "outcome_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id", "therapy_line_id") VALUES (NEW."bodysite_id", NEW."bodysite_laterality_id", NEW."bodysite_qualifier_id", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."outcome_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."procedure_id", NEW."therapy_line_id"); RETURN NULL;', hash='88a109c7a0d1e11ae7919a0a81b768bdf7281f0c', operation='INSERT', pgid='pgtrigger_create_insert_e916b', table='oncology_surgery', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='surgery',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_surgeryevent" ("bodysite_id", "bodysite_laterality_id", "bodysite_qualifier_id", "case_id", "date", "external_source", "external_source_id", "id", "intent", "outcome_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id", "therapy_line_id") VALUES (NEW."bodysite_id", NEW."bodysite_laterality_id", NEW."bodysite_qualifier_id", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."outcome_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."procedure_id", NEW."therapy_line_id"); RETURN NULL;', hash='14a2e7ce6cfde1e76d34c3ddd05c031ae58ba944', operation='UPDATE', pgid='pgtrigger_update_update_cf528', table='oncology_surgery', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='surgery',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_surgeryevent" ("bodysite_id", "bodysite_laterality_id", "bodysite_qualifier_id", "case_id", "date", "external_source", "external_source_id", "id", "intent", "outcome_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "procedure_id", "therapy_line_id") VALUES (OLD."bodysite_id", OLD."bodysite_laterality_id", OLD."bodysite_qualifier_id", OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", OLD."intent", OLD."outcome_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."procedure_id", OLD."therapy_line_id"); RETURN NULL;', hash='4dfa96fcec1ef1f82d357749e98e7af3024b8294', operation='DELETE', pgid='pgtrigger_delete_delete_3d1ec', table='oncology_surgery', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapy',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapyevent" ("case_id", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sessions", "termination_reason_id", "therapy_line_id") VALUES (NEW."case_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."sessions", NEW."termination_reason_id", NEW."therapy_line_id"); RETURN NULL;', hash='91d7df45f051e30f78777a5715cc7fda9134bbb7', operation='INSERT', pgid='pgtrigger_create_insert_9d3c3', table='oncology_radiotherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapy',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_radiotherapyevent" ("case_id", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sessions", "termination_reason_id", "therapy_line_id") VALUES (NEW."case_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."intent", NEW."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."sessions", NEW."termination_reason_id", NEW."therapy_line_id"); RETURN NULL;', hash='6ecc9f19ccca68a1382fe617af91af51bc2f421d', operation='UPDATE', pgid='pgtrigger_update_update_f2cc5', table='oncology_radiotherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='radiotherapy',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_radiotherapyevent" ("case_id", "external_source", "external_source_id", "id", "intent", "period", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sessions", "termination_reason_id", "therapy_line_id") VALUES (OLD."case_id", OLD."external_source", OLD."external_source_id", OLD."id", OLD."intent", OLD."period", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."sessions", OLD."termination_reason_id", OLD."therapy_line_id"); RETURN NULL;', hash='6c4669c0260845abbee2c654c0315e7e810bacfa', operation='DELETE', pgid='pgtrigger_delete_delete_40b48', table='oncology_radiotherapy', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='treatmentresponse',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_treatmentresponseevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recist_id", "recist_interpreted") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."recist_id", NEW."recist_interpreted"); RETURN NULL;', hash='5a6142f63cbf69eb2a641bb5d399176368cf11d4', operation='INSERT', pgid='pgtrigger_create_insert_56b54', table='oncology_treatmentresponse', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='treatmentresponse',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_treatmentresponseevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recist_id", "recist_interpreted") VALUES (NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."id", NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."recist_id", NEW."recist_interpreted"); RETURN NULL;', hash='65c6dd4b4c8af105844682b450e16a4bc89bcb7c', operation='UPDATE', pgid='pgtrigger_update_update_c07da', table='oncology_treatmentresponse', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='treatmentresponse',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_treatmentresponseevent" ("case_id", "date", "external_source", "external_source_id", "id", "methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recist_id", "recist_interpreted") VALUES (OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."id", OLD."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."recist_id", OLD."recist_interpreted"); RETURN NULL;', hash='d95f4ef7ee0b8d504da796ab3aa5a7beb3e01d88', operation='DELETE', pgid='pgtrigger_delete_delete_754f8', table='oncology_treatmentresponse', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='tumormarker',
            constraint=models.CheckConstraint(condition=models.Q(('mass_concentration__isnull', False), ('arbitrary_concentration__isnull', False), ('substance_concentration__isnull', False), ('fraction__isnull', False), ('multiple_of_median__isnull', False), ('tumor_proportion_score__isnull', False), ('immune_cell_score__isnull', False), ('combined_positive_score__isnull', False), ('immunohistochemical_score__isnull', False), ('presence__isnull', False), ('nuclear_expression_status__isnull', False), _connector='OR'), name='tumor marker must at least have one value'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormarker',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumormarkerevent" ("analyte_id", "arbitrary_concentration", "case_id", "combined_positive_score", "date", "external_source", "external_source_id", "fraction", "id", "immune_cell_score", "immunohistochemical_score", "mass_concentration", "multiple_of_median", "nuclear_expression_status", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "presence", "substance_concentration", "tumor_proportion_score") VALUES (NEW."analyte_id", NEW."arbitrary_concentration", NEW."case_id", NEW."combined_positive_score", NEW."date", NEW."external_source", NEW."external_source_id", NEW."fraction", NEW."id", NEW."immune_cell_score", NEW."immunohistochemical_score", NEW."mass_concentration", NEW."multiple_of_median", NEW."nuclear_expression_status", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."presence", NEW."substance_concentration", NEW."tumor_proportion_score"); RETURN NULL;', hash='9d6997b62a143a7ea9917f1cef35e7e1175cef7b', operation='INSERT', pgid='pgtrigger_create_insert_85dc4', table='oncology_tumormarker', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormarker',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_tumormarkerevent" ("analyte_id", "arbitrary_concentration", "case_id", "combined_positive_score", "date", "external_source", "external_source_id", "fraction", "id", "immune_cell_score", "immunohistochemical_score", "mass_concentration", "multiple_of_median", "nuclear_expression_status", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "presence", "substance_concentration", "tumor_proportion_score") VALUES (NEW."analyte_id", NEW."arbitrary_concentration", NEW."case_id", NEW."combined_positive_score", NEW."date", NEW."external_source", NEW."external_source_id", NEW."fraction", NEW."id", NEW."immune_cell_score", NEW."immunohistochemical_score", NEW."mass_concentration", NEW."multiple_of_median", NEW."nuclear_expression_status", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."presence", NEW."substance_concentration", NEW."tumor_proportion_score"); RETURN NULL;', hash='d567bbe4a8403efa1f64d36094f3a4bd1ffc0b5e', operation='UPDATE', pgid='pgtrigger_update_update_f0d92', table='oncology_tumormarker', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tumormarker',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tumormarkerevent" ("analyte_id", "arbitrary_concentration", "case_id", "combined_positive_score", "date", "external_source", "external_source_id", "fraction", "id", "immune_cell_score", "immunohistochemical_score", "mass_concentration", "multiple_of_median", "nuclear_expression_status", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "presence", "substance_concentration", "tumor_proportion_score") VALUES (OLD."analyte_id", OLD."arbitrary_concentration", OLD."case_id", OLD."combined_positive_score", OLD."date", OLD."external_source", OLD."external_source_id", OLD."fraction", OLD."id", OLD."immune_cell_score", OLD."immunohistochemical_score", OLD."mass_concentration", OLD."multiple_of_median", OLD."nuclear_expression_status", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."presence", OLD."substance_concentration", OLD."tumor_proportion_score"); RETURN NULL;', hash='dad6ce0187d3b066a8f362be8efdfcdf3efe4e42', operation='DELETE', pgid='pgtrigger_delete_delete_16ea5', table='oncology_tumormarker', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='vitals',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_vitalsevent" ("blood_pressure_diastolic", "blood_pressure_systolic", "case_id", "date", "external_source", "external_source_id", "height", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "temperature", "weight") VALUES (NEW."blood_pressure_diastolic", NEW."blood_pressure_systolic", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."height", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."temperature", NEW."weight"); RETURN NULL;', hash='9d10131b2505a2f2b43d4b056521eee953bc7b0b', operation='INSERT', pgid='pgtrigger_create_insert_dddda', table='oncology_vitals', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='vitals',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_vitalsevent" ("blood_pressure_diastolic", "blood_pressure_systolic", "case_id", "date", "external_source", "external_source_id", "height", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "temperature", "weight") VALUES (NEW."blood_pressure_diastolic", NEW."blood_pressure_systolic", NEW."case_id", NEW."date", NEW."external_source", NEW."external_source_id", NEW."height", NEW."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."temperature", NEW."weight"); RETURN NULL;', hash='1f21092a58ac6aba99e60d2ae6cce9d945e24bb7', operation='UPDATE', pgid='pgtrigger_update_update_ac261', table='oncology_vitals', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='vitals',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_vitalsevent" ("blood_pressure_diastolic", "blood_pressure_systolic", "case_id", "date", "external_source", "external_source_id", "height", "id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "temperature", "weight") VALUES (OLD."blood_pressure_diastolic", OLD."blood_pressure_systolic", OLD."case_id", OLD."date", OLD."external_source", OLD."external_source_id", OLD."height", OLD."id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."temperature", OLD."weight"); RETURN NULL;', hash='2edb42b8733d7148d85654b9a41284d8891d0515', operation='DELETE', pgid='pgtrigger_delete_delete_53cac', table='oncology_vitals', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='microsatelliteinstability',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_microsatelliteinstabilityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value_id") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."genomic_signature_id", NEW."value_id"); RETURN NULL;', hash='36b51e95b6a67ae313dce70e75e5498c1051f463', operation='INSERT', pgid='pgtrigger_create_insert_ecce5', table='oncology_microsatelliteinstability', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='microsatelliteinstability',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."genomic_signature_id" IS DISTINCT FROM (NEW."genomic_signature_id") OR OLD."value_id" IS DISTINCT FROM (NEW."value_id"))', func='INSERT INTO "oncology_microsatelliteinstabilityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value_id") VALUES (NEW."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."genomic_signature_id", NEW."value_id"); RETURN NULL;', hash='86ec1df346689062f5bc3a00e0465708dcb808c1', operation='UPDATE', pgid='pgtrigger_update_update_4508a', table='oncology_microsatelliteinstability', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='microsatelliteinstability',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_microsatelliteinstabilityevent" ("genomic_signature_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "value_id") VALUES (OLD."genomic_signature_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."genomic_signature_id", OLD."value_id"); RETURN NULL;', hash='518ef7e0a9ba5dc33e8eeef2d746dae06b4f917a', operation='DELETE', pgid='pgtrigger_delete_delete_7e86f', table='oncology_microsatelliteinstability', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='binetstaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_binetstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='5aa3d6da757474c22a9680ee845a389e87ab0d78', operation='INSERT', pgid='pgtrigger_create_insert_1d925', table='oncology_binetstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='binetstaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_binetstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='6eaba66a462150b54d75dfeadd4cb294239871d4', operation='UPDATE', pgid='pgtrigger_update_update_f5cc0', table='oncology_binetstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='binetstaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_binetstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='c9f1fb689f2d691912dd6a1d6b0df4e686fee63d', operation='DELETE', pgid='pgtrigger_delete_delete_76f39', table='oncology_binetstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='clarkstaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_clarkstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='7cc91353b74f3796ab4463d6bbf0b95aa8fc6c06', operation='INSERT', pgid='pgtrigger_create_insert_961f9', table='oncology_clarkstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='clarkstaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_clarkstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='5d7406b0eb777cf773bfb72932b044c25ddf190b', operation='UPDATE', pgid='pgtrigger_update_update_e0d00', table='oncology_clarkstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='clarkstaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_clarkstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='e973965def611c9cd002edb730255ac9eaf8e781', operation='DELETE', pgid='pgtrigger_delete_delete_84732', table='oncology_clarkstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='figostaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_figostagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='13afcd556eccbc20bb23b391653fe52ec38defd5', operation='INSERT', pgid='pgtrigger_create_insert_f5983', table='oncology_figostaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='figostaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."methodology_id" IS DISTINCT FROM (NEW."methodology_id") OR OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_figostagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='576d935a4a89816241caa5d3481c20ac71547707', operation='UPDATE', pgid='pgtrigger_update_update_e4556', table='oncology_figostaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='figostaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_figostagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (OLD."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='8fd8796ba7130bd54867962da2f635a837457315', operation='DELETE', pgid='pgtrigger_delete_delete_cc04b', table='oncology_figostaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gleasongrade',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_gleasongradeevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='ed8e3cefd1134a532cb77ace0c615a9bdbf81cee', operation='INSERT', pgid='pgtrigger_create_insert_dbeb9', table='oncology_gleasongrade', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gleasongrade',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_gleasongradeevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='d3f6ab2b426dccf12df4723b502874db8a872d39', operation='UPDATE', pgid='pgtrigger_update_update_56e99', table='oncology_gleasongrade', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gleasongrade',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_gleasongradeevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='0b24c366c4d7d8bf539e23a01edc9a4099114504', operation='DELETE', pgid='pgtrigger_delete_delete_2033a', table='oncology_gleasongrade', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inrgssstage',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_inrgssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='73a5ff988db172cb6fcbbfb88959d189038fe1a1', operation='INSERT', pgid='pgtrigger_create_insert_c0940', table='oncology_inrgssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inrgssstage',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_inrgssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='ca63ee517b84954ff660fe8f9ce0b334a70b257c', operation='UPDATE', pgid='pgtrigger_update_update_8582c', table='oncology_inrgssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inrgssstage',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_inrgssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='ced94ceb7782ab882f23d6031a8680365c25f096', operation='DELETE', pgid='pgtrigger_delete_delete_b04ef', table='oncology_inrgssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inssstage',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_inssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='2a5b6b2891ee5ba2cb0cc485f8bf8d612146ccfb', operation='INSERT', pgid='pgtrigger_create_insert_f4926', table='oncology_inssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inssstage',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_inssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='130291dbcdce27a47997c1a7b987709800cd51c0', operation='UPDATE', pgid='pgtrigger_update_update_1640e', table='oncology_inssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='inssstage',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_inssstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='5a44321f4653aafad659b733697e7b2bbec023ac', operation='DELETE', pgid='pgtrigger_delete_delete_56189', table='oncology_inssstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='issstaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_issstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='4d001dc080b05738c7c41a6ba52f987e9526e9d3', operation='INSERT', pgid='pgtrigger_create_insert_75fa6', table='oncology_issstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='issstaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_issstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='55aa0a39e8db79ac001be55dee40c44cf73c49ed', operation='UPDATE', pgid='pgtrigger_update_update_15abe', table='oncology_issstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='issstaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_issstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='8aef26cb244b0af26ae5622a4fb8e257252f0fde', operation='DELETE', pgid='pgtrigger_delete_delete_bf49a', table='oncology_issstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lymphomastaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lymphomastagingevent" ("bulky", "methodology_id", "pathological", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."bulky", NEW."methodology_id", NEW."pathological", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='7bd8442b0154b9a3d2bc42841d9d6e0070173056', operation='INSERT', pgid='pgtrigger_create_insert_0a648', table='oncology_lymphomastaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lymphomastaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."bulky" IS DISTINCT FROM (NEW."bulky") OR OLD."methodology_id" IS DISTINCT FROM (NEW."methodology_id") OR OLD."pathological" IS DISTINCT FROM (NEW."pathological") OR OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_lymphomastagingevent" ("bulky", "methodology_id", "pathological", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."bulky", NEW."methodology_id", NEW."pathological", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='e4d9bad2feddaa8f83a75f66c1228b8efc5b5a81', operation='UPDATE', pgid='pgtrigger_update_update_621f0', table='oncology_lymphomastaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='lymphomastaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_lymphomastagingevent" ("bulky", "methodology_id", "pathological", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (OLD."bulky", OLD."methodology_id", OLD."pathological", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='4b96e750b02bc790c4ed96486efda5c95b5bf126', operation='DELETE', pgid='pgtrigger_delete_delete_be058', table='oncology_lymphomastaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='raistaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_raistagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='a5f28fbdc6eebd06ceee61efd9cb810066eb051f', operation='INSERT', pgid='pgtrigger_create_insert_1358a', table='oncology_raistaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='raistaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."methodology_id" IS DISTINCT FROM (NEW."methodology_id") OR OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_raistagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (NEW."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='326a9d01cb67dcacbc75d9bbff2a068f47ea2dcc', operation='UPDATE', pgid='pgtrigger_update_update_95b8a', table='oncology_raistaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='raistaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_raistagingevent" ("methodology_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (OLD."methodology_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='d860e426a9403048551c31d9a70a81e020e586fd', operation='DELETE', pgid='pgtrigger_delete_delete_7fbe2', table='oncology_raistaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rhabdomyosarcomaclinicalgroup',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_rhabdomyosarcomaclinicalgroupevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='0d6bc9916cd3988e7e40fa4c4cfbd92f89d82d77', operation='INSERT', pgid='pgtrigger_create_insert_3eb23', table='oncology_rhabdomyosarcomaclinicalgroup', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rhabdomyosarcomaclinicalgroup',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_rhabdomyosarcomaclinicalgroupevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='d22d36d371e4355385ddb384a489dea048913f69', operation='UPDATE', pgid='pgtrigger_update_update_81b3d', table='oncology_rhabdomyosarcomaclinicalgroup', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rhabdomyosarcomaclinicalgroup',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_rhabdomyosarcomaclinicalgroupevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='6cdf419f2508431d4e07ec9ee1d10fd7e3956a13', operation='DELETE', pgid='pgtrigger_delete_delete_2a627', table='oncology_rhabdomyosarcomaclinicalgroup', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rissstaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_rissstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='e1657df8686353b6012e051b51dcb1cab99044dd', operation='INSERT', pgid='pgtrigger_create_insert_b6447', table='oncology_rissstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rissstaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_rissstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='71018b8e36586a45954c9323b3098b28d3ba04fa', operation='UPDATE', pgid='pgtrigger_update_update_0c913', table='oncology_rissstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='rissstaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_rissstagingevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='830386c90c9cf0eb6d4d3b4d1f9f65f90a486aeb', operation='DELETE', pgid='pgtrigger_delete_delete_4f936', table='oncology_rissstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tnmstaging',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tnmstagingevent" ("distantMetastases_id", "grade_id", "lymphaticInvasion_id", "methodology_id", "pathological", "perineuralInvasion_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "primaryTumor_id", "regionalNodes_id", "residualTumor_id", "serumTumorMarkerLevel_id", "stage_id", "staging_id", "venousInvasion_id") VALUES (NEW."distantMetastases_id", NEW."grade_id", NEW."lymphaticInvasion_id", NEW."methodology_id", NEW."pathological", NEW."perineuralInvasion_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."primaryTumor_id", NEW."regionalNodes_id", NEW."residualTumor_id", NEW."serumTumorMarkerLevel_id", NEW."stage_id", NEW."staging_id", NEW."venousInvasion_id"); RETURN NULL;', hash='3cae3c1c1be4e276abe597896cec9f2661391dd4', operation='INSERT', pgid='pgtrigger_create_insert_59557', table='oncology_tnmstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tnmstaging',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."distantMetastases_id" IS DISTINCT FROM (NEW."distantMetastases_id") OR OLD."grade_id" IS DISTINCT FROM (NEW."grade_id") OR OLD."lymphaticInvasion_id" IS DISTINCT FROM (NEW."lymphaticInvasion_id") OR OLD."methodology_id" IS DISTINCT FROM (NEW."methodology_id") OR OLD."pathological" IS DISTINCT FROM (NEW."pathological") OR OLD."perineuralInvasion_id" IS DISTINCT FROM (NEW."perineuralInvasion_id") OR OLD."primaryTumor_id" IS DISTINCT FROM (NEW."primaryTumor_id") OR OLD."regionalNodes_id" IS DISTINCT FROM (NEW."regionalNodes_id") OR OLD."residualTumor_id" IS DISTINCT FROM (NEW."residualTumor_id") OR OLD."serumTumorMarkerLevel_id" IS DISTINCT FROM (NEW."serumTumorMarkerLevel_id") OR OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id") OR OLD."venousInvasion_id" IS DISTINCT FROM (NEW."venousInvasion_id"))', func='INSERT INTO "oncology_tnmstagingevent" ("distantMetastases_id", "grade_id", "lymphaticInvasion_id", "methodology_id", "pathological", "perineuralInvasion_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "primaryTumor_id", "regionalNodes_id", "residualTumor_id", "serumTumorMarkerLevel_id", "stage_id", "staging_id", "venousInvasion_id") VALUES (NEW."distantMetastases_id", NEW."grade_id", NEW."lymphaticInvasion_id", NEW."methodology_id", NEW."pathological", NEW."perineuralInvasion_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."primaryTumor_id", NEW."regionalNodes_id", NEW."residualTumor_id", NEW."serumTumorMarkerLevel_id", NEW."stage_id", NEW."staging_id", NEW."venousInvasion_id"); RETURN NULL;', hash='3a042661208f3c97710f5f3b64d9edf9002f6f95', operation='UPDATE', pgid='pgtrigger_update_update_305ea', table='oncology_tnmstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='tnmstaging',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_tnmstagingevent" ("distantMetastases_id", "grade_id", "lymphaticInvasion_id", "methodology_id", "pathological", "perineuralInvasion_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "primaryTumor_id", "regionalNodes_id", "residualTumor_id", "serumTumorMarkerLevel_id", "stage_id", "staging_id", "venousInvasion_id") VALUES (OLD."distantMetastases_id", OLD."grade_id", OLD."lymphaticInvasion_id", OLD."methodology_id", OLD."pathological", OLD."perineuralInvasion_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."primaryTumor_id", OLD."regionalNodes_id", OLD."residualTumor_id", OLD."serumTumorMarkerLevel_id", OLD."stage_id", OLD."staging_id", OLD."venousInvasion_id"); RETURN NULL;', hash='f8cf16938b3e433fe59c84e7a5c22b64ac569bf0', operation='DELETE', pgid='pgtrigger_delete_delete_b65e6', table='oncology_tnmstaging', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='wilmsstage',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_wilmsstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='7ec18787139d9798722bd2661e61bb5e9f9697c6', operation='INSERT', pgid='pgtrigger_create_insert_b8b48', table='oncology_wilmsstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='wilmsstage',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."stage_id" IS DISTINCT FROM (NEW."stage_id") OR OLD."staging_id" IS DISTINCT FROM (NEW."staging_id"))', func='INSERT INTO "oncology_wilmsstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."staging_id", NEW."stage_id", NEW."staging_id"); RETURN NULL;', hash='cc3f6ef12d262e236d5f4622b4090230509c7bfc', operation='UPDATE', pgid='pgtrigger_update_update_4341d', table='oncology_wilmsstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='wilmsstage',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_wilmsstageevent" ("pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stage_id", "staging_id") VALUES (COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."staging_id", OLD."stage_id", OLD."staging_id"); RETURN NULL;', hash='3b1f4a469f139ad33e5d94c7bd88ed1073bbb0f5', operation='DELETE', pgid='pgtrigger_delete_delete_a5a03', table='oncology_wilmsstage', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartumorboard',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_moleculartumorboardevent" ("characterized_cup", "conducted_cup_characterization", "conducted_molecular_comparison", "molecular_comparison_match_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reviewed_reports", "tumor_board_id") VALUES (NEW."characterized_cup", NEW."conducted_cup_characterization", NEW."conducted_molecular_comparison", NEW."molecular_comparison_match_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."tumor_board_id", NEW."reviewed_reports", NEW."tumor_board_id"); RETURN NULL;', hash='16001ea8599d792f944c7a729773c7bbd682831b', operation='INSERT', pgid='pgtrigger_create_insert_23311', table='oncology_moleculartumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartumorboard',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."characterized_cup" IS DISTINCT FROM (NEW."characterized_cup") OR OLD."conducted_cup_characterization" IS DISTINCT FROM (NEW."conducted_cup_characterization") OR OLD."conducted_molecular_comparison" IS DISTINCT FROM (NEW."conducted_molecular_comparison") OR OLD."molecular_comparison_match_id" IS DISTINCT FROM (NEW."molecular_comparison_match_id") OR OLD."reviewed_reports" IS DISTINCT FROM (NEW."reviewed_reports") OR OLD."tumor_board_id" IS DISTINCT FROM (NEW."tumor_board_id"))', func='INSERT INTO "oncology_moleculartumorboardevent" ("characterized_cup", "conducted_cup_characterization", "conducted_molecular_comparison", "molecular_comparison_match_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reviewed_reports", "tumor_board_id") VALUES (NEW."characterized_cup", NEW."conducted_cup_characterization", NEW."conducted_molecular_comparison", NEW."molecular_comparison_match_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."tumor_board_id", NEW."reviewed_reports", NEW."tumor_board_id"); RETURN NULL;', hash='3893eacca0ea08d6fa16df0777b70427eef54ca9', operation='UPDATE', pgid='pgtrigger_update_update_525d8', table='oncology_moleculartumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartumorboard',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_moleculartumorboardevent" ("characterized_cup", "conducted_cup_characterization", "conducted_molecular_comparison", "molecular_comparison_match_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reviewed_reports", "tumor_board_id") VALUES (OLD."characterized_cup", OLD."conducted_cup_characterization", OLD."conducted_molecular_comparison", OLD."molecular_comparison_match_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."tumor_board_id", OLD."reviewed_reports", OLD."tumor_board_id"); RETURN NULL;', hash='74b6478773d14350764f76d5c9b5e217e13bbb41', operation='DELETE', pgid='pgtrigger_delete_delete_5de1f', table='oncology_moleculartumorboard', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartherapeuticrecommendation',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_moleculartherapeuticrecommendationevent" ("clinical_trial", "expected_effect_id", "external_source", "external_source_id", "id", "molecular_tumor_board_id", "off_label_use", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "within_soc") VALUES (NEW."clinical_trial", NEW."expected_effect_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."molecular_tumor_board_id", NEW."off_label_use", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."within_soc"); RETURN NULL;', hash='e2bc3b4e780fa60e4ca7530ea4db67a88e1b0ff3', operation='INSERT', pgid='pgtrigger_create_insert_24c28', table='oncology_moleculartherapeuticrecommendation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartherapeuticrecommendation',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "oncology_moleculartherapeuticrecommendationevent" ("clinical_trial", "expected_effect_id", "external_source", "external_source_id", "id", "molecular_tumor_board_id", "off_label_use", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "within_soc") VALUES (NEW."clinical_trial", NEW."expected_effect_id", NEW."external_source", NEW."external_source_id", NEW."id", NEW."molecular_tumor_board_id", NEW."off_label_use", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."within_soc"); RETURN NULL;', hash='1bc94ec8ed81ca02d7a003e8dbafd58995d7469d', operation='UPDATE', pgid='pgtrigger_update_update_ead85', table='oncology_moleculartherapeuticrecommendation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='moleculartherapeuticrecommendation',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "oncology_moleculartherapeuticrecommendationevent" ("clinical_trial", "expected_effect_id", "external_source", "external_source_id", "id", "molecular_tumor_board_id", "off_label_use", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "within_soc") VALUES (OLD."clinical_trial", OLD."expected_effect_id", OLD."external_source", OLD."external_source_id", OLD."id", OLD."molecular_tumor_board_id", OLD."off_label_use", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."within_soc"); RETURN NULL;', hash='69a76711ffba25c1954800603d984477cc77c21c', operation='DELETE', pgid='pgtrigger_delete_delete_cc31e', table='oncology_moleculartherapeuticrecommendation', when='AFTER')),
        ),
    ]
