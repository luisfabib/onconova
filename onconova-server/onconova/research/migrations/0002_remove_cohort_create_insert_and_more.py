# Generated by Django 5.1 on 2025-06-20 10:05

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0001_initial'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='cohort',
            name='create_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='cohort',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='cohort',
            name='delete_delete',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='dataset',
            name='create_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='dataset',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='dataset',
            name='delete_delete',
        ),
        migrations.RemoveField(
            model_name='cohort',
            name='is_public',
        ),
        migrations.RemoveField(
            model_name='cohortevent',
            name='is_public',
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='is_public',
        ),
        migrations.RemoveField(
            model_name='datasetevent',
            name='is_public',
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(default=None, help_text='Project that the dataset is part of', on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to='research.project', verbose_name='Project'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='datasetevent',
            name='project',
            field=models.ForeignKey(db_constraint=False, default=None, help_text='Project that the dataset is part of', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='research.project', verbose_name='Project'),
            preserve_default=False,
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."project_id"); RETURN NULL;', hash='3d1d855094f22df0e76d6c0bdaa68175efddd0c7', operation='INSERT', pgid='pgtrigger_create_insert_ac9ff', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."project_id"); RETURN NULL;', hash='2ce595e9b6874ca6db1d20ad1b000ee927856983', operation='UPDATE', pgid='pgtrigger_update_update_b327e', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (OLD."exclude_criteria", OLD."external_source", OLD."external_source_id", OLD."id", OLD."include_criteria", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."project_id"); RETURN NULL;', hash='6fd01f184356b369e6d894c7755fe7eb3efe3d8a', operation='DELETE', pgid='pgtrigger_delete_delete_45290', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."project_id", NEW."rules"); RETURN NULL;', hash='c909eb21fbf40b216de75b6ec780d82c0da63f0a', operation='INSERT', pgid='pgtrigger_create_insert_95ecc', table='research_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."project_id", NEW."rules"); RETURN NULL;', hash='50e77e54229cf936d88fe979e8a7660da2b630d3', operation='UPDATE', pgid='pgtrigger_update_update_0548b', table='research_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules") VALUES (OLD."external_source", OLD."external_source_id", OLD."id", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."project_id", OLD."rules"); RETURN NULL;', hash='30f2bd6665344d2c16ac86091a637eb0e677d583', operation='DELETE', pgid='pgtrigger_delete_delete_59809', table='research_dataset', when='AFTER')),
        ),
    ]
