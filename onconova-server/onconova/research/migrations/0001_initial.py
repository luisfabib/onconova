# Generated by Django 5.1 on 2025-08-28 08:52

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import pghistory.utils
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('oncology', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the dataset', max_length=255, verbose_name='Dataset name')),
                ('summary', models.TextField(blank=True, help_text='Summary of the dataset', null=True, verbose_name='Dataset summary')),
                ('rules', models.JSONField(default=list, help_text='Dataset composition rules', verbose_name='Rules')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the cohort', max_length=255, verbose_name='Cohort name')),
                ('include_criteria', models.JSONField(blank=True, help_text='JSON object defining inclusion criteria', null=True, verbose_name='Inclusion criteria')),
                ('exclude_criteria', models.JSONField(blank=True, help_text='JSON object defining exclusion criteria', null=True, verbose_name='Exclusion criteria')),
                ('cases', models.ManyToManyField(help_text='Cases composing the cohort', related_name='cohorts', to='oncology.patientcase', verbose_name='Cases')),
                ('frozen_set', models.ManyToManyField(help_text='Frozen cases', related_name='+', to='oncology.patientcase', verbose_name='Frozen cases')),
                ('manual_choices', models.ManyToManyField(help_text='Manually added cases', related_name='+', to='oncology.patientcase', verbose_name='Manually added cases')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_centers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Clinical centers that are part of the project', size=None, verbose_name='Clinical centers')),
                ('title', models.CharField(help_text='Title of the project', max_length=200, unique=True, verbose_name='Project title')),
                ('summary', models.TextField(help_text='Description of the project', verbose_name='Project description')),
                ('ethics_approval_number', models.CharField(help_text='Ethics approval number of the project', max_length=100, verbose_name='Ethics approval number')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('aborted', 'Aborted')], default='planned', help_text='Status of the project', max_length=20, verbose_name='Project status')),
                ('data_constraints', models.JSONField(default=dict, help_text='Data constraints of the project', verbose_name='Data constraints')),
                ('leader', models.ForeignKey(help_text='User responsible for the project and its members', on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Project leader')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the dataset', max_length=255, null=True, verbose_name='Dataset name')),
                ('summary', models.TextField(blank=True, help_text='Summary of the dataset', null=True, verbose_name='Dataset summary')),
                ('rules', models.JSONField(default=list, help_text='Dataset composition rules', null=True, verbose_name='Rules')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='research.dataset')),
                ('project', models.ForeignKey(db_constraint=False, help_text='Project that the dataset is part of', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='research.project', verbose_name='Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(help_text='Project that the dataset is part of', on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to='research.project', verbose_name='Project'),
        ),
        migrations.CreateModel(
            name='CohortEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('name', models.CharField(help_text='Name of the cohort', max_length=255, null=True, verbose_name='Cohort name')),
                ('include_criteria', models.JSONField(blank=True, help_text='JSON object defining inclusion criteria', null=True, verbose_name='Inclusion criteria')),
                ('exclude_criteria', models.JSONField(blank=True, help_text='JSON object defining exclusion criteria', null=True, verbose_name='Exclusion criteria')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='research.cohort')),
                ('project', models.ForeignKey(blank=True, db_constraint=False, help_text='Project to which the cohort is associated', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='research.project', verbose_name='Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cohort',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project to which the cohort is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cohorts', to='research.project', verbose_name='Project'),
        ),
        migrations.CreateModel(
            name='ProjectDataManagerGrant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', primary_key=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('revoked', models.BooleanField(default=False, help_text='A flag that indicated whether the authorization has been revoked', verbose_name='Revoked')),
                ('validity_period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Period of validity', verbose_name='Validity period')),
                ('member', models.ForeignKey(help_text='Manager of the project data', on_delete=django.db.models.deletion.CASCADE, related_name='data_management_grants', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('project', models.ForeignKey(help_text='Project under which the permission is granted', on_delete=django.db.models.deletion.CASCADE, related_name='edit_permissions', to='research.project', verbose_name='Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectDataManagerGrantEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('revoked', models.BooleanField(default=False, help_text='A flag that indicated whether the authorization has been revoked', null=True, verbose_name='Revoked')),
                ('validity_period', django.contrib.postgres.fields.ranges.DateRangeField(help_text='Period of validity', null=True, verbose_name='Validity period')),
                ('member', models.ForeignKey(db_constraint=False, help_text='Manager of the project data', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='research.projectdatamanagergrant')),
                ('project', models.ForeignKey(db_constraint=False, help_text='Project under which the permission is granted', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='research.project', verbose_name='Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_context', pghistory.utils.JSONField(null=True)),
                ('pgh_context_id', models.UUIDField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the resource (UUID v4).', null=True, serialize=False)),
                ('external_source', models.CharField(blank=True, help_text='The digital source of the data, relevant for automated data', null=True, verbose_name='External data source')),
                ('external_source_id', models.CharField(blank=True, help_text='The data identifier at the digital source of the data, relevant for automated data', null=True, verbose_name='External data source Id')),
                ('clinical_centers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Clinical centers that are part of the project', null=True, size=None, verbose_name='Clinical centers')),
                ('title', models.CharField(help_text='Title of the project', max_length=200, null=True, verbose_name='Project title')),
                ('summary', models.TextField(help_text='Description of the project', null=True, verbose_name='Project description')),
                ('ethics_approval_number', models.CharField(help_text='Ethics approval number of the project', max_length=100, null=True, verbose_name='Ethics approval number')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('aborted', 'Aborted')], default='planned', help_text='Status of the project', max_length=20, null=True, verbose_name='Project status')),
                ('data_constraints', models.JSONField(default=dict, help_text='Data constraints of the project', null=True, verbose_name='Data constraints')),
                ('leader', models.ForeignKey(db_constraint=False, help_text='User responsible for the project and its members', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Project leader')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='research.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateField(auto_now_add=True, help_text='Date when the user joined the project', verbose_name='Date joined')),
                ('member', models.ForeignKey(help_text='User that is part of a project', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('project', models.ForeignKey(help_text='Project that the user is part of', on_delete=django.db.models.deletion.CASCADE, to='research.project', verbose_name='Project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='members',
            field=models.ManyToManyField(help_text='Users that are part of the project', related_name='projects', through='research.ProjectMembership', to=settings.AUTH_USER_MODEL, verbose_name='Project members'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules", "summary") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."project_id", NEW."rules", NEW."summary"); RETURN NULL;', hash='649f0d4be0125757b31ab529bfc9205070ec3164', operation='INSERT', pgid='pgtrigger_create_insert_95ecc', table='research_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules", "summary") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."project_id", NEW."rules", NEW."summary"); RETURN NULL;', hash='406eb7b29bc6bc7646a88756a95a615a277f7d93', operation='UPDATE', pgid='pgtrigger_update_update_0548b', table='research_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dataset',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_datasetevent" ("external_source", "external_source_id", "id", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "rules", "summary") VALUES (OLD."external_source", OLD."external_source_id", OLD."id", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."project_id", OLD."rules", OLD."summary"); RETURN NULL;', hash='b38e35464230223a46f9011b78e79a5f7453b823', operation='DELETE', pgid='pgtrigger_delete_delete_59809', table='research_dataset', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."project_id"); RETURN NULL;', hash='3d1d855094f22df0e76d6c0bdaa68175efddd0c7', operation='INSERT', pgid='pgtrigger_create_insert_ac9ff', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (NEW."exclude_criteria", NEW."external_source", NEW."external_source_id", NEW."id", NEW."include_criteria", NEW."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."project_id"); RETURN NULL;', hash='2ce595e9b6874ca6db1d20ad1b000ee927856983', operation='UPDATE', pgid='pgtrigger_update_update_b327e', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='cohort',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_cohortevent" ("exclude_criteria", "external_source", "external_source_id", "id", "include_criteria", "name", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id") VALUES (OLD."exclude_criteria", OLD."external_source", OLD."external_source_id", OLD."id", OLD."include_criteria", OLD."name", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."project_id"); RETURN NULL;', hash='6fd01f184356b369e6d894c7755fe7eb3efe3d8a', operation='DELETE', pgid='pgtrigger_delete_delete_45290', table='research_cohort', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='projectdatamanagergrant',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_projectdatamanagergrantevent" ("external_source", "external_source_id", "id", "member_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "revoked", "validity_period") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."member_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."project_id", NEW."revoked", NEW."validity_period"); RETURN NULL;', hash='72b7c39dc2b537616d29e8d01cc5e1ecf93af765', operation='INSERT', pgid='pgtrigger_create_insert_8b0e4', table='research_projectdatamanagergrant', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='projectdatamanagergrant',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_projectdatamanagergrantevent" ("external_source", "external_source_id", "id", "member_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "revoked", "validity_period") VALUES (NEW."external_source", NEW."external_source_id", NEW."id", NEW."member_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."project_id", NEW."revoked", NEW."validity_period"); RETURN NULL;', hash='0bdb65ea1729139bb8b0a40f5303fc516b6c875f', operation='UPDATE', pgid='pgtrigger_update_update_853b1', table='research_projectdatamanagergrant', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='projectdatamanagergrant',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_projectdatamanagergrantevent" ("external_source", "external_source_id", "id", "member_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "project_id", "revoked", "validity_period") VALUES (OLD."external_source", OLD."external_source_id", OLD."id", OLD."member_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."project_id", OLD."revoked", OLD."validity_period"); RETURN NULL;', hash='62c60dfcefc073569471a349187670f444e98853', operation='DELETE', pgid='pgtrigger_delete_delete_bf577', table='research_projectdatamanagergrant', when='AFTER')),
        ),
        migrations.AddConstraint(
            model_name='projectmembership',
            constraint=models.UniqueConstraint(fields=('project', 'member'), name='unique_project_members'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='create_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (NEW."clinical_centers", NEW."data_constraints", NEW."ethics_approval_number", NEW."external_source", NEW."external_source_id", NEW."id", NEW."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'create\', NEW."id", NEW."status", NEW."summary", NEW."title"); RETURN NULL;', hash='d903badb83e287f97214dead382a3e8ac56a7795', operation='INSERT', pgid='pgtrigger_create_insert_68522', table='research_project', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "research_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (NEW."clinical_centers", NEW."data_constraints", NEW."ethics_approval_number", NEW."external_source", NEW."external_source_id", NEW."id", NEW."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'update\', NEW."id", NEW."status", NEW."summary", NEW."title"); RETURN NULL;', hash='a0dfb488445f54739d83f849bf1af48c840f65b2', operation='UPDATE', pgid='pgtrigger_update_update_3b50f', table='research_project', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "research_projectevent" ("clinical_centers", "data_constraints", "ethics_approval_number", "external_source", "external_source_id", "id", "leader_id", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "title") VALUES (OLD."clinical_centers", OLD."data_constraints", OLD."ethics_approval_number", OLD."external_source", OLD."external_source_id", OLD."id", OLD."leader_id", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'delete\', OLD."id", OLD."status", OLD."summary", OLD."title"); RETURN NULL;', hash='55ef55d87ccc696bfa124ad70e9d7b09aa8f7969', operation='DELETE', pgid='pgtrigger_delete_delete_93f7e', table='research_project', when='AFTER')),
        ),
    ]
